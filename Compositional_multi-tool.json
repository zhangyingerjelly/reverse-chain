[
    {
        "APIs": [
            {
                "name": "UserName2ID",
                "Description": "This API is to convert a username to a user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(user_name) -> user_ID"
            },
            {
                "name": "PlaylistName2ID",
                "Description": "This API is to convert a playlist name to a playlist ID.",
                "input_params": {
                    "playlist_name": {
                        "description": "the name of the playlist",
                        "type": "String"
                    }
                },
                "output_params": {
                    "playlist_ID": {
                        "description": "the ID of the playlist",
                        "type": "Integer"
                    }
                },
                "format": "PlaylistName2ID(playlist_name) -> playlist_ID"
            },
            {
                "name": "AddSongToPlaylist",
                "Description": "This API is to add a song to a playlist.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "playlist_ID": {
                        "description": "the ID of the playlist",
                        "type": "Integer"
                    },
                    "song_name": {
                        "description": "the name of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "playlist_songs": {
                        "description": "a list of the songs in the playlist",
                        "type": "List"
                    }
                },
                "format": "AddSongToPlaylist(user_ID, playlist_ID, song_name) -> playlist_songs"
            }
        ],
        "Query": "Can you add the song 'Imagine' by John Lennon to Jenny's 'Chill Vibes' playlist?",
        "Label": "AddSongToPlaylist(user_ID=UserName2ID(user_name='Jenny'), playlist_ID=PlaylistName2ID(playlist_name='Chill Vibes'), song_name='Imagine')",
        "Index": 0
    },
    {
        "APIs": [
            {
                "name": "UserName2ID",
                "Description": "This API is to convert a username to a user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(user_name) -> user_ID"
            },
            {
                "name": "PlaylistName2ID",
                "Description": "This API is to convert a playlist name to a playlist ID.",
                "input_params": {
                    "playlist_name": {
                        "description": "the name of the playlist",
                        "type": "String"
                    }
                },
                "output_params": {
                    "playlist_ID": {
                        "description": "the ID of the playlist",
                        "type": "Integer"
                    }
                },
                "format": "PlaylistName2ID(playlist_name) -> playlist_ID"
            },
            {
                "name": "AddSongToPlaylist",
                "Description": "This API is to add a song to a playlist.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "playlist_ID": {
                        "description": "the ID of the playlist",
                        "type": "Integer"
                    },
                    "song_name": {
                        "description": "the name of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "playlist_songs": {
                        "description": "a list of the songs in the playlist",
                        "type": "List"
                    }
                },
                "format": "AddSongToPlaylist(user_ID, playlist_ID, song_name) -> playlist_songs"
            }
        ],
        "Query": "I would like to see 'Billie Jean' included in Emily's 'Classic Disco Hits' playlist. Can you do that?",
        "Label": "AddSongToPlaylist(user_ID=UserName2ID(user_name='Emily'), playlist_ID=PlaylistName2ID(playlist_name='Classic Disco Hits'), song_name='Billie Jean')",
        "Index": 1
    },
    {
        "APIs": [
            {
                "name": "UserName2ID",
                "Description": "This API is to convert a username to a user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(user_name) -> user_ID"
            },
            {
                "name": "PlaylistName2ID",
                "Description": "This API is to convert a playlist name to a playlist ID.",
                "input_params": {
                    "playlist_name": {
                        "description": "the name of the playlist",
                        "type": "String"
                    }
                },
                "output_params": {
                    "playlist_ID": {
                        "description": "the ID of the playlist",
                        "type": "Integer"
                    }
                },
                "format": "PlaylistName2ID(playlist_name) -> playlist_ID"
            },
            {
                "name": "AddSongToPlaylist",
                "Description": "This API is to add a song to a playlist.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "playlist_ID": {
                        "description": "the ID of the playlist",
                        "type": "Integer"
                    },
                    "song_name": {
                        "description": "the name of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "playlist_songs": {
                        "description": "a list of the songs in the playlist",
                        "type": "List"
                    }
                },
                "format": "AddSongToPlaylist(user_ID, playlist_ID, song_name) -> playlist_songs"
            }
        ],
        "Query": "Would you mind including 'Dancing Queen' in Tom's 'Latin Fiesta' playlist?",
        "Label": "AddSongToPlaylist(user_ID=UserName2ID(user_name='Tom'), playlist_ID=PlaylistName2ID(playlist_name='Latin Fiesta'), song_name='Dancing Queen')",
        "Index": 2
    },
    {
        "APIs": [
            {
                "name": "UserName2ID",
                "Description": "This API is to convert a username to a user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(user_name) -> user_ID"
            },
            {
                "name": "PlaylistName2ID",
                "Description": "This API is to convert a playlist name to a playlist ID.",
                "input_params": {
                    "playlist_name": {
                        "description": "the name of the playlist",
                        "type": "String"
                    }
                },
                "output_params": {
                    "playlist_ID": {
                        "description": "the ID of the playlist",
                        "type": "Integer"
                    }
                },
                "format": "PlaylistName2ID(playlist_name) -> playlist_ID"
            },
            {
                "name": "AddSongToPlaylist",
                "Description": "This API is to add a song to a playlist.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "playlist_ID": {
                        "description": "the ID of the playlist",
                        "type": "Integer"
                    },
                    "song_name": {
                        "description": "the name of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "playlist_songs": {
                        "description": "a list of the songs in the playlist",
                        "type": "List"
                    }
                },
                "format": "AddSongToPlaylist(user_ID, playlist_ID, song_name) -> playlist_songs"
            }
        ],
        "Query": "Could you edit Sophia's 'Jazz Legends' playlist to include the song 'Let It Be'",
        "Label": "AddSongToPlaylist(user_ID=UserName2ID(user_name='Sophia'), playlist_ID=PlaylistName2ID(playlist_name='Jazz Legends'), song_name='Let It Be')",
        "Index": 3
    },
    {
        "APIs": [
            {
                "name": "UserName2ID",
                "Description": "This API is to convert a username to a user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(user_name) -> user_ID"
            },
            {
                "name": "PlaylistName2ID",
                "Description": "This API is to convert a playlist name to a playlist ID.",
                "input_params": {
                    "playlist_name": {
                        "description": "the name of the playlist",
                        "type": "String"
                    }
                },
                "output_params": {
                    "playlist_ID": {
                        "description": "the ID of the playlist",
                        "type": "Integer"
                    }
                },
                "format": "PlaylistName2ID(playlist_name) -> playlist_ID"
            },
            {
                "name": "AddSongToPlaylist",
                "Description": "This API is to add a song to a playlist.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "playlist_ID": {
                        "description": "the ID of the playlist",
                        "type": "Integer"
                    },
                    "song_name": {
                        "description": "the name of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "playlist_songs": {
                        "description": "a list of the songs in the playlist",
                        "type": "List"
                    }
                },
                "format": "AddSongToPlaylist(user_ID, playlist_ID, song_name) -> playlist_songs"
            }
        ],
        "Query": "Is there a way to incorporate the song 'space Oddity' into John's 'Rock Ballads' playlist?",
        "Label": "AddSongToPlaylist(user_ID=UserName2ID(user_name='John'), playlist_ID=PlaylistName2ID(playlist_name='Rock Ballads'), song_name='space Oddity')",
        "Index": 4
    },
    {
        "APIs": [
            {
                "name": "UserName2ID",
                "Description": "This API is to convert a username to a user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(user_name) -> user_ID"
            },
            {
                "name": "PlaylistName2ID",
                "Description": "This API is to convert a playlist name to a playlist ID.",
                "input_params": {
                    "playlist_name": {
                        "description": "the name of the playlist",
                        "type": "String"
                    }
                },
                "output_params": {
                    "playlist_ID": {
                        "description": "the ID of the playlist",
                        "type": "Integer"
                    }
                },
                "format": "PlaylistName2ID(playlist_name) -> playlist_ID"
            },
            {
                "name": "AddSongToPlaylist",
                "Description": "This API is to add a song to a playlist.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "playlist_ID": {
                        "description": "the ID of the playlist",
                        "type": "Integer"
                    },
                    "song_name": {
                        "description": "the name of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "playlist_songs": {
                        "description": "a list of the songs in the playlist",
                        "type": "List"
                    }
                },
                "format": "AddSongToPlaylist(user_ID, playlist_ID, song_name) -> playlist_songs"
            }
        ],
        "Query": "Playlist 'Classic Rock Anthems' of Ava would be perfect with the addition of 'Imagine'. Can you do that for me?",
        "Label": "AddSongToPlaylist(user_ID=UserName2ID(user_name='Ava'), playlist_ID=PlaylistName2ID(playlist_name='Classic Rock Anthems'), song_name='Imagine')",
        "Index": 5
    },
    {
        "APIs": [
            {
                "name": "UserName2ID",
                "Description": "This API is to convert a username to a user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(user_name) -> user_ID"
            },
            {
                "name": "PlaylistName2ID",
                "Description": "This API is to convert a playlist name to a playlist ID.",
                "input_params": {
                    "playlist_name": {
                        "description": "the name of the playlist",
                        "type": "String"
                    }
                },
                "output_params": {
                    "playlist_ID": {
                        "description": "the ID of the playlist",
                        "type": "Integer"
                    }
                },
                "format": "PlaylistName2ID(playlist_name) -> playlist_ID"
            },
            {
                "name": "AddSongToPlaylist",
                "Description": "This API is to add a song to a playlist.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "playlist_ID": {
                        "description": "the ID of the playlist",
                        "type": "Integer"
                    },
                    "song_name": {
                        "description": "the name of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "playlist_songs": {
                        "description": "a list of the songs in the playlist",
                        "type": "List"
                    }
                },
                "format": "AddSongToPlaylist(user_ID, playlist_ID, song_name) -> playlist_songs"
            }
        ],
        "Query": "Please, make sure 'Sweet Child of Mine' finds its way into Mia's 'Classic Disco Hits' playlist.",
        "Label": "AddSongToPlaylist(user_ID=UserName2ID(user_name='Mia'), playlist_ID=PlaylistName2ID(playlist_name='Classic Disco Hits'), song_name='Sweet Child of Mine')",
        "Index": 6
    },
    {
        "APIs": [
            {
                "name": "UserName2ID",
                "Description": "This API is to convert a username to a user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(user_name) -> user_ID"
            },
            {
                "name": "PlaylistName2ID",
                "Description": "This API is to convert a playlist name to a playlist ID.",
                "input_params": {
                    "playlist_name": {
                        "description": "the name of the playlist",
                        "type": "String"
                    }
                },
                "output_params": {
                    "playlist_ID": {
                        "description": "the ID of the playlist",
                        "type": "Integer"
                    }
                },
                "format": "PlaylistName2ID(playlist_name) -> playlist_ID"
            },
            {
                "name": "AddSongToPlaylist",
                "Description": "This API is to add a song to a playlist.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "playlist_ID": {
                        "description": "the ID of the playlist",
                        "type": "Integer"
                    },
                    "song_name": {
                        "description": "the name of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "playlist_songs": {
                        "description": "a list of the songs in the playlist",
                        "type": "List"
                    }
                },
                "format": "AddSongToPlaylist(user_ID, playlist_ID, song_name) -> playlist_songs"
            }
        ],
        "Query": "Could you include the song 'Counting Stars' by OneRepublic in Peter's 'Road Trip' playlist?",
        "Label": "AddSongToPlaylist(user_ID=UserName2ID(user_name='Peter'), playlist_ID=PlaylistName2ID(playlist_name='Road Trip'), song_name='Counting Stars')",
        "Index": 7
    },
    {
        "APIs": [
            {
                "name": "GeoLocation2TimeZone",
                "Description": "This API is to convert geolocation to timezone.",
                "input_params": {
                    "geolocation": {
                        "description": "the geolocation of a place",
                        "type": "String"
                    }
                },
                "output_params": {
                    "timezone": {
                        "description": "the timezone of the geolocation",
                        "type": "String"
                    }
                },
                "format": "GeoLocation2TimeZone(geolocation) -> timezone"
            },
            {
                "name": "SetAlarm",
                "Description": "This API allows the user to set an alarm in a specific timezone.",
                "input_params": {
                    "timezone": {
                        "description": "the timezone where the alarm will be set",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time when the alarm will ring",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "alarm_status": {
                        "description": "the status of the alarm",
                        "type": "String"
                    }
                },
                "format": "SetAlarm(timezone, time) -> alarm_status"
            },
            {
                "name": "GetUserGeolocation",
                "Description": "This API returns the geolocation of a certain user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_geolocation": {
                        "description": "the geolocation of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserGeolocation(user_name) -> user_geolocation"
            }
        ],
        "Query": "I'm Jack, Can you wake me up at 8am tomorrow in the timezone where I'm located?",
        "Label": "SetAlarm(timezone=GeoLocation2TimeZone(geolocation=GetUserGeolocation(user_name='Jack')), time='8am tomorrow')",
        "Index": 8
    },
    {
        "APIs": [
            {
                "name": "GeoLocation2TimeZone",
                "Description": "This API is to convert geolocation to timezone.",
                "input_params": {
                    "geolocation": {
                        "description": "the geolocation of a place",
                        "type": "String"
                    }
                },
                "output_params": {
                    "timezone": {
                        "description": "the timezone of the geolocation",
                        "type": "String"
                    }
                },
                "format": "GeoLocation2TimeZone(geolocation) -> timezone"
            },
            {
                "name": "SetAlarm",
                "Description": "This API allows the user to set an alarm in a specific timezone.",
                "input_params": {
                    "timezone": {
                        "description": "the timezone where the alarm will be set",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time when the alarm will ring",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "alarm_status": {
                        "description": "the status of the alarm",
                        "type": "String"
                    }
                },
                "format": "SetAlarm(timezone, time) -> alarm_status"
            },
            {
                "name": "GetUserGeolocation",
                "Description": "This API returns the geolocation of a certain user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_geolocation": {
                        "description": "the geolocation of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserGeolocation(user_name) -> user_geolocation"
            }
        ],
        "Query": "Could you wake Emily up in the timezone where she is at 7am?",
        "Label": "SetAlarm(timezone=GeoLocation2TimeZone(geolocation=GetUserGeolocation(user_name='Emily')), time='7am')",
        "Index": 9
    },
    {
        "APIs": [
            {
                "name": "GeoLocation2TimeZone",
                "Description": "This API is to convert geolocation to timezone.",
                "input_params": {
                    "geolocation": {
                        "description": "the geolocation of a place",
                        "type": "String"
                    }
                },
                "output_params": {
                    "timezone": {
                        "description": "the timezone of the geolocation",
                        "type": "String"
                    }
                },
                "format": "GeoLocation2TimeZone(geolocation) -> timezone"
            },
            {
                "name": "SetAlarm",
                "Description": "This API allows the user to set an alarm in a specific timezone.",
                "input_params": {
                    "timezone": {
                        "description": "the timezone where the alarm will be set",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time when the alarm will ring",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "alarm_status": {
                        "description": "the status of the alarm",
                        "type": "String"
                    }
                },
                "format": "SetAlarm(timezone, time) -> alarm_status"
            },
            {
                "name": "GetUserGeolocation",
                "Description": "This API returns the geolocation of a certain user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_geolocation": {
                        "description": "the geolocation of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserGeolocation(user_name) -> user_geolocation"
            }
        ],
        "Query": "Greetings, it would be great if you could wake Sarah up at 10am in the timezone of her?",
        "Label": "SetAlarm(timezone=GeoLocation2TimeZone(geolocation=GetUserGeolocation(user_name='Sarah')), time='10am')",
        "Index": 10
    },
    {
        "APIs": [
            {
                "name": "GeoLocation2TimeZone",
                "Description": "This API is to convert geolocation to timezone.",
                "input_params": {
                    "geolocation": {
                        "description": "the geolocation of a place",
                        "type": "String"
                    }
                },
                "output_params": {
                    "timezone": {
                        "description": "the timezone of the geolocation",
                        "type": "String"
                    }
                },
                "format": "GeoLocation2TimeZone(geolocation) -> timezone"
            },
            {
                "name": "SetAlarm",
                "Description": "This API allows the user to set an alarm in a specific timezone.",
                "input_params": {
                    "timezone": {
                        "description": "the timezone where the alarm will be set",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time when the alarm will ring",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "alarm_status": {
                        "description": "the status of the alarm",
                        "type": "String"
                    }
                },
                "format": "SetAlarm(timezone, time) -> alarm_status"
            },
            {
                "name": "GetUserGeolocation",
                "Description": "This API returns the geolocation of a certain user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_geolocation": {
                        "description": "the geolocation of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserGeolocation(user_name) -> user_geolocation"
            }
        ],
        "Query": "Would it be possible for you to awaken John at 6:30am with the time zone of his location?",
        "Label": "SetAlarm(timezone=GeoLocation2TimeZone(geolocation=GetUserGeolocation(user_name='John')), time='6:30am')",
        "Index": 11
    },
    {
        "APIs": [
            {
                "name": "GeoLocation2TimeZone",
                "Description": "This API is to convert geolocation to timezone.",
                "input_params": {
                    "geolocation": {
                        "description": "the geolocation of a place",
                        "type": "String"
                    }
                },
                "output_params": {
                    "timezone": {
                        "description": "the timezone of the geolocation",
                        "type": "String"
                    }
                },
                "format": "GeoLocation2TimeZone(geolocation) -> timezone"
            },
            {
                "name": "SetAlarm",
                "Description": "This API allows the user to set an alarm in a specific timezone.",
                "input_params": {
                    "timezone": {
                        "description": "the timezone where the alarm will be set",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time when the alarm will ring",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "alarm_status": {
                        "description": "the status of the alarm",
                        "type": "String"
                    }
                },
                "format": "SetAlarm(timezone, time) -> alarm_status"
            },
            {
                "name": "GetUserGeolocation",
                "Description": "This API returns the geolocation of a certain user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_geolocation": {
                        "description": "the geolocation of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserGeolocation(user_name) -> user_geolocation"
            }
        ],
        "Query": "Hi there, I'm Daniel. I need to get up at 5:30am for a plane in the timezone where I'm located",
        "Label": "SetAlarm(timezone=GeoLocation2TimeZone(geolocation=GetUserGeolocation(user_name='Daniel')), time='5:30am')",
        "Index": 12
    },
    {
        "APIs": [
            {
                "name": "GeoLocation2TimeZone",
                "Description": "This API is to convert geolocation to timezone.",
                "input_params": {
                    "geolocation": {
                        "description": "the geolocation of a place",
                        "type": "String"
                    }
                },
                "output_params": {
                    "timezone": {
                        "description": "the timezone of the geolocation",
                        "type": "String"
                    }
                },
                "format": "GeoLocation2TimeZone(geolocation) -> timezone"
            },
            {
                "name": "SetAlarm",
                "Description": "This API allows the user to set an alarm in a specific timezone.",
                "input_params": {
                    "timezone": {
                        "description": "the timezone where the alarm will be set",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time when the alarm will ring",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "alarm_status": {
                        "description": "the status of the alarm",
                        "type": "String"
                    }
                },
                "format": "SetAlarm(timezone, time) -> alarm_status"
            },
            {
                "name": "GetUserGeolocation",
                "Description": "This API returns the geolocation of a certain user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_geolocation": {
                        "description": "the geolocation of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserGeolocation(user_name) -> user_geolocation"
            }
        ],
        "Query": "I am Lisa, could you please set an alarm for 7pm this evening?",
        "Label": "SetAlarm(timezone=GeoLocation2TimeZone(geolocation=GetUserGeolocation(user_name='Lisa')), time='7pm')",
        "Index": 13
    },
    {
        "APIs": [
            {
                "name": "GeoLocation2TimeZone",
                "Description": "This API is to convert geolocation to timezone.",
                "input_params": {
                    "geolocation": {
                        "description": "the geolocation of a place",
                        "type": "String"
                    }
                },
                "output_params": {
                    "timezone": {
                        "description": "the timezone of the geolocation",
                        "type": "String"
                    }
                },
                "format": "GeoLocation2TimeZone(geolocation) -> timezone"
            },
            {
                "name": "SetAlarm",
                "Description": "This API allows the user to set an alarm in a specific timezone.",
                "input_params": {
                    "timezone": {
                        "description": "the timezone where the alarm will be set",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time when the alarm will ring",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "alarm_status": {
                        "description": "the status of the alarm",
                        "type": "String"
                    }
                },
                "format": "SetAlarm(timezone, time) -> alarm_status"
            },
            {
                "name": "GetUserGeolocation",
                "Description": "This API returns the geolocation of a certain user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_geolocation": {
                        "description": "the geolocation of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserGeolocation(user_name) -> user_geolocation"
            }
        ],
        "Query": "Hi, I'm Tom. I need to wake up at 5am tomorrow. Can you set an alarm for me according to my location?",
        "Label": "SetAlarm(timezone=GeoLocation2TimeZone(geolocation=GetUserGeolocation(user_name='Tom')), time='5am tomorrow')",
        "Index": 14
    },
    {
        "APIs": [
            {
                "name": "GeoLocation2TimeZone",
                "Description": "This API is to convert geolocation to timezone.",
                "input_params": {
                    "geolocation": {
                        "description": "the geolocation of a place",
                        "type": "String"
                    }
                },
                "output_params": {
                    "timezone": {
                        "description": "the timezone of the geolocation",
                        "type": "String"
                    }
                },
                "format": "GeoLocation2TimeZone(geolocation) -> timezone"
            },
            {
                "name": "SetAlarm",
                "Description": "This API allows the user to set an alarm in a specific timezone.",
                "input_params": {
                    "timezone": {
                        "description": "the timezone where the alarm will be set",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time when the alarm will ring",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "alarm_status": {
                        "description": "the status of the alarm",
                        "type": "String"
                    }
                },
                "format": "SetAlarm(timezone, time) -> alarm_status"
            },
            {
                "name": "GetUserGeolocation",
                "Description": "This API returns the geolocation of a certain user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_geolocation": {
                        "description": "the geolocation of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserGeolocation(user_name) -> user_geolocation"
            }
        ],
        "Query": "I'm Bob. Please set an alarm at 6am the day after tomorrow in the timezone where I am.",
        "Label": "SetAlarm(timezone=GeoLocation2TimeZone(geolocation=GetUserGeolocation(user_name='Bob')), time='6am the day after tomorrow')",
        "Index": 15
    },
    {
        "APIs": [
            {
                "name": "GeoLocation2TimeZone",
                "Description": "This API is to convert geolocation to timezone.",
                "input_params": {
                    "geolocation": {
                        "description": "the geolocation of a place",
                        "type": "String"
                    }
                },
                "output_params": {
                    "timezone": {
                        "description": "the timezone of the geolocation",
                        "type": "String"
                    }
                },
                "format": "GeoLocation2TimeZone(geolocation) -> timezone"
            },
            {
                "name": "SetAlarm",
                "Description": "This API allows the user to set an alarm in a specific timezone.",
                "input_params": {
                    "timezone": {
                        "description": "the timezone where the alarm will be set",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time when the alarm will ring",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "alarm_status": {
                        "description": "the status of the alarm",
                        "type": "String"
                    }
                },
                "format": "SetAlarm(timezone, time) -> alarm_status"
            },
            {
                "name": "GetUserGeolocation",
                "Description": "This API returns the geolocation of a certain user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_geolocation": {
                        "description": "the geolocation of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserGeolocation(user_name) -> user_geolocation"
            }
        ],
        "Query": "Please wake me up at 10am in the timezone where I, John, am located.",
        "Label": "SetAlarm(timezone=GeoLocation2TimeZone(geolocation=GetUserGeolocation(user_name='John')), time='10am')",
        "Index": 16
    },
    {
        "APIs": [
            {
                "name": "SongName2ID",
                "Description": "This API is to convert a song's name to song ID.",
                "input_params": {
                    "song_name": {
                        "description": "the name of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song_ID": {
                        "description": "the ID of the song",
                        "type": "Integer"
                    }
                },
                "format": "SongName2ID(song_name) -> song_ID"
            },
            {
                "name": "AddSongToPlaylist",
                "Description": "This API is to add a song to a playlist.",
                "input_params": {
                    "playlist_ID": {
                        "description": "the ID of the playlist",
                        "type": "Integer"
                    },
                    "song_ID": {
                        "description": "the ID of the song",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "song_status": {
                        "description": "the status of the song addition",
                        "type": "String"
                    }
                },
                "format": "AddSongToPlaylist(playlist_ID, song_ID) -> song_status"
            },
            {
                "name": "PlaylistName2ID",
                "Description": "This API is to convert a playlist's name to playlist ID.",
                "input_params": {
                    "playlist_name": {
                        "description": "the name of the playlist",
                        "type": "String"
                    }
                },
                "output_params": {
                    "playlist_ID": {
                        "description": "the ID of the playlist",
                        "type": "Integer"
                    }
                },
                "format": "PlaylistName2ID(playlist_name) -> playlist_ID"
            },
            {
                "name": "GetUsernameID",
                "Description": "This API is to convert a username to user ID.",
                "input_params": {
                    "username": {
                        "description": "the username",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "GetUsernameID(username) -> person_ID"
            }
        ],
        "Query": "Please add the song 'Imagine' to Anna's playlist 'Best Songs' with her username anna_music.",
        "Label": "AddSongToPlaylist(playlist_ID=PlaylistName2ID(playlist_name='Best Songs'), song_ID=SongName2ID(song_name='Imagine'))",
        "Index": 17
    },
    {
        "APIs": [
            {
                "name": "SongName2ID",
                "Description": "This API is to convert a song's name to song ID.",
                "input_params": {
                    "song_name": {
                        "description": "the name of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song_ID": {
                        "description": "the ID of the song",
                        "type": "Integer"
                    }
                },
                "format": "SongName2ID(song_name) -> song_ID"
            },
            {
                "name": "AddSongToPlaylist",
                "Description": "This API is to add a song to a playlist.",
                "input_params": {
                    "playlist_ID": {
                        "description": "the ID of the playlist",
                        "type": "Integer"
                    },
                    "song_ID": {
                        "description": "the ID of the song",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "song_status": {
                        "description": "the status of the song addition",
                        "type": "String"
                    }
                },
                "format": "AddSongToPlaylist(playlist_ID, song_ID) -> song_status"
            },
            {
                "name": "PlaylistName2ID",
                "Description": "This API is to convert a playlist's name to playlist ID.",
                "input_params": {
                    "playlist_name": {
                        "description": "the name of the playlist",
                        "type": "String"
                    }
                },
                "output_params": {
                    "playlist_ID": {
                        "description": "the ID of the playlist",
                        "type": "Integer"
                    }
                },
                "format": "PlaylistName2ID(playlist_name) -> playlist_ID"
            },
            {
                "name": "GetUsernameID",
                "Description": "This API is to convert a username to user ID.",
                "input_params": {
                    "username": {
                        "description": "the username",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "GetUsernameID(username) -> person_ID"
            }
        ],
        "Query": "May I request the addition of 'Hey Jude' to Emma's 'Classic Disco Hits' playlist?",
        "Label": "AddSongToPlaylist(playlist_ID=PlaylistName2ID(playlist_name='Classic Disco Hits'), song_ID=SongName2ID(song_name='Hey Jude'))",
        "Index": 18
    },
    {
        "APIs": [
            {
                "name": "UserName2Email",
                "Description": "This API is used to convert a username to a user's email.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_email": {
                        "description": "the email of the user",
                        "type": "String"
                    }
                },
                "format": "UserName2Email(username) -> user_email"
            },
            {
                "name": "Title2ISBN",
                "Description": "This API is used to convert a book title to its ISBN.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "title_ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "format": "Title2ISBN(title) -> title_ISBN"
            },
            {
                "name": "CheckAvailability",
                "Description": "This API checks the availability of a book based on its ISBN and a given date range.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    },
                    "start_date": {
                        "description": "the start date of the range",
                        "type": "Date"
                    },
                    "end_date": {
                        "description": "the end date of the range",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "availability_status": {
                        "description": "the availability status of the book",
                        "type": "String"
                    }
                },
                "format": "CheckAvailability(ISBN,start_date,end_date) -> availability_status"
            },
            {
                "name": "ReserveBook",
                "Description": "This API is used to reserve a book.",
                "input_params": {
                    "user_email": {
                        "description": "the email of the user",
                        "type": "String"
                    },
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    },
                    "start_date": {
                        "description": "the start date of the reservation",
                        "type": "Date"
                    },
                    "end_date": {
                        "description": "the end date of the reservation",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveBook(user_email,ISBN,start_date,end_date) -> reservation_status"
            }
        ],
        "Query": "Can you reserve the book 'War and Peace' for user 'john_doe' from May 5th to May 19th?",
        "Label": "ReserveBook(user_email=UserName2Email(username='john_doe'),ISBN=Title2ISBN(title='War and Peace'), start_date='May 5th',end_date='May 19th')",
        "Index": 19
    },
    {
        "APIs": [
            {
                "name": "UserName2Email",
                "Description": "This API is used to convert a username to a user's email.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_email": {
                        "description": "the email of the user",
                        "type": "String"
                    }
                },
                "format": "UserName2Email(username) -> user_email"
            },
            {
                "name": "Title2ISBN",
                "Description": "This API is used to convert a book title to its ISBN.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "title_ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "format": "Title2ISBN(title) -> title_ISBN"
            },
            {
                "name": "CheckAvailability",
                "Description": "This API checks the availability of a book based on its ISBN and a given date range.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    },
                    "start_date": {
                        "description": "the start date of the range",
                        "type": "Date"
                    },
                    "end_date": {
                        "description": "the end date of the range",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "availability_status": {
                        "description": "the availability status of the book",
                        "type": "String"
                    }
                },
                "format": "CheckAvailability(ISBN,start_date,end_date) -> availability_status"
            },
            {
                "name": "ReserveBook",
                "Description": "This API is used to reserve a book.",
                "input_params": {
                    "user_email": {
                        "description": "the email of the user",
                        "type": "String"
                    },
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    },
                    "start_date": {
                        "description": "the start date of the reservation",
                        "type": "Date"
                    },
                    "end_date": {
                        "description": "the end date of the reservation",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveBook(user_email,ISBN,start_date,end_date) -> reservation_status"
            }
        ],
        "Query": "Please reserve the book 'The Great Gatsby' from July 2nd to July 16th. The user is 'emily_davis'.",
        "Label": "ReserveBook(user_email=UserName2Email(username='emily_davis'),ISBN=Title2ISBN(title='The Great Gatsby'), start_date='July 2nd',end_date='July 16th')",
        "Index": 20
    },
    {
        "APIs": [
            {
                "name": "UserName2Email",
                "Description": "This API is used to convert a username to a user's email.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_email": {
                        "description": "the email of the user",
                        "type": "String"
                    }
                },
                "format": "UserName2Email(username) -> user_email"
            },
            {
                "name": "Title2ISBN",
                "Description": "This API is used to convert a book title to its ISBN.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "title_ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "format": "Title2ISBN(title) -> title_ISBN"
            },
            {
                "name": "CheckAvailability",
                "Description": "This API checks the availability of a book based on its ISBN and a given date range.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    },
                    "start_date": {
                        "description": "the start date of the range",
                        "type": "Date"
                    },
                    "end_date": {
                        "description": "the end date of the range",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "availability_status": {
                        "description": "the availability status of the book",
                        "type": "String"
                    }
                },
                "format": "CheckAvailability(ISBN,start_date,end_date) -> availability_status"
            },
            {
                "name": "ReserveBook",
                "Description": "This API is used to reserve a book.",
                "input_params": {
                    "user_email": {
                        "description": "the email of the user",
                        "type": "String"
                    },
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    },
                    "start_date": {
                        "description": "the start date of the reservation",
                        "type": "Date"
                    },
                    "end_date": {
                        "description": "the end date of the reservation",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveBook(user_email,ISBN,start_date,end_date) -> reservation_status"
            }
        ],
        "Query": "Can you reserve the book 'Pride and Prejudice' for user 'michael_brown' from August 7th to August 21st?",
        "Label": "ReserveBook(user_email=UserName2Email(username='michael_brown'),ISBN=Title2ISBN(title='Pride and Prejudice'), start_date='August 7th',end_date='August 21st')",
        "Index": 21
    },
    {
        "APIs": [
            {
                "name": "UserName2Email",
                "Description": "This API is used to convert a username to a user's email.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_email": {
                        "description": "the email of the user",
                        "type": "String"
                    }
                },
                "format": "UserName2Email(username) -> user_email"
            },
            {
                "name": "Title2ISBN",
                "Description": "This API is used to convert a book title to its ISBN.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "title_ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "format": "Title2ISBN(title) -> title_ISBN"
            },
            {
                "name": "CheckAvailability",
                "Description": "This API checks the availability of a book based on its ISBN and a given date range.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    },
                    "start_date": {
                        "description": "the start date of the range",
                        "type": "Date"
                    },
                    "end_date": {
                        "description": "the end date of the range",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "availability_status": {
                        "description": "the availability status of the book",
                        "type": "String"
                    }
                },
                "format": "CheckAvailability(ISBN,start_date,end_date) -> availability_status"
            },
            {
                "name": "ReserveBook",
                "Description": "This API is used to reserve a book.",
                "input_params": {
                    "user_email": {
                        "description": "the email of the user",
                        "type": "String"
                    },
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    },
                    "start_date": {
                        "description": "the start date of the reservation",
                        "type": "Date"
                    },
                    "end_date": {
                        "description": "the end date of the reservation",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveBook(user_email,ISBN,start_date,end_date) -> reservation_status"
            }
        ],
        "Query": "User 'sarah_wilson' wants to reserve the book 'Moby-Dick'. Start from September 12th to September 26th.",
        "Label": "ReserveBook(user_email=UserName2Email(username='sarah_wilson'),ISBN=Title2ISBN(title='Moby-Dick'), start_date='September 12th',end_date='September 26th')",
        "Index": 22
    },
    {
        "APIs": [
            {
                "name": "OrderFood",
                "Description": "This API allows the user to order a specific food from a specified restaurant.",
                "input_params": {
                    "dish_name": {
                        "description": "the name of the dish",
                        "type": "String"
                    },
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(dish_name, restaurant_name) -> order_status"
            },
            {
                "name": "FindPopularDishes",
                "Description": "This API recommends popular dishes in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "dish_name": {
                        "description": "the name of the popular dish",
                        "type": "String"
                    }
                },
                "format": "FindPopularDishes(city) -> dish_name"
            },
            {
                "name": "TopRestaurants",
                "Description": "This API provides the names of top ranked restaurants in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the top ranked restaurant",
                        "type": "String"
                    }
                },
                "format": "TopRestaurants(city) -> restaurant_name"
            }
        ],
        "Query": "I'm in London and I'm feeling really hungry. I would like to order popular food here.",
        "Label": "OrderFood(dish_name=FindPopularDishes(city='London'), restaurant_name=TopRestaurants(city='London'))",
        "Index": 23
    },
    {
        "APIs": [
            {
                "name": "OrderFood",
                "Description": "This API allows the user to order a specific food from a specified restaurant.",
                "input_params": {
                    "dish_name": {
                        "description": "the name of the dish",
                        "type": "String"
                    },
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(dish_name, restaurant_name) -> order_status"
            },
            {
                "name": "FindPopularDishes",
                "Description": "This API recommends popular dishes in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "dish_name": {
                        "description": "the name of the popular dish",
                        "type": "String"
                    }
                },
                "format": "FindPopularDishes(city) -> dish_name"
            },
            {
                "name": "TopRestaurants",
                "Description": "This API provides the names of top ranked restaurants in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the top ranked restaurant",
                        "type": "String"
                    }
                },
                "format": "TopRestaurants(city) -> restaurant_name"
            }
        ],
        "Query": "I just arrived in Tokyo. I want to order some food.",
        "Label": "OrderFood(dish_name=FindPopularDishes(city='Tokyo'), restaurant_name=TopRestaurants(city='Tokyo'))",
        "Index": 24
    },
    {
        "APIs": [
            {
                "name": "OrderFood",
                "Description": "This API allows the user to order a specific food from a specified restaurant.",
                "input_params": {
                    "dish_name": {
                        "description": "the name of the dish",
                        "type": "String"
                    },
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(dish_name, restaurant_name) -> order_status"
            },
            {
                "name": "FindPopularDishes",
                "Description": "This API recommends popular dishes in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "dish_name": {
                        "description": "the name of the popular dish",
                        "type": "String"
                    }
                },
                "format": "FindPopularDishes(city) -> dish_name"
            },
            {
                "name": "TopRestaurants",
                "Description": "This API provides the names of top ranked restaurants in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the top ranked restaurant",
                        "type": "String"
                    }
                },
                "format": "TopRestaurants(city) -> restaurant_name"
            }
        ],
        "Query": "It would be great if you can help me order popular food in New York.",
        "Label": "OrderFood(dish_name=FindPopularDishes(city='New York'), restaurant_name=TopRestaurants(city='New York'))",
        "Index": 25
    },
    {
        "APIs": [
            {
                "name": "OrderFood",
                "Description": "This API allows the user to order a specific food from a specified restaurant.",
                "input_params": {
                    "dish_name": {
                        "description": "the name of the dish",
                        "type": "String"
                    },
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(dish_name, restaurant_name) -> order_status"
            },
            {
                "name": "FindPopularDishes",
                "Description": "This API recommends popular dishes in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "dish_name": {
                        "description": "the name of the popular dish",
                        "type": "String"
                    }
                },
                "format": "FindPopularDishes(city) -> dish_name"
            },
            {
                "name": "TopRestaurants",
                "Description": "This API provides the names of top ranked restaurants in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the top ranked restaurant",
                        "type": "String"
                    }
                },
                "format": "TopRestaurants(city) -> restaurant_name"
            }
        ],
        "Query": "Please get some food for me. I'm in Berlin and I am starving to death.",
        "Label": "OrderFood(dish_name=FindPopularDishes(city='Berlin'), restaurant_name=TopRestaurants(city='Berlin'))",
        "Index": 26
    },
    {
        "APIs": [
            {
                "name": "OrderFood",
                "Description": "This API allows the user to order a specific food from a specified restaurant.",
                "input_params": {
                    "dish_name": {
                        "description": "the name of the dish",
                        "type": "String"
                    },
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(dish_name, restaurant_name) -> order_status"
            },
            {
                "name": "FindPopularDishes",
                "Description": "This API recommends popular dishes in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "dish_name": {
                        "description": "the name of the popular dish",
                        "type": "String"
                    }
                },
                "format": "FindPopularDishes(city) -> dish_name"
            },
            {
                "name": "TopRestaurants",
                "Description": "This API provides the names of top ranked restaurants in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the top ranked restaurant",
                        "type": "String"
                    }
                },
                "format": "TopRestaurants(city) -> restaurant_name"
            }
        ],
        "Query": "I'm in Paris and craving for some good food. Can you help order popular food here?",
        "Label": "OrderFood(dish_name=FindPopularDishes(city='Paris'), restaurant_name=TopRestaurants(city='Paris'))",
        "Index": 27
    },
    {
        "APIs": [
            {
                "name": "OrderFood",
                "Description": "This API allows the user to order a specific food from a specified restaurant.",
                "input_params": {
                    "dish_name": {
                        "description": "the name of the dish",
                        "type": "String"
                    },
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(dish_name, restaurant_name) -> order_status"
            },
            {
                "name": "FindPopularDishes",
                "Description": "This API recommends popular dishes in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "dish_name": {
                        "description": "the name of the popular dish",
                        "type": "String"
                    }
                },
                "format": "FindPopularDishes(city) -> dish_name"
            },
            {
                "name": "TopRestaurants",
                "Description": "This API provides the names of top ranked restaurants in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the top ranked restaurant",
                        "type": "String"
                    }
                },
                "format": "TopRestaurants(city) -> restaurant_name"
            }
        ],
        "Query": "I am currently in Rome and I'm famished. Can you order the most well-liked food from a renowned restaurant?",
        "Label": "OrderFood(dish_name=FindPopularDishes(city='Rome'), restaurant_name=TopRestaurants(city='Rome'))",
        "Index": 28
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API provides the name of a movie based on the specified genre.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovie(genre) -> movie_name"
            },
            {
                "name": "MovieShowtimes",
                "Description": "This API gives the showtimes for a specified movie in a chosen city.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "show_time": {
                        "description": "the showtimes for the movie in the chosen city",
                        "type": "String"
                    }
                },
                "format": "MovieShowtimes(movie_name, city) -> show_time"
            },
            {
                "name": "BuyMovieTickets",
                "Description": "This API buys movie tickets for a specific show time, movie and chosen seats.",
                "input_params": {
                    "show_time": {
                        "description": "the show time of the movie",
                        "type": "String"
                    },
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "seats": {
                        "description": "the number of seats to buy",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BuyMovieTickets(show_time, movie_name, seats) -> booking_status"
            }
        ],
        "Query": "Can you find me a comedy movie show in Chicago tonight and buy 2 tickets?",
        "Label": "BuyMovieTickets(show_time=MovieShowtimes(movie_name=FindMovie(genre='comedy'), city='Chicago'), movie_name=FindMovie(genre='comedy'), seats=2)",
        "Index": 29
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API provides the name of a movie based on the specified genre.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovie(genre) -> movie_name"
            },
            {
                "name": "MovieShowtimes",
                "Description": "This API gives the showtimes for a specified movie in a chosen city.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "show_time": {
                        "description": "the showtimes for the movie in the chosen city",
                        "type": "String"
                    }
                },
                "format": "MovieShowtimes(movie_name, city) -> show_time"
            },
            {
                "name": "BuyMovieTickets",
                "Description": "This API buys movie tickets for a specific show time, movie and chosen seats.",
                "input_params": {
                    "show_time": {
                        "description": "the show time of the movie",
                        "type": "String"
                    },
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "seats": {
                        "description": "the number of seats to buy",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BuyMovieTickets(show_time, movie_name, seats) -> booking_status"
            }
        ],
        "Query": "I want to buy 1 ticket for a horror movie show in Los Angeles tomorrow.",
        "Label": "BuyMovieTickets(show_time=MovieShowtimes(movie_name=FindMovie(genre='horror'), city='Los Angeles'), movie_name=FindMovie(genre='horror'), seats=1)",
        "Index": 30
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API provides the name of a movie based on the specified genre.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovie(genre) -> movie_name"
            },
            {
                "name": "MovieShowtimes",
                "Description": "This API gives the showtimes for a specified movie in a chosen city.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "show_time": {
                        "description": "the showtimes for the movie in the chosen city",
                        "type": "String"
                    }
                },
                "format": "MovieShowtimes(movie_name, city) -> show_time"
            },
            {
                "name": "BuyMovieTickets",
                "Description": "This API buys movie tickets for a specific show time, movie and chosen seats.",
                "input_params": {
                    "show_time": {
                        "description": "the show time of the movie",
                        "type": "String"
                    },
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "seats": {
                        "description": "the number of seats to buy",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BuyMovieTickets(show_time, movie_name, seats) -> booking_status"
            }
        ],
        "Query": "Please get 4 tickets for an action movie in New York today?",
        "Label": "BuyMovieTickets(show_time=MovieShowtimes(movie_name=FindMovie(genre='action'), city='New York'), movie_name=FindMovie(genre='action'), seats=4)",
        "Index": 31
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API provides the name of a movie based on the specified genre.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovie(genre) -> movie_name"
            },
            {
                "name": "MovieShowtimes",
                "Description": "This API gives the showtimes for a specified movie in a chosen city.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "show_time": {
                        "description": "the showtimes for the movie in the chosen city",
                        "type": "String"
                    }
                },
                "format": "MovieShowtimes(movie_name, city) -> show_time"
            },
            {
                "name": "BuyMovieTickets",
                "Description": "This API buys movie tickets for a specific show time, movie and chosen seats.",
                "input_params": {
                    "show_time": {
                        "description": "the show time of the movie",
                        "type": "String"
                    },
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "seats": {
                        "description": "the number of seats to buy",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BuyMovieTickets(show_time, movie_name, seats) -> booking_status"
            }
        ],
        "Query": "I am looking for a romantic movie show. I am now in San Francisco and I need 2 tickets?",
        "Label": "BuyMovieTickets(show_time=MovieShowtimes(movie_name=FindMovie(genre='romantic'), city='San Francisco'), movie_name=FindMovie(genre='romantic'), seats=2)",
        "Index": 32
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API provides the name of a movie based on the specified genre.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovie(genre) -> movie_name"
            },
            {
                "name": "MovieShowtimes",
                "Description": "This API gives the showtimes for a specified movie in a chosen city.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "show_time": {
                        "description": "the showtimes for the movie in the chosen city",
                        "type": "String"
                    }
                },
                "format": "MovieShowtimes(movie_name, city) -> show_time"
            },
            {
                "name": "BuyMovieTickets",
                "Description": "This API buys movie tickets for a specific show time, movie and chosen seats.",
                "input_params": {
                    "show_time": {
                        "description": "the show time of the movie",
                        "type": "String"
                    },
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "seats": {
                        "description": "the number of seats to buy",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BuyMovieTickets(show_time, movie_name, seats) -> booking_status"
            }
        ],
        "Query": "It would be great if you can find a drama movie show in Miami tomorrow and buy 3 tickets?",
        "Label": "BuyMovieTickets(show_time=MovieShowtimes(movie_name=FindMovie(genre='drama'), city='Miami'), movie_name=FindMovie(genre='drama'), seats=3)",
        "Index": 33
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API provides the name of a movie based on the specified genre.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovie(genre) -> movie_name"
            },
            {
                "name": "MovieShowtimes",
                "Description": "This API gives the showtimes for a specified movie in a chosen city.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "show_time": {
                        "description": "the showtimes for the movie in the chosen city",
                        "type": "String"
                    }
                },
                "format": "MovieShowtimes(movie_name, city) -> show_time"
            },
            {
                "name": "BuyMovieTickets",
                "Description": "This API buys movie tickets for a specific show time, movie and chosen seats.",
                "input_params": {
                    "show_time": {
                        "description": "the show time of the movie",
                        "type": "String"
                    },
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "seats": {
                        "description": "the number of seats to buy",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BuyMovieTickets(show_time, movie_name, seats) -> booking_status"
            }
        ],
        "Query": "Please find a horror movie and let me know when it is playing in New York tonight. Also, book 3 tickets for that.",
        "Label": "BuyMovieTickets(show_time=MovieShowtimes(movie_name=FindMovie(genre='horror'), city='New York'), movie_name=FindMovie(genre='horror'), seats=3)",
        "Index": 34
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API provides the name of a movie based on the specified genre.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovie(genre) -> movie_name"
            },
            {
                "name": "MovieShowtimes",
                "Description": "This API gives the showtimes for a specified movie in a chosen city.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "show_time": {
                        "description": "the showtimes for the movie in the chosen city",
                        "type": "String"
                    }
                },
                "format": "MovieShowtimes(movie_name, city) -> show_time"
            },
            {
                "name": "BuyMovieTickets",
                "Description": "This API buys movie tickets for a specific show time, movie and chosen seats.",
                "input_params": {
                    "show_time": {
                        "description": "the show time of the movie",
                        "type": "String"
                    },
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "seats": {
                        "description": "the number of seats to buy",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BuyMovieTickets(show_time, movie_name, seats) -> booking_status"
            }
        ],
        "Query": "Would you be willing to help me buy 4 tickets of a romantic movie in Los Angeles today?",
        "Label": "BuyMovieTickets(show_time=MovieShowtimes(movie_name=FindMovie(genre='romantic'), city='Los Angeles'), movie_name=FindMovie(genre='romantic'), seats=4)",
        "Index": 35
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API provides the name of a movie based on the specified genre.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovie(genre) -> movie_name"
            },
            {
                "name": "MovieShowtimes",
                "Description": "This API gives the showtimes for a specified movie in a chosen city.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "show_time": {
                        "description": "the showtimes for the movie in the chosen city",
                        "type": "String"
                    }
                },
                "format": "MovieShowtimes(movie_name, city) -> show_time"
            },
            {
                "name": "BuyMovieTickets",
                "Description": "This API buys movie tickets for a specific show time, movie and chosen seats.",
                "input_params": {
                    "show_time": {
                        "description": "the show time of the movie",
                        "type": "String"
                    },
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "seats": {
                        "description": "the number of seats to buy",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BuyMovieTickets(show_time, movie_name, seats) -> booking_status"
            }
        ],
        "Query": "Can you find an action movie for me and tell me when it's playing in Miami tonight? Also, purchase 1 ticket.",
        "Label": "BuyMovieTickets(show_time=MovieShowtimes(movie_name=FindMovie(genre='action'), city='Miami'), movie_name=FindMovie(genre='action'), seats=1)",
        "Index": 36
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API provides the name of a movie based on the specified genre.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovie(genre) -> movie_name"
            },
            {
                "name": "MovieShowtimes",
                "Description": "This API gives the showtimes for a specified movie in a chosen city.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "show_time": {
                        "description": "the showtimes for the movie in the chosen city",
                        "type": "String"
                    }
                },
                "format": "MovieShowtimes(movie_name, city) -> show_time"
            },
            {
                "name": "BuyMovieTickets",
                "Description": "This API buys movie tickets for a specific show time, movie and chosen seats.",
                "input_params": {
                    "show_time": {
                        "description": "the show time of the movie",
                        "type": "String"
                    },
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "seats": {
                        "description": "the number of seats to buy",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BuyMovieTickets(show_time, movie_name, seats) -> booking_status"
            }
        ],
        "Query": "I'd like to see a drama movie in Seattle today. Can you find me a show and buy 2 tickets?",
        "Label": "BuyMovieTickets(show_time=MovieShowtimes(movie_name=FindMovie(genre='drama'), city='Seattle'), movie_name=FindMovie(genre='drama'), seats=2)",
        "Index": 37
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API provides the name of a movie based on the specified genre.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovie(genre) -> movie_name"
            },
            {
                "name": "MovieShowtimes",
                "Description": "This API gives the showtimes for a specified movie in a chosen city.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "show_time": {
                        "description": "the showtimes for the movie in the chosen city",
                        "type": "String"
                    }
                },
                "format": "MovieShowtimes(movie_name, city) -> show_time"
            },
            {
                "name": "BuyMovieTickets",
                "Description": "This API buys movie tickets for a specific show time, movie and chosen seats.",
                "input_params": {
                    "show_time": {
                        "description": "the show time of the movie",
                        "type": "String"
                    },
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "seats": {
                        "description": "the number of seats to buy",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BuyMovieTickets(show_time, movie_name, seats) -> booking_status"
            }
        ],
        "Query": "Please find a sci-fi movie for me and tell me when it is playing in Boston tonight. Also, book 5 tickets for that.",
        "Label": "BuyMovieTickets(show_time=MovieShowtimes(movie_name=FindMovie(genre='sci-fi'), city='Boston'), movie_name=FindMovie(genre='sci-fi'), seats=5)",
        "Index": 38
    },
    {
        "APIs": [
            {
                "name": "CheckWeather",
                "Description": "This API checks the weather of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the specific location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather at the specific location",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(location) -> weather"
            },
            {
                "name": "SelectOutfit",
                "Description": "This API selects an appropriate outfit based on the weather and occasion.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    },
                    "occasion": {
                        "description": "the occasion",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "SelectOutfit(weather, occasion) -> outfit"
            }
        ],
        "Query": "I'm attending a birthday party in San Francisco tomorrow, what should I wear?",
        "Label": "SelectOutfit(weather=CheckWeather(location='San Francisco'), occasion='birthday party')",
        "Index": 39
    },
    {
        "APIs": [
            {
                "name": "CheckWeather",
                "Description": "This API checks the weather of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the specific location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather at the specific location",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(location) -> weather"
            },
            {
                "name": "SelectOutfit",
                "Description": "This API selects an appropriate outfit based on the weather and occasion.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    },
                    "occasion": {
                        "description": "the occasion",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "SelectOutfit(weather, occasion) -> outfit"
            }
        ],
        "Query": "What would be appropriate to wear for the wedding of my best friend in New York?",
        "Label": "SelectOutfit(weather=CheckWeather(location='New York'), occasion='wedding')",
        "Index": 40
    },
    {
        "APIs": [
            {
                "name": "CheckWeather",
                "Description": "This API checks the weather of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the specific location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather at the specific location",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(location) -> weather"
            },
            {
                "name": "SelectOutfit",
                "Description": "This API selects an appropriate outfit based on the weather and occasion.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    },
                    "occasion": {
                        "description": "the occasion",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "SelectOutfit(weather, occasion) -> outfit"
            }
        ],
        "Query": "I have a job interview in Los Angeles this afternoon. Is there any recommendation for my outfit?",
        "Label": "SelectOutfit(weather=CheckWeather(location='Los Angeles'), occasion='job interview')",
        "Index": 41
    },
    {
        "APIs": [
            {
                "name": "CheckWeather",
                "Description": "This API checks the weather of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the specific location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather at the specific location",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(location) -> weather"
            },
            {
                "name": "SelectOutfit",
                "Description": "This API selects an appropriate outfit based on the weather and occasion.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    },
                    "occasion": {
                        "description": "the occasion",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "SelectOutfit(weather, occasion) -> outfit"
            }
        ],
        "Query": "Could you help me select what to wear for a date in Chicago tonight?",
        "Label": "SelectOutfit(weather=CheckWeather(location='Chicago'), occasion='date')",
        "Index": 42
    },
    {
        "APIs": [
            {
                "name": "CheckWeather",
                "Description": "This API checks the weather of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the specific location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather at the specific location",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(location) -> weather"
            },
            {
                "name": "SelectOutfit",
                "Description": "This API selects an appropriate outfit based on the weather and occasion.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    },
                    "occasion": {
                        "description": "the occasion",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "SelectOutfit(weather, occasion) -> outfit"
            }
        ],
        "Query": "Hey there. I am flying to Boston for a conference there. Please suggest some appropriate clothes.",
        "Label": "SelectOutfit(weather=CheckWeather(location='Boston'), occasion='conference')",
        "Index": 43
    },
    {
        "APIs": [
            {
                "name": "CheckWeather",
                "Description": "This API checks the weather of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the specific location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather at the specific location",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(location) -> weather"
            },
            {
                "name": "SelectOutfit",
                "Description": "This API selects an appropriate outfit based on the weather and occasion.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    },
                    "occasion": {
                        "description": "the occasion",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "SelectOutfit(weather, occasion) -> outfit"
            }
        ],
        "Query": "I have a wedding ceremony in Paris, what's the best attire?",
        "Label": "SelectOutfit(weather=CheckWeather(location='Paris'), occasion='wedding ceremony')",
        "Index": 44
    },
    {
        "APIs": [
            {
                "name": "CheckWeather",
                "Description": "This API checks the weather of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the specific location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather at the specific location",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(location) -> weather"
            },
            {
                "name": "SelectOutfit",
                "Description": "This API selects an appropriate outfit based on the weather and occasion.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    },
                    "occasion": {
                        "description": "the occasion",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "SelectOutfit(weather, occasion) -> outfit"
            }
        ],
        "Query": "I'm going to a concert in Sydney, what should I dress?",
        "Label": "SelectOutfit(weather=CheckWeather(location='Sydney'), occasion='concert')",
        "Index": 45
    },
    {
        "APIs": [
            {
                "name": "CheckWeather",
                "Description": "This API checks the weather of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the specific location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather at the specific location",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(location) -> weather"
            },
            {
                "name": "SelectOutfit",
                "Description": "This API selects an appropriate outfit based on the weather and occasion.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    },
                    "occasion": {
                        "description": "the occasion",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "SelectOutfit(weather, occasion) -> outfit"
            }
        ],
        "Query": "What's the appropriate outfit for a dinner date in Tokyo?",
        "Label": "SelectOutfit(weather=CheckWeather(location='Tokyo'), occasion='dinner date')",
        "Index": 46
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on location, type and rating.",
                "input_params": {
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    },
                    "type": {
                        "description": "the type of the restaurant",
                        "type": "String"
                    },
                    "rating": {
                        "description": "the rating of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the restaurant found",
                        "type": "Object"
                    }
                },
                "format": "FindRestaurant(location, type, rating) -> restaurant"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a specific restaurant.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "GetMenu(restaurant_id) -> menu"
            }
        ],
        "Query": "What's on the menu at the best sushi restaurant in Tokyo?",
        "Label": "GetMenu(restaurant_id=FindRestaurant(location='Tokyo', type='sushi', rating='best'))",
        "Index": 47
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on location, type and rating.",
                "input_params": {
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    },
                    "type": {
                        "description": "the type of the restaurant",
                        "type": "String"
                    },
                    "rating": {
                        "description": "the rating of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the restaurant found",
                        "type": "Object"
                    }
                },
                "format": "FindRestaurant(location, type, rating) -> restaurant"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a specific restaurant.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "GetMenu(restaurant_id) -> menu"
            }
        ],
        "Query": "I want to get the menu of the top-rated pizza place in New York.",
        "Label": "GetMenu(restaurant_id=FindRestaurant(location='New York', type='pizza', rating='top-rated'))",
        "Index": 48
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on location, type and rating.",
                "input_params": {
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    },
                    "type": {
                        "description": "the type of the restaurant",
                        "type": "String"
                    },
                    "rating": {
                        "description": "the rating of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the restaurant found",
                        "type": "Object"
                    }
                },
                "format": "FindRestaurant(location, type, rating) -> restaurant"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a specific restaurant.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "GetMenu(restaurant_id) -> menu"
            }
        ],
        "Query": "What dishes are served at the highest-rated pasta in Los Angeles?",
        "Label": "GetMenu(restaurant_id=FindRestaurant(location='Los Angeles', type='pasta', rating='highest-rated'))",
        "Index": 49
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on location, type and rating.",
                "input_params": {
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    },
                    "type": {
                        "description": "the type of the restaurant",
                        "type": "String"
                    },
                    "rating": {
                        "description": "the rating of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the restaurant found",
                        "type": "Object"
                    }
                },
                "format": "FindRestaurant(location, type, rating) -> restaurant"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a specific restaurant.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "GetMenu(restaurant_id) -> menu"
            }
        ],
        "Query": "Can you provide me with the menu of the most popular sandwich in Chicago?",
        "Label": "GetMenu(restaurant_id=FindRestaurant(location='Chicago', type='sandwich', rating='most popular'))",
        "Index": 50
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on location, type and rating.",
                "input_params": {
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    },
                    "type": {
                        "description": "the type of the restaurant",
                        "type": "String"
                    },
                    "rating": {
                        "description": "the rating of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the restaurant found",
                        "type": "Object"
                    }
                },
                "format": "FindRestaurant(location, type, rating) -> restaurant"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a specific restaurant.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "GetMenu(restaurant_id) -> menu"
            }
        ],
        "Query": "Please give me the menu at the finest burger joint in Seattle?",
        "Label": "GetMenu(restaurant_id=FindRestaurant(location='Seattle', type='burger', rating='finest'))",
        "Index": 51
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on location, type and rating.",
                "input_params": {
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    },
                    "type": {
                        "description": "the type of the restaurant",
                        "type": "String"
                    },
                    "rating": {
                        "description": "the rating of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the restaurant found",
                        "type": "Object"
                    }
                },
                "format": "FindRestaurant(location, type, rating) -> restaurant"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a specific restaurant.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "GetMenu(restaurant_id) -> menu"
            }
        ],
        "Query": "What's the menu for the most popular Chinese restaurant in San Francisco?",
        "Label": "GetMenu(restaurant_id=FindRestaurant(location='San Francisco', type='Chinese', rating='most popular'))",
        "Index": 52
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on location, type and rating.",
                "input_params": {
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    },
                    "type": {
                        "description": "the type of the restaurant",
                        "type": "String"
                    },
                    "rating": {
                        "description": "the rating of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the restaurant found",
                        "type": "Object"
                    }
                },
                "format": "FindRestaurant(location, type, rating) -> restaurant"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a specific restaurant.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "GetMenu(restaurant_id) -> menu"
            }
        ],
        "Query": "I want to see the menu for the best seafood restaurant in Miami.",
        "Label": "GetMenu(restaurant_id=FindRestaurant(location='Miami', type='seafood', rating='best'))",
        "Index": 53
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on location, type and rating.",
                "input_params": {
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    },
                    "type": {
                        "description": "the type of the restaurant",
                        "type": "String"
                    },
                    "rating": {
                        "description": "the rating of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the restaurant found",
                        "type": "Object"
                    }
                },
                "format": "FindRestaurant(location, type, rating) -> restaurant"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a specific restaurant.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "GetMenu(restaurant_id) -> menu"
            }
        ],
        "Query": "Can I get the menu of the top Chinese restaurant in San Francisco?",
        "Label": "GetMenu(restaurant_id=FindRestaurant(location='San Francisco', type='Chinese', rating='top'))",
        "Index": 54
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on location, type and rating.",
                "input_params": {
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    },
                    "type": {
                        "description": "the type of the restaurant",
                        "type": "String"
                    },
                    "rating": {
                        "description": "the rating of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the restaurant found",
                        "type": "Object"
                    }
                },
                "format": "FindRestaurant(location, type, rating) -> restaurant"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a specific restaurant.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "GetMenu(restaurant_id) -> menu"
            }
        ],
        "Query": "Can I see the menu of the highest rated seafood restaurant in Seattle?",
        "Label": "GetMenu(restaurant_id=FindRestaurant(location='Seattle', type='seafood', rating='highest'))",
        "Index": 55
    },
    {
        "APIs": [
            {
                "name": "FlightSchedule",
                "Description": "This API is to get the departure and arrival times for flights at a specific airport.",
                "input_params": {
                    "airport": {
                        "description": "the name of the airport",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flightTimes": {
                        "description": "the departure and arrival times for flights",
                        "type": "List"
                    }
                },
                "format": "FlightSchedule(airport) -> flightTimes"
            },
            {
                "name": "GetTrafficUpdate",
                "Description": "This API is to fetch the current traffic scenario and any possible delays happening at a given location.",
                "input_params": {
                    "location": {
                        "description": "the location for which traffic updates are needed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "trafficDelay": {
                        "description": "the current traffic scenario and any possible delays",
                        "type": "String"
                    }
                },
                "format": "GetTrafficUpdate(location) -> trafficDelay"
            },
            {
                "name": "CalculateTravelTime",
                "Description": "This API is to estimate the travel time accounting for flight times and possible traffic delays.",
                "input_params": {
                    "flightTimes": {
                        "description": "the departure and arrival times for flights",
                        "type": "List"
                    },
                    "trafficDelay": {
                        "description": "the current traffic scenario and any possible delays",
                        "type": "String"
                    }
                },
                "output_params": {
                    "travelTime": {
                        "description": "the estimated travel time",
                        "type": "String"
                    }
                },
                "format": "CalculateTravelTime(flightTimes, trafficDelay) -> travelTime"
            }
        ],
        "Query": "I am flying out of Los Angeles Airport today. What is my estimated travel time?",
        "Label": "CalculateTravelTime(flightTimes=FlightSchedule(airport='Los Angeles Airport'), trafficDelay=GetTrafficUpdate(location='Los Angeles Airport'))",
        "Index": 56
    },
    {
        "APIs": [
            {
                "name": "FlightSchedule",
                "Description": "This API is to get the departure and arrival times for flights at a specific airport.",
                "input_params": {
                    "airport": {
                        "description": "the name of the airport",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flightTimes": {
                        "description": "the departure and arrival times for flights",
                        "type": "List"
                    }
                },
                "format": "FlightSchedule(airport) -> flightTimes"
            },
            {
                "name": "GetTrafficUpdate",
                "Description": "This API is to fetch the current traffic scenario and any possible delays happening at a given location.",
                "input_params": {
                    "location": {
                        "description": "the location for which traffic updates are needed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "trafficDelay": {
                        "description": "the current traffic scenario and any possible delays",
                        "type": "String"
                    }
                },
                "format": "GetTrafficUpdate(location) -> trafficDelay"
            },
            {
                "name": "CalculateTravelTime",
                "Description": "This API is to estimate the travel time accounting for flight times and possible traffic delays.",
                "input_params": {
                    "flightTimes": {
                        "description": "the departure and arrival times for flights",
                        "type": "List"
                    },
                    "trafficDelay": {
                        "description": "the current traffic scenario and any possible delays",
                        "type": "String"
                    }
                },
                "output_params": {
                    "travelTime": {
                        "description": "the estimated travel time",
                        "type": "String"
                    }
                },
                "format": "CalculateTravelTime(flightTimes, trafficDelay) -> travelTime"
            }
        ],
        "Query": "I have a flight from Chicago O'Hare Airport. Can you tell me the expected travel duration?",
        "Label": "CalculateTravelTime(flightTimes=FlightSchedule(airport='Chicago O'Hare Airport'), trafficDelay=GetTrafficUpdate(location='Chicago O'Hare Airport'))",
        "Index": 57
    },
    {
        "APIs": [
            {
                "name": "FlightSchedule",
                "Description": "This API is to get the departure and arrival times for flights at a specific airport.",
                "input_params": {
                    "airport": {
                        "description": "the name of the airport",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flightTimes": {
                        "description": "the departure and arrival times for flights",
                        "type": "List"
                    }
                },
                "format": "FlightSchedule(airport) -> flightTimes"
            },
            {
                "name": "GetTrafficUpdate",
                "Description": "This API is to fetch the current traffic scenario and any possible delays happening at a given location.",
                "input_params": {
                    "location": {
                        "description": "the location for which traffic updates are needed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "trafficDelay": {
                        "description": "the current traffic scenario and any possible delays",
                        "type": "String"
                    }
                },
                "format": "GetTrafficUpdate(location) -> trafficDelay"
            },
            {
                "name": "CalculateTravelTime",
                "Description": "This API is to estimate the travel time accounting for flight times and possible traffic delays.",
                "input_params": {
                    "flightTimes": {
                        "description": "the departure and arrival times for flights",
                        "type": "List"
                    },
                    "trafficDelay": {
                        "description": "the current traffic scenario and any possible delays",
                        "type": "String"
                    }
                },
                "output_params": {
                    "travelTime": {
                        "description": "the estimated travel time",
                        "type": "String"
                    }
                },
                "format": "CalculateTravelTime(flightTimes, trafficDelay) -> travelTime"
            }
        ],
        "Query": "What is the estimated travel time if I depart from London Heathrow Airport?",
        "Label": "CalculateTravelTime(flightTimes=FlightSchedule(airport='London Heathrow Airport'), trafficDelay=GetTrafficUpdate(location='London Heathrow Airport'))",
        "Index": 58
    },
    {
        "APIs": [
            {
                "name": "FlightSchedule",
                "Description": "This API is to get the departure and arrival times for flights at a specific airport.",
                "input_params": {
                    "airport": {
                        "description": "the name of the airport",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flightTimes": {
                        "description": "the departure and arrival times for flights",
                        "type": "List"
                    }
                },
                "format": "FlightSchedule(airport) -> flightTimes"
            },
            {
                "name": "GetTrafficUpdate",
                "Description": "This API is to fetch the current traffic scenario and any possible delays happening at a given location.",
                "input_params": {
                    "location": {
                        "description": "the location for which traffic updates are needed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "trafficDelay": {
                        "description": "the current traffic scenario and any possible delays",
                        "type": "String"
                    }
                },
                "format": "GetTrafficUpdate(location) -> trafficDelay"
            },
            {
                "name": "CalculateTravelTime",
                "Description": "This API is to estimate the travel time accounting for flight times and possible traffic delays.",
                "input_params": {
                    "flightTimes": {
                        "description": "the departure and arrival times for flights",
                        "type": "List"
                    },
                    "trafficDelay": {
                        "description": "the current traffic scenario and any possible delays",
                        "type": "String"
                    }
                },
                "output_params": {
                    "travelTime": {
                        "description": "the estimated travel time",
                        "type": "String"
                    }
                },
                "format": "CalculateTravelTime(flightTimes, trafficDelay) -> travelTime"
            }
        ],
        "Query": "Tell me the travel duration from San Francisco International Airport.",
        "Label": "CalculateTravelTime(flightTimes=FlightSchedule(airport='San Francisco International Airport'), trafficDelay=GetTrafficUpdate(location='San Francisco International Airport'))",
        "Index": 59
    },
    {
        "APIs": [
            {
                "name": "FlightSchedule",
                "Description": "This API is to get the departure and arrival times for flights at a specific airport.",
                "input_params": {
                    "airport": {
                        "description": "the name of the airport",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flightTimes": {
                        "description": "the departure and arrival times for flights",
                        "type": "List"
                    }
                },
                "format": "FlightSchedule(airport) -> flightTimes"
            },
            {
                "name": "GetTrafficUpdate",
                "Description": "This API is to fetch the current traffic scenario and any possible delays happening at a given location.",
                "input_params": {
                    "location": {
                        "description": "the location for which traffic updates are needed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "trafficDelay": {
                        "description": "the current traffic scenario and any possible delays",
                        "type": "String"
                    }
                },
                "format": "GetTrafficUpdate(location) -> trafficDelay"
            },
            {
                "name": "CalculateTravelTime",
                "Description": "This API is to estimate the travel time accounting for flight times and possible traffic delays.",
                "input_params": {
                    "flightTimes": {
                        "description": "the departure and arrival times for flights",
                        "type": "List"
                    },
                    "trafficDelay": {
                        "description": "the current traffic scenario and any possible delays",
                        "type": "String"
                    }
                },
                "output_params": {
                    "travelTime": {
                        "description": "the estimated travel time",
                        "type": "String"
                    }
                },
                "format": "CalculateTravelTime(flightTimes, trafficDelay) -> travelTime"
            }
        ],
        "Query": "Can I get the estimated travel time for a flight departing from Toronto Pearson Airport?",
        "Label": "CalculateTravelTime(flightTimes=FlightSchedule(airport='Toronto Pearson Airport'), trafficDelay=GetTrafficUpdate(location='Toronto Pearson Airport'))",
        "Index": 60
    },
    {
        "APIs": [
            {
                "name": "FlightSchedule",
                "Description": "This API is to get the departure and arrival times for flights at a specific airport.",
                "input_params": {
                    "airport": {
                        "description": "the name of the airport",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flightTimes": {
                        "description": "the departure and arrival times for flights",
                        "type": "List"
                    }
                },
                "format": "FlightSchedule(airport) -> flightTimes"
            },
            {
                "name": "GetTrafficUpdate",
                "Description": "This API is to fetch the current traffic scenario and any possible delays happening at a given location.",
                "input_params": {
                    "location": {
                        "description": "the location for which traffic updates are needed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "trafficDelay": {
                        "description": "the current traffic scenario and any possible delays",
                        "type": "String"
                    }
                },
                "format": "GetTrafficUpdate(location) -> trafficDelay"
            },
            {
                "name": "CalculateTravelTime",
                "Description": "This API is to estimate the travel time accounting for flight times and possible traffic delays.",
                "input_params": {
                    "flightTimes": {
                        "description": "the departure and arrival times for flights",
                        "type": "List"
                    },
                    "trafficDelay": {
                        "description": "the current traffic scenario and any possible delays",
                        "type": "String"
                    }
                },
                "output_params": {
                    "travelTime": {
                        "description": "the estimated travel time",
                        "type": "String"
                    }
                },
                "format": "CalculateTravelTime(flightTimes, trafficDelay) -> travelTime"
            }
        ],
        "Query": "I have a flight from JFK Airport, what's my estimated travel time?",
        "Label": "CalculateTravelTime(flightTimes=FlightSchedule(airport='JFK Airport'), trafficDelay=GetTrafficUpdate(location='JFK Airport'))",
        "Index": 61
    },
    {
        "APIs": [
            {
                "name": "FlightSchedule",
                "Description": "This API is to get the departure and arrival times for flights at a specific airport.",
                "input_params": {
                    "airport": {
                        "description": "the name of the airport",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flightTimes": {
                        "description": "the departure and arrival times for flights",
                        "type": "List"
                    }
                },
                "format": "FlightSchedule(airport) -> flightTimes"
            },
            {
                "name": "GetTrafficUpdate",
                "Description": "This API is to fetch the current traffic scenario and any possible delays happening at a given location.",
                "input_params": {
                    "location": {
                        "description": "the location for which traffic updates are needed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "trafficDelay": {
                        "description": "the current traffic scenario and any possible delays",
                        "type": "String"
                    }
                },
                "format": "GetTrafficUpdate(location) -> trafficDelay"
            },
            {
                "name": "CalculateTravelTime",
                "Description": "This API is to estimate the travel time accounting for flight times and possible traffic delays.",
                "input_params": {
                    "flightTimes": {
                        "description": "the departure and arrival times for flights",
                        "type": "List"
                    },
                    "trafficDelay": {
                        "description": "the current traffic scenario and any possible delays",
                        "type": "String"
                    }
                },
                "output_params": {
                    "travelTime": {
                        "description": "the estimated travel time",
                        "type": "String"
                    }
                },
                "format": "CalculateTravelTime(flightTimes, trafficDelay) -> travelTime"
            }
        ],
        "Query": "I need to know the travel time for my flight from San Francisco Airport.",
        "Label": "CalculateTravelTime(flightTimes=FlightSchedule(airport='San Francisco Airport'), trafficDelay=GetTrafficUpdate(location='San Francisco Airport'))",
        "Index": 62
    },
    {
        "APIs": [
            {
                "name": "FlightSchedule",
                "Description": "This API is to get the departure and arrival times for flights at a specific airport.",
                "input_params": {
                    "airport": {
                        "description": "the name of the airport",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flightTimes": {
                        "description": "the departure and arrival times for flights",
                        "type": "List"
                    }
                },
                "format": "FlightSchedule(airport) -> flightTimes"
            },
            {
                "name": "GetTrafficUpdate",
                "Description": "This API is to fetch the current traffic scenario and any possible delays happening at a given location.",
                "input_params": {
                    "location": {
                        "description": "the location for which traffic updates are needed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "trafficDelay": {
                        "description": "the current traffic scenario and any possible delays",
                        "type": "String"
                    }
                },
                "format": "GetTrafficUpdate(location) -> trafficDelay"
            },
            {
                "name": "CalculateTravelTime",
                "Description": "This API is to estimate the travel time accounting for flight times and possible traffic delays.",
                "input_params": {
                    "flightTimes": {
                        "description": "the departure and arrival times for flights",
                        "type": "List"
                    },
                    "trafficDelay": {
                        "description": "the current traffic scenario and any possible delays",
                        "type": "String"
                    }
                },
                "output_params": {
                    "travelTime": {
                        "description": "the estimated travel time",
                        "type": "String"
                    }
                },
                "format": "CalculateTravelTime(flightTimes, trafficDelay) -> travelTime"
            }
        ],
        "Query": "What's the estimated travel time for my flight from Sydney Airport?",
        "Label": "CalculateTravelTime(flightTimes=FlightSchedule(airport='Sydney Airport'), trafficDelay=GetTrafficUpdate(location='Sydney Airport'))",
        "Index": 63
    },
    {
        "APIs": [
            {
                "name": "HealthCheck",
                "Description": "This API is used to calculate health index based on age and weight.",
                "input_params": {
                    "Age": {
                        "description": "the age of the person",
                        "type": "Integer"
                    },
                    "Weight": {
                        "description": "the weight of the person",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "HealthScale": {
                        "description": "the health index of the person",
                        "type": "String"
                    }
                },
                "format": "HealthCheck(Age, Weight) -> HealthScale"
            },
            {
                "name": "RecommendDiet",
                "Description": "This API is used to recommend a diet chart considering the health index.",
                "input_params": {
                    "HealthScale": {
                        "description": "the health index of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "DietReport": {
                        "description": "the diet chart recommended for the person",
                        "type": "String"
                    }
                },
                "format": "RecommendDiet(HealthScale) -> DietReport"
            },
            {
                "name": "RetrieveUserInfo",
                "Description": "This API retrieves Age and Weight of a specific user.",
                "input_params": {
                    "Username": {
                        "description": "the username of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Age": {
                        "description": "the age of the person",
                        "type": "Integer"
                    },
                    "Weight": {
                        "description": "the weight of the person",
                        "type": "Float"
                    }
                },
                "format": "RetrieveUserInfo(Username) -> Age, Weight"
            }
        ],
        "Query": "I'm Jack, Based on my health condition, what kind of diet is appropriate for me?",
        "Label": "RecommendDiet(HealthScale=HealthCheck(Age=RetrieveUserInfo(Username='Jack'), Weight=RetrieveUserInfo(Username='Jack')))",
        "Index": 64
    },
    {
        "APIs": [
            {
                "name": "HealthCheck",
                "Description": "This API is used to calculate health index based on age and weight.",
                "input_params": {
                    "Age": {
                        "description": "the age of the person",
                        "type": "Integer"
                    },
                    "Weight": {
                        "description": "the weight of the person",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "HealthScale": {
                        "description": "the health index of the person",
                        "type": "String"
                    }
                },
                "format": "HealthCheck(Age, Weight) -> HealthScale"
            },
            {
                "name": "RecommendDiet",
                "Description": "This API is used to recommend a diet chart considering the health index.",
                "input_params": {
                    "HealthScale": {
                        "description": "the health index of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "DietReport": {
                        "description": "the diet chart recommended for the person",
                        "type": "String"
                    }
                },
                "format": "RecommendDiet(HealthScale) -> DietReport"
            },
            {
                "name": "RetrieveUserInfo",
                "Description": "This API retrieves Age and Weight of a specific user.",
                "input_params": {
                    "Username": {
                        "description": "the username of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Age": {
                        "description": "the age of the person",
                        "type": "Integer"
                    },
                    "Weight": {
                        "description": "the weight of the person",
                        "type": "Float"
                    }
                },
                "format": "RetrieveUserInfo(Username) -> Age, Weight"
            }
        ],
        "Query": "Can you suggest a suitable diet for my health condition? My name is John.",
        "Label": "RecommendDiet(HealthScale=HealthCheck(Age=RetrieveUserInfo(Username='John'), Weight=RetrieveUserInfo(Username='John')))",
        "Index": 65
    },
    {
        "APIs": [
            {
                "name": "HealthCheck",
                "Description": "This API is used to calculate health index based on age and weight.",
                "input_params": {
                    "Age": {
                        "description": "the age of the person",
                        "type": "Integer"
                    },
                    "Weight": {
                        "description": "the weight of the person",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "HealthScale": {
                        "description": "the health index of the person",
                        "type": "String"
                    }
                },
                "format": "HealthCheck(Age, Weight) -> HealthScale"
            },
            {
                "name": "RecommendDiet",
                "Description": "This API is used to recommend a diet chart considering the health index.",
                "input_params": {
                    "HealthScale": {
                        "description": "the health index of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "DietReport": {
                        "description": "the diet chart recommended for the person",
                        "type": "String"
                    }
                },
                "format": "RecommendDiet(HealthScale) -> DietReport"
            },
            {
                "name": "RetrieveUserInfo",
                "Description": "This API retrieves Age and Weight of a specific user.",
                "input_params": {
                    "Username": {
                        "description": "the username of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Age": {
                        "description": "the age of the person",
                        "type": "Integer"
                    },
                    "Weight": {
                        "description": "the weight of the person",
                        "type": "Float"
                    }
                },
                "format": "RetrieveUserInfo(Username) -> Age, Weight"
            }
        ],
        "Query": "Based on my health assessment, what type of diet is appropriate for me? I'm Sarah.",
        "Label": "RecommendDiet(HealthScale=HealthCheck(Age=RetrieveUserInfo(Username='Sarah'), Weight=RetrieveUserInfo(Username='Sarah')))",
        "Index": 66
    },
    {
        "APIs": [
            {
                "name": "HealthCheck",
                "Description": "This API is used to calculate health index based on age and weight.",
                "input_params": {
                    "Age": {
                        "description": "the age of the person",
                        "type": "Integer"
                    },
                    "Weight": {
                        "description": "the weight of the person",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "HealthScale": {
                        "description": "the health index of the person",
                        "type": "String"
                    }
                },
                "format": "HealthCheck(Age, Weight) -> HealthScale"
            },
            {
                "name": "RecommendDiet",
                "Description": "This API is used to recommend a diet chart considering the health index.",
                "input_params": {
                    "HealthScale": {
                        "description": "the health index of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "DietReport": {
                        "description": "the diet chart recommended for the person",
                        "type": "String"
                    }
                },
                "format": "RecommendDiet(HealthScale) -> DietReport"
            },
            {
                "name": "RetrieveUserInfo",
                "Description": "This API retrieves Age and Weight of a specific user.",
                "input_params": {
                    "Username": {
                        "description": "the username of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Age": {
                        "description": "the age of the person",
                        "type": "Integer"
                    },
                    "Weight": {
                        "description": "the weight of the person",
                        "type": "Float"
                    }
                },
                "format": "RetrieveUserInfo(Username) -> Age, Weight"
            }
        ],
        "Query": "Hey there, Emily is talking. I need some advice on a suitable diet.",
        "Label": "RecommendDiet(HealthScale=HealthCheck(Age=RetrieveUserInfo(Username='Emily'), Weight=RetrieveUserInfo(Username='Emily')))",
        "Index": 67
    },
    {
        "APIs": [
            {
                "name": "HealthCheck",
                "Description": "This API is used to calculate health index based on age and weight.",
                "input_params": {
                    "Age": {
                        "description": "the age of the person",
                        "type": "Integer"
                    },
                    "Weight": {
                        "description": "the weight of the person",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "HealthScale": {
                        "description": "the health index of the person",
                        "type": "String"
                    }
                },
                "format": "HealthCheck(Age, Weight) -> HealthScale"
            },
            {
                "name": "RecommendDiet",
                "Description": "This API is used to recommend a diet chart considering the health index.",
                "input_params": {
                    "HealthScale": {
                        "description": "the health index of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "DietReport": {
                        "description": "the diet chart recommended for the person",
                        "type": "String"
                    }
                },
                "format": "RecommendDiet(HealthScale) -> DietReport"
            },
            {
                "name": "RetrieveUserInfo",
                "Description": "This API retrieves Age and Weight of a specific user.",
                "input_params": {
                    "Username": {
                        "description": "the username of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Age": {
                        "description": "the age of the person",
                        "type": "Integer"
                    },
                    "Weight": {
                        "description": "the weight of the person",
                        "type": "Float"
                    }
                },
                "format": "RetrieveUserInfo(Username) -> Age, Weight"
            }
        ],
        "Query": "Hello, I'm Tom. What diet plan should I follow considering my health condition?",
        "Label": "RecommendDiet(HealthScale=HealthCheck(Age=RetrieveUserInfo(Username='Tom'), Weight=RetrieveUserInfo(Username='Tom')))",
        "Index": 68
    },
    {
        "APIs": [
            {
                "name": "HealthCheck",
                "Description": "This API is used to calculate health index based on age and weight.",
                "input_params": {
                    "Age": {
                        "description": "the age of the person",
                        "type": "Integer"
                    },
                    "Weight": {
                        "description": "the weight of the person",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "HealthScale": {
                        "description": "the health index of the person",
                        "type": "String"
                    }
                },
                "format": "HealthCheck(Age, Weight) -> HealthScale"
            },
            {
                "name": "RecommendDiet",
                "Description": "This API is used to recommend a diet chart considering the health index.",
                "input_params": {
                    "HealthScale": {
                        "description": "the health index of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "DietReport": {
                        "description": "the diet chart recommended for the person",
                        "type": "String"
                    }
                },
                "format": "RecommendDiet(HealthScale) -> DietReport"
            },
            {
                "name": "RetrieveUserInfo",
                "Description": "This API retrieves Age and Weight of a specific user.",
                "input_params": {
                    "Username": {
                        "description": "the username of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Age": {
                        "description": "the age of the person",
                        "type": "Integer"
                    },
                    "Weight": {
                        "description": "the weight of the person",
                        "type": "Float"
                    }
                },
                "format": "RetrieveUserInfo(Username) -> Age, Weight"
            }
        ],
        "Query": "What should Peter eat considering his health status?",
        "Label": "RecommendDiet(HealthScale=HealthCheck(Age=RetrieveUserInfo(Username='Peter'), Weight=RetrieveUserInfo(Username='Peter')))",
        "Index": 69
    },
    {
        "APIs": [
            {
                "name": "HealthCheck",
                "Description": "This API is used to calculate health index based on age and weight.",
                "input_params": {
                    "Age": {
                        "description": "the age of the person",
                        "type": "Integer"
                    },
                    "Weight": {
                        "description": "the weight of the person",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "HealthScale": {
                        "description": "the health index of the person",
                        "type": "String"
                    }
                },
                "format": "HealthCheck(Age, Weight) -> HealthScale"
            },
            {
                "name": "RecommendDiet",
                "Description": "This API is used to recommend a diet chart considering the health index.",
                "input_params": {
                    "HealthScale": {
                        "description": "the health index of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "DietReport": {
                        "description": "the diet chart recommended for the person",
                        "type": "String"
                    }
                },
                "format": "RecommendDiet(HealthScale) -> DietReport"
            },
            {
                "name": "RetrieveUserInfo",
                "Description": "This API retrieves Age and Weight of a specific user.",
                "input_params": {
                    "Username": {
                        "description": "the username of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Age": {
                        "description": "the age of the person",
                        "type": "Integer"
                    },
                    "Weight": {
                        "description": "the weight of the person",
                        "type": "Float"
                    }
                },
                "format": "RetrieveUserInfo(Username) -> Age, Weight"
            }
        ],
        "Query": "Give me a proper diet chart for Mary's health condition.",
        "Label": "RecommendDiet(HealthScale=HealthCheck(Age=RetrieveUserInfo(Username='Mary'), Weight=RetrieveUserInfo(Username='Mary')))",
        "Index": 70
    },
    {
        "APIs": [
            {
                "name": "HealthCheck",
                "Description": "This API is used to calculate health index based on age and weight.",
                "input_params": {
                    "Age": {
                        "description": "the age of the person",
                        "type": "Integer"
                    },
                    "Weight": {
                        "description": "the weight of the person",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "HealthScale": {
                        "description": "the health index of the person",
                        "type": "String"
                    }
                },
                "format": "HealthCheck(Age, Weight) -> HealthScale"
            },
            {
                "name": "RecommendDiet",
                "Description": "This API is used to recommend a diet chart considering the health index.",
                "input_params": {
                    "HealthScale": {
                        "description": "the health index of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "DietReport": {
                        "description": "the diet chart recommended for the person",
                        "type": "String"
                    }
                },
                "format": "RecommendDiet(HealthScale) -> DietReport"
            },
            {
                "name": "RetrieveUserInfo",
                "Description": "This API retrieves Age and Weight of a specific user.",
                "input_params": {
                    "Username": {
                        "description": "the username of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Age": {
                        "description": "the age of the person",
                        "type": "Integer"
                    },
                    "Weight": {
                        "description": "the weight of the person",
                        "type": "Float"
                    }
                },
                "format": "RetrieveUserInfo(Username) -> Age, Weight"
            }
        ],
        "Query": "Considering the health index of Mike, what kind of diet should he follow?",
        "Label": "RecommendDiet(HealthScale=HealthCheck(Age=RetrieveUserInfo(Username='Mike'), Weight=RetrieveUserInfo(Username='Mike')))",
        "Index": 71
    },
    {
        "APIs": [
            {
                "name": "HealthCheck",
                "Description": "This API is used to calculate health index based on age and weight.",
                "input_params": {
                    "Age": {
                        "description": "the age of the person",
                        "type": "Integer"
                    },
                    "Weight": {
                        "description": "the weight of the person",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "HealthScale": {
                        "description": "the health index of the person",
                        "type": "String"
                    }
                },
                "format": "HealthCheck(Age, Weight) -> HealthScale"
            },
            {
                "name": "RecommendDiet",
                "Description": "This API is used to recommend a diet chart considering the health index.",
                "input_params": {
                    "HealthScale": {
                        "description": "the health index of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "DietReport": {
                        "description": "the diet chart recommended for the person",
                        "type": "String"
                    }
                },
                "format": "RecommendDiet(HealthScale) -> DietReport"
            },
            {
                "name": "RetrieveUserInfo",
                "Description": "This API retrieves Age and Weight of a specific user.",
                "input_params": {
                    "Username": {
                        "description": "the username of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Age": {
                        "description": "the age of the person",
                        "type": "Integer"
                    },
                    "Weight": {
                        "description": "the weight of the person",
                        "type": "Float"
                    }
                },
                "format": "RetrieveUserInfo(Username) -> Age, Weight"
            }
        ],
        "Query": "I need a diet plan for Lily's health status.",
        "Label": "RecommendDiet(HealthScale=HealthCheck(Age=RetrieveUserInfo(Username='Lily'), Weight=RetrieveUserInfo(Username='Lily')))",
        "Index": 72
    },
    {
        "APIs": [
            {
                "name": "HealthCheck",
                "Description": "This API is used to calculate health index based on age and weight.",
                "input_params": {
                    "Age": {
                        "description": "the age of the person",
                        "type": "Integer"
                    },
                    "Weight": {
                        "description": "the weight of the person",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "HealthScale": {
                        "description": "the health index of the person",
                        "type": "String"
                    }
                },
                "format": "HealthCheck(Age, Weight) -> HealthScale"
            },
            {
                "name": "RecommendDiet",
                "Description": "This API is used to recommend a diet chart considering the health index.",
                "input_params": {
                    "HealthScale": {
                        "description": "the health index of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "DietReport": {
                        "description": "the diet chart recommended for the person",
                        "type": "String"
                    }
                },
                "format": "RecommendDiet(HealthScale) -> DietReport"
            },
            {
                "name": "RetrieveUserInfo",
                "Description": "This API retrieves Age and Weight of a specific user.",
                "input_params": {
                    "Username": {
                        "description": "the username of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Age": {
                        "description": "the age of the person",
                        "type": "Integer"
                    },
                    "Weight": {
                        "description": "the weight of the person",
                        "type": "Float"
                    }
                },
                "format": "RetrieveUserInfo(Username) -> Age, Weight"
            }
        ],
        "Query": "What's the appropriate diet for Emma considering her health condition?",
        "Label": "RecommendDiet(HealthScale=HealthCheck(Age=RetrieveUserInfo(Username='Emma'), Weight=RetrieveUserInfo(Username='Emma')))",
        "Index": 73
    },
    {
        "APIs": [
            {
                "name": "BuyMovieTicket",
                "Description": "This API allows the user to purchase a movie ticket for a specific movie, theater, date, and time.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "theater_name": {
                        "description": "the name of the theater",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the movie showing",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the movie showing",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "Booking success or failure information",
                        "type": "String"
                    }
                },
                "format": "BuyMovieTicket(movie_name, theater_name, date, time) -> booking status"
            },
            {
                "name": "GetMovieTheaters",
                "Description": "This API returns a recommended movie theaters in a given city.",
                "input_params": {
                    "city": {
                        "description": "city name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "theater_name": {
                        "description": "the name of the movie theaters",
                        "type": "String"
                    }
                },
                "format": "GetMovieTheaters(city) -> theater_name"
            }
        ],
        "Query": "I'm in New York City today, and I want to book a ticket for the movie 'Inception' at 8pm.",
        "Label": "BuyMovieTicket(movie_name='Inception', theater_name=GetMovieTheaters(city='New York City'), date='today', time='8pm')",
        "Index": 74
    },
    {
        "APIs": [
            {
                "name": "BuyMovieTicket",
                "Description": "This API allows the user to purchase a movie ticket for a specific movie, theater, date, and time.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "theater_name": {
                        "description": "the name of the theater",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the movie showing",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the movie showing",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "Booking success or failure information",
                        "type": "String"
                    }
                },
                "format": "BuyMovieTicket(movie_name, theater_name, date, time) -> booking status"
            },
            {
                "name": "GetMovieTheaters",
                "Description": "This API returns a recommended movie theaters in a given city.",
                "input_params": {
                    "city": {
                        "description": "city name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "theater_name": {
                        "description": "the name of the movie theaters",
                        "type": "String"
                    }
                },
                "format": "GetMovieTheaters(city) -> theater_name"
            }
        ],
        "Query": "Could you buy a ticket of movie 'The Dark Knight' in Chicago this Sunday at 11am.",
        "Label": "BuyMovieTicket(movie_name='The Dark Knight', theater_name=GetMovieTheaters(city='Chicago'), date='this Sunday', time='11am')",
        "Index": 75
    },
    {
        "APIs": [
            {
                "name": "BuyMovieTicket",
                "Description": "This API allows the user to purchase a movie ticket for a specific movie, theater, date, and time.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "theater_name": {
                        "description": "the name of the theater",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the movie showing",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the movie showing",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "Booking success or failure information",
                        "type": "String"
                    }
                },
                "format": "BuyMovieTicket(movie_name, theater_name, date, time) -> booking status"
            },
            {
                "name": "GetMovieTheaters",
                "Description": "This API returns a recommended movie theaters in a given city.",
                "input_params": {
                    "city": {
                        "description": "city name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "theater_name": {
                        "description": "the name of the movie theaters",
                        "type": "String"
                    }
                },
                "format": "GetMovieTheaters(city) -> theater_name"
            }
        ],
        "Query": "Is it possible to reserve a ticket for the movie 'Toy Story 4' in New Orleans tomorrow at 4 pm?",
        "Label": "BuyMovieTicket(movie_name='Toy Story 4', theater_name=GetMovieTheaters(city='New Orleans'), date='tomorrow', time='4pm')",
        "Index": 76
    },
    {
        "APIs": [
            {
                "name": "BuyMovieTicket",
                "Description": "This API allows the user to purchase a movie ticket for a specific movie, theater, date, and time.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "theater_name": {
                        "description": "the name of the theater",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the movie showing",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the movie showing",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "Booking success or failure information",
                        "type": "String"
                    }
                },
                "format": "BuyMovieTicket(movie_name, theater_name, date, time) -> booking status"
            },
            {
                "name": "GetMovieTheaters",
                "Description": "This API returns a recommended movie theaters in a given city.",
                "input_params": {
                    "city": {
                        "description": "city name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "theater_name": {
                        "description": "the name of the movie theaters",
                        "type": "String"
                    }
                },
                "format": "GetMovieTheaters(city) -> theater_name"
            }
        ],
        "Query": "I'm in San Diego today and would like to purchase a ticket for the movie 'Wonder Woman' at 7 pm, is it possible?",
        "Label": "BuyMovieTicket(movie_name='Wonder Woman', theater_name=GetMovieTheaters(city='San Diego'), date='today', time='7pm')",
        "Index": 77
    },
    {
        "APIs": [
            {
                "name": "BuyMovieTicket",
                "Description": "This API allows the user to purchase a movie ticket for a specific movie, theater, date, and time.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "theater_name": {
                        "description": "the name of the theater",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the movie showing",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the movie showing",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "Booking success or failure information",
                        "type": "String"
                    }
                },
                "format": "BuyMovieTicket(movie_name, theater_name, date, time) -> booking status"
            },
            {
                "name": "GetMovieTheaters",
                "Description": "This API returns a recommended movie theaters in a given city.",
                "input_params": {
                    "city": {
                        "description": "city name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "theater_name": {
                        "description": "the name of the movie theaters",
                        "type": "String"
                    }
                },
                "format": "GetMovieTheaters(city) -> theater_name"
            }
        ],
        "Query": "I'll be in Chicago next Monday and would like to book a ticket for the movie 'Joker' at 5 pm, can you assist me?",
        "Label": "BuyMovieTicket(movie_name='Joker', theater_name=GetMovieTheaters(city='Chicago'), date='next Monday', time='5pm')",
        "Index": 78
    },
    {
        "APIs": [
            {
                "name": "BuyMovieTicket",
                "Description": "This API allows the user to purchase a movie ticket for a specific movie, theater, date, and time.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "theater_name": {
                        "description": "the name of the theater",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the movie showing",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the movie showing",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "Booking success or failure information",
                        "type": "String"
                    }
                },
                "format": "BuyMovieTicket(movie_name, theater_name, date, time) -> booking status"
            },
            {
                "name": "GetMovieTheaters",
                "Description": "This API returns a recommended movie theaters in a given city.",
                "input_params": {
                    "city": {
                        "description": "city name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "theater_name": {
                        "description": "the name of the movie theaters",
                        "type": "String"
                    }
                },
                "format": "GetMovieTheaters(city) -> theater_name"
            }
        ],
        "Query": "Could you help me reserve a ticket for the movie 'The Lion King' in Miami today at 3 pm?",
        "Label": "BuyMovieTicket(movie_name='The Lion King', theater_name=GetMovieTheaters(city='Miami'), date='today', time='3pm')",
        "Index": 79
    },
    {
        "APIs": [
            {
                "name": "QueryEventTime",
                "Description": "This API is to query event time.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "time": {
                        "description": "the start time of the event",
                        "type": "Time"
                    }
                },
                "format": "QueryEvent(event_name) -> time"
            },
            {
                "name": "CreateEvent",
                "Description": "This API is to create an event in your calendar.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location of the event",
                        "type": "String"
                    },
                    "time": {
                        "description": "the start time of the event",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "event_confirmation": {
                        "description": "the confirmation of event creation",
                        "type": "String"
                    }
                },
                "format": "CreateEvent(event_name, location, time) -> event_confirmation"
            },
            {
                "name": "RemindEvent",
                "Description": "This API is to set up a reminder for the event.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    },
                    "alert_time": {
                        "description": "the time to set the reminder",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reminder_confirmation": {
                        "description": "the confirmation of reminder setup",
                        "type": "String"
                    }
                },
                "format": "RemindEvent(event_name, alert_time) -> reminder_confirmation"
            }
        ],
        "Query": "Please remind me when the event 'Meet up' starts",
        "Label": "RemindEvent(event_name='Meet up',alert_time=QueryEventTime(event_name='Meet up'))",
        "Index": 80
    },
    {
        "APIs": [
            {
                "name": "QueryEventTime",
                "Description": "This API is to query event time.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "time": {
                        "description": "the start time of the event",
                        "type": "Time"
                    }
                },
                "format": "QueryEvent(event_name) -> time"
            },
            {
                "name": "CreateEvent",
                "Description": "This API is to create an event in your calendar.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location of the event",
                        "type": "String"
                    },
                    "time": {
                        "description": "the start time of the event",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "event_confirmation": {
                        "description": "the confirmation of event creation",
                        "type": "String"
                    }
                },
                "format": "CreateEvent(event_name, location, time) -> event_confirmation"
            },
            {
                "name": "RemindEvent",
                "Description": "This API is to set up a reminder for the event.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    },
                    "alert_time": {
                        "description": "the time to set the reminder",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reminder_confirmation": {
                        "description": "the confirmation of reminder setup",
                        "type": "String"
                    }
                },
                "format": "RemindEvent(event_name, alert_time) -> reminder_confirmation"
            }
        ],
        "Query": "Can you remind me when the event 'Conference' begins",
        "Label": "RemindEvent(event_name='Conference',alert_time=QueryEventTime(event_name='Conference'))",
        "Index": 81
    },
    {
        "APIs": [
            {
                "name": "QueryEventTime",
                "Description": "This API is to query event time.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "time": {
                        "description": "the start time of the event",
                        "type": "Time"
                    }
                },
                "format": "QueryEvent(event_name) -> time"
            },
            {
                "name": "CreateEvent",
                "Description": "This API is to create an event in your calendar.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location of the event",
                        "type": "String"
                    },
                    "time": {
                        "description": "the start time of the event",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "event_confirmation": {
                        "description": "the confirmation of event creation",
                        "type": "String"
                    }
                },
                "format": "CreateEvent(event_name, location, time) -> event_confirmation"
            },
            {
                "name": "RemindEvent",
                "Description": "This API is to set up a reminder for the event.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    },
                    "alert_time": {
                        "description": "the time to set the reminder",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reminder_confirmation": {
                        "description": "the confirmation of reminder setup",
                        "type": "String"
                    }
                },
                "format": "RemindEvent(event_name, alert_time) -> reminder_confirmation"
            }
        ],
        "Query": "I would appreciate a reminder when the event 'Presentation' commences",
        "Label": "RemindEvent(event_name='Presentation',alert_time=QueryEventTime(event_name='Presentation'))",
        "Index": 82
    },
    {
        "APIs": [
            {
                "name": "QueryEventTime",
                "Description": "This API is to query event time.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "time": {
                        "description": "the start time of the event",
                        "type": "Time"
                    }
                },
                "format": "QueryEvent(event_name) -> time"
            },
            {
                "name": "CreateEvent",
                "Description": "This API is to create an event in your calendar.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location of the event",
                        "type": "String"
                    },
                    "time": {
                        "description": "the start time of the event",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "event_confirmation": {
                        "description": "the confirmation of event creation",
                        "type": "String"
                    }
                },
                "format": "CreateEvent(event_name, location, time) -> event_confirmation"
            },
            {
                "name": "RemindEvent",
                "Description": "This API is to set up a reminder for the event.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    },
                    "alert_time": {
                        "description": "the time to set the reminder",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reminder_confirmation": {
                        "description": "the confirmation of reminder setup",
                        "type": "String"
                    }
                },
                "format": "RemindEvent(event_name, alert_time) -> reminder_confirmation"
            }
        ],
        "Query": "Send me a message once the event 'Workshop' begins.",
        "Label": "RemindEvent(event_name='Workshop',alert_time=QueryEventTime(event_name='Workshop'))",
        "Index": 83
    },
    {
        "APIs": [
            {
                "name": "QueryEventTime",
                "Description": "This API is to query event time.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "time": {
                        "description": "the start time of the event",
                        "type": "Time"
                    }
                },
                "format": "QueryEvent(event_name) -> time"
            },
            {
                "name": "CreateEvent",
                "Description": "This API is to create an event in your calendar.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location of the event",
                        "type": "String"
                    },
                    "time": {
                        "description": "the start time of the event",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "event_confirmation": {
                        "description": "the confirmation of event creation",
                        "type": "String"
                    }
                },
                "format": "CreateEvent(event_name, location, time) -> event_confirmation"
            },
            {
                "name": "RemindEvent",
                "Description": "This API is to set up a reminder for the event.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    },
                    "alert_time": {
                        "description": "the time to set the reminder",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reminder_confirmation": {
                        "description": "the confirmation of reminder setup",
                        "type": "String"
                    }
                },
                "format": "RemindEvent(event_name, alert_time) -> reminder_confirmation"
            }
        ],
        "Query": "Is it possible to receive a reminder when the event 'Party' begins?",
        "Label": "RemindEvent(event_name='Party',alert_time=QueryEventTime(event_name='Party'))",
        "Index": 84
    },
    {
        "APIs": [
            {
                "name": "QueryEventTime",
                "Description": "This API is to query event time.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "time": {
                        "description": "the start time of the event",
                        "type": "Time"
                    }
                },
                "format": "QueryEvent(event_name) -> time"
            },
            {
                "name": "CreateEvent",
                "Description": "This API is to create an event in your calendar.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location of the event",
                        "type": "String"
                    },
                    "time": {
                        "description": "the start time of the event",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "event_confirmation": {
                        "description": "the confirmation of event creation",
                        "type": "String"
                    }
                },
                "format": "CreateEvent(event_name, location, time) -> event_confirmation"
            },
            {
                "name": "RemindEvent",
                "Description": "This API is to set up a reminder for the event.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    },
                    "alert_time": {
                        "description": "the time to set the reminder",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reminder_confirmation": {
                        "description": "the confirmation of reminder setup",
                        "type": "String"
                    }
                },
                "format": "RemindEvent(event_name, alert_time) -> reminder_confirmation"
            }
        ],
        "Query": "I need a reminder for when the event 'Seminar' starts.",
        "Label": "RemindEvent(event_name='Seminar',alert_time=QueryEventTime(event_name='Seminar'))",
        "Index": 85
    },
    {
        "APIs": [
            {
                "name": "QueryEventTime",
                "Description": "This API is to query event time.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "time": {
                        "description": "the start time of the event",
                        "type": "Time"
                    }
                },
                "format": "QueryEvent(event_name) -> time"
            },
            {
                "name": "CreateEvent",
                "Description": "This API is to create an event in your calendar.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location of the event",
                        "type": "String"
                    },
                    "time": {
                        "description": "the start time of the event",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "event_confirmation": {
                        "description": "the confirmation of event creation",
                        "type": "String"
                    }
                },
                "format": "CreateEvent(event_name, location, time) -> event_confirmation"
            },
            {
                "name": "RemindEvent",
                "Description": "This API is to set up a reminder for the event.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    },
                    "alert_time": {
                        "description": "the time to set the reminder",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reminder_confirmation": {
                        "description": "the confirmation of reminder setup",
                        "type": "String"
                    }
                },
                "format": "RemindEvent(event_name, alert_time) -> reminder_confirmation"
            }
        ],
        "Query": "I am interested in the event 'Lecture'. Please notify me once it begins.",
        "Label": "RemindEvent(event_name='Lecture',alert_time=QueryEventTime(event_name='Lecture'))",
        "Index": 86
    },
    {
        "APIs": [
            {
                "name": "QueryEventTime",
                "Description": "This API is to query event time.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "time": {
                        "description": "the start time of the event",
                        "type": "Time"
                    }
                },
                "format": "QueryEvent(event_name) -> time"
            },
            {
                "name": "CreateEvent",
                "Description": "This API is to create an event in your calendar.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location of the event",
                        "type": "String"
                    },
                    "time": {
                        "description": "the start time of the event",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "event_confirmation": {
                        "description": "the confirmation of event creation",
                        "type": "String"
                    }
                },
                "format": "CreateEvent(event_name, location, time) -> event_confirmation"
            },
            {
                "name": "RemindEvent",
                "Description": "This API is to set up a reminder for the event.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    },
                    "alert_time": {
                        "description": "the time to set the reminder",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reminder_confirmation": {
                        "description": "the confirmation of reminder setup",
                        "type": "String"
                    }
                },
                "format": "RemindEvent(event_name, alert_time) -> reminder_confirmation"
            }
        ],
        "Query": "I would like a reminder for when the event 'Webinar' starts.",
        "Label": "RemindEvent(event_name='Webinar',alert_time=QueryEventTime(event_name='Webinar'))",
        "Index": 87
    },
    {
        "APIs": [
            {
                "name": "QueryEventTime",
                "Description": "This API is to query event time.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "time": {
                        "description": "the start time of the event",
                        "type": "Time"
                    }
                },
                "format": "QueryEvent(event_name) -> time"
            },
            {
                "name": "CreateEvent",
                "Description": "This API is to create an event in your calendar.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location of the event",
                        "type": "String"
                    },
                    "time": {
                        "description": "the start time of the event",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "event_confirmation": {
                        "description": "the confirmation of event creation",
                        "type": "String"
                    }
                },
                "format": "CreateEvent(event_name, location, time) -> event_confirmation"
            },
            {
                "name": "RemindEvent",
                "Description": "This API is to set up a reminder for the event.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    },
                    "alert_time": {
                        "description": "the time to set the reminder",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reminder_confirmation": {
                        "description": "the confirmation of reminder setup",
                        "type": "String"
                    }
                },
                "format": "RemindEvent(event_name, alert_time) -> reminder_confirmation"
            }
        ],
        "Query": "Is it possible to receive a reminder when the event 'Meeting' starts?",
        "Label": "RemindEvent(event_name='Meeting',alert_time=QueryEventTime(event_name='Meeting'))",
        "Index": 88
    },
    {
        "APIs": [
            {
                "name": "RecommendHotel",
                "Description": "This API recommends a hotel name based on city and star level.",
                "input_params": {
                    "city": {
                        "description": "the city for hotel recommendation",
                        "type": "String"
                    },
                    "star_level": {
                        "description": "the star level of the hotel",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the recommended hotel",
                        "type": "String"
                    }
                },
                "format": "RecommendHotel(city, star_level) -> hotel_name"
            },
            {
                "name": "GetCity",
                "Description": "This API will return the city of the user based on user ID.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "the city of the user",
                        "type": "String"
                    }
                },
                "format": "GetCity(user_ID) -> city"
            },
            {
                "name": "BookHotel",
                "Description": "This API books a hotel for a certain date.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(hotel_name, date) -> booking_status"
            },
            {
                "name": "GetUserID",
                "Description": "This API retrieves the user ID by using the user name.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            }
        ],
        "Query": "Can you book a 3-star hotel for David this weekend?",
        "Label": "BookHotel(hotel_name=RecommendHotel(city=GetCity(user_ID=GetUserID(userName='David')), star_level=3), date='this weekend')",
        "Index": 89
    },
    {
        "APIs": [
            {
                "name": "RecommendHotel",
                "Description": "This API recommends a hotel name based on city and star level.",
                "input_params": {
                    "city": {
                        "description": "the city for hotel recommendation",
                        "type": "String"
                    },
                    "star_level": {
                        "description": "the star level of the hotel",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the recommended hotel",
                        "type": "String"
                    }
                },
                "format": "RecommendHotel(city, star_level) -> hotel_name"
            },
            {
                "name": "GetCity",
                "Description": "This API will return the city of the user based on user ID.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "the city of the user",
                        "type": "String"
                    }
                },
                "format": "GetCity(user_ID) -> city"
            },
            {
                "name": "BookHotel",
                "Description": "This API books a hotel for a certain date.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(hotel_name, date) -> booking_status"
            },
            {
                "name": "GetUserID",
                "Description": "This API retrieves the user ID by using the user name.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            }
        ],
        "Query": "It would be great if you can reserve a 4-star hotel for Peter next Sunday.",
        "Label": "BookHotel(hotel_name=RecommendHotel(city=GetCity(user_ID=GetUserID(userName='Peter')),star_level=4),date='next Sunday')",
        "Index": 90
    },
    {
        "APIs": [
            {
                "name": "RecommendHotel",
                "Description": "This API recommends a hotel name based on city and star level.",
                "input_params": {
                    "city": {
                        "description": "the city for hotel recommendation",
                        "type": "String"
                    },
                    "star_level": {
                        "description": "the star level of the hotel",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the recommended hotel",
                        "type": "String"
                    }
                },
                "format": "RecommendHotel(city, star_level) -> hotel_name"
            },
            {
                "name": "GetCity",
                "Description": "This API will return the city of the user based on user ID.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "the city of the user",
                        "type": "String"
                    }
                },
                "format": "GetCity(user_ID) -> city"
            },
            {
                "name": "BookHotel",
                "Description": "This API books a hotel for a certain date.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(hotel_name, date) -> booking_status"
            },
            {
                "name": "GetUserID",
                "Description": "This API retrieves the user ID by using the user name.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            }
        ],
        "Query": "Please book a 2-star hotel for James this Wednesday.",
        "Label": "BookHotel(hotel_name=RecommendHotel(city=GetCity(user_ID=GetUserID(userName='James')), star_level=2), date='this Wednesday')",
        "Index": 91
    },
    {
        "APIs": [
            {
                "name": "RecommendHotel",
                "Description": "This API recommends a hotel name based on city and star level.",
                "input_params": {
                    "city": {
                        "description": "the city for hotel recommendation",
                        "type": "String"
                    },
                    "star_level": {
                        "description": "the star level of the hotel",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the recommended hotel",
                        "type": "String"
                    }
                },
                "format": "RecommendHotel(city, star_level) -> hotel_name"
            },
            {
                "name": "GetCity",
                "Description": "This API will return the city of the user based on user ID.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "the city of the user",
                        "type": "String"
                    }
                },
                "format": "GetCity(user_ID) -> city"
            },
            {
                "name": "BookHotel",
                "Description": "This API books a hotel for a certain date.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(hotel_name, date) -> booking_status"
            },
            {
                "name": "GetUserID",
                "Description": "This API retrieves the user ID by using the user name.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            }
        ],
        "Query": "I want to reserve a 5-star hotel for Olivia on Sunday.",
        "Label": "BookHotel(hotel_name=RecommendHotel(city=GetCity(user_ID=GetUserID(userName='Olivia')), star_level=5), date='Sunday')",
        "Index": 92
    },
    {
        "APIs": [
            {
                "name": "RecommendHotel",
                "Description": "This API recommends a hotel name based on city and star level.",
                "input_params": {
                    "city": {
                        "description": "the city for hotel recommendation",
                        "type": "String"
                    },
                    "star_level": {
                        "description": "the star level of the hotel",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the recommended hotel",
                        "type": "String"
                    }
                },
                "format": "RecommendHotel(city, star_level) -> hotel_name"
            },
            {
                "name": "GetCity",
                "Description": "This API will return the city of the user based on user ID.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "the city of the user",
                        "type": "String"
                    }
                },
                "format": "GetCity(user_ID) -> city"
            },
            {
                "name": "BookHotel",
                "Description": "This API books a hotel for a certain date.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(hotel_name, date) -> booking_status"
            },
            {
                "name": "GetUserID",
                "Description": "This API retrieves the user ID by using the user name.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            }
        ],
        "Query": "My best friend Emma wants to book a 4-star hotel for next Tuesday.",
        "Label": "BookHotel(hotel_name=RecommendHotel(city=GetCity(user_ID=GetUserID(userName='Emma')), star_level=4), date='next Tuesday')",
        "Index": 93
    },
    {
        "APIs": [
            {
                "name": "RecommendHotel",
                "Description": "This API recommends a hotel name based on city and star level.",
                "input_params": {
                    "city": {
                        "description": "the city for hotel recommendation",
                        "type": "String"
                    },
                    "star_level": {
                        "description": "the star level of the hotel",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the recommended hotel",
                        "type": "String"
                    }
                },
                "format": "RecommendHotel(city, star_level) -> hotel_name"
            },
            {
                "name": "GetCity",
                "Description": "This API will return the city of the user based on user ID.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "the city of the user",
                        "type": "String"
                    }
                },
                "format": "GetCity(user_ID) -> city"
            },
            {
                "name": "BookHotel",
                "Description": "This API books a hotel for a certain date.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(hotel_name, date) -> booking_status"
            },
            {
                "name": "GetUserID",
                "Description": "This API retrieves the user ID by using the user name.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            }
        ],
        "Query": "Is it possible to reserve a 2-star hotel for William on Thursday?",
        "Label": "BookHotel(hotel_name=RecommendHotel(city=GetCity(user_ID=GetUserID(userName='William')), star_level=2), date='Thursday')",
        "Index": 94
    },
    {
        "APIs": [
            {
                "name": "SearchHotel",
                "Description": "This API searches a hotel in a given city based on user preferences.",
                "input_params": {
                    "city": {
                        "description": "the city name",
                        "type": "String"
                    },
                    "hotel_preferences": {
                        "description": "the user preferences for the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "SearchHotel(city, hotel_preferences) -> hotel_name"
            },
            {
                "name": "BookHotel",
                "Description": "This API books a preferred hotel with the given check-in and check-out dates.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "String"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(hotel_name, check_in_date, check_out_date) -> booking_status"
            }
        ],
        "Query": "I want to travel to London from 5th July to 10th July. Find me a flight and a hotel with gym facilities and book for me. Also, suggest me the best time for sightseeing as per the weather condition.",
        "Label": "BookHotel(hotel_name=SearchHotel(city='London', hotel_preferences='gym facilities'), check_in_date='5th July', check_out_date='10th July')",
        "Index": 95
    },
    {
        "APIs": [
            {
                "name": "SearchHotel",
                "Description": "This API searches a hotel in a given city based on user preferences.",
                "input_params": {
                    "city": {
                        "description": "the city name",
                        "type": "String"
                    },
                    "hotel_preferences": {
                        "description": "the user preferences for the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "SearchHotel(city, hotel_preferences) -> hotel_name"
            },
            {
                "name": "BookHotel",
                "Description": "This API books a preferred hotel with the given check-in and check-out dates.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "String"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(hotel_name, check_in_date, check_out_date) -> booking_status"
            }
        ],
        "Query": "I will travel to Los Angeles from next Monday to next Sunday. Please help me book a hotel with large bathroom.",
        "Label": "BookHotel(hotel_name=SearchHotel(city='Los Angeles', hotel_preferences='large bathroom'), check_in_date='next Monday', check_out_date='next Sunday')",
        "Index": 96
    },
    {
        "APIs": [
            {
                "name": "SearchHotel",
                "Description": "This API searches a hotel in a given city based on user preferences.",
                "input_params": {
                    "city": {
                        "description": "the city name",
                        "type": "String"
                    },
                    "hotel_preferences": {
                        "description": "the user preferences for the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "SearchHotel(city, hotel_preferences) -> hotel_name"
            },
            {
                "name": "BookHotel",
                "Description": "This API books a preferred hotel with the given check-in and check-out dates.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "String"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(hotel_name, check_in_date, check_out_date) -> booking_status"
            }
        ],
        "Query": "I am planning a trip to Paris from 8th June to 13th June. Can you help me book a hotel with a swimming pool?",
        "Label": "BookHotel(hotel_name=SearchHotel(city='Paris', hotel_preferences='swimming pool'), check_in_date='8th June', check_out_date='13th June')",
        "Index": 97
    },
    {
        "APIs": [
            {
                "name": "SearchHotel",
                "Description": "This API searches a hotel in a given city based on user preferences.",
                "input_params": {
                    "city": {
                        "description": "the city name",
                        "type": "String"
                    },
                    "hotel_preferences": {
                        "description": "the user preferences for the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "SearchHotel(city, hotel_preferences) -> hotel_name"
            },
            {
                "name": "BookHotel",
                "Description": "This API books a preferred hotel with the given check-in and check-out dates.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "String"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(hotel_name, check_in_date, check_out_date) -> booking_status"
            }
        ],
        "Query": "From 2nd May to 10th May, I will be in New York. Please help me reserve a hotel. By the way, I want it has balcony.",
        "Label": "BookHotel(hotel_name=SearchHotel(city='New York', hotel_preferences='balcony'), check_in_date='2nd May', check_out_date='10th May')",
        "Index": 98
    },
    {
        "APIs": [
            {
                "name": "SearchHotel",
                "Description": "This API searches a hotel in a given city based on user preferences.",
                "input_params": {
                    "city": {
                        "description": "the city name",
                        "type": "String"
                    },
                    "hotel_preferences": {
                        "description": "the user preferences for the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "SearchHotel(city, hotel_preferences) -> hotel_name"
            },
            {
                "name": "BookHotel",
                "Description": "This API books a preferred hotel with the given check-in and check-out dates.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "String"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(hotel_name, check_in_date, check_out_date) -> booking_status"
            }
        ],
        "Query": "I would like to book a hotel with a spa facility in Tokyo. I will be there from 15th September to 20th September.",
        "Label": "BookHotel(hotel_name=SearchHotel(city='Tokyo', hotel_preferences='spa facility'), check_in_date='15th September', check_out_date='20th September')",
        "Index": 99
    },
    {
        "APIs": [
            {
                "name": "SearchHotel",
                "Description": "This API searches a hotel in a given city based on user preferences.",
                "input_params": {
                    "city": {
                        "description": "the city name",
                        "type": "String"
                    },
                    "hotel_preferences": {
                        "description": "the user preferences for the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "SearchHotel(city, hotel_preferences) -> hotel_name"
            },
            {
                "name": "BookHotel",
                "Description": "This API books a preferred hotel with the given check-in and check-out dates.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "String"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(hotel_name, check_in_date, check_out_date) -> booking_status"
            }
        ],
        "Query": "I am planning a trip to Rome from 10th October to 15th October. Book me a hotel with a restaurant.",
        "Label": "BookHotel(hotel_name=SearchHotel(city='Rome', hotel_preferences='restaurant'), check_in_date='10th October', check_out_date='15th October')",
        "Index": 100
    },
    {
        "APIs": [
            {
                "name": "SearchHotel",
                "Description": "This API searches a hotel in a given city based on user preferences.",
                "input_params": {
                    "city": {
                        "description": "the city name",
                        "type": "String"
                    },
                    "hotel_preferences": {
                        "description": "the user preferences for the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "SearchHotel(city, hotel_preferences) -> hotel_name"
            },
            {
                "name": "BookHotel",
                "Description": "This API books a preferred hotel with the given check-in and check-out dates.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "String"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(hotel_name, check_in_date, check_out_date) -> booking_status"
            }
        ],
        "Query": "It would be perfect if you canreserve me a hotel with a fitness center in Barcelona. I think I will check in on 1st March and check out on 7th March",
        "Label": "BookHotel(hotel_name=SearchHotel(city='Barcelona', hotel_preferences='fitness center'), check_in_date='1st March', check_out_date='7th March')",
        "Index": 101
    },
    {
        "APIs": [
            {
                "name": "SearchHotel",
                "Description": "This API searches a hotel in a given city based on user preferences.",
                "input_params": {
                    "city": {
                        "description": "the city name",
                        "type": "String"
                    },
                    "hotel_preferences": {
                        "description": "the user preferences for the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "SearchHotel(city, hotel_preferences) -> hotel_name"
            },
            {
                "name": "BookHotel",
                "Description": "This API books a preferred hotel with the given check-in and check-out dates.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "String"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(hotel_name, check_in_date, check_out_date) -> booking_status"
            }
        ],
        "Query": "I want to go to Berlin from 20th November to 25th November. Reserve me a hotel with free Wi-Fi.",
        "Label": "BookHotel(hotel_name=SearchHotel(city='Berlin', hotel_preferences='free Wi-Fi'), check_in_date='20th November', check_out_date='25th November')",
        "Index": 102
    },
    {
        "APIs": [
            {
                "name": "SearchHotel",
                "Description": "This API searches a hotel in a given city based on user preferences.",
                "input_params": {
                    "city": {
                        "description": "the city name",
                        "type": "String"
                    },
                    "hotel_preferences": {
                        "description": "the user preferences for the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "SearchHotel(city, hotel_preferences) -> hotel_name"
            },
            {
                "name": "BookHotel",
                "Description": "This API books a preferred hotel with the given check-in and check-out dates.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "String"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(hotel_name, check_in_date, check_out_date) -> booking_status"
            }
        ],
        "Query": "I am planning a trip to Singapore from 5th January to 10th January. Book me a hotel with a rooftop bar.",
        "Label": "BookHotel(hotel_name=SearchHotel(city='Singapore', hotel_preferences='rooftop bar'), check_in_date='5th January', check_out_date='10th January')",
        "Index": 103
    },
    {
        "APIs": [
            {
                "name": "SearchHotel",
                "Description": "This API searches a hotel in a given city based on user preferences.",
                "input_params": {
                    "city": {
                        "description": "the city name",
                        "type": "String"
                    },
                    "hotel_preferences": {
                        "description": "the user preferences for the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "SearchHotel(city, hotel_preferences) -> hotel_name"
            },
            {
                "name": "BookHotel",
                "Description": "This API books a preferred hotel with the given check-in and check-out dates.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "String"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(hotel_name, check_in_date, check_out_date) -> booking_status"
            }
        ],
        "Query": "Could you help me book a hotel with a sea view in Miami from this Wednesday to next Monday.",
        "Label": "BookHotel(hotel_name=SearchHotel(city='Miami', hotel_preferences='sea view'), check_in_date='this Wednesday', check_out_date='next Monday')",
        "Index": 104
    },
    {
        "APIs": [
            {
                "name": "QueryEventTime",
                "Description": "This API is to query the start time of a specific event.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "start_time": {
                        "description": "the start time of the event",
                        "type": "String"
                    }
                },
                "format": "QueryEventTime(event_name) -> start_time"
            },
            {
                "name": "CalculateDistance",
                "Description": "This API is to calculate the distance between the start point and end point.",
                "input_params": {
                    "start_point": {
                        "description": "the starting point of the journey",
                        "type": "String"
                    },
                    "end_point": {
                        "description": "the ending point of the journey",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "the distance between the start point and end point",
                        "type": "Float"
                    }
                },
                "format": "CalculateDistance(start_point, end_point) -> distance"
            },
            {
                "name": "EstimateTravelTime",
                "Description": "This API is to estimate the travel time based on the distance and mode of transportation.",
                "input_params": {
                    "distance": {
                        "description": "the distance of the journey",
                        "type": "Float"
                    },
                    "mode_of_transport": {
                        "description": "the mode of transportation",
                        "type": "String"
                    }
                },
                "output_params": {
                    "time": {
                        "description": "the estimated travel time",
                        "type": "String"
                    }
                },
                "format": "EstimateTravelTime(distance, mode_of_transport) -> time"
            },
            {
                "name": "AlertBeforeDeparture",
                "Description": "This API is to calculate the time when the user needs to leave, given the event time and travel time.",
                "input_params": {
                    "event_time": {
                        "description": "the time of the event",
                        "type": "DateTime"
                    },
                    "travel_time": {
                        "description": "the estimated travel time",
                        "type": "String"
                    }
                },
                "output_params": {
                    "alert_time": {
                        "description": "the time when the user needs to leave",
                        "type": "DateTime"
                    }
                },
                "format": "AlertBeforeDeparture(event_time, travel_time) -> alert_time"
            }
        ],
        "Query": "I want to know when should I leave from King Station for a concert located at Central Park, I will drive a car.",
        "Label": "AlertBeforeDeparture(event_time=QueryEventTime(event_name='concert'),travel_time=EstimateTravelTime(distance=CalculateDistance(start_point='King Station',end_point='Central Park'),mode_of_transport='drive'))",
        "Index": 105
    },
    {
        "APIs": [
            {
                "name": "QueryEventTime",
                "Description": "This API is to query the start time of a specific event.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "start_time": {
                        "description": "the start time of the event",
                        "type": "String"
                    }
                },
                "format": "QueryEventTime(event_name) -> start_time"
            },
            {
                "name": "CalculateDistance",
                "Description": "This API is to calculate the distance between the start point and end point.",
                "input_params": {
                    "start_point": {
                        "description": "the starting point of the journey",
                        "type": "String"
                    },
                    "end_point": {
                        "description": "the ending point of the journey",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "the distance between the start point and end point",
                        "type": "Float"
                    }
                },
                "format": "CalculateDistance(start_point, end_point) -> distance"
            },
            {
                "name": "EstimateTravelTime",
                "Description": "This API is to estimate the travel time based on the distance and mode of transportation.",
                "input_params": {
                    "distance": {
                        "description": "the distance of the journey",
                        "type": "Float"
                    },
                    "mode_of_transport": {
                        "description": "the mode of transportation",
                        "type": "String"
                    }
                },
                "output_params": {
                    "time": {
                        "description": "the estimated travel time",
                        "type": "String"
                    }
                },
                "format": "EstimateTravelTime(distance, mode_of_transport) -> time"
            },
            {
                "name": "AlertBeforeDeparture",
                "Description": "This API is to calculate the time when the user needs to leave, given the event time and travel time.",
                "input_params": {
                    "event_time": {
                        "description": "the time of the event",
                        "type": "DateTime"
                    },
                    "travel_time": {
                        "description": "the estimated travel time",
                        "type": "String"
                    }
                },
                "output_params": {
                    "alert_time": {
                        "description": "the time when the user needs to leave",
                        "type": "DateTime"
                    }
                },
                "format": "AlertBeforeDeparture(event_time, travel_time) -> alert_time"
            }
        ],
        "Query": "When should I go for a meeting which is held at downtown by taxi? I am now at Power Station.",
        "Label": "AlertBeforeDeparture(event_time=QueryEventTime(event_name='meeting'),travel_time=EstimateTravelTime(distance=CalculateDistance(start_point='Power Station',end_point='downtown'),mode_of_transport='taxi'))",
        "Index": 106
    },
    {
        "APIs": [
            {
                "name": "QueryEventTime",
                "Description": "This API is to query the start time of a specific event.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "start_time": {
                        "description": "the start time of the event",
                        "type": "String"
                    }
                },
                "format": "QueryEventTime(event_name) -> start_time"
            },
            {
                "name": "CalculateDistance",
                "Description": "This API is to calculate the distance between the start point and end point.",
                "input_params": {
                    "start_point": {
                        "description": "the starting point of the journey",
                        "type": "String"
                    },
                    "end_point": {
                        "description": "the ending point of the journey",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "the distance between the start point and end point",
                        "type": "Float"
                    }
                },
                "format": "CalculateDistance(start_point, end_point) -> distance"
            },
            {
                "name": "EstimateTravelTime",
                "Description": "This API is to estimate the travel time based on the distance and mode of transportation.",
                "input_params": {
                    "distance": {
                        "description": "the distance of the journey",
                        "type": "Float"
                    },
                    "mode_of_transport": {
                        "description": "the mode of transportation",
                        "type": "String"
                    }
                },
                "output_params": {
                    "time": {
                        "description": "the estimated travel time",
                        "type": "String"
                    }
                },
                "format": "EstimateTravelTime(distance, mode_of_transport) -> time"
            },
            {
                "name": "AlertBeforeDeparture",
                "Description": "This API is to calculate the time when the user needs to leave, given the event time and travel time.",
                "input_params": {
                    "event_time": {
                        "description": "the time of the event",
                        "type": "DateTime"
                    },
                    "travel_time": {
                        "description": "the estimated travel time",
                        "type": "String"
                    }
                },
                "output_params": {
                    "alert_time": {
                        "description": "the time when the user needs to leave",
                        "type": "DateTime"
                    }
                },
                "format": "AlertBeforeDeparture(event_time, travel_time) -> alert_time"
            }
        ],
        "Query": "At what time should I leave for Music Festival. The end point is Golden Beach and I will depart from Queen Street by bike?",
        "Label": "AlertBeforeDeparture(event_time=QueryEventTime(event_name='Music Festival'),travel_time=EstimateTravelTime(distance=CalculateDistance(start_point='Queen Street',end_point='Golden Beach'),mode_of_transport='bike'))",
        "Index": 107
    },
    {
        "APIs": [
            {
                "name": "UserName2ID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(user_name) -> user_ID"
            },
            {
                "name": "BookRestaurant",
                "Description": "This API allows the user to book a specific restaurant for a certain date and time",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of restarant",
                        "type": "String"
                    },
                    "date": {
                        "description": "data",
                        "type": "String"
                    },
                    "time": {
                        "description": "time",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "Booking success or failure information",
                        "type": "String"
                    }
                },
                "format": "BookRestaurant(restaurant_name, date, time) -> booking status"
            },
            {
                "name": "RecommendRestaurant",
                "Description": "This API returns the name of a restaurant according to location and star_level",
                "input_params": {
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "Location"
                    },
                    "star_level": {
                        "description": "the star level of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RecommendRestaurant(location,star_level) -> restaurant_name"
            },
            {
                "name": "GetUserLocation",
                "Description": "This API returns the location of a certain user ID",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user, please note that it should be number, not character",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_location": {
                        "description": "the location of the user ID",
                        "type": "Location"
                    }
                },
                "format": "GetUserLocation(user_ID) -> user_location"
            },
            {
                "name": "GetRestaurantLevel",
                "Description": "This API returns the star level of a certain restaurant",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "star_level": {
                        "description": "the star level of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "GetRestaurantLevel(restaurant_name) -> star_level"
            }
        ],
        "Query": "It would be great if you can book a restaurant of star level 2 for Emily tomorrow evening, 7pm. Indian food would be great.",
        "Label": "BookRestaurant(restaurant_name=RecommendRestaurant(location=GetUserLocation(user_ID=UserName2ID(user_name='Emily')), star_level=2), date='tomorrow', time='7pm')",
        "Index": 108
    },
    {
        "APIs": [
            {
                "name": "UserName2ID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(user_name) -> user_ID"
            },
            {
                "name": "BookRestaurant",
                "Description": "This API allows the user to book a specific restaurant for a certain date and time",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of restarant",
                        "type": "String"
                    },
                    "date": {
                        "description": "data",
                        "type": "String"
                    },
                    "time": {
                        "description": "time",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "Booking success or failure information",
                        "type": "String"
                    }
                },
                "format": "BookRestaurant(restaurant_name, date, time) -> booking status"
            },
            {
                "name": "RecommendRestaurant",
                "Description": "This API returns the name of a restaurant according to location and star_level",
                "input_params": {
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "Location"
                    },
                    "star_level": {
                        "description": "the star level of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RecommendRestaurant(location,star_level) -> restaurant_name"
            },
            {
                "name": "GetUserLocation",
                "Description": "This API returns the location of a certain user ID",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user, please note that it should be number, not character",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_location": {
                        "description": "the location of the user ID",
                        "type": "Location"
                    }
                },
                "format": "GetUserLocation(user_ID) -> user_location"
            },
            {
                "name": "GetRestaurantLevel",
                "Description": "This API returns the star level of a certain restaurant",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "star_level": {
                        "description": "the star level of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "GetRestaurantLevel(restaurant_name) -> star_level"
            }
        ],
        "Query": "Can you make a reservation at a restaurant with 3 stars for John this Saturday, 8pm? He prefers Chinese cuisine.",
        "Label": "BookRestaurant(restaurant_name=RecommendRestaurant(location=GetUserLocation(user_ID=UserName2ID(user_name='John')), star_level=3), date='Saturday', time='8pm')",
        "Index": 109
    },
    {
        "APIs": [
            {
                "name": "UserName2ID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(user_name) -> user_ID"
            },
            {
                "name": "BookRestaurant",
                "Description": "This API allows the user to book a specific restaurant for a certain date and time",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of restarant",
                        "type": "String"
                    },
                    "date": {
                        "description": "data",
                        "type": "String"
                    },
                    "time": {
                        "description": "time",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "Booking success or failure information",
                        "type": "String"
                    }
                },
                "format": "BookRestaurant(restaurant_name, date, time) -> booking status"
            },
            {
                "name": "RecommendRestaurant",
                "Description": "This API returns the name of a restaurant according to location and star_level",
                "input_params": {
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "Location"
                    },
                    "star_level": {
                        "description": "the star level of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RecommendRestaurant(location,star_level) -> restaurant_name"
            },
            {
                "name": "GetUserLocation",
                "Description": "This API returns the location of a certain user ID",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user, please note that it should be number, not character",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_location": {
                        "description": "the location of the user ID",
                        "type": "Location"
                    }
                },
                "format": "GetUserLocation(user_ID) -> user_location"
            },
            {
                "name": "GetRestaurantLevel",
                "Description": "This API returns the star level of a certain restaurant",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "star_level": {
                        "description": "the star level of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "GetRestaurantLevel(restaurant_name) -> star_level"
            }
        ],
        "Query": "I would appreciate it if you could help me reserve a restaurant with a 5-star rating for Sarah next Wednesday, 7pm.",
        "Label": "BookRestaurant(restaurant_name=RecommendRestaurant(location=GetUserLocation(user_ID=UserName2ID(user_name='Sarah')), star_level=5), date='next Wednesday', time='7pm')",
        "Index": 110
    },
    {
        "APIs": [
            {
                "name": "UserName2ID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(user_name) -> user_ID"
            },
            {
                "name": "BookRestaurant",
                "Description": "This API allows the user to book a specific restaurant for a certain date and time",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of restarant",
                        "type": "String"
                    },
                    "date": {
                        "description": "data",
                        "type": "String"
                    },
                    "time": {
                        "description": "time",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "Booking success or failure information",
                        "type": "String"
                    }
                },
                "format": "BookRestaurant(restaurant_name, date, time) -> booking status"
            },
            {
                "name": "RecommendRestaurant",
                "Description": "This API returns the name of a restaurant according to location and star_level",
                "input_params": {
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "Location"
                    },
                    "star_level": {
                        "description": "the star level of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RecommendRestaurant(location,star_level) -> restaurant_name"
            },
            {
                "name": "GetUserLocation",
                "Description": "This API returns the location of a certain user ID",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user, please note that it should be number, not character",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_location": {
                        "description": "the location of the user ID",
                        "type": "Location"
                    }
                },
                "format": "GetUserLocation(user_ID) -> user_location"
            },
            {
                "name": "GetRestaurantLevel",
                "Description": "This API returns the star level of a certain restaurant",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "star_level": {
                        "description": "the star level of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "GetRestaurantLevel(restaurant_name) -> star_level"
            }
        ],
        "Query": "Is it possible to book a restaurant with 4 stars for Michael this Sunday, 6:30pm? He enjoys Japanese cuisine.",
        "Label": "BookRestaurant(restaurant_name=RecommendRestaurant(location=GetUserLocation(user_ID=UserName2ID(user_name='Michael')), star_level=4), date='Sunday', time='6:30pm')",
        "Index": 111
    },
    {
        "APIs": [
            {
                "name": "UserName2ID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(user_name) -> user_ID"
            },
            {
                "name": "BookRestaurant",
                "Description": "This API allows the user to book a specific restaurant for a certain date and time",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of restarant",
                        "type": "String"
                    },
                    "date": {
                        "description": "data",
                        "type": "String"
                    },
                    "time": {
                        "description": "time",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "Booking success or failure information",
                        "type": "String"
                    }
                },
                "format": "BookRestaurant(restaurant_name, date, time) -> booking status"
            },
            {
                "name": "RecommendRestaurant",
                "Description": "This API returns the name of a restaurant according to location and star_level",
                "input_params": {
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "Location"
                    },
                    "star_level": {
                        "description": "the star level of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RecommendRestaurant(location,star_level) -> restaurant_name"
            },
            {
                "name": "GetUserLocation",
                "Description": "This API returns the location of a certain user ID",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user, please note that it should be number, not character",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_location": {
                        "description": "the location of the user ID",
                        "type": "Location"
                    }
                },
                "format": "GetUserLocation(user_ID) -> user_location"
            },
            {
                "name": "GetRestaurantLevel",
                "Description": "This API returns the star level of a certain restaurant",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "star_level": {
                        "description": "the star level of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "GetRestaurantLevel(restaurant_name) -> star_level"
            }
        ],
        "Query": "Can you help me book a restaurant of 4-star rating for Olivia this Saturday, 7:30pm? She enjoys Indian cuisine.",
        "Label": "BookRestaurant(restaurant_name=RecommendRestaurant(location=GetUserLocation(user_ID=UserName2ID(user_name='Olivia')), star_level=4), date='Saturday', time='7:30pm')",
        "Index": 112
    },
    {
        "APIs": [
            {
                "name": "UserName2ID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(user_name) -> user_ID"
            },
            {
                "name": "BookRestaurant",
                "Description": "This API allows the user to book a specific restaurant for a certain date and time",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of restarant",
                        "type": "String"
                    },
                    "date": {
                        "description": "data",
                        "type": "String"
                    },
                    "time": {
                        "description": "time",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "Booking success or failure information",
                        "type": "String"
                    }
                },
                "format": "BookRestaurant(restaurant_name, date, time) -> booking status"
            },
            {
                "name": "RecommendRestaurant",
                "Description": "This API returns the name of a restaurant according to location and star_level",
                "input_params": {
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "Location"
                    },
                    "star_level": {
                        "description": "the star level of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RecommendRestaurant(location,star_level) -> restaurant_name"
            },
            {
                "name": "GetUserLocation",
                "Description": "This API returns the location of a certain user ID",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user, please note that it should be number, not character",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_location": {
                        "description": "the location of the user ID",
                        "type": "Location"
                    }
                },
                "format": "GetUserLocation(user_ID) -> user_location"
            },
            {
                "name": "GetRestaurantLevel",
                "Description": "This API returns the star level of a certain restaurant",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "star_level": {
                        "description": "the star level of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "GetRestaurantLevel(restaurant_name) -> star_level"
            }
        ],
        "Query": "Would you mind helping me book a restaurant with 2-star rating this Monday, 7pm? The reserver is Ava and she likes Mexican food.",
        "Label": "BookRestaurant(restaurant_name=RecommendRestaurant(location=GetUserLocation(user_ID=UserName2ID(user_name='Ava')), star_level=2), date='Monday', time='7pm')",
        "Index": 113
    },
    {
        "APIs": [
            {
                "name": "SearchFlight",
                "Description": "This API generates flight details from one location to another at a specified date.",
                "input_params": {
                    "from_location": {
                        "description": "the location from where the flight will depart",
                        "type": "String"
                    },
                    "to_location": {
                        "description": "the location where the flight will arrive",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_details": {
                        "description": "the details of the flight",
                        "type": "String"
                    }
                },
                "format": "SearchFlight(from_location, to_location, date) -> flight_details"
            },
            {
                "name": "GetUserPreference",
                "Description": "This API returns a user's preferred flight class, e.g., economy, business.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "preferred_flight_class": {
                        "description": "the preferred flight class of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserPreference(user_ID) -> preferred_flight_class"
            },
            {
                "name": "BookFlight",
                "Description": "This API books a flight using the flight details and the user's preferred flight class.",
                "input_params": {
                    "flight_details": {
                        "description": "the details of the flight",
                        "type": "String"
                    },
                    "preferred_flight_class": {
                        "description": "the preferred flight class of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_details, preferred_flight_class) -> booking_status"
            }
        ],
        "Query": "Please book me a flight from Seattle to Boston in economy class on the 15th.",
        "Label": "BookFlight(flight_details=SearchFlight(from_location='Seattle', to_location='Boston', date='on the 15th'), preferred_flight_class='economy class')",
        "Index": 114
    },
    {
        "APIs": [
            {
                "name": "SearchFlight",
                "Description": "This API generates flight details from one location to another at a specified date.",
                "input_params": {
                    "from_location": {
                        "description": "the location from where the flight will depart",
                        "type": "String"
                    },
                    "to_location": {
                        "description": "the location where the flight will arrive",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_details": {
                        "description": "the details of the flight",
                        "type": "String"
                    }
                },
                "format": "SearchFlight(from_location, to_location, date) -> flight_details"
            },
            {
                "name": "GetUserPreference",
                "Description": "This API returns a user's preferred flight class, e.g., economy, business.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "preferred_flight_class": {
                        "description": "the preferred flight class of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserPreference(user_ID) -> preferred_flight_class"
            },
            {
                "name": "BookFlight",
                "Description": "This API books a flight using the flight details and the user's preferred flight class.",
                "input_params": {
                    "flight_details": {
                        "description": "the details of the flight",
                        "type": "String"
                    },
                    "preferred_flight_class": {
                        "description": "the preferred flight class of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_details, preferred_flight_class) -> booking_status"
            }
        ],
        "Query": "I want to fly business class from Houston to Atlanta on May 1st.",
        "Label": "BookFlight(flight_details=SearchFlight(from_location='Houston', to_location='Atlanta', date='May 1st'), preferred_flight_class='business class')",
        "Index": 115
    },
    {
        "APIs": [
            {
                "name": "MusicGenre2Artist",
                "Description": "This API is to convert music genre to artist's name.",
                "input_params": {
                    "music_genre": {
                        "description": "the genre of the music",
                        "type": "String"
                    }
                },
                "output_params": {
                    "artist_name": {
                        "description": "the name of the artist",
                        "type": "String"
                    }
                },
                "format": "MusicGenre2Artist(music_genre) -> artist_name"
            },
            {
                "name": "PlayMusic",
                "Description": "This API allows the user to play music.",
                "input_params": {
                    "song_title": {
                        "description": "the title of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "music_status": {
                        "description": "the status of the music playing",
                        "type": "String"
                    }
                },
                "format": "PlayMusic(song_title) -> music_status"
            },
            {
                "name": "RecommendSong",
                "Description": "This API returns the title of a song according to user's mood.",
                "input_params": {
                    "user_mood": {
                        "description": "the mood of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song_title": {
                        "description": "the title of the recommended song",
                        "type": "String"
                    }
                },
                "format": "RecommendSong(user_mood) -> song_title"
            },
            {
                "name": "GetUserMood",
                "Description": "This API returns the mood of a certain user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_mood": {
                        "description": "the mood of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserMood(user_name) -> user_mood"
            }
        ],
        "Query": "I'm Mary, Could you play a song that fits my current mood?",
        "Label": "PlayMusic(song_title=RecommendSong(user_mood=GetUserMood(user_name='Mary')))",
        "Index": 116
    },
    {
        "APIs": [
            {
                "name": "MusicGenre2Artist",
                "Description": "This API is to convert music genre to artist's name.",
                "input_params": {
                    "music_genre": {
                        "description": "the genre of the music",
                        "type": "String"
                    }
                },
                "output_params": {
                    "artist_name": {
                        "description": "the name of the artist",
                        "type": "String"
                    }
                },
                "format": "MusicGenre2Artist(music_genre) -> artist_name"
            },
            {
                "name": "PlayMusic",
                "Description": "This API allows the user to play music.",
                "input_params": {
                    "song_title": {
                        "description": "the title of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "music_status": {
                        "description": "the status of the music playing",
                        "type": "String"
                    }
                },
                "format": "PlayMusic(song_title) -> music_status"
            },
            {
                "name": "RecommendSong",
                "Description": "This API returns the title of a song according to user's mood.",
                "input_params": {
                    "user_mood": {
                        "description": "the mood of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song_title": {
                        "description": "the title of the recommended song",
                        "type": "String"
                    }
                },
                "format": "RecommendSong(user_mood) -> song_title"
            },
            {
                "name": "GetUserMood",
                "Description": "This API returns the mood of a certain user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_mood": {
                        "description": "the mood of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserMood(user_name) -> user_mood"
            }
        ],
        "Query": "As Peter, I want to listen to a song that matches my current feelings.",
        "Label": "PlayMusic(song_title=RecommendSong(user_mood=GetUserMood(user_name='Peter')))",
        "Index": 117
    },
    {
        "APIs": [
            {
                "name": "MusicGenre2Artist",
                "Description": "This API is to convert music genre to artist's name.",
                "input_params": {
                    "music_genre": {
                        "description": "the genre of the music",
                        "type": "String"
                    }
                },
                "output_params": {
                    "artist_name": {
                        "description": "the name of the artist",
                        "type": "String"
                    }
                },
                "format": "MusicGenre2Artist(music_genre) -> artist_name"
            },
            {
                "name": "PlayMusic",
                "Description": "This API allows the user to play music.",
                "input_params": {
                    "song_title": {
                        "description": "the title of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "music_status": {
                        "description": "the status of the music playing",
                        "type": "String"
                    }
                },
                "format": "PlayMusic(song_title) -> music_status"
            },
            {
                "name": "RecommendSong",
                "Description": "This API returns the title of a song according to user's mood.",
                "input_params": {
                    "user_mood": {
                        "description": "the mood of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song_title": {
                        "description": "the title of the recommended song",
                        "type": "String"
                    }
                },
                "format": "RecommendSong(user_mood) -> song_title"
            },
            {
                "name": "GetUserMood",
                "Description": "This API returns the mood of a certain user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_mood": {
                        "description": "the mood of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserMood(user_name) -> user_mood"
            }
        ],
        "Query": "It will be perfect if you play music that matches my mood. This is Anna.",
        "Label": "PlayMusic(song_title=RecommendSong(user_mood=GetUserMood(user_name='Anna')))",
        "Index": 118
    },
    {
        "APIs": [
            {
                "name": "MusicGenre2Artist",
                "Description": "This API is to convert music genre to artist's name.",
                "input_params": {
                    "music_genre": {
                        "description": "the genre of the music",
                        "type": "String"
                    }
                },
                "output_params": {
                    "artist_name": {
                        "description": "the name of the artist",
                        "type": "String"
                    }
                },
                "format": "MusicGenre2Artist(music_genre) -> artist_name"
            },
            {
                "name": "PlayMusic",
                "Description": "This API allows the user to play music.",
                "input_params": {
                    "song_title": {
                        "description": "the title of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "music_status": {
                        "description": "the status of the music playing",
                        "type": "String"
                    }
                },
                "format": "PlayMusic(song_title) -> music_status"
            },
            {
                "name": "RecommendSong",
                "Description": "This API returns the title of a song according to user's mood.",
                "input_params": {
                    "user_mood": {
                        "description": "the mood of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song_title": {
                        "description": "the title of the recommended song",
                        "type": "String"
                    }
                },
                "format": "RecommendSong(user_mood) -> song_title"
            },
            {
                "name": "GetUserMood",
                "Description": "This API returns the mood of a certain user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_mood": {
                        "description": "the mood of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserMood(user_name) -> user_mood"
            }
        ],
        "Query": "I'm Lisa, can you play a tune that corresponds to my mood?",
        "Label": "PlayMusic(song_title=RecommendSong(user_mood=GetUserMood(user_name='Lisa')))",
        "Index": 119
    },
    {
        "APIs": [
            {
                "name": "MusicGenre2Artist",
                "Description": "This API is to convert music genre to artist's name.",
                "input_params": {
                    "music_genre": {
                        "description": "the genre of the music",
                        "type": "String"
                    }
                },
                "output_params": {
                    "artist_name": {
                        "description": "the name of the artist",
                        "type": "String"
                    }
                },
                "format": "MusicGenre2Artist(music_genre) -> artist_name"
            },
            {
                "name": "PlayMusic",
                "Description": "This API allows the user to play music.",
                "input_params": {
                    "song_title": {
                        "description": "the title of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "music_status": {
                        "description": "the status of the music playing",
                        "type": "String"
                    }
                },
                "format": "PlayMusic(song_title) -> music_status"
            },
            {
                "name": "RecommendSong",
                "Description": "This API returns the title of a song according to user's mood.",
                "input_params": {
                    "user_mood": {
                        "description": "the mood of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song_title": {
                        "description": "the title of the recommended song",
                        "type": "String"
                    }
                },
                "format": "RecommendSong(user_mood) -> song_title"
            },
            {
                "name": "GetUserMood",
                "Description": "This API returns the mood of a certain user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_mood": {
                        "description": "the mood of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserMood(user_name) -> user_mood"
            }
        ],
        "Query": "I'm Tom, can you play a song that aligns with my present mood?",
        "Label": "PlayMusic(song_title=RecommendSong(user_mood=GetUserMood(user_name='Tom')))",
        "Index": 120
    },
    {
        "APIs": [
            {
                "name": "MusicGenre2Artist",
                "Description": "This API is to convert music genre to artist's name.",
                "input_params": {
                    "music_genre": {
                        "description": "the genre of the music",
                        "type": "String"
                    }
                },
                "output_params": {
                    "artist_name": {
                        "description": "the name of the artist",
                        "type": "String"
                    }
                },
                "format": "MusicGenre2Artist(music_genre) -> artist_name"
            },
            {
                "name": "PlayMusic",
                "Description": "This API allows the user to play music.",
                "input_params": {
                    "song_title": {
                        "description": "the title of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "music_status": {
                        "description": "the status of the music playing",
                        "type": "String"
                    }
                },
                "format": "PlayMusic(song_title) -> music_status"
            },
            {
                "name": "RecommendSong",
                "Description": "This API returns the title of a song according to user's mood.",
                "input_params": {
                    "user_mood": {
                        "description": "the mood of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song_title": {
                        "description": "the title of the recommended song",
                        "type": "String"
                    }
                },
                "format": "RecommendSong(user_mood) -> song_title"
            },
            {
                "name": "GetUserMood",
                "Description": "This API returns the mood of a certain user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_mood": {
                        "description": "the mood of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserMood(user_name) -> user_mood"
            }
        ],
        "Query": "Could you recommend a song for Emily?",
        "Label": "RecommendSong(user_mood=GetUserMood(user_name='Emily'))",
        "Index": 121
    },
    {
        "APIs": [
            {
                "name": "MusicGenre2Artist",
                "Description": "This API is to convert music genre to artist's name.",
                "input_params": {
                    "music_genre": {
                        "description": "the genre of the music",
                        "type": "String"
                    }
                },
                "output_params": {
                    "artist_name": {
                        "description": "the name of the artist",
                        "type": "String"
                    }
                },
                "format": "MusicGenre2Artist(music_genre) -> artist_name"
            },
            {
                "name": "PlayMusic",
                "Description": "This API allows the user to play music.",
                "input_params": {
                    "song_title": {
                        "description": "the title of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "music_status": {
                        "description": "the status of the music playing",
                        "type": "String"
                    }
                },
                "format": "PlayMusic(song_title) -> music_status"
            },
            {
                "name": "RecommendSong",
                "Description": "This API returns the title of a song according to user's mood.",
                "input_params": {
                    "user_mood": {
                        "description": "the mood of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song_title": {
                        "description": "the title of the recommended song",
                        "type": "String"
                    }
                },
                "format": "RecommendSong(user_mood) -> song_title"
            },
            {
                "name": "GetUserMood",
                "Description": "This API returns the mood of a certain user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_mood": {
                        "description": "the mood of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserMood(user_name) -> user_mood"
            }
        ],
        "Query": "I'm Michael, can you play music that suits my mood?",
        "Label": "PlayMusic(song_title=RecommendSong(user_mood=GetUserMood(user_name='Michael')))",
        "Index": 122
    },
    {
        "APIs": [
            {
                "name": "MusicGenre2Artist",
                "Description": "This API is to convert music genre to artist's name.",
                "input_params": {
                    "music_genre": {
                        "description": "the genre of the music",
                        "type": "String"
                    }
                },
                "output_params": {
                    "artist_name": {
                        "description": "the name of the artist",
                        "type": "String"
                    }
                },
                "format": "MusicGenre2Artist(music_genre) -> artist_name"
            },
            {
                "name": "PlayMusic",
                "Description": "This API allows the user to play music.",
                "input_params": {
                    "song_title": {
                        "description": "the title of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "music_status": {
                        "description": "the status of the music playing",
                        "type": "String"
                    }
                },
                "format": "PlayMusic(song_title) -> music_status"
            },
            {
                "name": "RecommendSong",
                "Description": "This API returns the title of a song according to user's mood.",
                "input_params": {
                    "user_mood": {
                        "description": "the mood of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song_title": {
                        "description": "the title of the recommended song",
                        "type": "String"
                    }
                },
                "format": "RecommendSong(user_mood) -> song_title"
            },
            {
                "name": "GetUserMood",
                "Description": "This API returns the mood of a certain user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_mood": {
                        "description": "the mood of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserMood(user_name) -> user_mood"
            }
        ],
        "Query": "My name is Sarah, can you play a song that matches my current mood?",
        "Label": "PlayMusic(song_title=RecommendSong(user_mood=GetUserMood(user_name='Sarah')))",
        "Index": 123
    },
    {
        "APIs": [
            {
                "name": "MusicGenre2Artist",
                "Description": "This API is to convert music genre to artist's name.",
                "input_params": {
                    "music_genre": {
                        "description": "the genre of the music",
                        "type": "String"
                    }
                },
                "output_params": {
                    "artist_name": {
                        "description": "the name of the artist",
                        "type": "String"
                    }
                },
                "format": "MusicGenre2Artist(music_genre) -> artist_name"
            },
            {
                "name": "PlayMusic",
                "Description": "This API allows the user to play music.",
                "input_params": {
                    "song_title": {
                        "description": "the title of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "music_status": {
                        "description": "the status of the music playing",
                        "type": "String"
                    }
                },
                "format": "PlayMusic(song_title) -> music_status"
            },
            {
                "name": "RecommendSong",
                "Description": "This API returns the title of a song according to user's mood.",
                "input_params": {
                    "user_mood": {
                        "description": "the mood of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song_title": {
                        "description": "the title of the recommended song",
                        "type": "String"
                    }
                },
                "format": "RecommendSong(user_mood) -> song_title"
            },
            {
                "name": "GetUserMood",
                "Description": "This API returns the mood of a certain user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_mood": {
                        "description": "the mood of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserMood(user_name) -> user_mood"
            }
        ],
        "Query": "I'm Jack, could you suggest a song for my current mood?",
        "Label": "RecommendSong(user_mood=GetUserMood(user_name='Jack'))",
        "Index": 124
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API retrieves the weather information for a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather information",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "RecommendClothing",
                "Description": "This API suggests clothing items to wear based on the current weather.",
                "input_params": {
                    "weather": {
                        "description": "the current weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothingItems": {
                        "description": "the suggested clothing items",
                        "type": "List"
                    }
                },
                "format": "RecommendClothing(weather) -> clothingItems"
            },
            {
                "name": "GetStore",
                "Description": "This API finds stores where a certain clothing item is available in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "clothingItem": {
                        "description": "the clothing item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "storeName": {
                        "description": "the name of the store",
                        "type": "String"
                    }
                },
                "format": "GetStore(city, clothingItem) -> storeName"
            },
            {
                "name": "BuyClothing",
                "Description": "This API is to purchase a clothing item from a certain store.",
                "input_params": {
                    "storeName": {
                        "description": "the name of the store",
                        "type": "String"
                    },
                    "clothingItem": {
                        "description": "the clothing item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "purchaseStatus": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "BuyClothing(storeName, clothingItem) -> purchaseStatus"
            }
        ],
        "Query": "I'm in London and it's cold. I want to buy a piece of clothing that is suitable for the current weather.",
        "Label": "BuyClothing(storeName=GetStore(city='London', clothingItem=RecommendClothing(weather=GetWeather(city='London'))), clothingItem=RecommendClothing(weather=GetWeather(city='London')))",
        "Index": 125
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API retrieves the weather information for a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather information",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "RecommendClothing",
                "Description": "This API suggests clothing items to wear based on the current weather.",
                "input_params": {
                    "weather": {
                        "description": "the current weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothingItems": {
                        "description": "the suggested clothing items",
                        "type": "List"
                    }
                },
                "format": "RecommendClothing(weather) -> clothingItems"
            },
            {
                "name": "GetStore",
                "Description": "This API finds stores where a certain clothing item is available in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "clothingItem": {
                        "description": "the clothing item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "storeName": {
                        "description": "the name of the store",
                        "type": "String"
                    }
                },
                "format": "GetStore(city, clothingItem) -> storeName"
            },
            {
                "name": "BuyClothing",
                "Description": "This API is to purchase a clothing item from a certain store.",
                "input_params": {
                    "storeName": {
                        "description": "the name of the store",
                        "type": "String"
                    },
                    "clothingItem": {
                        "description": "the clothing item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "purchaseStatus": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "BuyClothing(storeName, clothingItem) -> purchaseStatus"
            }
        ],
        "Query": "I want to purchase apparel that is fit for the weather in Madrid.",
        "Label": "BuyClothing(storeName=GetStore(city='Madrid', clothingItem=RecommendClothing(weather=GetWeather(city='Madrid'))), clothingItem=RecommendClothing(weather=GetWeather(city='Madrid')))",
        "Index": 126
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API retrieves the weather information for a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather information",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "RecommendClothing",
                "Description": "This API suggests clothing items to wear based on the current weather.",
                "input_params": {
                    "weather": {
                        "description": "the current weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothingItems": {
                        "description": "the suggested clothing items",
                        "type": "List"
                    }
                },
                "format": "RecommendClothing(weather) -> clothingItems"
            },
            {
                "name": "GetStore",
                "Description": "This API finds stores where a certain clothing item is available in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "clothingItem": {
                        "description": "the clothing item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "storeName": {
                        "description": "the name of the store",
                        "type": "String"
                    }
                },
                "format": "GetStore(city, clothingItem) -> storeName"
            },
            {
                "name": "BuyClothing",
                "Description": "This API is to purchase a clothing item from a certain store.",
                "input_params": {
                    "storeName": {
                        "description": "the name of the store",
                        "type": "String"
                    },
                    "clothingItem": {
                        "description": "the clothing item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "purchaseStatus": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "BuyClothing(storeName, clothingItem) -> purchaseStatus"
            }
        ],
        "Query": "Is it possible for you to help me buy some clothes that matches the weather in Tokyo.",
        "Label": "BuyClothing(storeName=GetStore(city='Tokyo', clothingItem=RecommendClothing(weather=GetWeather(city='Tokyo'))), clothingItem=RecommendClothing(weather=GetWeather(city='Tokyo')))",
        "Index": 127
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API retrieves the weather information for a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather information",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "RecommendClothing",
                "Description": "This API suggests clothing items to wear based on the current weather.",
                "input_params": {
                    "weather": {
                        "description": "the current weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothingItems": {
                        "description": "the suggested clothing items",
                        "type": "List"
                    }
                },
                "format": "RecommendClothing(weather) -> clothingItems"
            },
            {
                "name": "GetStore",
                "Description": "This API finds stores where a certain clothing item is available in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "clothingItem": {
                        "description": "the clothing item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "storeName": {
                        "description": "the name of the store",
                        "type": "String"
                    }
                },
                "format": "GetStore(city, clothingItem) -> storeName"
            },
            {
                "name": "BuyClothing",
                "Description": "This API is to purchase a clothing item from a certain store.",
                "input_params": {
                    "storeName": {
                        "description": "the name of the store",
                        "type": "String"
                    },
                    "clothingItem": {
                        "description": "the clothing item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "purchaseStatus": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "BuyClothing(storeName, clothingItem) -> purchaseStatus"
            }
        ],
        "Query": "I am currently in New York and it's raining. I need to buy clothing that matches the weather.",
        "Label": "BuyClothing(storeName=GetStore(city='New York', clothingItem=RecommendClothing(weather=GetWeather(city='New York'))), clothingItem=RecommendClothing(weather=GetWeather(city='New York')))",
        "Index": 128
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API retrieves the weather information for a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather information",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "RecommendClothing",
                "Description": "This API suggests clothing items to wear based on the current weather.",
                "input_params": {
                    "weather": {
                        "description": "the current weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothingItems": {
                        "description": "the suggested clothing items",
                        "type": "List"
                    }
                },
                "format": "RecommendClothing(weather) -> clothingItems"
            },
            {
                "name": "GetStore",
                "Description": "This API finds stores where a certain clothing item is available in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "clothingItem": {
                        "description": "the clothing item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "storeName": {
                        "description": "the name of the store",
                        "type": "String"
                    }
                },
                "format": "GetStore(city, clothingItem) -> storeName"
            },
            {
                "name": "BuyClothing",
                "Description": "This API is to purchase a clothing item from a certain store.",
                "input_params": {
                    "storeName": {
                        "description": "the name of the store",
                        "type": "String"
                    },
                    "clothingItem": {
                        "description": "the clothing item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "purchaseStatus": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "BuyClothing(storeName, clothingItem) -> purchaseStatus"
            }
        ],
        "Query": "Hi there, it is so windy. I need to purchase a suitable outfit for the weather in Rome.",
        "Label": "BuyClothing(storeName=GetStore(city='Rome', clothingItem=RecommendClothing(weather=GetWeather(city='Rome'))), clothingItem=RecommendClothing(weather=GetWeather(city='Rome')))",
        "Index": 129
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API retrieves the weather information for a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather information",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "RecommendClothing",
                "Description": "This API suggests clothing items to wear based on the current weather.",
                "input_params": {
                    "weather": {
                        "description": "the current weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothingItems": {
                        "description": "the suggested clothing items",
                        "type": "List"
                    }
                },
                "format": "RecommendClothing(weather) -> clothingItems"
            },
            {
                "name": "GetStore",
                "Description": "This API finds stores where a certain clothing item is available in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "clothingItem": {
                        "description": "the clothing item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "storeName": {
                        "description": "the name of the store",
                        "type": "String"
                    }
                },
                "format": "GetStore(city, clothingItem) -> storeName"
            },
            {
                "name": "BuyClothing",
                "Description": "This API is to purchase a clothing item from a certain store.",
                "input_params": {
                    "storeName": {
                        "description": "the name of the store",
                        "type": "String"
                    },
                    "clothingItem": {
                        "description": "the clothing item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "purchaseStatus": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "BuyClothing(storeName, clothingItem) -> purchaseStatus"
            }
        ],
        "Query": "I'm currently in Sydney and it's humid. I need to buy clothing that suits the weather.",
        "Label": "BuyClothing(storeName=GetStore(city='Sydney', clothingItem=RecommendClothing(weather=GetWeather(city='Sydney'))), clothingItem=RecommendClothing(weather=GetWeather(city='Sydney')))",
        "Index": 130
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API retrieves the weather information for a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather information",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "RecommendClothing",
                "Description": "This API suggests clothing items to wear based on the current weather.",
                "input_params": {
                    "weather": {
                        "description": "the current weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothingItems": {
                        "description": "the suggested clothing items",
                        "type": "List"
                    }
                },
                "format": "RecommendClothing(weather) -> clothingItems"
            },
            {
                "name": "GetStore",
                "Description": "This API finds stores where a certain clothing item is available in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "clothingItem": {
                        "description": "the clothing item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "storeName": {
                        "description": "the name of the store",
                        "type": "String"
                    }
                },
                "format": "GetStore(city, clothingItem) -> storeName"
            },
            {
                "name": "BuyClothing",
                "Description": "This API is to purchase a clothing item from a certain store.",
                "input_params": {
                    "storeName": {
                        "description": "the name of the store",
                        "type": "String"
                    },
                    "clothingItem": {
                        "description": "the clothing item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "purchaseStatus": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "BuyClothing(storeName, clothingItem) -> purchaseStatus"
            }
        ],
        "Query": "Can you suggest what clothings to buy? I'm in Beijing and it's sunny.",
        "Label": "BuyClothing(storeName=GetStore(city='Beijing', clothingItem=RecommendClothing(weather=GetWeather(city='Beijing'))), clothingItem=RecommendClothing(weather=GetWeather(city='Beijing')))",
        "Index": 131
    },
    {
        "APIs": [
            {
                "name": "FindNearestStore",
                "Description": "This API is to find the nearest store based on user location and the preferred product type.",
                "input_params": {
                    "city": {
                        "description": "the city where the user is located",
                        "type": "String"
                    },
                    "store_type": {
                        "description": "the preferred store type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_name": {
                        "description": "the name of the nearest store",
                        "type": "String"
                    }
                },
                "format": "FindNearestStore(city, store_type) -> store_name"
            },
            {
                "name": "GetProductPrice",
                "Description": "This API is to get the price of a specific product in a given store.",
                "input_params": {
                    "store_name": {
                        "description": "the name of the store",
                        "type": "String"
                    },
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "price": {
                        "description": "the price of the product",
                        "type": "Float"
                    }
                },
                "format": "GetProductPrice(store_name, product_name) -> price"
            }
        ],
        "Query": "Can you help me find the price for fresh apples at the closest grocery store in Boston?",
        "Label": "GetProductPrice(store_name=FindNearestStore(city='Boston', store_type='grocery'), product_name='fresh apples')",
        "Index": 132
    },
    {
        "APIs": [
            {
                "name": "FindNearestStore",
                "Description": "This API is to find the nearest store based on user location and the preferred product type.",
                "input_params": {
                    "city": {
                        "description": "the city where the user is located",
                        "type": "String"
                    },
                    "store_type": {
                        "description": "the preferred store type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_name": {
                        "description": "the name of the nearest store",
                        "type": "String"
                    }
                },
                "format": "FindNearestStore(city, store_type) -> store_name"
            },
            {
                "name": "GetProductPrice",
                "Description": "This API is to get the price of a specific product in a given store.",
                "input_params": {
                    "store_name": {
                        "description": "the name of the store",
                        "type": "String"
                    },
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "price": {
                        "description": "the price of the product",
                        "type": "Float"
                    }
                },
                "format": "GetProductPrice(store_name, product_name) -> price"
            }
        ],
        "Query": "Can you tell me the price of brown bread at the closest bakery in New York?",
        "Label": "GetProductPrice(store_name=FindNearestStore(city='New York', store_type='bakery'), product_name='brown bread')",
        "Index": 133
    },
    {
        "APIs": [
            {
                "name": "FindNearestStore",
                "Description": "This API is to find the nearest store based on user location and the preferred product type.",
                "input_params": {
                    "city": {
                        "description": "the city where the user is located",
                        "type": "String"
                    },
                    "store_type": {
                        "description": "the preferred store type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_name": {
                        "description": "the name of the nearest store",
                        "type": "String"
                    }
                },
                "format": "FindNearestStore(city, store_type) -> store_name"
            },
            {
                "name": "GetProductPrice",
                "Description": "This API is to get the price of a specific product in a given store.",
                "input_params": {
                    "store_name": {
                        "description": "the name of the store",
                        "type": "String"
                    },
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "price": {
                        "description": "the price of the product",
                        "type": "Float"
                    }
                },
                "format": "GetProductPrice(store_name, product_name) -> price"
            }
        ],
        "Query": "I want to know the cost of French wine at the nearest liquor store in Los Angeles",
        "Label": "GetProductPrice(store_name=FindNearestStore(city='Los Angeles', store_type='liquor'), product_name='French wine')",
        "Index": 134
    },
    {
        "APIs": [
            {
                "name": "FindNearestStore",
                "Description": "This API is to find the nearest store based on user location and the preferred product type.",
                "input_params": {
                    "city": {
                        "description": "the city where the user is located",
                        "type": "String"
                    },
                    "store_type": {
                        "description": "the preferred store type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_name": {
                        "description": "the name of the nearest store",
                        "type": "String"
                    }
                },
                "format": "FindNearestStore(city, store_type) -> store_name"
            },
            {
                "name": "GetProductPrice",
                "Description": "This API is to get the price of a specific product in a given store.",
                "input_params": {
                    "store_name": {
                        "description": "the name of the store",
                        "type": "String"
                    },
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "price": {
                        "description": "the price of the product",
                        "type": "Float"
                    }
                },
                "format": "GetProductPrice(store_name, product_name) -> price"
            }
        ],
        "Query": "Could you find the price of fresh vegetables at the closest farmer's market in Seattle?",
        "Label": "GetProductPrice(store_name=FindNearestStore(city='Seattle', store_type='farmer's market'), product_name='fresh vegetables')",
        "Index": 135
    },
    {
        "APIs": [
            {
                "name": "CustomerName2ID",
                "Description": "This API is to convert a customer name to a customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerName2ID(customer_name) -> customer_ID"
            },
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert a book name to a book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(book_name) -> product_ID"
            },
            {
                "name": "PurchaseBook",
                "Description": "This API is to process the purchase of books.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer,it should be number",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the book,it should be number",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchased_books": {
                        "description": "a list of purchased books",
                        "type": "List"
                    }
                },
                "format": "PurchaseBook(customer_ID, product_ID) -> purchased_books"
            }
        ],
        "Query": "John Doe want to buy a book titled \"Deep Learning\"",
        "Label": "PurchaseBook(customer_ID=CustomerName2ID(customer_name='John Doe'), product_ID=ProductName2ID(book_name='Deep Learning'))",
        "Index": 136
    },
    {
        "APIs": [
            {
                "name": "CustomerName2ID",
                "Description": "This API is to convert a customer name to a customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerName2ID(customer_name) -> customer_ID"
            },
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert a book name to a book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(book_name) -> product_ID"
            },
            {
                "name": "PurchaseBook",
                "Description": "This API is to process the purchase of books.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer,it should be number",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the book,it should be number",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchased_books": {
                        "description": "a list of purchased books",
                        "type": "List"
                    }
                },
                "format": "PurchaseBook(customer_ID, product_ID) -> purchased_books"
            }
        ],
        "Query": "Jane Smith is interested in buying the book 'Python Basics for Beginners'",
        "Label": "PurchaseBook(customer_ID=CustomerName2ID(customer_name='Jane Smith'), product_ID=ProductName2ID(book_name='Python Basics for Beginners')",
        "Index": 137
    },
    {
        "APIs": [
            {
                "name": "CustomerName2ID",
                "Description": "This API is to convert a customer name to a customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerName2ID(customer_name) -> customer_ID"
            },
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert a book name to a book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(book_name) -> product_ID"
            },
            {
                "name": "PurchaseBook",
                "Description": "This API is to process the purchase of books.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer,it should be number",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the book,it should be number",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchased_books": {
                        "description": "a list of purchased books",
                        "type": "List"
                    }
                },
                "format": "PurchaseBook(customer_ID, product_ID) -> purchased_books"
            }
        ],
        "Query": "Jennifer is interested in purchasing the book \"Artificial Intelligence: A Modern Approach\"",
        "Label": "PurchaseBook(customer_ID=CustomerName2ID(customer_name='Jennifer'), product_ID=ProductName2ID(book_name='Artificial Intelligence: A Modern Approach'))",
        "Index": 138
    },
    {
        "APIs": [
            {
                "name": "CustomerName2ID",
                "Description": "This API is to convert a customer name to a customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerName2ID(customer_name) -> customer_ID"
            },
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert a book name to a book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(book_name) -> product_ID"
            },
            {
                "name": "PurchaseBook",
                "Description": "This API is to process the purchase of books.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer,it should be number",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the book,it should be number",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchased_books": {
                        "description": "a list of purchased books",
                        "type": "List"
                    }
                },
                "format": "PurchaseBook(customer_ID, product_ID) -> purchased_books"
            }
        ],
        "Query": "Tom wants to buy a book named \"Neural Networks and Deep Learning\"",
        "Label": "PurchaseBook(customer_ID=CustomerName2ID(customer_name='Tom'), product_ID=ProductName2ID(book_name='Neural Networks and Deep Learning'))",
        "Index": 139
    },
    {
        "APIs": [
            {
                "name": "CustomerName2ID",
                "Description": "This API is to convert a customer name to a customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerName2ID(customer_name) -> customer_ID"
            },
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert a book name to a book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(book_name) -> product_ID"
            },
            {
                "name": "PurchaseBook",
                "Description": "This API is to process the purchase of books.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer,it should be number",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the book,it should be number",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchased_books": {
                        "description": "a list of purchased books",
                        "type": "List"
                    }
                },
                "format": "PurchaseBook(customer_ID, product_ID) -> purchased_books"
            }
        ],
        "Query": "Alice is looking to purchase the book \"Machine Learning: A Probabilistic Perspective\"",
        "Label": "PurchaseBook(customer_ID=CustomerName2ID(customer_name='Alice'), product_ID=ProductName2ID(book_name='Machine Learning: A Probabilistic Perspective'))",
        "Index": 140
    },
    {
        "APIs": [
            {
                "name": "CustomerName2ID",
                "Description": "This API is to convert a customer name to a customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerName2ID(customer_name) -> customer_ID"
            },
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert a book name to a book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(book_name) -> product_ID"
            },
            {
                "name": "PurchaseBook",
                "Description": "This API is to process the purchase of books.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer,it should be number",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the book,it should be number",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchased_books": {
                        "description": "a list of purchased books",
                        "type": "List"
                    }
                },
                "format": "PurchaseBook(customer_ID, product_ID) -> purchased_books"
            }
        ],
        "Query": "Mike wishes to buy the book titled \"Pattern Recognition and Machine Learning\"",
        "Label": "PurchaseBook(customer_ID=CustomerName2ID(customer_name='Mike'), product_ID=ProductName2ID(book_name='Pattern Recognition and Machine Learning'))",
        "Index": 141
    },
    {
        "APIs": [
            {
                "name": "CustomerName2ID",
                "Description": "This API is to convert a customer name to a customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerName2ID(customer_name) -> customer_ID"
            },
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert a book name to a book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(book_name) -> product_ID"
            },
            {
                "name": "PurchaseBook",
                "Description": "This API is to process the purchase of books.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer,it should be number",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the book,it should be number",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchased_books": {
                        "description": "a list of purchased books",
                        "type": "List"
                    }
                },
                "format": "PurchaseBook(customer_ID, product_ID) -> purchased_books"
            }
        ],
        "Query": "Lucy wants to purchase the book \"Understanding Machine Learning: From Theory to Algorithms\"",
        "Label": "PurchaseBook(customer_ID=CustomerName2ID(customer_name='Lucy'), product_ID=ProductName2ID(book_name='Understanding Machine Learning: From Theory to Algorithms'))",
        "Index": 142
    },
    {
        "APIs": [
            {
                "name": "CustomerName2ID",
                "Description": "This API is to convert a customer name to a customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerName2ID(customer_name) -> customer_ID"
            },
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert a book name to a book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(book_name) -> product_ID"
            },
            {
                "name": "PurchaseBook",
                "Description": "This API is to process the purchase of books.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer,it should be number",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the book,it should be number",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchased_books": {
                        "description": "a list of purchased books",
                        "type": "List"
                    }
                },
                "format": "PurchaseBook(customer_ID, product_ID) -> purchased_books"
            }
        ],
        "Query": "Emma Stone is looking to purchase the book \"Artificial Intelligence\"",
        "Label": "PurchaseBook(customer_ID=CustomerName2ID(customer_name='Emma Stone'), product_ID=ProductName2ID(book_name='Artificial Intelligence'))",
        "Index": 143
    },
    {
        "APIs": [
            {
                "name": "CustomerName2ID",
                "Description": "This API is to convert a customer name to a customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerName2ID(customer_name) -> customer_ID"
            },
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert a book name to a book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(book_name) -> product_ID"
            },
            {
                "name": "PurchaseBook",
                "Description": "This API is to process the purchase of books.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer,it should be number",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the book,it should be number",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchased_books": {
                        "description": "a list of purchased books",
                        "type": "List"
                    }
                },
                "format": "PurchaseBook(customer_ID, product_ID) -> purchased_books"
            }
        ],
        "Query": "David Beckham wishes to buy a book named \"Quantum Physics\"",
        "Label": "PurchaseBook(customer_ID=CustomerName2ID(customer_name='David Beckham'), product_ID=ProductName2ID(book_name='Quantum Physics'))",
        "Index": 144
    },
    {
        "APIs": [
            {
                "name": "CustomerName2ID",
                "Description": "This API is to convert a customer name to a customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerName2ID(customer_name) -> customer_ID"
            },
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert a book name to a book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(book_name) -> product_ID"
            },
            {
                "name": "PurchaseBook",
                "Description": "This API is to process the purchase of books.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer,it should be number",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the book,it should be number",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchased_books": {
                        "description": "a list of purchased books",
                        "type": "List"
                    }
                },
                "format": "PurchaseBook(customer_ID, product_ID) -> purchased_books"
            }
        ],
        "Query": "Robert Downey Jr. is interested in buying a book titled \"Modern Robotics\"",
        "Label": "PurchaseBook(customer_ID=CustomerName2ID(customer_name='Robert Downey Jr.'), product_ID=ProductName2ID(book_name='Modern Robotics'))",
        "Index": 145
    },
    {
        "APIs": [
            {
                "name": "CustomerName2ID",
                "Description": "This API is to convert a customer name to a customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerName2ID(customer_name) -> customer_ID"
            },
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert a book name to a book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(book_name) -> product_ID"
            },
            {
                "name": "PurchaseBook",
                "Description": "This API is to process the purchase of books.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer,it should be number",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the book,it should be number",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchased_books": {
                        "description": "a list of purchased books",
                        "type": "List"
                    }
                },
                "format": "PurchaseBook(customer_ID, product_ID) -> purchased_books"
            }
        ],
        "Query": "Tom Cruise wants to purchase the book \"Data Structures and Algorithms\"",
        "Label": "PurchaseBook(customer_ID=CustomerName2ID(customer_name='Tom Cruise'), product_ID=ProductName2ID(book_name='Data Structures and Algorithms'))",
        "Index": 146
    },
    {
        "APIs": [
            {
                "name": "CustomerName2ID",
                "Description": "This API is to convert a customer name to a customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerName2ID(customer_name) -> customer_ID"
            },
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert a book name to a book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(book_name) -> product_ID"
            },
            {
                "name": "PurchaseBook",
                "Description": "This API is to process the purchase of books.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer,it should be number",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the book,it should be number",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchased_books": {
                        "description": "a list of purchased books",
                        "type": "List"
                    }
                },
                "format": "PurchaseBook(customer_ID, product_ID) -> purchased_books"
            }
        ],
        "Query": "Angelina Jolie is planning to buy the book \"Cyber Security Essentials\"",
        "Label": "PurchaseBook(customer_ID=CustomerName2ID(customer_name='Angelina Jolie'), product_ID=ProductName2ID(book_name='Cyber Security Essentials'))",
        "Index": 147
    },
    {
        "APIs": [
            {
                "name": "Email2ID",
                "Description": "This API is to convert user email to user ID.",
                "input_params": {
                    "email": {
                        "description": "the email of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "Email2ID(email) -> person_ID"
            },
            {
                "name": "SubjectName2ID",
                "Description": "This API is to convert subject name to subject ID.",
                "input_params": {
                    "subject_name": {
                        "description": "the name of the subject",
                        "type": "String"
                    }
                },
                "output_params": {
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    }
                },
                "format": "SubjectName2ID(subject_name) -> subject_ID"
            },
            {
                "name": "EnrollCourse",
                "Description": "This API is to enroll a user to a specific course.",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    },
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    },
                    "semester": {
                        "description": "the semester of the enrollment",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Enrollment confirmation": {
                        "description": "the confirmation of the enrollment",
                        "type": "String"
                    }
                },
                "format": "EnrollCourse(person_ID,subject_ID,semester) -> Enrollment confirmation"
            }
        ],
        "Query": "Can you help johndoe@gmail.com to enroll in Microeconomics for the Fall semester?",
        "Label": "EnrollCourse(person_ID=Email2ID(email='johndoe@gmail.com'),subject_ID=SubjectName2ID(subject_name='Microeconomics'), semester='Fall')",
        "Index": 148
    },
    {
        "APIs": [
            {
                "name": "Email2ID",
                "Description": "This API is to convert user email to user ID.",
                "input_params": {
                    "email": {
                        "description": "the email of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "Email2ID(email) -> person_ID"
            },
            {
                "name": "SubjectName2ID",
                "Description": "This API is to convert subject name to subject ID.",
                "input_params": {
                    "subject_name": {
                        "description": "the name of the subject",
                        "type": "String"
                    }
                },
                "output_params": {
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    }
                },
                "format": "SubjectName2ID(subject_name) -> subject_ID"
            },
            {
                "name": "EnrollCourse",
                "Description": "This API is to enroll a user to a specific course.",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    },
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    },
                    "semester": {
                        "description": "the semester of the enrollment",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Enrollment confirmation": {
                        "description": "the confirmation of the enrollment",
                        "type": "String"
                    }
                },
                "format": "EnrollCourse(person_ID,subject_ID,semester) -> Enrollment confirmation"
            }
        ],
        "Query": "Could you assist janesmith@yahoo.com to register for the Algebra course in the Spring semester?",
        "Label": "EnrollCourse(person_ID=Email2ID(email='janesmith@yahoo.com'),subject_ID=SubjectName2ID(subject_name='Algebra'), semester='Spring')",
        "Index": 149
    },
    {
        "APIs": [
            {
                "name": "Email2ID",
                "Description": "This API is to convert user email to user ID.",
                "input_params": {
                    "email": {
                        "description": "the email of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "Email2ID(email) -> person_ID"
            },
            {
                "name": "SubjectName2ID",
                "Description": "This API is to convert subject name to subject ID.",
                "input_params": {
                    "subject_name": {
                        "description": "the name of the subject",
                        "type": "String"
                    }
                },
                "output_params": {
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    }
                },
                "format": "SubjectName2ID(subject_name) -> subject_ID"
            },
            {
                "name": "EnrollCourse",
                "Description": "This API is to enroll a user to a specific course.",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    },
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    },
                    "semester": {
                        "description": "the semester of the enrollment",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Enrollment confirmation": {
                        "description": "the confirmation of the enrollment",
                        "type": "String"
                    }
                },
                "format": "EnrollCourse(person_ID,subject_ID,semester) -> Enrollment confirmation"
            }
        ],
        "Query": "I wish to enroll tony.stark@avengers.com in the Programming course for the Winter semester.",
        "Label": "EnrollCourse(person_ID=Email2ID(email='tony.stark@avengers.com'),subject_ID=SubjectName2ID(subject_name='Programming'), semester='Winter')",
        "Index": 150
    },
    {
        "APIs": [
            {
                "name": "Email2ID",
                "Description": "This API is to convert user email to user ID.",
                "input_params": {
                    "email": {
                        "description": "the email of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "Email2ID(email) -> person_ID"
            },
            {
                "name": "SubjectName2ID",
                "Description": "This API is to convert subject name to subject ID.",
                "input_params": {
                    "subject_name": {
                        "description": "the name of the subject",
                        "type": "String"
                    }
                },
                "output_params": {
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    }
                },
                "format": "SubjectName2ID(subject_name) -> subject_ID"
            },
            {
                "name": "EnrollCourse",
                "Description": "This API is to enroll a user to a specific course.",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    },
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    },
                    "semester": {
                        "description": "the semester of the enrollment",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Enrollment confirmation": {
                        "description": "the confirmation of the enrollment",
                        "type": "String"
                    }
                },
                "format": "EnrollCourse(person_ID,subject_ID,semester) -> Enrollment confirmation"
            }
        ],
        "Query": "Can you register brucewayne@wayne.com for the Mathematics course in the Fall semester?",
        "Label": "EnrollCourse(person_ID=Email2ID(email='brucewayne@wayne.com'),subject_ID=SubjectName2ID(subject_name='Mathematics'), semester='Fall')",
        "Index": 151
    },
    {
        "APIs": [
            {
                "name": "Email2ID",
                "Description": "This API is to convert user email to user ID.",
                "input_params": {
                    "email": {
                        "description": "the email of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "Email2ID(email) -> person_ID"
            },
            {
                "name": "SubjectName2ID",
                "Description": "This API is to convert subject name to subject ID.",
                "input_params": {
                    "subject_name": {
                        "description": "the name of the subject",
                        "type": "String"
                    }
                },
                "output_params": {
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    }
                },
                "format": "SubjectName2ID(subject_name) -> subject_ID"
            },
            {
                "name": "EnrollCourse",
                "Description": "This API is to enroll a user to a specific course.",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    },
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    },
                    "semester": {
                        "description": "the semester of the enrollment",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Enrollment confirmation": {
                        "description": "the confirmation of the enrollment",
                        "type": "String"
                    }
                },
                "format": "EnrollCourse(person_ID,subject_ID,semester) -> Enrollment confirmation"
            }
        ],
        "Query": "Could you help clarkkent@krypton.com enroll in the History course for the Spring semester?",
        "Label": "EnrollCourse(person_ID=Email2ID(email='clarkkent@krypton.com'),subject_ID=SubjectName2ID(subject_name='History'), semester='Spring')",
        "Index": 152
    },
    {
        "APIs": [
            {
                "name": "Email2ID",
                "Description": "This API is to convert user email to user ID.",
                "input_params": {
                    "email": {
                        "description": "the email of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "Email2ID(email) -> person_ID"
            },
            {
                "name": "SubjectName2ID",
                "Description": "This API is to convert subject name to subject ID.",
                "input_params": {
                    "subject_name": {
                        "description": "the name of the subject",
                        "type": "String"
                    }
                },
                "output_params": {
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    }
                },
                "format": "SubjectName2ID(subject_name) -> subject_ID"
            },
            {
                "name": "EnrollCourse",
                "Description": "This API is to enroll a user to a specific course.",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    },
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    },
                    "semester": {
                        "description": "the semester of the enrollment",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Enrollment confirmation": {
                        "description": "the confirmation of the enrollment",
                        "type": "String"
                    }
                },
                "format": "EnrollCourse(person_ID,subject_ID,semester) -> Enrollment confirmation"
            }
        ],
        "Query": "Could you please enroll maryjane@yahoo.com in Algebra for the Spring semester?",
        "Label": "EnrollCourse(person_ID=Email2ID(email='maryjane@yahoo.com'),subject_ID=SubjectName2ID(subject_name='Algebra'), semester='Spring')",
        "Index": 153
    },
    {
        "APIs": [
            {
                "name": "Email2ID",
                "Description": "This API is to convert user email to user ID.",
                "input_params": {
                    "email": {
                        "description": "the email of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "Email2ID(email) -> person_ID"
            },
            {
                "name": "SubjectName2ID",
                "Description": "This API is to convert subject name to subject ID.",
                "input_params": {
                    "subject_name": {
                        "description": "the name of the subject",
                        "type": "String"
                    }
                },
                "output_params": {
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    }
                },
                "format": "SubjectName2ID(subject_name) -> subject_ID"
            },
            {
                "name": "EnrollCourse",
                "Description": "This API is to enroll a user to a specific course.",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    },
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    },
                    "semester": {
                        "description": "the semester of the enrollment",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Enrollment confirmation": {
                        "description": "the confirmation of the enrollment",
                        "type": "String"
                    }
                },
                "format": "EnrollCourse(person_ID,subject_ID,semester) -> Enrollment confirmation"
            }
        ],
        "Query": "I would like to enroll tomhanks@aol.com in Literature for the Winter semester, can you do that?",
        "Label": "EnrollCourse(person_ID=Email2ID(email='tomhanks@aol.com'),subject_ID=SubjectName2ID(subject_name='Literature'), semester='Winter')",
        "Index": 154
    },
    {
        "APIs": [
            {
                "name": "Email2ID",
                "Description": "This API is to convert user email to user ID.",
                "input_params": {
                    "email": {
                        "description": "the email of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "Email2ID(email) -> person_ID"
            },
            {
                "name": "SubjectName2ID",
                "Description": "This API is to convert subject name to subject ID.",
                "input_params": {
                    "subject_name": {
                        "description": "the name of the subject",
                        "type": "String"
                    }
                },
                "output_params": {
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    }
                },
                "format": "SubjectName2ID(subject_name) -> subject_ID"
            },
            {
                "name": "EnrollCourse",
                "Description": "This API is to enroll a user to a specific course.",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    },
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    },
                    "semester": {
                        "description": "the semester of the enrollment",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Enrollment confirmation": {
                        "description": "the confirmation of the enrollment",
                        "type": "String"
                    }
                },
                "format": "EnrollCourse(person_ID,subject_ID,semester) -> Enrollment confirmation"
            }
        ],
        "Query": "Please enroll emma.watson@hotmail.com in Physics for the Summer semester.",
        "Label": "EnrollCourse(person_ID=Email2ID(email='emma.watson@hotmail.com'),subject_ID=SubjectName2ID(subject_name='Physics'), semester='Summer')",
        "Index": 155
    },
    {
        "APIs": [
            {
                "name": "Email2ID",
                "Description": "This API is to convert user email to user ID.",
                "input_params": {
                    "email": {
                        "description": "the email of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "Email2ID(email) -> person_ID"
            },
            {
                "name": "SubjectName2ID",
                "Description": "This API is to convert subject name to subject ID.",
                "input_params": {
                    "subject_name": {
                        "description": "the name of the subject",
                        "type": "String"
                    }
                },
                "output_params": {
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    }
                },
                "format": "SubjectName2ID(subject_name) -> subject_ID"
            },
            {
                "name": "EnrollCourse",
                "Description": "This API is to enroll a user to a specific course.",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    },
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    },
                    "semester": {
                        "description": "the semester of the enrollment",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Enrollment confirmation": {
                        "description": "the confirmation of the enrollment",
                        "type": "String"
                    }
                },
                "format": "EnrollCourse(person_ID,subject_ID,semester) -> Enrollment confirmation"
            }
        ],
        "Query": "Could you help robert.downey@gmail.com sign up for Calculus in the Fall semester?",
        "Label": "EnrollCourse(person_ID=Email2ID(email='robert.downey@gmail.com'),subject_ID=SubjectName2ID(subject_name='Calculus'), semester='Fall')",
        "Index": 156
    },
    {
        "APIs": [
            {
                "name": "Email2ID",
                "Description": "This API is to convert user email to user ID.",
                "input_params": {
                    "email": {
                        "description": "the email of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "Email2ID(email) -> person_ID"
            },
            {
                "name": "SubjectName2ID",
                "Description": "This API is to convert subject name to subject ID.",
                "input_params": {
                    "subject_name": {
                        "description": "the name of the subject",
                        "type": "String"
                    }
                },
                "output_params": {
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    }
                },
                "format": "SubjectName2ID(subject_name) -> subject_ID"
            },
            {
                "name": "EnrollCourse",
                "Description": "This API is to enroll a user to a specific course.",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    },
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    },
                    "semester": {
                        "description": "the semester of the enrollment",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Enrollment confirmation": {
                        "description": "the confirmation of the enrollment",
                        "type": "String"
                    }
                },
                "format": "EnrollCourse(person_ID,subject_ID,semester) -> Enrollment confirmation"
            }
        ],
        "Query": "Can you enroll scarlett.johansson@yahoo.com in Biology for the Spring semester?",
        "Label": "EnrollCourse(person_ID=Email2ID(email='scarlett.johansson@yahoo.com'),subject_ID=SubjectName2ID(subject_name='Biology'), semester='Spring')",
        "Index": 157
    },
    {
        "APIs": [
            {
                "name": "Email2ID",
                "Description": "This API is to convert user email to user ID.",
                "input_params": {
                    "email": {
                        "description": "the email of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "Email2ID(email) -> person_ID"
            },
            {
                "name": "SubjectName2ID",
                "Description": "This API is to convert subject name to subject ID.",
                "input_params": {
                    "subject_name": {
                        "description": "the name of the subject",
                        "type": "String"
                    }
                },
                "output_params": {
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    }
                },
                "format": "SubjectName2ID(subject_name) -> subject_ID"
            },
            {
                "name": "EnrollCourse",
                "Description": "This API is to enroll a user to a specific course.",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    },
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    },
                    "semester": {
                        "description": "the semester of the enrollment",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Enrollment confirmation": {
                        "description": "the confirmation of the enrollment",
                        "type": "String"
                    }
                },
                "format": "EnrollCourse(person_ID,subject_ID,semester) -> Enrollment confirmation"
            }
        ],
        "Query": "I would like to help mary@yahoo.com get registered for the course Applied Math in the spring semester.",
        "Label": "EnrollCourse(person_ID=Email2ID(email='mary@yahoo.com'),subject_ID=SubjectName2ID(subject_name='Applied Math'), semester='Spring')",
        "Index": 158
    },
    {
        "APIs": [
            {
                "name": "Email2ID",
                "Description": "This API is to convert user email to user ID.",
                "input_params": {
                    "email": {
                        "description": "the email of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "Email2ID(email) -> person_ID"
            },
            {
                "name": "SubjectName2ID",
                "Description": "This API is to convert subject name to subject ID.",
                "input_params": {
                    "subject_name": {
                        "description": "the name of the subject",
                        "type": "String"
                    }
                },
                "output_params": {
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    }
                },
                "format": "SubjectName2ID(subject_name) -> subject_ID"
            },
            {
                "name": "EnrollCourse",
                "Description": "This API is to enroll a user to a specific course.",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    },
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    },
                    "semester": {
                        "description": "the semester of the enrollment",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Enrollment confirmation": {
                        "description": "the confirmation of the enrollment",
                        "type": "String"
                    }
                },
                "format": "EnrollCourse(person_ID,subject_ID,semester) -> Enrollment confirmation"
            }
        ],
        "Query": "Can you assist james@outlook.com to subscribe to History 101 for the Winter term?",
        "Label": "EnrollCourse(person_ID=Email2ID(email='james@outlook.com'),subject_ID=SubjectName2ID(subject_name='History 101'), semester='Winter')",
        "Index": 159
    },
    {
        "APIs": [
            {
                "name": "Email2ID",
                "Description": "This API is to convert user email to user ID.",
                "input_params": {
                    "email": {
                        "description": "the email of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "Email2ID(email) -> person_ID"
            },
            {
                "name": "SubjectName2ID",
                "Description": "This API is to convert subject name to subject ID.",
                "input_params": {
                    "subject_name": {
                        "description": "the name of the subject",
                        "type": "String"
                    }
                },
                "output_params": {
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    }
                },
                "format": "SubjectName2ID(subject_name) -> subject_ID"
            },
            {
                "name": "EnrollCourse",
                "Description": "This API is to enroll a user to a specific course.",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    },
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    },
                    "semester": {
                        "description": "the semester of the enrollment",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Enrollment confirmation": {
                        "description": "the confirmation of the enrollment",
                        "type": "String"
                    }
                },
                "format": "EnrollCourse(person_ID,subject_ID,semester) -> Enrollment confirmation"
            }
        ],
        "Query": "Help sarah@gmail.com to enroll in the Computer Science course for the Summer semester.",
        "Label": "EnrollCourse(person_ID=Email2ID(email='sarah@gmail.com'),subject_ID=SubjectName2ID(subject_name='Computer Science'), semester='Summer')",
        "Index": 160
    },
    {
        "APIs": [
            {
                "name": "Email2ID",
                "Description": "This API is to convert user email to user ID.",
                "input_params": {
                    "email": {
                        "description": "the email of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "Email2ID(email) -> person_ID"
            },
            {
                "name": "SubjectName2ID",
                "Description": "This API is to convert subject name to subject ID.",
                "input_params": {
                    "subject_name": {
                        "description": "the name of the subject",
                        "type": "String"
                    }
                },
                "output_params": {
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    }
                },
                "format": "SubjectName2ID(subject_name) -> subject_ID"
            },
            {
                "name": "EnrollCourse",
                "Description": "This API is to enroll a user to a specific course.",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    },
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    },
                    "semester": {
                        "description": "the semester of the enrollment",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Enrollment confirmation": {
                        "description": "the confirmation of the enrollment",
                        "type": "String"
                    }
                },
                "format": "EnrollCourse(person_ID,subject_ID,semester) -> Enrollment confirmation"
            }
        ],
        "Query": "Assist mike@hotmail.com to sign up for the Physics 201 course in the Fall semester.",
        "Label": "EnrollCourse(person_ID=Email2ID(email='mike@hotmail.com'),subject_ID=SubjectName2ID(subject_name='Physics 201'), semester='Fall')",
        "Index": 161
    },
    {
        "APIs": [
            {
                "name": "Email2ID",
                "Description": "This API is to convert user email to user ID.",
                "input_params": {
                    "email": {
                        "description": "the email of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "Email2ID(email) -> person_ID"
            },
            {
                "name": "SubjectName2ID",
                "Description": "This API is to convert subject name to subject ID.",
                "input_params": {
                    "subject_name": {
                        "description": "the name of the subject",
                        "type": "String"
                    }
                },
                "output_params": {
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    }
                },
                "format": "SubjectName2ID(subject_name) -> subject_ID"
            },
            {
                "name": "EnrollCourse",
                "Description": "This API is to enroll a user to a specific course.",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    },
                    "subject_ID": {
                        "description": "the ID of the subject",
                        "type": "Integer"
                    },
                    "semester": {
                        "description": "the semester of the enrollment",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Enrollment confirmation": {
                        "description": "the confirmation of the enrollment",
                        "type": "String"
                    }
                },
                "format": "EnrollCourse(person_ID,subject_ID,semester) -> Enrollment confirmation"
            }
        ],
        "Query": "Can you help peter@gmail.com to enroll in the course Biology 101 for the Spring term?",
        "Label": "EnrollCourse(person_ID=Email2ID(email='peter@gmail.com'),subject_ID=SubjectName2ID(subject_name='Biology 101'), semester='Spring')",
        "Index": 162
    },
    {
        "APIs": [
            {
                "name": "CityName2ID",
                "Description": "This API is to convert city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityName2ID(city_name) -> City_ID"
            },
            {
                "name": "EventName2ID",
                "Description": "This API is to convert event name to event ID.",
                "input_params": {
                    "Event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    }
                },
                "format": "EventName2ID(Event_name) -> Event_ID"
            },
            {
                "name": "ReserveTicket",
                "Description": "This API is to reserve a ticket for an event.",
                "input_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "Ticket_confirmation": {
                        "description": "the confirmation of the ticket",
                        "type": "String"
                    }
                },
                "format": "ReserveTicket(City_ID,Event_ID,date) -> Ticket_confirmation"
            }
        ],
        "Query": "Can you please book a ticket for 'The Blue Concert' at Chicago on 12th June?",
        "Label": "ReserveTicket(City_ID=CityName2ID(city_name='Chicago'), Event_ID=EventName2ID(Event_name='The Blue Concert'), date='12th June')",
        "Index": 163
    },
    {
        "APIs": [
            {
                "name": "CityName2ID",
                "Description": "This API is to convert city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityName2ID(city_name) -> City_ID"
            },
            {
                "name": "EventName2ID",
                "Description": "This API is to convert event name to event ID.",
                "input_params": {
                    "Event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    }
                },
                "format": "EventName2ID(Event_name) -> Event_ID"
            },
            {
                "name": "ReserveTicket",
                "Description": "This API is to reserve a ticket for an event.",
                "input_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "Ticket_confirmation": {
                        "description": "the confirmation of the ticket",
                        "type": "String"
                    }
                },
                "format": "ReserveTicket(City_ID,Event_ID,date) -> Ticket_confirmation"
            }
        ],
        "Query": "I want to reserve a ticket for 'Rock Festival' in New York on 10th July.",
        "Label": "ReserveTicket(City_ID=CityName2ID(city_name='New York'), Event_ID=EventName2ID(Event_name='Rock Festival'), date='10th July')",
        "Index": 164
    },
    {
        "APIs": [
            {
                "name": "CityName2ID",
                "Description": "This API is to convert city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityName2ID(city_name) -> City_ID"
            },
            {
                "name": "EventName2ID",
                "Description": "This API is to convert event name to event ID.",
                "input_params": {
                    "Event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    }
                },
                "format": "EventName2ID(Event_name) -> Event_ID"
            },
            {
                "name": "ReserveTicket",
                "Description": "This API is to reserve a ticket for an event.",
                "input_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "Ticket_confirmation": {
                        "description": "the confirmation of the ticket",
                        "type": "String"
                    }
                },
                "format": "ReserveTicket(City_ID,Event_ID,date) -> Ticket_confirmation"
            }
        ],
        "Query": "Please book a ticket for 'Jazz Night' at Los Angeles on 5th August.",
        "Label": "ReserveTicket(City_ID=CityName2ID(city_name='Los Angeles'), Event_ID=EventName2ID(Event_name='Jazz Night'), date='5th August')",
        "Index": 165
    },
    {
        "APIs": [
            {
                "name": "CityName2ID",
                "Description": "This API is to convert city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityName2ID(city_name) -> City_ID"
            },
            {
                "name": "EventName2ID",
                "Description": "This API is to convert event name to event ID.",
                "input_params": {
                    "Event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    }
                },
                "format": "EventName2ID(Event_name) -> Event_ID"
            },
            {
                "name": "ReserveTicket",
                "Description": "This API is to reserve a ticket for an event.",
                "input_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "Ticket_confirmation": {
                        "description": "the confirmation of the ticket",
                        "type": "String"
                    }
                },
                "format": "ReserveTicket(City_ID,Event_ID,date) -> Ticket_confirmation"
            }
        ],
        "Query": "Can I get a ticket for 'Metal Concert' in San Francisco on 15th September?",
        "Label": "ReserveTicket(City_ID=CityName2ID(city_name='San Francisco'), Event_ID=EventName2ID(Event_name='Metal Concert'), date='15th September')",
        "Index": 166
    },
    {
        "APIs": [
            {
                "name": "CityName2ID",
                "Description": "This API is to convert city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityName2ID(city_name) -> City_ID"
            },
            {
                "name": "EventName2ID",
                "Description": "This API is to convert event name to event ID.",
                "input_params": {
                    "Event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    }
                },
                "format": "EventName2ID(Event_name) -> Event_ID"
            },
            {
                "name": "ReserveTicket",
                "Description": "This API is to reserve a ticket for an event.",
                "input_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "Ticket_confirmation": {
                        "description": "the confirmation of the ticket",
                        "type": "String"
                    }
                },
                "format": "ReserveTicket(City_ID,Event_ID,date) -> Ticket_confirmation"
            }
        ],
        "Query": "I'd like to book a ticket for 'Classical Music Night' in Boston on 20th October.",
        "Label": "ReserveTicket(City_ID=CityName2ID(city_name='Boston'), Event_ID=EventName2ID(Event_name='Classical Music Night'), date='20th October')",
        "Index": 167
    },
    {
        "APIs": [
            {
                "name": "CityName2ID",
                "Description": "This API is to convert city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityName2ID(city_name) -> City_ID"
            },
            {
                "name": "EventName2ID",
                "Description": "This API is to convert event name to event ID.",
                "input_params": {
                    "Event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    }
                },
                "format": "EventName2ID(Event_name) -> Event_ID"
            },
            {
                "name": "ReserveTicket",
                "Description": "This API is to reserve a ticket for an event.",
                "input_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "Ticket_confirmation": {
                        "description": "the confirmation of the ticket",
                        "type": "String"
                    }
                },
                "format": "ReserveTicket(City_ID,Event_ID,date) -> Ticket_confirmation"
            }
        ],
        "Query": "Reserve a ticket for 'Pop Festival' in Seattle on 25th November.",
        "Label": "ReserveTicket(City_ID=CityName2ID(city_name='Seattle'), Event_ID=EventName2ID(Event_name='Pop Festival'), date='25th November')",
        "Index": 168
    },
    {
        "APIs": [
            {
                "name": "CityName2ID",
                "Description": "This API is to convert city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityName2ID(city_name) -> City_ID"
            },
            {
                "name": "EventName2ID",
                "Description": "This API is to convert event name to event ID.",
                "input_params": {
                    "Event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    }
                },
                "format": "EventName2ID(Event_name) -> Event_ID"
            },
            {
                "name": "ReserveTicket",
                "Description": "This API is to reserve a ticket for an event.",
                "input_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "Ticket_confirmation": {
                        "description": "the confirmation of the ticket",
                        "type": "String"
                    }
                },
                "format": "ReserveTicket(City_ID,Event_ID,date) -> Ticket_confirmation"
            }
        ],
        "Query": "I want to reserve a seat for the 'Art Expo' in New York on 25th December",
        "Label": "ReserveTicket(City_ID=CityName2ID(city_name='New York'), Event_ID=EventName2ID(Event_name='Art Expo'), date='25th December')",
        "Index": 169
    },
    {
        "APIs": [
            {
                "name": "CityName2ID",
                "Description": "This API is to convert city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityName2ID(city_name) -> City_ID"
            },
            {
                "name": "EventName2ID",
                "Description": "This API is to convert event name to event ID.",
                "input_params": {
                    "Event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    }
                },
                "format": "EventName2ID(Event_name) -> Event_ID"
            },
            {
                "name": "ReserveTicket",
                "Description": "This API is to reserve a ticket for an event.",
                "input_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "Ticket_confirmation": {
                        "description": "the confirmation of the ticket",
                        "type": "String"
                    }
                },
                "format": "ReserveTicket(City_ID,Event_ID,date) -> Ticket_confirmation"
            }
        ],
        "Query": "Can you help me book a ticket for 'Tech Summit' in San Francisco on 18th November?",
        "Label": "ReserveTicket(City_ID=CityName2ID(city_name='San Francisco'), Event_ID=EventName2ID(Event_name='Tech Summit'), date='18th November')",
        "Index": 170
    },
    {
        "APIs": [
            {
                "name": "CityName2ID",
                "Description": "This API is to convert city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityName2ID(city_name) -> City_ID"
            },
            {
                "name": "EventName2ID",
                "Description": "This API is to convert event name to event ID.",
                "input_params": {
                    "Event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    }
                },
                "format": "EventName2ID(Event_name) -> Event_ID"
            },
            {
                "name": "ReserveTicket",
                "Description": "This API is to reserve a ticket for an event.",
                "input_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "Ticket_confirmation": {
                        "description": "the confirmation of the ticket",
                        "type": "String"
                    }
                },
                "format": "ReserveTicket(City_ID,Event_ID,date) -> Ticket_confirmation"
            }
        ],
        "Query": "I need a ticket for the 'Music Festival' in Austin on 5th July",
        "Label": "ReserveTicket(City_ID=CityName2ID(city_name='Austin'), Event_ID=EventName2ID(Event_name='Music Festival'), date='5th July')",
        "Index": 171
    },
    {
        "APIs": [
            {
                "name": "CityName2ID",
                "Description": "This API is to convert city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityName2ID(city_name) -> City_ID"
            },
            {
                "name": "EventName2ID",
                "Description": "This API is to convert event name to event ID.",
                "input_params": {
                    "Event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    }
                },
                "format": "EventName2ID(Event_name) -> Event_ID"
            },
            {
                "name": "ReserveTicket",
                "Description": "This API is to reserve a ticket for an event.",
                "input_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "Ticket_confirmation": {
                        "description": "the confirmation of the ticket",
                        "type": "String"
                    }
                },
                "format": "ReserveTicket(City_ID,Event_ID,date) -> Ticket_confirmation"
            }
        ],
        "Query": "Please reserve a ticket for the 'Food Fair' in Seattle on 15th September",
        "Label": "ReserveTicket(City_ID=CityName2ID(city_name='Seattle'), Event_ID=EventName2ID(Event_name='Food Fair'), date='15th September')",
        "Index": 172
    },
    {
        "APIs": [
            {
                "name": "CityName2ID",
                "Description": "This API is to convert city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityName2ID(city_name) -> City_ID"
            },
            {
                "name": "EventName2ID",
                "Description": "This API is to convert event name to event ID.",
                "input_params": {
                    "Event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    }
                },
                "format": "EventName2ID(Event_name) -> Event_ID"
            },
            {
                "name": "ReserveTicket",
                "Description": "This API is to reserve a ticket for an event.",
                "input_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "Ticket_confirmation": {
                        "description": "the confirmation of the ticket",
                        "type": "String"
                    }
                },
                "format": "ReserveTicket(City_ID,Event_ID,date) -> Ticket_confirmation"
            }
        ],
        "Query": "Book a ticket for me for the 'Film Festival' in Los Angeles on 22nd October",
        "Label": "ReserveTicket(City_ID=CityName2ID(city_name='Los Angeles'), Event_ID=EventName2ID(Event_name='Film Festival'), date='22nd October')",
        "Index": 173
    },
    {
        "APIs": [
            {
                "name": "CityName2ID",
                "Description": "This API is to convert city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityName2ID(city_name) -> City_ID"
            },
            {
                "name": "EventName2ID",
                "Description": "This API is to convert event name to event ID.",
                "input_params": {
                    "Event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    }
                },
                "format": "EventName2ID(Event_name) -> Event_ID"
            },
            {
                "name": "ReserveTicket",
                "Description": "This API is to reserve a ticket for an event.",
                "input_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "Ticket_confirmation": {
                        "description": "the confirmation of the ticket",
                        "type": "String"
                    }
                },
                "format": "ReserveTicket(City_ID,Event_ID,date) -> Ticket_confirmation"
            }
        ],
        "Query": "I want to reserve a ticket for the 'Rock Festival' in Los Angeles on 20th July",
        "Label": "ReserveTicket(City_ID=CityName2ID(city_name='Los Angeles'), Event_ID=EventName2ID(Event_name='Rock Festival'), date='20th July')",
        "Index": 174
    },
    {
        "APIs": [
            {
                "name": "CityName2ID",
                "Description": "This API is to convert city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityName2ID(city_name) -> City_ID"
            },
            {
                "name": "EventName2ID",
                "Description": "This API is to convert event name to event ID.",
                "input_params": {
                    "Event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    }
                },
                "format": "EventName2ID(Event_name) -> Event_ID"
            },
            {
                "name": "ReserveTicket",
                "Description": "This API is to reserve a ticket for an event.",
                "input_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "Ticket_confirmation": {
                        "description": "the confirmation of the ticket",
                        "type": "String"
                    }
                },
                "format": "ReserveTicket(City_ID,Event_ID,date) -> Ticket_confirmation"
            }
        ],
        "Query": "Book a ticket for 'Jazz Night' at New York on 15th August",
        "Label": "ReserveTicket(City_ID=CityName2ID(city_name='New York'), Event_ID=EventName2ID(Event_name='Jazz Night'), date='15th August')",
        "Index": 175
    },
    {
        "APIs": [
            {
                "name": "CityName2ID",
                "Description": "This API is to convert city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityName2ID(city_name) -> City_ID"
            },
            {
                "name": "EventName2ID",
                "Description": "This API is to convert event name to event ID.",
                "input_params": {
                    "Event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    }
                },
                "format": "EventName2ID(Event_name) -> Event_ID"
            },
            {
                "name": "ReserveTicket",
                "Description": "This API is to reserve a ticket for an event.",
                "input_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "Ticket_confirmation": {
                        "description": "the confirmation of the ticket",
                        "type": "String"
                    }
                },
                "format": "ReserveTicket(City_ID,Event_ID,date) -> Ticket_confirmation"
            }
        ],
        "Query": "Can I get a ticket for 'Country Music Festival' in Nashville on 10th September?",
        "Label": "ReserveTicket(City_ID=CityName2ID(city_name='Nashville'), Event_ID=EventName2ID(Event_name='Country Music Festival'), date='10th September')",
        "Index": 176
    },
    {
        "APIs": [
            {
                "name": "CityName2ID",
                "Description": "This API is to convert city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityName2ID(city_name) -> City_ID"
            },
            {
                "name": "EventName2ID",
                "Description": "This API is to convert event name to event ID.",
                "input_params": {
                    "Event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    }
                },
                "format": "EventName2ID(Event_name) -> Event_ID"
            },
            {
                "name": "ReserveTicket",
                "Description": "This API is to reserve a ticket for an event.",
                "input_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "Ticket_confirmation": {
                        "description": "the confirmation of the ticket",
                        "type": "String"
                    }
                },
                "format": "ReserveTicket(City_ID,Event_ID,date) -> Ticket_confirmation"
            }
        ],
        "Query": "I'd like to buy a ticket for 'Opera Night' in Paris on 5th October",
        "Label": "ReserveTicket(City_ID=CityName2ID(city_name='Paris'), Event_ID=EventName2ID(Event_name='Opera Night'), date='5th October')",
        "Index": 177
    },
    {
        "APIs": [
            {
                "name": "CityName2ID",
                "Description": "This API is to convert city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityName2ID(city_name) -> City_ID"
            },
            {
                "name": "EventName2ID",
                "Description": "This API is to convert event name to event ID.",
                "input_params": {
                    "Event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    }
                },
                "format": "EventName2ID(Event_name) -> Event_ID"
            },
            {
                "name": "ReserveTicket",
                "Description": "This API is to reserve a ticket for an event.",
                "input_params": {
                    "City_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "Event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "Ticket_confirmation": {
                        "description": "the confirmation of the ticket",
                        "type": "String"
                    }
                },
                "format": "ReserveTicket(City_ID,Event_ID,date) -> Ticket_confirmation"
            }
        ],
        "Query": "Reserve a ticket for the 'Pop Music Concert' in London on 25th November",
        "Label": "ReserveTicket(City_ID=CityName2ID(city_name='London'), Event_ID=EventName2ID(Event_name='Pop Music Concert'), date='25th November')",
        "Index": 178
    },
    {
        "APIs": [
            {
                "name": "SenderName2ID",
                "Description": "This API is to convert sender name to sender ID.",
                "input_params": {
                    "sender_name": {
                        "description": "the name of the sender",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender",
                        "type": "Integer"
                    }
                },
                "format": "SenderName2ID(sender_name) -> Sender_ID"
            },
            {
                "name": "ReceiverName2ID",
                "Description": "This API converts receiver name to receiver ID.",
                "input_params": {
                    "receiver_name": {
                        "description": "the name of the receiver",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Receiver_ID": {
                        "description": "the ID of the receiver",
                        "type": "Integer"
                    }
                },
                "format": "ReceiverName2ID(receiver_name) -> Receiver_ID"
            },
            {
                "name": "TransferAmount",
                "Description": "This API is to transfer money between two users.",
                "input_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender,it should be number",
                        "type": "Integer"
                    },
                    "Receiver_ID": {
                        "description": "the ID of the receiver,it should be number",
                        "type": "Integer"
                    },
                    "amount": {
                        "description": "the amount of money to be transferred",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "Money transfer confirmation": {
                        "description": "confirmation message for the money transfer",
                        "type": "String"
                    }
                },
                "format": "TransferAmount(Sender_ID,Receiver_ID,amount) -> Money transfer confirmation"
            }
        ],
        "Query": "Can you transfer $200 from my account to Jane's account?",
        "Label": "TransferAmount(Sender_ID=SenderName2ID(sender_name='my account'), Receiver_ID=ReceiverName2ID(receiver_name='Jane'), amount=200)",
        "Index": 179
    },
    {
        "APIs": [
            {
                "name": "SenderName2ID",
                "Description": "This API is to convert sender name to sender ID.",
                "input_params": {
                    "sender_name": {
                        "description": "the name of the sender",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender",
                        "type": "Integer"
                    }
                },
                "format": "SenderName2ID(sender_name) -> Sender_ID"
            },
            {
                "name": "ReceiverName2ID",
                "Description": "This API converts receiver name to receiver ID.",
                "input_params": {
                    "receiver_name": {
                        "description": "the name of the receiver",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Receiver_ID": {
                        "description": "the ID of the receiver",
                        "type": "Integer"
                    }
                },
                "format": "ReceiverName2ID(receiver_name) -> Receiver_ID"
            },
            {
                "name": "TransferAmount",
                "Description": "This API is to transfer money between two users.",
                "input_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender,it should be number",
                        "type": "Integer"
                    },
                    "Receiver_ID": {
                        "description": "the ID of the receiver,it should be number",
                        "type": "Integer"
                    },
                    "amount": {
                        "description": "the amount of money to be transferred",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "Money transfer confirmation": {
                        "description": "confirmation message for the money transfer",
                        "type": "String"
                    }
                },
                "format": "TransferAmount(Sender_ID,Receiver_ID,amount) -> Money transfer confirmation"
            }
        ],
        "Query": "Can you transfer $150 from my account to John's account?",
        "Label": "TransferAmount(Sender_ID=SenderName2ID(sender_name='my account'), Receiver_ID=ReceiverName2ID(receiver_name='John'), amount=150)",
        "Index": 180
    },
    {
        "APIs": [
            {
                "name": "SenderName2ID",
                "Description": "This API is to convert sender name to sender ID.",
                "input_params": {
                    "sender_name": {
                        "description": "the name of the sender",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender",
                        "type": "Integer"
                    }
                },
                "format": "SenderName2ID(sender_name) -> Sender_ID"
            },
            {
                "name": "ReceiverName2ID",
                "Description": "This API converts receiver name to receiver ID.",
                "input_params": {
                    "receiver_name": {
                        "description": "the name of the receiver",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Receiver_ID": {
                        "description": "the ID of the receiver",
                        "type": "Integer"
                    }
                },
                "format": "ReceiverName2ID(receiver_name) -> Receiver_ID"
            },
            {
                "name": "TransferAmount",
                "Description": "This API is to transfer money between two users.",
                "input_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender,it should be number",
                        "type": "Integer"
                    },
                    "Receiver_ID": {
                        "description": "the ID of the receiver,it should be number",
                        "type": "Integer"
                    },
                    "amount": {
                        "description": "the amount of money to be transferred",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "Money transfer confirmation": {
                        "description": "confirmation message for the money transfer",
                        "type": "String"
                    }
                },
                "format": "TransferAmount(Sender_ID,Receiver_ID,amount) -> Money transfer confirmation"
            }
        ],
        "Query": "Please assist me in transferring $400 from my account to Mike's account.",
        "Label": "TransferAmount(Sender_ID=SenderName2ID(sender_name='my account'), Receiver_ID=ReceiverName2ID(receiver_name='Mike'), amount=400)",
        "Index": 181
    },
    {
        "APIs": [
            {
                "name": "SenderName2ID",
                "Description": "This API is to convert sender name to sender ID.",
                "input_params": {
                    "sender_name": {
                        "description": "the name of the sender",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender",
                        "type": "Integer"
                    }
                },
                "format": "SenderName2ID(sender_name) -> Sender_ID"
            },
            {
                "name": "ReceiverName2ID",
                "Description": "This API converts receiver name to receiver ID.",
                "input_params": {
                    "receiver_name": {
                        "description": "the name of the receiver",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Receiver_ID": {
                        "description": "the ID of the receiver",
                        "type": "Integer"
                    }
                },
                "format": "ReceiverName2ID(receiver_name) -> Receiver_ID"
            },
            {
                "name": "TransferAmount",
                "Description": "This API is to transfer money between two users.",
                "input_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender,it should be number",
                        "type": "Integer"
                    },
                    "Receiver_ID": {
                        "description": "the ID of the receiver,it should be number",
                        "type": "Integer"
                    },
                    "amount": {
                        "description": "the amount of money to be transferred",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "Money transfer confirmation": {
                        "description": "confirmation message for the money transfer",
                        "type": "String"
                    }
                },
                "format": "TransferAmount(Sender_ID,Receiver_ID,amount) -> Money transfer confirmation"
            }
        ],
        "Query": "Could you make a transfer of $500 from my account to Emma's account?",
        "Label": "TransferAmount(Sender_ID=SenderName2ID(sender_name='my account'), Receiver_ID=ReceiverName2ID(receiver_name='Emma'), amount=500)",
        "Index": 182
    },
    {
        "APIs": [
            {
                "name": "SenderName2ID",
                "Description": "This API is to convert sender name to sender ID.",
                "input_params": {
                    "sender_name": {
                        "description": "the name of the sender",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender",
                        "type": "Integer"
                    }
                },
                "format": "SenderName2ID(sender_name) -> Sender_ID"
            },
            {
                "name": "ReceiverName2ID",
                "Description": "This API converts receiver name to receiver ID.",
                "input_params": {
                    "receiver_name": {
                        "description": "the name of the receiver",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Receiver_ID": {
                        "description": "the ID of the receiver",
                        "type": "Integer"
                    }
                },
                "format": "ReceiverName2ID(receiver_name) -> Receiver_ID"
            },
            {
                "name": "TransferAmount",
                "Description": "This API is to transfer money between two users.",
                "input_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender,it should be number",
                        "type": "Integer"
                    },
                    "Receiver_ID": {
                        "description": "the ID of the receiver,it should be number",
                        "type": "Integer"
                    },
                    "amount": {
                        "description": "the amount of money to be transferred",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "Money transfer confirmation": {
                        "description": "confirmation message for the money transfer",
                        "type": "String"
                    }
                },
                "format": "TransferAmount(Sender_ID,Receiver_ID,amount) -> Money transfer confirmation"
            }
        ],
        "Query": "Can I transfer $250 from my account to James's account?",
        "Label": "TransferAmount(Sender_ID=SenderName2ID(sender_name='my account'), Receiver_ID=ReceiverName2ID(receiver_name='James'), amount=250)",
        "Index": 183
    },
    {
        "APIs": [
            {
                "name": "SenderName2ID",
                "Description": "This API is to convert sender name to sender ID.",
                "input_params": {
                    "sender_name": {
                        "description": "the name of the sender",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender",
                        "type": "Integer"
                    }
                },
                "format": "SenderName2ID(sender_name) -> Sender_ID"
            },
            {
                "name": "ReceiverName2ID",
                "Description": "This API converts receiver name to receiver ID.",
                "input_params": {
                    "receiver_name": {
                        "description": "the name of the receiver",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Receiver_ID": {
                        "description": "the ID of the receiver",
                        "type": "Integer"
                    }
                },
                "format": "ReceiverName2ID(receiver_name) -> Receiver_ID"
            },
            {
                "name": "TransferAmount",
                "Description": "This API is to transfer money between two users.",
                "input_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender,it should be number",
                        "type": "Integer"
                    },
                    "Receiver_ID": {
                        "description": "the ID of the receiver,it should be number",
                        "type": "Integer"
                    },
                    "amount": {
                        "description": "the amount of money to be transferred",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "Money transfer confirmation": {
                        "description": "confirmation message for the money transfer",
                        "type": "String"
                    }
                },
                "format": "TransferAmount(Sender_ID,Receiver_ID,amount) -> Money transfer confirmation"
            }
        ],
        "Query": "Can you transfer $100 from John's account to Lisa's account?",
        "Label": "TransferAmount(Sender_ID=SenderName2ID(sender_name='John'), Receiver_ID=ReceiverName2ID(receiver_name='Lisa'), amount=100)",
        "Index": 184
    },
    {
        "APIs": [
            {
                "name": "SenderName2ID",
                "Description": "This API is to convert sender name to sender ID.",
                "input_params": {
                    "sender_name": {
                        "description": "the name of the sender",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender",
                        "type": "Integer"
                    }
                },
                "format": "SenderName2ID(sender_name) -> Sender_ID"
            },
            {
                "name": "ReceiverName2ID",
                "Description": "This API converts receiver name to receiver ID.",
                "input_params": {
                    "receiver_name": {
                        "description": "the name of the receiver",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Receiver_ID": {
                        "description": "the ID of the receiver",
                        "type": "Integer"
                    }
                },
                "format": "ReceiverName2ID(receiver_name) -> Receiver_ID"
            },
            {
                "name": "TransferAmount",
                "Description": "This API is to transfer money between two users.",
                "input_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender,it should be number",
                        "type": "Integer"
                    },
                    "Receiver_ID": {
                        "description": "the ID of the receiver,it should be number",
                        "type": "Integer"
                    },
                    "amount": {
                        "description": "the amount of money to be transferred",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "Money transfer confirmation": {
                        "description": "confirmation message for the money transfer",
                        "type": "String"
                    }
                },
                "format": "TransferAmount(Sender_ID,Receiver_ID,amount) -> Money transfer confirmation"
            }
        ],
        "Query": "Please move $350 from my account to Harry's account.",
        "Label": "TransferAmount(Sender_ID=SenderName2ID(sender_name='my account'), Receiver_ID=ReceiverName2ID(receiver_name='Harry'), amount=350)",
        "Index": 185
    },
    {
        "APIs": [
            {
                "name": "SenderName2ID",
                "Description": "This API is to convert sender name to sender ID.",
                "input_params": {
                    "sender_name": {
                        "description": "the name of the sender",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender",
                        "type": "Integer"
                    }
                },
                "format": "SenderName2ID(sender_name) -> Sender_ID"
            },
            {
                "name": "ReceiverName2ID",
                "Description": "This API converts receiver name to receiver ID.",
                "input_params": {
                    "receiver_name": {
                        "description": "the name of the receiver",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Receiver_ID": {
                        "description": "the ID of the receiver",
                        "type": "Integer"
                    }
                },
                "format": "ReceiverName2ID(receiver_name) -> Receiver_ID"
            },
            {
                "name": "TransferAmount",
                "Description": "This API is to transfer money between two users.",
                "input_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender,it should be number",
                        "type": "Integer"
                    },
                    "Receiver_ID": {
                        "description": "the ID of the receiver,it should be number",
                        "type": "Integer"
                    },
                    "amount": {
                        "description": "the amount of money to be transferred",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "Money transfer confirmation": {
                        "description": "confirmation message for the money transfer",
                        "type": "String"
                    }
                },
                "format": "TransferAmount(Sender_ID,Receiver_ID,amount) -> Money transfer confirmation"
            }
        ],
        "Query": "I want to send $500 from my account to Sophie's account, can you help with that?",
        "Label": "TransferAmount(Sender_ID=SenderName2ID(sender_name='my account'), Receiver_ID=ReceiverName2ID(receiver_name='Sophie'), amount=500)",
        "Index": 186
    },
    {
        "APIs": [
            {
                "name": "SenderName2ID",
                "Description": "This API is to convert sender name to sender ID.",
                "input_params": {
                    "sender_name": {
                        "description": "the name of the sender",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender",
                        "type": "Integer"
                    }
                },
                "format": "SenderName2ID(sender_name) -> Sender_ID"
            },
            {
                "name": "ReceiverName2ID",
                "Description": "This API converts receiver name to receiver ID.",
                "input_params": {
                    "receiver_name": {
                        "description": "the name of the receiver",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Receiver_ID": {
                        "description": "the ID of the receiver",
                        "type": "Integer"
                    }
                },
                "format": "ReceiverName2ID(receiver_name) -> Receiver_ID"
            },
            {
                "name": "TransferAmount",
                "Description": "This API is to transfer money between two users.",
                "input_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender,it should be number",
                        "type": "Integer"
                    },
                    "Receiver_ID": {
                        "description": "the ID of the receiver,it should be number",
                        "type": "Integer"
                    },
                    "amount": {
                        "description": "the amount of money to be transferred",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "Money transfer confirmation": {
                        "description": "confirmation message for the money transfer",
                        "type": "String"
                    }
                },
                "format": "TransferAmount(Sender_ID,Receiver_ID,amount) -> Money transfer confirmation"
            }
        ],
        "Query": "Would you be able to move $3000 from my account to Bob's account?",
        "Label": "TransferAmount(Sender_ID=SenderName2ID(sender_name='my account'), Receiver_ID=ReceiverName2ID(receiver_name='Bob'), amount=3000)",
        "Index": 187
    },
    {
        "APIs": [
            {
                "name": "SenderName2ID",
                "Description": "This API is to convert sender name to sender ID.",
                "input_params": {
                    "sender_name": {
                        "description": "the name of the sender",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender",
                        "type": "Integer"
                    }
                },
                "format": "SenderName2ID(sender_name) -> Sender_ID"
            },
            {
                "name": "ReceiverName2ID",
                "Description": "This API converts receiver name to receiver ID.",
                "input_params": {
                    "receiver_name": {
                        "description": "the name of the receiver",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Receiver_ID": {
                        "description": "the ID of the receiver",
                        "type": "Integer"
                    }
                },
                "format": "ReceiverName2ID(receiver_name) -> Receiver_ID"
            },
            {
                "name": "TransferAmount",
                "Description": "This API is to transfer money between two users.",
                "input_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender,it should be number",
                        "type": "Integer"
                    },
                    "Receiver_ID": {
                        "description": "the ID of the receiver,it should be number",
                        "type": "Integer"
                    },
                    "amount": {
                        "description": "the amount of money to be transferred",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "Money transfer confirmation": {
                        "description": "confirmation message for the money transfer",
                        "type": "String"
                    }
                },
                "format": "TransferAmount(Sender_ID,Receiver_ID,amount) -> Money transfer confirmation"
            }
        ],
        "Query": "Could you please transfer $500 from Alex's account to Cindy's account?",
        "Label": "TransferAmount(Sender_ID=SenderName2ID(sender_name='Alex'), Receiver_ID=ReceiverName2ID(receiver_name='Cindy'), amount=500)",
        "Index": 188
    },
    {
        "APIs": [
            {
                "name": "SenderName2ID",
                "Description": "This API is to convert sender name to sender ID.",
                "input_params": {
                    "sender_name": {
                        "description": "the name of the sender",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender",
                        "type": "Integer"
                    }
                },
                "format": "SenderName2ID(sender_name) -> Sender_ID"
            },
            {
                "name": "ReceiverName2ID",
                "Description": "This API converts receiver name to receiver ID.",
                "input_params": {
                    "receiver_name": {
                        "description": "the name of the receiver",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Receiver_ID": {
                        "description": "the ID of the receiver",
                        "type": "Integer"
                    }
                },
                "format": "ReceiverName2ID(receiver_name) -> Receiver_ID"
            },
            {
                "name": "TransferAmount",
                "Description": "This API is to transfer money between two users.",
                "input_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender,it should be number",
                        "type": "Integer"
                    },
                    "Receiver_ID": {
                        "description": "the ID of the receiver,it should be number",
                        "type": "Integer"
                    },
                    "amount": {
                        "description": "the amount of money to be transferred",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "Money transfer confirmation": {
                        "description": "confirmation message for the money transfer",
                        "type": "String"
                    }
                },
                "format": "TransferAmount(Sender_ID,Receiver_ID,amount) -> Money transfer confirmation"
            }
        ],
        "Query": "Is it possible to transfer $100 from John's account to Lisa's account?",
        "Label": "TransferAmount(Sender_ID=SenderName2ID(sender_name='John'), Receiver_ID=ReceiverName2ID(receiver_name='Lisa'), amount=100)",
        "Index": 189
    },
    {
        "APIs": [
            {
                "name": "SenderName2ID",
                "Description": "This API is to convert sender name to sender ID.",
                "input_params": {
                    "sender_name": {
                        "description": "the name of the sender",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender",
                        "type": "Integer"
                    }
                },
                "format": "SenderName2ID(sender_name) -> Sender_ID"
            },
            {
                "name": "ReceiverName2ID",
                "Description": "This API converts receiver name to receiver ID.",
                "input_params": {
                    "receiver_name": {
                        "description": "the name of the receiver",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Receiver_ID": {
                        "description": "the ID of the receiver",
                        "type": "Integer"
                    }
                },
                "format": "ReceiverName2ID(receiver_name) -> Receiver_ID"
            },
            {
                "name": "TransferAmount",
                "Description": "This API is to transfer money between two users.",
                "input_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender,it should be number",
                        "type": "Integer"
                    },
                    "Receiver_ID": {
                        "description": "the ID of the receiver,it should be number",
                        "type": "Integer"
                    },
                    "amount": {
                        "description": "the amount of money to be transferred",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "Money transfer confirmation": {
                        "description": "confirmation message for the money transfer",
                        "type": "String"
                    }
                },
                "format": "TransferAmount(Sender_ID,Receiver_ID,amount) -> Money transfer confirmation"
            }
        ],
        "Query": "Can I transfer $50 from my account to Sam's account?",
        "Label": "TransferAmount(Sender_ID=SenderName2ID(sender_name='my account'), Receiver_ID=ReceiverName2ID(receiver_name='Sam'), amount=50)",
        "Index": 190
    },
    {
        "APIs": [
            {
                "name": "SenderName2ID",
                "Description": "This API is to convert sender name to sender ID.",
                "input_params": {
                    "sender_name": {
                        "description": "the name of the sender",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender",
                        "type": "Integer"
                    }
                },
                "format": "SenderName2ID(sender_name) -> Sender_ID"
            },
            {
                "name": "ReceiverName2ID",
                "Description": "This API converts receiver name to receiver ID.",
                "input_params": {
                    "receiver_name": {
                        "description": "the name of the receiver",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Receiver_ID": {
                        "description": "the ID of the receiver",
                        "type": "Integer"
                    }
                },
                "format": "ReceiverName2ID(receiver_name) -> Receiver_ID"
            },
            {
                "name": "TransferAmount",
                "Description": "This API is to transfer money between two users.",
                "input_params": {
                    "Sender_ID": {
                        "description": "the ID of the sender,it should be number",
                        "type": "Integer"
                    },
                    "Receiver_ID": {
                        "description": "the ID of the receiver,it should be number",
                        "type": "Integer"
                    },
                    "amount": {
                        "description": "the amount of money to be transferred",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "Money transfer confirmation": {
                        "description": "confirmation message for the money transfer",
                        "type": "String"
                    }
                },
                "format": "TransferAmount(Sender_ID,Receiver_ID,amount) -> Money transfer confirmation"
            }
        ],
        "Query": "Please transfer $1000 from my account to Alice's account.",
        "Label": "TransferAmount(Sender_ID=SenderName2ID(sender_name='my account'), Receiver_ID=ReceiverName2ID(receiver_name='Alice'), amount=1000)",
        "Index": 191
    },
    {
        "APIs": [
            {
                "name": "Address2GPS",
                "Description": "This API is to convert an address to GPS coordinates.",
                "input_params": {
                    "address": {
                        "description": "the address",
                        "type": "String"
                    }
                },
                "output_params": {
                    "GPS coordinates": {
                        "description": "the GPS coordinates",
                        "type": "String"
                    }
                },
                "format": "Address2GPS(address) -> GPS coordinates"
            },
            {
                "name": "GPS2Weather",
                "Description": "This API is to convert GPS coordinates to weather information.",
                "input_params": {
                    "gps_coordinates": {
                        "description": "the GPS coordinates",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather data": {
                        "description": "the weather data",
                        "type": "JSON"
                    }
                },
                "format": "GPS2Weather(gps_coordinates) -> weather data"
            },
            {
                "name": "CityName2Address",
                "Description": "This API is to convert a city name to its detailed address.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "address": {
                        "description": "the detailed address",
                        "type": "String"
                    }
                },
                "format": "CityName2Address(city_name) -> address"
            }
        ],
        "Query": "What's the weather like in London today?",
        "Label": "GPS2Weather(gps_coordinates=Address2GPS(address=CityName2Address(city_name='London')))",
        "Index": 192
    },
    {
        "APIs": [
            {
                "name": "ProductName2Id",
                "Description": "This API is to convert product name to its Id.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Product_Id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2Id(product_name) -> Product_Id"
            },
            {
                "name": "ProductAvailability",
                "Description": "API to check the availability of a product.",
                "input_params": {
                    "product_id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "availability": {
                        "description": "the availability of the product",
                        "type": "Boolean"
                    }
                },
                "format": "ProductAvailability(product_id) -> availability"
            }
        ],
        "Query": "Can you check if the game Cyberpunk 2077 is available in the store?",
        "Label": "ProductAvailability(product_id=ProductName2Id(product_name='Cyberpunk 2077'))",
        "Index": 193
    },
    {
        "APIs": [
            {
                "name": "ProductName2Id",
                "Description": "This API is to convert product name to its Id.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Product_Id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2Id(product_name) -> Product_Id"
            },
            {
                "name": "ProductAvailability",
                "Description": "API to check the availability of a product.",
                "input_params": {
                    "product_id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "availability": {
                        "description": "the availability of the product",
                        "type": "Boolean"
                    }
                },
                "format": "ProductAvailability(product_id) -> availability"
            }
        ],
        "Query": "Is the iPhone 13 Pro Max available for purchase?",
        "Label": "ProductAvailability(product_id=ProductName2Id(product_name='iPhone 13 Pro Max'))",
        "Index": 194
    },
    {
        "APIs": [
            {
                "name": "ProductName2Id",
                "Description": "This API is to convert product name to its Id.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Product_Id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2Id(product_name) -> Product_Id"
            },
            {
                "name": "ProductAvailability",
                "Description": "API to check the availability of a product.",
                "input_params": {
                    "product_id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "availability": {
                        "description": "the availability of the product",
                        "type": "Boolean"
                    }
                },
                "format": "ProductAvailability(product_id) -> availability"
            }
        ],
        "Query": "Can I buy the book 'The Alchemist' right now?",
        "Label": "ProductAvailability(product_id=ProductName2Id(product_name='The Alchemist'))",
        "Index": 195
    },
    {
        "APIs": [
            {
                "name": "ProductName2Id",
                "Description": "This API is to convert product name to its Id.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Product_Id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2Id(product_name) -> Product_Id"
            },
            {
                "name": "ProductAvailability",
                "Description": "API to check the availability of a product.",
                "input_params": {
                    "product_id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "availability": {
                        "description": "the availability of the product",
                        "type": "Boolean"
                    }
                },
                "format": "ProductAvailability(product_id) -> availability"
            }
        ],
        "Query": "Do you have the Samsung Galaxy S21 in stock?",
        "Label": "ProductAvailability(product_id=ProductName2Id(product_name='Samsung Galaxy S21'))",
        "Index": 196
    },
    {
        "APIs": [
            {
                "name": "ProductName2Id",
                "Description": "This API is to convert product name to its Id.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Product_Id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2Id(product_name) -> Product_Id"
            },
            {
                "name": "ProductAvailability",
                "Description": "API to check the availability of a product.",
                "input_params": {
                    "product_id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "availability": {
                        "description": "the availability of the product",
                        "type": "Boolean"
                    }
                },
                "format": "ProductAvailability(product_id) -> availability"
            }
        ],
        "Query": "Can you check the availability of the PlayStation 5?",
        "Label": "ProductAvailability(product_id=ProductName2Id(product_name='PlayStation 5'))",
        "Index": 197
    },
    {
        "APIs": [
            {
                "name": "ProductName2Id",
                "Description": "This API is to convert product name to its Id.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Product_Id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2Id(product_name) -> Product_Id"
            },
            {
                "name": "ProductAvailability",
                "Description": "API to check the availability of a product.",
                "input_params": {
                    "product_id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "availability": {
                        "description": "the availability of the product",
                        "type": "Boolean"
                    }
                },
                "format": "ProductAvailability(product_id) -> availability"
            }
        ],
        "Query": "I want to buy the MacBook Pro, is it available?",
        "Label": "ProductAvailability(product_id=ProductName2Id(product_name='MacBook Pro'))",
        "Index": 198
    },
    {
        "APIs": [
            {
                "name": "ProductName2Id",
                "Description": "This API is to convert product name to its Id.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Product_Id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2Id(product_name) -> Product_Id"
            },
            {
                "name": "ProductAvailability",
                "Description": "API to check the availability of a product.",
                "input_params": {
                    "product_id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "availability": {
                        "description": "the availability of the product",
                        "type": "Boolean"
                    }
                },
                "format": "ProductAvailability(product_id) -> availability"
            }
        ],
        "Query": "Is the iPhone 13 Pro Max available for purchase?",
        "Label": "ProductAvailability(product_id=ProductName2Id(product_name='iPhone 13 Pro Max'))",
        "Index": 199
    },
    {
        "APIs": [
            {
                "name": "ProductName2Id",
                "Description": "This API is to convert product name to its Id.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Product_Id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2Id(product_name) -> Product_Id"
            },
            {
                "name": "ProductAvailability",
                "Description": "API to check the availability of a product.",
                "input_params": {
                    "product_id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "availability": {
                        "description": "the availability of the product",
                        "type": "Boolean"
                    }
                },
                "format": "ProductAvailability(product_id) -> availability"
            }
        ],
        "Query": "Can I buy the book 'The Alchemist' right now?",
        "Label": "ProductAvailability(product_id=ProductName2Id(product_name='The Alchemist'))",
        "Index": 200
    },
    {
        "APIs": [
            {
                "name": "ProductName2Id",
                "Description": "This API is to convert product name to its Id.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Product_Id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2Id(product_name) -> Product_Id"
            },
            {
                "name": "ProductAvailability",
                "Description": "API to check the availability of a product.",
                "input_params": {
                    "product_id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "availability": {
                        "description": "the availability of the product",
                        "type": "Boolean"
                    }
                },
                "format": "ProductAvailability(product_id) -> availability"
            }
        ],
        "Query": "Do you have the Samsung Galaxy S21 in stock?",
        "Label": "ProductAvailability(product_id=ProductName2Id(product_name='Samsung Galaxy S21'))",
        "Index": 201
    },
    {
        "APIs": [
            {
                "name": "ProductName2Id",
                "Description": "This API is to convert product name to its Id.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Product_Id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2Id(product_name) -> Product_Id"
            },
            {
                "name": "ProductAvailability",
                "Description": "API to check the availability of a product.",
                "input_params": {
                    "product_id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "availability": {
                        "description": "the availability of the product",
                        "type": "Boolean"
                    }
                },
                "format": "ProductAvailability(product_id) -> availability"
            }
        ],
        "Query": "Can you check the availability of the PlayStation 5?",
        "Label": "ProductAvailability(product_id=ProductName2Id(product_name='PlayStation 5'))",
        "Index": 202
    },
    {
        "APIs": [
            {
                "name": "ProductName2Id",
                "Description": "This API is to convert product name to its Id.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Product_Id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2Id(product_name) -> Product_Id"
            },
            {
                "name": "ProductAvailability",
                "Description": "API to check the availability of a product.",
                "input_params": {
                    "product_id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "availability": {
                        "description": "the availability of the product",
                        "type": "Boolean"
                    }
                },
                "format": "ProductAvailability(product_id) -> availability"
            }
        ],
        "Query": "I want to buy the MacBook Pro, is it available?",
        "Label": "ProductAvailability(product_id=ProductName2Id(product_name='MacBook Pro'))",
        "Index": 203
    },
    {
        "APIs": [
            {
                "name": "ProductName2Id",
                "Description": "This API is to convert product name to its Id.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Product_Id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2Id(product_name) -> Product_Id"
            },
            {
                "name": "ProductAvailability",
                "Description": "API to check the availability of a product.",
                "input_params": {
                    "product_id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "availability": {
                        "description": "the availability of the product",
                        "type": "Boolean"
                    }
                },
                "format": "ProductAvailability(product_id) -> availability"
            }
        ],
        "Query": "Could you tell me if the book 'Harry Potter' is in stock?",
        "Label": "ProductAvailability(product_id=ProductName2Id(product_name='Harry Potter'))",
        "Index": 204
    },
    {
        "APIs": [
            {
                "name": "ProductName2Id",
                "Description": "This API is to convert product name to its Id.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Product_Id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2Id(product_name) -> Product_Id"
            },
            {
                "name": "ProductAvailability",
                "Description": "API to check the availability of a product.",
                "input_params": {
                    "product_id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "availability": {
                        "description": "the availability of the product",
                        "type": "Boolean"
                    }
                },
                "format": "ProductAvailability(product_id) -> availability"
            }
        ],
        "Query": "Is the movie 'Avengers: Endgame' available for purchase?",
        "Label": "ProductAvailability(product_id=ProductName2Id(product_name='Avengers: Endgame'))",
        "Index": 205
    },
    {
        "APIs": [
            {
                "name": "ProductName2Id",
                "Description": "This API is to convert product name to its Id.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Product_Id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2Id(product_name) -> Product_Id"
            },
            {
                "name": "ProductAvailability",
                "Description": "API to check the availability of a product.",
                "input_params": {
                    "product_id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "availability": {
                        "description": "the availability of the product",
                        "type": "Boolean"
                    }
                },
                "format": "ProductAvailability(product_id) -> availability"
            }
        ],
        "Query": "Can I currently buy the phone 'iPhone 12' in the store?",
        "Label": "ProductAvailability(product_id=ProductName2Id(product_name='iPhone 12'))",
        "Index": 206
    },
    {
        "APIs": [
            {
                "name": "FindFlightByDestination",
                "Description": "This API is used to retrieve flight ID by using the flight's destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FindFlightByDestination(destination) -> flight_ID"
            },
            {
                "name": "GetUserDestination",
                "Description": "This API will return the user's travel destination based on user ID.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_destination": {
                        "description": "the travel destination of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserDestination(user_ID) -> user_destination"
            },
            {
                "name": "BookFlight",
                "Description": "This API books a flight for a certain date.",
                "input_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the flight booking",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the flight booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_ID, date) -> booking_status"
            },
            {
                "name": "GetUserID",
                "Description": "This API retrieves the user ID by using the user name.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            }
        ],
        "Query": "I'm Ruby, Can you book a flight to my travel destination next Monday?",
        "Label": "BookFlight(flight_ID=FindFlightByDestination(destination=GetUserDestination(user_ID=GetUserID(userName='Ruby'))), date='next Monday')",
        "Index": 207
    },
    {
        "APIs": [
            {
                "name": "FindFlightByDestination",
                "Description": "This API is used to retrieve flight ID by using the flight's destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FindFlightByDestination(destination) -> flight_ID"
            },
            {
                "name": "GetUserDestination",
                "Description": "This API will return the user's travel destination based on user ID.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_destination": {
                        "description": "the travel destination of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserDestination(user_ID) -> user_destination"
            },
            {
                "name": "BookFlight",
                "Description": "This API books a flight for a certain date.",
                "input_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the flight booking",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the flight booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_ID, date) -> booking_status"
            },
            {
                "name": "GetUserID",
                "Description": "This API retrieves the user ID by using the user name.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            }
        ],
        "Query": "Can you help John book a flight to his destination on July 18th?",
        "Label": "BookFlight(flight_ID=FindFlightByDestination(destination=GetUserDestination(user_ID=GetUserID(userName='John'))), date='July 18th')",
        "Index": 208
    },
    {
        "APIs": [
            {
                "name": "FindFlightByDestination",
                "Description": "This API is used to retrieve flight ID by using the flight's destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FindFlightByDestination(destination) -> flight_ID"
            },
            {
                "name": "GetUserDestination",
                "Description": "This API will return the user's travel destination based on user ID.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_destination": {
                        "description": "the travel destination of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserDestination(user_ID) -> user_destination"
            },
            {
                "name": "BookFlight",
                "Description": "This API books a flight for a certain date.",
                "input_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the flight booking",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the flight booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_ID, date) -> booking_status"
            },
            {
                "name": "GetUserID",
                "Description": "This API retrieves the user ID by using the user name.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            }
        ],
        "Query": "Can you assist Emma in booking a flight to her travel destination on the 20th of this month?",
        "Label": "BookFlight(flight_ID=FindFlightByDestination(destination=GetUserDestination(user_ID=GetUserID(userName='Emma'))), date='the 20th of this month')",
        "Index": 209
    },
    {
        "APIs": [
            {
                "name": "FindFlightByDestination",
                "Description": "This API is used to retrieve flight ID by using the flight's destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FindFlightByDestination(destination) -> flight_ID"
            },
            {
                "name": "GetUserDestination",
                "Description": "This API will return the user's travel destination based on user ID.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_destination": {
                        "description": "the travel destination of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserDestination(user_ID) -> user_destination"
            },
            {
                "name": "BookFlight",
                "Description": "This API books a flight for a certain date.",
                "input_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the flight booking",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the flight booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_ID, date) -> booking_status"
            },
            {
                "name": "GetUserID",
                "Description": "This API retrieves the user ID by using the user name.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            }
        ],
        "Query": "Please assist Mia in booking a flight to her desired location on June 10th.",
        "Label": "BookFlight(flight_ID=FindFlightByDestination(destination=GetUserDestination(user_ID=GetUserID(userName='Mia'))), date='June 10th')",
        "Index": 210
    },
    {
        "APIs": [
            {
                "name": "FindFlightByDestination",
                "Description": "This API is used to retrieve flight ID by using the flight's destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FindFlightByDestination(destination) -> flight_ID"
            },
            {
                "name": "GetUserDestination",
                "Description": "This API will return the user's travel destination based on user ID.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_destination": {
                        "description": "the travel destination of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserDestination(user_ID) -> user_destination"
            },
            {
                "name": "BookFlight",
                "Description": "This API books a flight for a certain date.",
                "input_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the flight booking",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the flight booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_ID, date) -> booking_status"
            },
            {
                "name": "GetUserID",
                "Description": "This API retrieves the user ID by using the user name.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            }
        ],
        "Query": "Can you book a flight to my destination next Wednesday? My name is Tom.",
        "Label": "BookFlight(flight_ID=FindFlightByDestination(destination=GetUserDestination(user_ID=GetUserID(userName='Tom'))), date='next Wednesday')",
        "Index": 211
    },
    {
        "APIs": [
            {
                "name": "FindFlightByDestination",
                "Description": "This API is used to retrieve flight ID by using the flight's destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FindFlightByDestination(destination) -> flight_ID"
            },
            {
                "name": "GetUserDestination",
                "Description": "This API will return the user's travel destination based on user ID.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_destination": {
                        "description": "the travel destination of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserDestination(user_ID) -> user_destination"
            },
            {
                "name": "BookFlight",
                "Description": "This API books a flight for a certain date.",
                "input_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the flight booking",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the flight booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_ID, date) -> booking_status"
            },
            {
                "name": "GetUserID",
                "Description": "This API retrieves the user ID by using the user name.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            }
        ],
        "Query": "I am Jack. Could you book a flight for me to my travel destination next Saturday?",
        "Label": "BookFlight(flight_ID=FindFlightByDestination(destination=GetUserDestination(user_ID=GetUserID(userName='Jack'))), date='next Saturday')",
        "Index": 212
    },
    {
        "APIs": [
            {
                "name": "FindFlightByDestination",
                "Description": "This API is used to retrieve flight ID by using the flight's destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FindFlightByDestination(destination) -> flight_ID"
            },
            {
                "name": "GetUserDestination",
                "Description": "This API will return the user's travel destination based on user ID.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_destination": {
                        "description": "the travel destination of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserDestination(user_ID) -> user_destination"
            },
            {
                "name": "BookFlight",
                "Description": "This API books a flight for a certain date.",
                "input_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the flight booking",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the flight booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_ID, date) -> booking_status"
            },
            {
                "name": "GetUserID",
                "Description": "This API retrieves the user ID by using the user name.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            }
        ],
        "Query": "Can you find a flight and book it to my destination next Friday? I am Tina.",
        "Label": "BookFlight(flight_ID=FindFlightByDestination(destination=GetUserDestination(user_ID=GetUserID(userName='Tina'))), date='next Friday')",
        "Index": 213
    },
    {
        "APIs": [
            {
                "name": "FindFlightByDestination",
                "Description": "This API is used to retrieve flight ID by using the flight's destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FindFlightByDestination(destination) -> flight_ID"
            },
            {
                "name": "GetUserDestination",
                "Description": "This API will return the user's travel destination based on user ID.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_destination": {
                        "description": "the travel destination of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserDestination(user_ID) -> user_destination"
            },
            {
                "name": "BookFlight",
                "Description": "This API books a flight for a certain date.",
                "input_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the flight booking",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the flight booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_ID, date) -> booking_status"
            },
            {
                "name": "GetUserID",
                "Description": "This API retrieves the user ID by using the user name.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            }
        ],
        "Query": "I'm Lucas. Could you find a flight and book it to my destination next Tuesday?",
        "Label": "BookFlight(flight_ID=FindFlightByDestination(destination=GetUserDestination(user_ID=GetUserID(userName='Lucas'))), date='next Tuesday')",
        "Index": 214
    },
    {
        "APIs": [
            {
                "name": "FindFlightByDestination",
                "Description": "This API is used to retrieve flight ID by using the flight's destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FindFlightByDestination(destination) -> flight_ID"
            },
            {
                "name": "GetUserDestination",
                "Description": "This API will return the user's travel destination based on user ID.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_destination": {
                        "description": "the travel destination of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserDestination(user_ID) -> user_destination"
            },
            {
                "name": "BookFlight",
                "Description": "This API books a flight for a certain date.",
                "input_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the flight booking",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the flight booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_ID, date) -> booking_status"
            },
            {
                "name": "GetUserID",
                "Description": "This API retrieves the user ID by using the user name.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            }
        ],
        "Query": "I would like to book a flight to my destination this Friday. My name is John.",
        "Label": "BookFlight(flight_ID=FindFlightByDestination(destination=GetUserDestination(user_ID=GetUserID(userName='John'))), date='this Friday')",
        "Index": 215
    },
    {
        "APIs": [
            {
                "name": "FindFlightByDestination",
                "Description": "This API is used to retrieve flight ID by using the flight's destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FindFlightByDestination(destination) -> flight_ID"
            },
            {
                "name": "GetUserDestination",
                "Description": "This API will return the user's travel destination based on user ID.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_destination": {
                        "description": "the travel destination of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserDestination(user_ID) -> user_destination"
            },
            {
                "name": "BookFlight",
                "Description": "This API books a flight for a certain date.",
                "input_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the flight booking",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the flight booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_ID, date) -> booking_status"
            },
            {
                "name": "GetUserID",
                "Description": "This API retrieves the user ID by using the user name.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            }
        ],
        "Query": "Book a flight for me to my travel destination on 25th December. My name is Maria",
        "Label": "BookFlight(flight_ID=FindFlightByDestination(destination=GetUserDestination(user_ID=GetUserID(userName='Maria'))), date='25th December')",
        "Index": 216
    },
    {
        "APIs": [
            {
                "name": "FindFlightByDestination",
                "Description": "This API is used to retrieve flight ID by using the flight's destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FindFlightByDestination(destination) -> flight_ID"
            },
            {
                "name": "GetUserDestination",
                "Description": "This API will return the user's travel destination based on user ID.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_destination": {
                        "description": "the travel destination of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserDestination(user_ID) -> user_destination"
            },
            {
                "name": "BookFlight",
                "Description": "This API books a flight for a certain date.",
                "input_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the flight booking",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the flight booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_ID, date) -> booking_status"
            },
            {
                "name": "GetUserID",
                "Description": "This API retrieves the user ID by using the user name.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            }
        ],
        "Query": "Please reserve a flight for me to where I'm traveling on June 1st. My name is Steve.",
        "Label": "BookFlight(flight_ID=FindFlightByDestination(destination=GetUserDestination(user_ID=GetUserID(userName='Steve'))), date='June 1st')",
        "Index": 217
    },
    {
        "APIs": [
            {
                "name": "FindFlightByDestination",
                "Description": "This API is used to retrieve flight ID by using the flight's destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FindFlightByDestination(destination) -> flight_ID"
            },
            {
                "name": "GetUserDestination",
                "Description": "This API will return the user's travel destination based on user ID.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_destination": {
                        "description": "the travel destination of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserDestination(user_ID) -> user_destination"
            },
            {
                "name": "BookFlight",
                "Description": "This API books a flight for a certain date.",
                "input_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the flight booking",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the flight booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_ID, date) -> booking_status"
            },
            {
                "name": "GetUserID",
                "Description": "This API retrieves the user ID by using the user name.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            }
        ],
        "Query": "Can I get a flight to my destination on July 4th? My name is Emily",
        "Label": "BookFlight(flight_ID=FindFlightByDestination(destination=GetUserDestination(user_ID=GetUserID(userName='Emily'))), date='July 4th')",
        "Index": 218
    },
    {
        "APIs": [
            {
                "name": "FindFlightByDestination",
                "Description": "This API is used to retrieve flight ID by using the flight's destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FindFlightByDestination(destination) -> flight_ID"
            },
            {
                "name": "GetUserDestination",
                "Description": "This API will return the user's travel destination based on user ID.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_destination": {
                        "description": "the travel destination of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserDestination(user_ID) -> user_destination"
            },
            {
                "name": "BookFlight",
                "Description": "This API books a flight for a certain date.",
                "input_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the flight booking",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the flight booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_ID, date) -> booking_status"
            },
            {
                "name": "GetUserID",
                "Description": "This API retrieves the user ID by using the user name.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            }
        ],
        "Query": "I'm Oliver, can you please book a flight to my travel destination on 10th October?",
        "Label": "BookFlight(flight_ID=FindFlightByDestination(destination=GetUserDestination(user_ID=GetUserID(userName='Oliver'))), date='10th October')",
        "Index": 219
    },
    {
        "APIs": [
            {
                "name": "ItemNameToID",
                "Description": "This API is used to convert the name of the item to item ID.",
                "input_params": {
                    "item_name": {
                        "description": "the name of the item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "item_ID": {
                        "description": "the ID of the item",
                        "type": "Integer"
                    }
                },
                "format": "ItemNameToID(item_name) -> item_ID"
            },
            {
                "name": "SupplierNameToID",
                "Description": "This API is used to convert the name of the supplier to supplier ID.",
                "input_params": {
                    "supplier_name": {
                        "description": "the name of the supplier",
                        "type": "String"
                    }
                },
                "output_params": {
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    }
                },
                "format": "SupplierNameToID(supplier_name) -> supplier_ID"
            },
            {
                "name": "PlaceOrder",
                "Description": "This API places the order for a particular item from a specified supplier.",
                "input_params": {
                    "item_ID": {
                        "description": "the ID of the item",
                        "type": "Integer"
                    },
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the item",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(item_ID, supplier_ID, quantity) -> order_status"
            }
        ],
        "Query": "Can you order 10 office chairs from SuppliesPlus?",
        "Label": "PlaceOrder(item_ID=ItemNameToID(item_name='office chairs'),supplier_ID=SupplierNameToID(supplier_name='SuppliesPlus'), quantity=10)",
        "Index": 220
    },
    {
        "APIs": [
            {
                "name": "ItemNameToID",
                "Description": "This API is used to convert the name of the item to item ID.",
                "input_params": {
                    "item_name": {
                        "description": "the name of the item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "item_ID": {
                        "description": "the ID of the item",
                        "type": "Integer"
                    }
                },
                "format": "ItemNameToID(item_name) -> item_ID"
            },
            {
                "name": "SupplierNameToID",
                "Description": "This API is used to convert the name of the supplier to supplier ID.",
                "input_params": {
                    "supplier_name": {
                        "description": "the name of the supplier",
                        "type": "String"
                    }
                },
                "output_params": {
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    }
                },
                "format": "SupplierNameToID(supplier_name) -> supplier_ID"
            },
            {
                "name": "PlaceOrder",
                "Description": "This API places the order for a particular item from a specified supplier.",
                "input_params": {
                    "item_ID": {
                        "description": "the ID of the item",
                        "type": "Integer"
                    },
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the item",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(item_ID, supplier_ID, quantity) -> order_status"
            }
        ],
        "Query": "Can you order 5 computer monitors from TechnoWorld?",
        "Label": "PlaceOrder(item_ID=ItemNameToID(item_name='computer monitors'),supplier_ID=SupplierNameToID(supplier_name='TechnoWorld'), quantity=5)",
        "Index": 221
    },
    {
        "APIs": [
            {
                "name": "ItemNameToID",
                "Description": "This API is used to convert the name of the item to item ID.",
                "input_params": {
                    "item_name": {
                        "description": "the name of the item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "item_ID": {
                        "description": "the ID of the item",
                        "type": "Integer"
                    }
                },
                "format": "ItemNameToID(item_name) -> item_ID"
            },
            {
                "name": "SupplierNameToID",
                "Description": "This API is used to convert the name of the supplier to supplier ID.",
                "input_params": {
                    "supplier_name": {
                        "description": "the name of the supplier",
                        "type": "String"
                    }
                },
                "output_params": {
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    }
                },
                "format": "SupplierNameToID(supplier_name) -> supplier_ID"
            },
            {
                "name": "PlaceOrder",
                "Description": "This API places the order for a particular item from a specified supplier.",
                "input_params": {
                    "item_ID": {
                        "description": "the ID of the item",
                        "type": "Integer"
                    },
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the item",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(item_ID, supplier_ID, quantity) -> order_status"
            }
        ],
        "Query": "Can you place an order for 20 desk lamps from OfficeFurnish?",
        "Label": "PlaceOrder(item_ID=ItemNameToID(item_name='desk lamps'),supplier_ID=SupplierNameToID(supplier_name='OfficeFurnish'), quantity=20)",
        "Index": 222
    },
    {
        "APIs": [
            {
                "name": "ItemNameToID",
                "Description": "This API is used to convert the name of the item to item ID.",
                "input_params": {
                    "item_name": {
                        "description": "the name of the item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "item_ID": {
                        "description": "the ID of the item",
                        "type": "Integer"
                    }
                },
                "format": "ItemNameToID(item_name) -> item_ID"
            },
            {
                "name": "SupplierNameToID",
                "Description": "This API is used to convert the name of the supplier to supplier ID.",
                "input_params": {
                    "supplier_name": {
                        "description": "the name of the supplier",
                        "type": "String"
                    }
                },
                "output_params": {
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    }
                },
                "format": "SupplierNameToID(supplier_name) -> supplier_ID"
            },
            {
                "name": "PlaceOrder",
                "Description": "This API places the order for a particular item from a specified supplier.",
                "input_params": {
                    "item_ID": {
                        "description": "the ID of the item",
                        "type": "Integer"
                    },
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the item",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(item_ID, supplier_ID, quantity) -> order_status"
            }
        ],
        "Query": "I want to order 15 paper reams from StationeryStore.",
        "Label": "PlaceOrder(item_ID=ItemNameToID(item_name='paper reams'),supplier_ID=SupplierNameToID(supplier_name='StationeryStore'), quantity=15)",
        "Index": 223
    },
    {
        "APIs": [
            {
                "name": "ItemNameToID",
                "Description": "This API is used to convert the name of the item to item ID.",
                "input_params": {
                    "item_name": {
                        "description": "the name of the item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "item_ID": {
                        "description": "the ID of the item",
                        "type": "Integer"
                    }
                },
                "format": "ItemNameToID(item_name) -> item_ID"
            },
            {
                "name": "SupplierNameToID",
                "Description": "This API is used to convert the name of the supplier to supplier ID.",
                "input_params": {
                    "supplier_name": {
                        "description": "the name of the supplier",
                        "type": "String"
                    }
                },
                "output_params": {
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    }
                },
                "format": "SupplierNameToID(supplier_name) -> supplier_ID"
            },
            {
                "name": "PlaceOrder",
                "Description": "This API places the order for a particular item from a specified supplier.",
                "input_params": {
                    "item_ID": {
                        "description": "the ID of the item",
                        "type": "Integer"
                    },
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the item",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(item_ID, supplier_ID, quantity) -> order_status"
            }
        ],
        "Query": "I need to order 25 whiteboards from TeachingTools.",
        "Label": "PlaceOrder(item_ID=ItemNameToID(item_name='whiteboards'),supplier_ID=SupplierNameToID(supplier_name='TeachingTools'), quantity=25)",
        "Index": 224
    },
    {
        "APIs": [
            {
                "name": "ItemNameToID",
                "Description": "This API is used to convert the name of the item to item ID.",
                "input_params": {
                    "item_name": {
                        "description": "the name of the item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "item_ID": {
                        "description": "the ID of the item",
                        "type": "Integer"
                    }
                },
                "format": "ItemNameToID(item_name) -> item_ID"
            },
            {
                "name": "SupplierNameToID",
                "Description": "This API is used to convert the name of the supplier to supplier ID.",
                "input_params": {
                    "supplier_name": {
                        "description": "the name of the supplier",
                        "type": "String"
                    }
                },
                "output_params": {
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    }
                },
                "format": "SupplierNameToID(supplier_name) -> supplier_ID"
            },
            {
                "name": "PlaceOrder",
                "Description": "This API places the order for a particular item from a specified supplier.",
                "input_params": {
                    "item_ID": {
                        "description": "the ID of the item",
                        "type": "Integer"
                    },
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the item",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(item_ID, supplier_ID, quantity) -> order_status"
            }
        ],
        "Query": "I need 10 whiteboards from OfficeDepot.",
        "Label": "PlaceOrder(item_ID=ItemNameToID(item_name='whiteboards'),supplier_ID=SupplierNameToID(supplier_name='OfficeDepot'), quantity=10)",
        "Index": 225
    },
    {
        "APIs": [
            {
                "name": "ItemNameToID",
                "Description": "This API is used to convert the name of the item to item ID.",
                "input_params": {
                    "item_name": {
                        "description": "the name of the item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "item_ID": {
                        "description": "the ID of the item",
                        "type": "Integer"
                    }
                },
                "format": "ItemNameToID(item_name) -> item_ID"
            },
            {
                "name": "SupplierNameToID",
                "Description": "This API is used to convert the name of the supplier to supplier ID.",
                "input_params": {
                    "supplier_name": {
                        "description": "the name of the supplier",
                        "type": "String"
                    }
                },
                "output_params": {
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    }
                },
                "format": "SupplierNameToID(supplier_name) -> supplier_ID"
            },
            {
                "name": "PlaceOrder",
                "Description": "This API places the order for a particular item from a specified supplier.",
                "input_params": {
                    "item_ID": {
                        "description": "the ID of the item",
                        "type": "Integer"
                    },
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the item",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(item_ID, supplier_ID, quantity) -> order_status"
            }
        ],
        "Query": "Can you place an order for 20 yoga mats from FitnessGear?",
        "Label": "PlaceOrder(item_ID=ItemNameToID(item_name='yoga mats'),supplier_ID=SupplierNameToID(supplier_name='FitnessGear'), quantity=20)",
        "Index": 226
    },
    {
        "APIs": [
            {
                "name": "ItemNameToID",
                "Description": "This API is used to convert the name of the item to item ID.",
                "input_params": {
                    "item_name": {
                        "description": "the name of the item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "item_ID": {
                        "description": "the ID of the item",
                        "type": "Integer"
                    }
                },
                "format": "ItemNameToID(item_name) -> item_ID"
            },
            {
                "name": "SupplierNameToID",
                "Description": "This API is used to convert the name of the supplier to supplier ID.",
                "input_params": {
                    "supplier_name": {
                        "description": "the name of the supplier",
                        "type": "String"
                    }
                },
                "output_params": {
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    }
                },
                "format": "SupplierNameToID(supplier_name) -> supplier_ID"
            },
            {
                "name": "PlaceOrder",
                "Description": "This API places the order for a particular item from a specified supplier.",
                "input_params": {
                    "item_ID": {
                        "description": "the ID of the item",
                        "type": "Integer"
                    },
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the item",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(item_ID, supplier_ID, quantity) -> order_status"
            }
        ],
        "Query": "Please place an order for 50 coffee mugs from KitchenPlus.",
        "Label": "PlaceOrder(item_ID=ItemNameToID(item_name='coffee mugs'),supplier_ID=SupplierNameToID(supplier_name='KitchenPlus'), quantity=50)",
        "Index": 227
    },
    {
        "APIs": [
            {
                "name": "UserEmailToID",
                "Description": "This API is used to convert the user's email address to user ID.",
                "input_params": {
                    "email_address": {
                        "description": "the email address of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmailToID(email_address) -> user_ID"
            },
            {
                "name": "BookNameToID",
                "Description": "This API is to convert the book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookNameToID(book_name) -> book_ID"
            },
            {
                "name": "BorrowBook",
                "Description": "This API borrows a book for a particular user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "borrow_status": {
                        "description": "the status of the borrowing",
                        "type": "String"
                    }
                },
                "format": "BorrowBook(user_ID, book_ID) -> borrow_status"
            }
        ],
        "Query": "Can user with email 'janedoe@gmail.com' borrow the book 'The Great Gatsby'?",
        "Label": "BorrowBook(user_ID=UserEmailToID(email_address='janedoe@gmail.com'), book_ID=BookNameToID(book_name='The Great Gatsby'))",
        "Index": 228
    },
    {
        "APIs": [
            {
                "name": "UserEmailToID",
                "Description": "This API is used to convert the user's email address to user ID.",
                "input_params": {
                    "email_address": {
                        "description": "the email address of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmailToID(email_address) -> user_ID"
            },
            {
                "name": "BookNameToID",
                "Description": "This API is to convert the book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookNameToID(book_name) -> book_ID"
            },
            {
                "name": "BorrowBook",
                "Description": "This API borrows a book for a particular user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "borrow_status": {
                        "description": "the status of the borrowing",
                        "type": "String"
                    }
                },
                "format": "BorrowBook(user_ID, book_ID) -> borrow_status"
            }
        ],
        "Query": "I want to borrow the book '1984' for the user with email 'bob@example.com'",
        "Label": "BorrowBook(user_ID=UserEmailToID(email_address='bob@example.com'), book_ID=BookNameToID(book_name='1984'))",
        "Index": 229
    },
    {
        "APIs": [
            {
                "name": "UserEmailToID",
                "Description": "This API is used to convert the user's email address to user ID.",
                "input_params": {
                    "email_address": {
                        "description": "the email address of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmailToID(email_address) -> user_ID"
            },
            {
                "name": "BookNameToID",
                "Description": "This API is to convert the book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookNameToID(book_name) -> book_ID"
            },
            {
                "name": "BorrowBook",
                "Description": "This API borrows a book for a particular user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "borrow_status": {
                        "description": "the status of the borrowing",
                        "type": "String"
                    }
                },
                "format": "BorrowBook(user_ID, book_ID) -> borrow_status"
            }
        ],
        "Query": "Borrow 'To Kill a Mockingbird' for user with email 'charlie@gmail.com'",
        "Label": "BorrowBook(user_ID=UserEmailToID(email_address='charlie@gmail.com'), book_ID=BookNameToID(book_name='To Kill a Mockingbird'))",
        "Index": 230
    },
    {
        "APIs": [
            {
                "name": "UserEmailToID",
                "Description": "This API is used to convert the user's email address to user ID.",
                "input_params": {
                    "email_address": {
                        "description": "the email address of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmailToID(email_address) -> user_ID"
            },
            {
                "name": "BookNameToID",
                "Description": "This API is to convert the book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookNameToID(book_name) -> book_ID"
            },
            {
                "name": "BorrowBook",
                "Description": "This API borrows a book for a particular user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "borrow_status": {
                        "description": "the status of the borrowing",
                        "type": "String"
                    }
                },
                "format": "BorrowBook(user_ID, book_ID) -> borrow_status"
            }
        ],
        "Query": "Can user 'mary@hotmail.com' borrow the book 'Moby Dick'?",
        "Label": "BorrowBook(user_ID=UserEmailToID(email_address='mary@hotmail.com'), book_ID=BookNameToID(book_name='Moby Dick'))",
        "Index": 231
    },
    {
        "APIs": [
            {
                "name": "UserEmailToID",
                "Description": "This API is used to convert the user's email address to user ID.",
                "input_params": {
                    "email_address": {
                        "description": "the email address of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmailToID(email_address) -> user_ID"
            },
            {
                "name": "BookNameToID",
                "Description": "This API is to convert the book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookNameToID(book_name) -> book_ID"
            },
            {
                "name": "BorrowBook",
                "Description": "This API borrows a book for a particular user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "borrow_status": {
                        "description": "the status of the borrowing",
                        "type": "String"
                    }
                },
                "format": "BorrowBook(user_ID, book_ID) -> borrow_status"
            }
        ],
        "Query": "Can user with email 'janedoe@gmail.com' borrow the book 'The Great Gatsby'?",
        "Label": "BorrowBook(user_ID=UserEmailToID(email_address='janedoe@gmail.com'), book_ID=BookNameToID(book_name='The Great Gatsby'))",
        "Index": 232
    },
    {
        "APIs": [
            {
                "name": "UserEmailToID",
                "Description": "This API is used to convert the user's email address to user ID.",
                "input_params": {
                    "email_address": {
                        "description": "the email address of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmailToID(email_address) -> user_ID"
            },
            {
                "name": "BookNameToID",
                "Description": "This API is to convert the book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookNameToID(book_name) -> book_ID"
            },
            {
                "name": "BorrowBook",
                "Description": "This API borrows a book for a particular user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "borrow_status": {
                        "description": "the status of the borrowing",
                        "type": "String"
                    }
                },
                "format": "BorrowBook(user_ID, book_ID) -> borrow_status"
            }
        ],
        "Query": "I want to borrow the book '1984' for the user with email 'bob@example.com'",
        "Label": "BorrowBook(user_ID=UserEmailToID(email_address='bob@example.com'), book_ID=BookNameToID(book_name='1984'))",
        "Index": 233
    },
    {
        "APIs": [
            {
                "name": "UserEmailToID",
                "Description": "This API is used to convert the user's email address to user ID.",
                "input_params": {
                    "email_address": {
                        "description": "the email address of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmailToID(email_address) -> user_ID"
            },
            {
                "name": "BookNameToID",
                "Description": "This API is to convert the book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookNameToID(book_name) -> book_ID"
            },
            {
                "name": "BorrowBook",
                "Description": "This API borrows a book for a particular user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "borrow_status": {
                        "description": "the status of the borrowing",
                        "type": "String"
                    }
                },
                "format": "BorrowBook(user_ID, book_ID) -> borrow_status"
            }
        ],
        "Query": "Borrow 'To Kill a Mockingbird' for user with email 'charlie@gmail.com'",
        "Label": "BorrowBook(user_ID=UserEmailToID(email_address='charlie@gmail.com'), book_ID=BookNameToID(book_name='To Kill a Mockingbird'))",
        "Index": 234
    },
    {
        "APIs": [
            {
                "name": "UserEmailToID",
                "Description": "This API is used to convert the user's email address to user ID.",
                "input_params": {
                    "email_address": {
                        "description": "the email address of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmailToID(email_address) -> user_ID"
            },
            {
                "name": "BookNameToID",
                "Description": "This API is to convert the book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookNameToID(book_name) -> book_ID"
            },
            {
                "name": "BorrowBook",
                "Description": "This API borrows a book for a particular user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "borrow_status": {
                        "description": "the status of the borrowing",
                        "type": "String"
                    }
                },
                "format": "BorrowBook(user_ID, book_ID) -> borrow_status"
            }
        ],
        "Query": "Can user 'mary@hotmail.com' borrow the book 'Moby Dick'?",
        "Label": "BorrowBook(user_ID=UserEmailToID(email_address='mary@hotmail.com'), book_ID=BookNameToID(book_name='Moby Dick'))",
        "Index": 235
    },
    {
        "APIs": [
            {
                "name": "UserEmailToID",
                "Description": "This API is used to convert the user's email address to user ID.",
                "input_params": {
                    "email_address": {
                        "description": "the email address of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmailToID(email_address) -> user_ID"
            },
            {
                "name": "BookNameToID",
                "Description": "This API is to convert the book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookNameToID(book_name) -> book_ID"
            },
            {
                "name": "BorrowBook",
                "Description": "This API borrows a book for a particular user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "borrow_status": {
                        "description": "the status of the borrowing",
                        "type": "String"
                    }
                },
                "format": "BorrowBook(user_ID, book_ID) -> borrow_status"
            }
        ],
        "Query": "I want to borrow 'The Great Gatsby' for user mark.twain@example.com",
        "Label": "BorrowBook(user_ID=UserEmailToID(email_address='mark.twain@example.com'), book_ID=BookNameToID(book_name='The Great Gatsby'))",
        "Index": 236
    },
    {
        "APIs": [
            {
                "name": "UserEmailToID",
                "Description": "This API is used to convert the user's email address to user ID.",
                "input_params": {
                    "email_address": {
                        "description": "the email address of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmailToID(email_address) -> user_ID"
            },
            {
                "name": "BookNameToID",
                "Description": "This API is to convert the book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookNameToID(book_name) -> book_ID"
            },
            {
                "name": "BorrowBook",
                "Description": "This API borrows a book for a particular user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "borrow_status": {
                        "description": "the status of the borrowing",
                        "type": "String"
                    }
                },
                "format": "BorrowBook(user_ID, book_ID) -> borrow_status"
            }
        ],
        "Query": "Can user robinson.crusoe@example.com borrow the book 'To Kill a Mockingbird'?",
        "Label": "BorrowBook(user_ID=UserEmailToID(email_address='robinson.crusoe@example.com'), book_ID=BookNameToID(book_name='To Kill a Mockingbird'))",
        "Index": 237
    },
    {
        "APIs": [
            {
                "name": "UserEmailToID",
                "Description": "This API is used to convert the user's email address to user ID.",
                "input_params": {
                    "email_address": {
                        "description": "the email address of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmailToID(email_address) -> user_ID"
            },
            {
                "name": "BookNameToID",
                "Description": "This API is to convert the book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookNameToID(book_name) -> book_ID"
            },
            {
                "name": "BorrowBook",
                "Description": "This API borrows a book for a particular user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "borrow_status": {
                        "description": "the status of the borrowing",
                        "type": "String"
                    }
                },
                "format": "BorrowBook(user_ID, book_ID) -> borrow_status"
            }
        ],
        "Query": "Could you borrow 'Pride and Prejudice' for user austen.jane@example.com?",
        "Label": "BorrowBook(user_ID=UserEmailToID(email_address='austen.jane@example.com'), book_ID=BookNameToID(book_name='Pride and Prejudice'))",
        "Index": 238
    },
    {
        "APIs": [
            {
                "name": "FlightFromTo",
                "Description": "This API returns a flight id between two cities.",
                "input_params": {
                    "city1": {
                        "description": "the departure city",
                        "type": "String"
                    },
                    "city2": {
                        "description": "the destination city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_ID": {
                        "description": "the id of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FlightFromTo(city1, city2) -> flight_ID"
            },
            {
                "name": "GetPassengerID",
                "Description": "This API returns the id of a passenger.",
                "input_params": {
                    "name": {
                        "description": "the name of the passenger",
                        "type": "String"
                    }
                },
                "output_params": {
                    "passenger_ID": {
                        "description": "the id of the passenger",
                        "type": "Integer"
                    }
                },
                "format": "GetPassengerID(name) -> passenger_ID"
            },
            {
                "name": "BookFlight",
                "Description": "This API books a flight for a passenger.",
                "input_params": {
                    "passenger_ID": {
                        "description": "the id of the passenger",
                        "type": "Integer"
                    },
                    "flight_ID": {
                        "description": "the id of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(passenger_ID, flight_ID) -> booking_status"
            }
        ],
        "Query": "I want to book a flight for Sarah from Miami to Boston.",
        "Label": "BookFlight(passenger_ID=GetPassengerID(name='Sarah'), flight_ID=FlightFromTo(city1='Miami', city2='Boston'))",
        "Index": 239
    },
    {
        "APIs": [
            {
                "name": "FlightFromTo",
                "Description": "This API returns a flight id between two cities.",
                "input_params": {
                    "city1": {
                        "description": "the departure city",
                        "type": "String"
                    },
                    "city2": {
                        "description": "the destination city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_ID": {
                        "description": "the id of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FlightFromTo(city1, city2) -> flight_ID"
            },
            {
                "name": "GetPassengerID",
                "Description": "This API returns the id of a passenger.",
                "input_params": {
                    "name": {
                        "description": "the name of the passenger",
                        "type": "String"
                    }
                },
                "output_params": {
                    "passenger_ID": {
                        "description": "the id of the passenger",
                        "type": "Integer"
                    }
                },
                "format": "GetPassengerID(name) -> passenger_ID"
            },
            {
                "name": "BookFlight",
                "Description": "This API books a flight for a passenger.",
                "input_params": {
                    "passenger_ID": {
                        "description": "the id of the passenger",
                        "type": "Integer"
                    },
                    "flight_ID": {
                        "description": "the id of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(passenger_ID, flight_ID) -> booking_status"
            }
        ],
        "Query": "Can you arrange a flight for Alex from Chicago to Las Vegas?",
        "Label": "BookFlight(passenger_ID=GetPassengerID(name='Alex'), flight_ID=FlightFromTo(city1='Chicago', city2='Las Vegas'))",
        "Index": 240
    },
    {
        "APIs": [
            {
                "name": "ProductName2ID",
                "Description": "This API converts a product name to its ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "CustomerName2ID",
                "Description": "This API converts a customer name to its ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerName2ID(customer_name) -> customer_ID"
            },
            {
                "name": "AddToCart",
                "Description": "This API adds a product to a customer's shopping cart.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "Cart status": {
                        "description": "the status of the cart",
                        "type": "String"
                    }
                },
                "format": "AddToCart(customer_ID, product_ID) -> Cart status"
            }
        ],
        "Query": "Can you add a MacBook Pro to Emily's cart?",
        "Label": "AddToCart(customer_ID=CustomerName2ID(customer_name='Emily'), product_ID=ProductName2ID(product_name='MacBook Pro'))",
        "Index": 241
    },
    {
        "APIs": [
            {
                "name": "ProductName2ID",
                "Description": "This API converts a product name to its ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "CustomerName2ID",
                "Description": "This API converts a customer name to its ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerName2ID(customer_name) -> customer_ID"
            },
            {
                "name": "AddToCart",
                "Description": "This API adds a product to a customer's shopping cart.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "Cart status": {
                        "description": "the status of the cart",
                        "type": "String"
                    }
                },
                "format": "AddToCart(customer_ID, product_ID) -> Cart status"
            }
        ],
        "Query": "Please add a Samsung Galaxy S21 to Anthony's cart.",
        "Label": "AddToCart(customer_ID=CustomerName2ID(customer_name='Anthony'), product_ID=ProductName2ID(product_name='Samsung Galaxy S21'))",
        "Index": 242
    },
    {
        "APIs": [
            {
                "name": "ProductName2ID",
                "Description": "This API converts a product name to its ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "CustomerName2ID",
                "Description": "This API converts a customer name to its ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerName2ID(customer_name) -> customer_ID"
            },
            {
                "name": "AddToCart",
                "Description": "This API adds a product to a customer's shopping cart.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "Cart status": {
                        "description": "the status of the cart",
                        "type": "String"
                    }
                },
                "format": "AddToCart(customer_ID, product_ID) -> Cart status"
            }
        ],
        "Query": "Could you please add an iPad Pro to Olivia's cart?",
        "Label": "AddToCart(customer_ID=CustomerName2ID(customer_name='Olivia'), product_ID=ProductName2ID(product_name='iPad Pro'))",
        "Index": 243
    },
    {
        "APIs": [
            {
                "name": "ProductName2ID",
                "Description": "This API converts a product name to its ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "CustomerName2ID",
                "Description": "This API converts a customer name to its ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerName2ID(customer_name) -> customer_ID"
            },
            {
                "name": "AddToCart",
                "Description": "This API adds a product to a customer's shopping cart.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "Cart status": {
                        "description": "the status of the cart",
                        "type": "String"
                    }
                },
                "format": "AddToCart(customer_ID, product_ID) -> Cart status"
            }
        ],
        "Query": "Could you please add an Apple Watch to Jack's cart?",
        "Label": "AddToCart(customer_ID=CustomerName2ID(customer_name='Jack'), product_ID=ProductName2ID(product_name='Apple Watch'))",
        "Index": 244
    },
    {
        "APIs": [
            {
                "name": "ProductName2ID",
                "Description": "This API converts a product name to its ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "CustomerName2ID",
                "Description": "This API converts a customer name to its ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerName2ID(customer_name) -> customer_ID"
            },
            {
                "name": "AddToCart",
                "Description": "This API adds a product to a customer's shopping cart.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "Cart status": {
                        "description": "the status of the cart",
                        "type": "String"
                    }
                },
                "format": "AddToCart(customer_ID, product_ID) -> Cart status"
            }
        ],
        "Query": "Please add a Dell Laptop to Jessica's cart.",
        "Label": "AddToCart(customer_ID=CustomerName2ID(customer_name='Jessica'), product_ID=ProductName2ID(product_name='Dell Laptop'))",
        "Index": 245
    },
    {
        "APIs": [
            {
                "name": "ProductName2ID",
                "Description": "This API converts a product name to its ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "CustomerName2ID",
                "Description": "This API converts a customer name to its ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerName2ID(customer_name) -> customer_ID"
            },
            {
                "name": "AddToCart",
                "Description": "This API adds a product to a customer's shopping cart.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "Cart status": {
                        "description": "the status of the cart",
                        "type": "String"
                    }
                },
                "format": "AddToCart(customer_ID, product_ID) -> Cart status"
            }
        ],
        "Query": "Can you add a Samsung Galaxy S21 to Emily's cart?",
        "Label": "AddToCart(customer_ID=CustomerName2ID(customer_name='Emily'), product_ID=ProductName2ID(product_name='Samsung Galaxy S21'))",
        "Index": 246
    },
    {
        "APIs": [
            {
                "name": "ProductName2ID",
                "Description": "This API converts a product name to its ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "CustomerName2ID",
                "Description": "This API converts a customer name to its ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerName2ID(customer_name) -> customer_ID"
            },
            {
                "name": "AddToCart",
                "Description": "This API adds a product to a customer's shopping cart.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "Cart status": {
                        "description": "the status of the cart",
                        "type": "String"
                    }
                },
                "format": "AddToCart(customer_ID, product_ID) -> Cart status"
            }
        ],
        "Query": "I'd like to add a MacBook Pro to Lisa's shopping cart. Can you do that?",
        "Label": "AddToCart(customer_ID=CustomerName2ID(customer_name='Lisa'), product_ID=ProductName2ID(product_name='MacBook Pro'))",
        "Index": 247
    },
    {
        "APIs": [
            {
                "name": "ProductName2ID",
                "Description": "This API converts a product name to its ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "CustomerName2ID",
                "Description": "This API converts a customer name to its ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerName2ID(customer_name) -> customer_ID"
            },
            {
                "name": "AddToCart",
                "Description": "This API adds a product to a customer's shopping cart.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "Cart status": {
                        "description": "the status of the cart",
                        "type": "String"
                    }
                },
                "format": "AddToCart(customer_ID, product_ID) -> Cart status"
            }
        ],
        "Query": "Please add the Apple Watch Series 6 to Jack's cart.",
        "Label": "AddToCart(customer_ID=CustomerName2ID(customer_name='Jack'), product_ID=ProductName2ID(product_name='Apple Watch Series 6'))",
        "Index": 248
    },
    {
        "APIs": [
            {
                "name": "ProductName2ID",
                "Description": "This API converts a product name to its ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "CustomerName2ID",
                "Description": "This API converts a customer name to its ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerName2ID(customer_name) -> customer_ID"
            },
            {
                "name": "AddToCart",
                "Description": "This API adds a product to a customer's shopping cart.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "Cart status": {
                        "description": "the status of the cart",
                        "type": "String"
                    }
                },
                "format": "AddToCart(customer_ID, product_ID) -> Cart status"
            }
        ],
        "Query": "Could you put a Canon EOS 5D Mark IV in Maria's cart for me?",
        "Label": "AddToCart(customer_ID=CustomerName2ID(customer_name='Maria'), product_ID=ProductName2ID(product_name='Canon EOS 5D Mark IV'))",
        "Index": 249
    },
    {
        "APIs": [
            {
                "name": "ProductName2ID",
                "Description": "This API converts a product name to its ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "CustomerName2ID",
                "Description": "This API converts a customer name to its ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerName2ID(customer_name) -> customer_ID"
            },
            {
                "name": "AddToCart",
                "Description": "This API adds a product to a customer's shopping cart.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "Cart status": {
                        "description": "the status of the cart",
                        "type": "String"
                    }
                },
                "format": "AddToCart(customer_ID, product_ID) -> Cart status"
            }
        ],
        "Query": "Add the Sony A7 III to Peter's cart, please.",
        "Label": "AddToCart(customer_ID=CustomerName2ID(customer_name='Peter'), product_ID=ProductName2ID(product_name='Sony A7 III'))",
        "Index": 250
    },
    {
        "APIs": [
            {
                "name": "FindHotel",
                "Description": "This API returns a recommended hotel in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the recommended hotel",
                        "type": "String"
                    }
                },
                "format": "FindHotel(city) -> hotel_name"
            },
            {
                "name": "BookRoom",
                "Description": "This API allows the user to book a room at a specific hotel for a specific number of nights and date.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "date": {
                        "description": "the starting date of the booking",
                        "type": "Date"
                    },
                    "number_of_nights": {
                        "description": "the number of nights for the booking",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookRoom(hotel_name, date, number_of_nights) -> booking status"
            }
        ],
        "Query": "I'm in Chicago and I need to book a room for 3 nights starting from tomorrow.",
        "Label": "BookRoom(hotel_name=FindHotel(city='Chicago'), date='tomorrow', number_of_nights=3)",
        "Index": 251
    },
    {
        "APIs": [
            {
                "name": "FindHotel",
                "Description": "This API returns a recommended hotel in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the recommended hotel",
                        "type": "String"
                    }
                },
                "format": "FindHotel(city) -> hotel_name"
            },
            {
                "name": "BookRoom",
                "Description": "This API allows the user to book a room at a specific hotel for a specific number of nights and date.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "date": {
                        "description": "the starting date of the booking",
                        "type": "Date"
                    },
                    "number_of_nights": {
                        "description": "the number of nights for the booking",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookRoom(hotel_name, date, number_of_nights) -> booking status"
            }
        ],
        "Query": "I'm in Seattle and I need to book a room for 5 nights starting from this Saturday.",
        "Label": "BookRoom(hotel_name=FindHotel(city='Seattle'), date='this Saturday', number_of_nights=5)",
        "Index": 252
    },
    {
        "APIs": [
            {
                "name": "FindHotel",
                "Description": "This API returns a recommended hotel in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the recommended hotel",
                        "type": "String"
                    }
                },
                "format": "FindHotel(city) -> hotel_name"
            },
            {
                "name": "BookRoom",
                "Description": "This API allows the user to book a room at a specific hotel for a specific number of nights and date.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "date": {
                        "description": "the starting date of the booking",
                        "type": "Date"
                    },
                    "number_of_nights": {
                        "description": "the number of nights for the booking",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookRoom(hotel_name, date, number_of_nights) -> booking status"
            }
        ],
        "Query": "I want to book a hotel in Miami for 4 nights starting from the day after tomorrow.",
        "Label": "BookRoom(hotel_name=FindHotel(city='Miami'), date='the day after tomorrow', number_of_nights=4)",
        "Index": 253
    },
    {
        "APIs": [
            {
                "name": "FindHotel",
                "Description": "This API returns a recommended hotel in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the recommended hotel",
                        "type": "String"
                    }
                },
                "format": "FindHotel(city) -> hotel_name"
            },
            {
                "name": "BookRoom",
                "Description": "This API allows the user to book a room at a specific hotel for a specific number of nights and date.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "date": {
                        "description": "the starting date of the booking",
                        "type": "Date"
                    },
                    "number_of_nights": {
                        "description": "the number of nights for the booking",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookRoom(hotel_name, date, number_of_nights) -> booking status"
            }
        ],
        "Query": "I need to find a hotel in Boston and book it for 2 nights starting from next Monday.",
        "Label": "BookRoom(hotel_name=FindHotel(city='Boston'), date='next Monday', number_of_nights=2)",
        "Index": 254
    },
    {
        "APIs": [
            {
                "name": "FindHotel",
                "Description": "This API returns a recommended hotel in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the recommended hotel",
                        "type": "String"
                    }
                },
                "format": "FindHotel(city) -> hotel_name"
            },
            {
                "name": "BookRoom",
                "Description": "This API allows the user to book a room at a specific hotel for a specific number of nights and date.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "date": {
                        "description": "the starting date of the booking",
                        "type": "Date"
                    },
                    "number_of_nights": {
                        "description": "the number of nights for the booking",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookRoom(hotel_name, date, number_of_nights) -> booking status"
            }
        ],
        "Query": "I will be in New York next week, can you book a room for 5 nights?",
        "Label": "BookRoom(hotel_name=FindHotel(city='New York'), date='next week', number_of_nights=5)",
        "Index": 255
    },
    {
        "APIs": [
            {
                "name": "FindHotel",
                "Description": "This API returns a recommended hotel in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the recommended hotel",
                        "type": "String"
                    }
                },
                "format": "FindHotel(city) -> hotel_name"
            },
            {
                "name": "BookRoom",
                "Description": "This API allows the user to book a room at a specific hotel for a specific number of nights and date.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "date": {
                        "description": "the starting date of the booking",
                        "type": "Date"
                    },
                    "number_of_nights": {
                        "description": "the number of nights for the booking",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookRoom(hotel_name, date, number_of_nights) -> booking status"
            }
        ],
        "Query": "Please find a hotel in Los Angeles and book a room for 4 nights starting from this Friday.",
        "Label": "BookRoom(hotel_name=FindHotel(city='Los Angeles'), date='this Friday', number_of_nights=4)",
        "Index": 256
    },
    {
        "APIs": [
            {
                "name": "FindHotel",
                "Description": "This API returns a recommended hotel in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the recommended hotel",
                        "type": "String"
                    }
                },
                "format": "FindHotel(city) -> hotel_name"
            },
            {
                "name": "BookRoom",
                "Description": "This API allows the user to book a room at a specific hotel for a specific number of nights and date.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "date": {
                        "description": "the starting date of the booking",
                        "type": "Date"
                    },
                    "number_of_nights": {
                        "description": "the number of nights for the booking",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookRoom(hotel_name, date, number_of_nights) -> booking status"
            }
        ],
        "Query": "I'm going to San Francisco next month, I need to book a room for 7 nights.",
        "Label": "BookRoom(hotel_name=FindHotel(city='San Francisco'), date='next month', number_of_nights=7)",
        "Index": 257
    },
    {
        "APIs": [
            {
                "name": "FindHotel",
                "Description": "This API returns a recommended hotel in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the recommended hotel",
                        "type": "String"
                    }
                },
                "format": "FindHotel(city) -> hotel_name"
            },
            {
                "name": "BookRoom",
                "Description": "This API allows the user to book a room at a specific hotel for a specific number of nights and date.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "date": {
                        "description": "the starting date of the booking",
                        "type": "Date"
                    },
                    "number_of_nights": {
                        "description": "the number of nights for the booking",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookRoom(hotel_name, date, number_of_nights) -> booking status"
            }
        ],
        "Query": "I need a room in Miami for 6 nights starting from today.",
        "Label": "BookRoom(hotel_name=FindHotel(city='Miami'), date='today', number_of_nights=6)",
        "Index": 258
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API returns the weather forecast of a specified city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather report": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather report"
            },
            {
                "name": "RecommendOutfit",
                "Description": "This API recommends an outfit based on the weather conditions.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit details": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "RecommendOutfit(weather) -> outfit details"
            }
        ],
        "Query": "What should I wear in London on July 5th?",
        "Label": "RecommendOutfit(weather=GetWeatherForecast(city='London', date='July 5th'))",
        "Index": 259
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API returns the weather forecast of a specified city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather report": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather report"
            },
            {
                "name": "RecommendOutfit",
                "Description": "This API recommends an outfit based on the weather conditions.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit details": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "RecommendOutfit(weather) -> outfit details"
            }
        ],
        "Query": "What clothes should I wear in Sydney on November 30th according to the weather?",
        "Label": "RecommendOutfit(weather=GetWeatherForecast(city='Sydney', date='November 30th'))",
        "Index": 260
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API returns the weather forecast of a specified city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather report": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather report"
            },
            {
                "name": "RecommendOutfit",
                "Description": "This API recommends an outfit based on the weather conditions.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit details": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "RecommendOutfit(weather) -> outfit details"
            }
        ],
        "Query": "What's the outfit recommendation for New York's weather on August 10th?",
        "Label": "RecommendOutfit(weather=GetWeatherForecast(city='New York', date='August 10th'))",
        "Index": 261
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API returns the weather forecast of a specified city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather report": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather report"
            },
            {
                "name": "RecommendOutfit",
                "Description": "This API recommends an outfit based on the weather conditions.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit details": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "RecommendOutfit(weather) -> outfit details"
            }
        ],
        "Query": "What should I wear in Beijing on November 8th?",
        "Label": "RecommendOutfit(weather=GetWeatherForecast(city='Beijing', date='November 8th'))",
        "Index": 262
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API returns the weather forecast of a specified city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather report": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather report"
            },
            {
                "name": "RecommendOutfit",
                "Description": "This API recommends an outfit based on the weather conditions.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit details": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "RecommendOutfit(weather) -> outfit details"
            }
        ],
        "Query": "What do you suggest to wear in Paris on May 15th?",
        "Label": "RecommendOutfit(weather=GetWeatherForecast(city='Paris', date='May 15th'))",
        "Index": 263
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API returns the weather forecast of a specified city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather report": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather report"
            },
            {
                "name": "RecommendOutfit",
                "Description": "This API recommends an outfit based on the weather conditions.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit details": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "RecommendOutfit(weather) -> outfit details"
            }
        ],
        "Query": "What should I dress in Sydney on March 20th?",
        "Label": "RecommendOutfit(weather=GetWeatherForecast(city='Sydney', date='March 20th'))",
        "Index": 264
    },
    {
        "APIs": [
            {
                "name": "BookFinder",
                "Description": "This API is to find a specific book by genre, author, and year.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the book",
                        "type": "String"
                    },
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    },
                    "year": {
                        "description": "the year the book was published",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book": {
                        "description": "the specific book matching the given criteria",
                        "type": "String"
                    }
                },
                "format": "BookFinder(genre, author, year) -> book"
            },
            {
                "name": "BookSummary",
                "Description": "This API is to get a summary of a particular book.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "summary": {
                        "description": "the summary of the book",
                        "type": "String"
                    }
                },
                "format": "BookSummary(book_name) -> summary"
            }
        ],
        "Query": "I'm looking for a summary of a science fiction book written by Arthur C. Clarke, published in 2001.",
        "Label": "BookSummary(book_name=BookFinder(genre='science fiction', author='Arthur C. Clarke', year='2001'))",
        "Index": 265
    },
    {
        "APIs": [
            {
                "name": "BookFinder",
                "Description": "This API is to find a specific book by genre, author, and year.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the book",
                        "type": "String"
                    },
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    },
                    "year": {
                        "description": "the year the book was published",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book": {
                        "description": "the specific book matching the given criteria",
                        "type": "String"
                    }
                },
                "format": "BookFinder(genre, author, year) -> book"
            },
            {
                "name": "BookSummary",
                "Description": "This API is to get a summary of a particular book.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "summary": {
                        "description": "the summary of the book",
                        "type": "String"
                    }
                },
                "format": "BookSummary(book_name) -> summary"
            }
        ],
        "Query": "Can I have a summary of a thriller book by Dan Brown that was published in 2003?",
        "Label": "BookSummary(book_name=BookFinder(genre='thriller', author='Dan Brown', year='2003'))",
        "Index": 266
    },
    {
        "APIs": [
            {
                "name": "BookFinder",
                "Description": "This API is to find a specific book by genre, author, and year.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the book",
                        "type": "String"
                    },
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    },
                    "year": {
                        "description": "the year the book was published",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book": {
                        "description": "the specific book matching the given criteria",
                        "type": "String"
                    }
                },
                "format": "BookFinder(genre, author, year) -> book"
            },
            {
                "name": "BookSummary",
                "Description": "This API is to get a summary of a particular book.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "summary": {
                        "description": "the summary of the book",
                        "type": "String"
                    }
                },
                "format": "BookSummary(book_name) -> summary"
            }
        ],
        "Query": "Give me a summary of a romance novel by Nicholas Sparks from 1996.",
        "Label": "BookSummary(book_name=BookFinder(genre='romance', author='Nicholas Sparks', year='1996'))",
        "Index": 267
    },
    {
        "APIs": [
            {
                "name": "BookFinder",
                "Description": "This API is to find a specific book by genre, author, and year.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the book",
                        "type": "String"
                    },
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    },
                    "year": {
                        "description": "the year the book was published",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book": {
                        "description": "the specific book matching the given criteria",
                        "type": "String"
                    }
                },
                "format": "BookFinder(genre, author, year) -> book"
            },
            {
                "name": "BookSummary",
                "Description": "This API is to get a summary of a particular book.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "summary": {
                        "description": "the summary of the book",
                        "type": "String"
                    }
                },
                "format": "BookSummary(book_name) -> summary"
            }
        ],
        "Query": "I want a summary of a fantasy book written by J.K. Rowling in 1997.",
        "Label": "BookSummary(book_name=BookFinder(genre='fantasy', author='J.K. Rowling', year='1997'))",
        "Index": 268
    },
    {
        "APIs": [
            {
                "name": "BookFinder",
                "Description": "This API is to find a specific book by genre, author, and year.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the book",
                        "type": "String"
                    },
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    },
                    "year": {
                        "description": "the year the book was published",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book": {
                        "description": "the specific book matching the given criteria",
                        "type": "String"
                    }
                },
                "format": "BookFinder(genre, author, year) -> book"
            },
            {
                "name": "BookSummary",
                "Description": "This API is to get a summary of a particular book.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "summary": {
                        "description": "the summary of the book",
                        "type": "String"
                    }
                },
                "format": "BookSummary(book_name) -> summary"
            }
        ],
        "Query": "Can you provide a summary of a mystery novel by Agatha Christie from 1934?",
        "Label": "BookSummary(book_name=BookFinder(genre='mystery', author='Agatha Christie', year='1934'))",
        "Index": 269
    },
    {
        "APIs": [
            {
                "name": "BookFinder",
                "Description": "This API is to find a specific book by genre, author, and year.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the book",
                        "type": "String"
                    },
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    },
                    "year": {
                        "description": "the year the book was published",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book": {
                        "description": "the specific book matching the given criteria",
                        "type": "String"
                    }
                },
                "format": "BookFinder(genre, author, year) -> book"
            },
            {
                "name": "BookSummary",
                "Description": "This API is to get a summary of a particular book.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "summary": {
                        "description": "the summary of the book",
                        "type": "String"
                    }
                },
                "format": "BookSummary(book_name) -> summary"
            }
        ],
        "Query": "I'd like a summary of a historical fiction book by Ken Follett that was published in 1989.",
        "Label": "BookSummary(book_name=BookFinder(genre='historical fiction', author='Ken Follett', year='1989'))",
        "Index": 270
    },
    {
        "APIs": [
            {
                "name": "BookFinder",
                "Description": "This API is to find a specific book by genre, author, and year.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the book",
                        "type": "String"
                    },
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    },
                    "year": {
                        "description": "the year the book was published",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book": {
                        "description": "the specific book matching the given criteria",
                        "type": "String"
                    }
                },
                "format": "BookFinder(genre, author, year) -> book"
            },
            {
                "name": "BookSummary",
                "Description": "This API is to get a summary of a particular book.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "summary": {
                        "description": "the summary of the book",
                        "type": "String"
                    }
                },
                "format": "BookSummary(book_name) -> summary"
            }
        ],
        "Query": "I want a summary of a mystery book by Agatha Christie that came out in 1920.",
        "Label": "BookSummary(book_name=BookFinder(genre='mystery', author='Agatha Christie', year='1920'))",
        "Index": 271
    },
    {
        "APIs": [
            {
                "name": "BookFinder",
                "Description": "This API is to find a specific book by genre, author, and year.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the book",
                        "type": "String"
                    },
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    },
                    "year": {
                        "description": "the year the book was published",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book": {
                        "description": "the specific book matching the given criteria",
                        "type": "String"
                    }
                },
                "format": "BookFinder(genre, author, year) -> book"
            },
            {
                "name": "BookSummary",
                "Description": "This API is to get a summary of a particular book.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "summary": {
                        "description": "the summary of the book",
                        "type": "String"
                    }
                },
                "format": "BookSummary(book_name) -> summary"
            }
        ],
        "Query": "Can you give me a summary of a historical fiction book written by Ken Follett in 1989?",
        "Label": "BookSummary(book_name=BookFinder(genre='historical fiction', author='Ken Follett', year='1989'))",
        "Index": 272
    },
    {
        "APIs": [
            {
                "name": "BookFinder",
                "Description": "This API is to find a specific book by genre, author, and year.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the book",
                        "type": "String"
                    },
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    },
                    "year": {
                        "description": "the year the book was published",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book": {
                        "description": "the specific book matching the given criteria",
                        "type": "String"
                    }
                },
                "format": "BookFinder(genre, author, year) -> book"
            },
            {
                "name": "BookSummary",
                "Description": "This API is to get a summary of a particular book.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "summary": {
                        "description": "the summary of the book",
                        "type": "String"
                    }
                },
                "format": "BookSummary(book_name) -> summary"
            }
        ],
        "Query": "I wish to know the summary of a romance book by Nora Roberts which was published in 2001.",
        "Label": "BookSummary(book_name=BookFinder(genre='romance', author='Nora Roberts', year='2001'))",
        "Index": 273
    },
    {
        "APIs": [
            {
                "name": "BookFinder",
                "Description": "This API is to find a specific book by genre, author, and year.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the book",
                        "type": "String"
                    },
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    },
                    "year": {
                        "description": "the year the book was published",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book": {
                        "description": "the specific book matching the given criteria",
                        "type": "String"
                    }
                },
                "format": "BookFinder(genre, author, year) -> book"
            },
            {
                "name": "BookSummary",
                "Description": "This API is to get a summary of a particular book.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "summary": {
                        "description": "the summary of the book",
                        "type": "String"
                    }
                },
                "format": "BookSummary(book_name) -> summary"
            }
        ],
        "Query": "Could you tell me the summary of a horror book by Stephen King that was published in 1983?",
        "Label": "BookSummary(book_name=BookFinder(genre='horror', author='Stephen King', year='1983'))",
        "Index": 274
    },
    {
        "APIs": [
            {
                "name": "MusicIdentifier",
                "Description": "This API identifies a specific song from a certain genre, by an artist, from a specific album.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the song",
                        "type": "String"
                    },
                    "artist": {
                        "description": "the artist of the song",
                        "type": "String"
                    },
                    "album": {
                        "description": "the album of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song": {
                        "description": "the specific song identified",
                        "type": "String"
                    }
                },
                "format": "MusicIdentifier(genre, artist, album) -> song"
            },
            {
                "name": "LyricExtractor",
                "Description": "This API extracts lyrics of a specific song.",
                "input_params": {
                    "song_name": {
                        "description": "the name of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "lyrics": {
                        "description": "the lyrics of the song",
                        "type": "String"
                    }
                },
                "format": "LyricExtractor(song_name) -> lyrics"
            }
        ],
        "Query": "I want to find the lyrics to the pop song by Taylor Swift from the album \"1989\".",
        "Label": "LyricExtractor(song_name=MusicIdentifier(genre='pop', artist='Taylor Swift', album='1989'))",
        "Index": 275
    },
    {
        "APIs": [
            {
                "name": "MusicIdentifier",
                "Description": "This API identifies a specific song from a certain genre, by an artist, from a specific album.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the song",
                        "type": "String"
                    },
                    "artist": {
                        "description": "the artist of the song",
                        "type": "String"
                    },
                    "album": {
                        "description": "the album of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song": {
                        "description": "the specific song identified",
                        "type": "String"
                    }
                },
                "format": "MusicIdentifier(genre, artist, album) -> song"
            },
            {
                "name": "LyricExtractor",
                "Description": "This API extracts lyrics of a specific song.",
                "input_params": {
                    "song_name": {
                        "description": "the name of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "lyrics": {
                        "description": "the lyrics of the song",
                        "type": "String"
                    }
                },
                "format": "LyricExtractor(song_name) -> lyrics"
            }
        ],
        "Query": "Can you provide the lyrics for the rock song by Queen from the album 'Bohemian Rhapsody'?",
        "Label": "LyricExtractor(song_name=MusicIdentifier(genre='rock', artist='Queen', album='Bohemian Rhapsody'))",
        "Index": 276
    },
    {
        "APIs": [
            {
                "name": "MusicIdentifier",
                "Description": "This API identifies a specific song from a certain genre, by an artist, from a specific album.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the song",
                        "type": "String"
                    },
                    "artist": {
                        "description": "the artist of the song",
                        "type": "String"
                    },
                    "album": {
                        "description": "the album of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song": {
                        "description": "the specific song identified",
                        "type": "String"
                    }
                },
                "format": "MusicIdentifier(genre, artist, album) -> song"
            },
            {
                "name": "LyricExtractor",
                "Description": "This API extracts lyrics of a specific song.",
                "input_params": {
                    "song_name": {
                        "description": "the name of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "lyrics": {
                        "description": "the lyrics of the song",
                        "type": "String"
                    }
                },
                "format": "LyricExtractor(song_name) -> lyrics"
            }
        ],
        "Query": "I'm looking for the lyrics of the hip hop song by Kendrick Lamar from the album 'DAMN'",
        "Label": "LyricExtractor(song_name=MusicIdentifier(genre='hip hop', artist='Kendrick Lamar', album='DAMN'))",
        "Index": 277
    },
    {
        "APIs": [
            {
                "name": "MusicIdentifier",
                "Description": "This API identifies a specific song from a certain genre, by an artist, from a specific album.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the song",
                        "type": "String"
                    },
                    "artist": {
                        "description": "the artist of the song",
                        "type": "String"
                    },
                    "album": {
                        "description": "the album of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song": {
                        "description": "the specific song identified",
                        "type": "String"
                    }
                },
                "format": "MusicIdentifier(genre, artist, album) -> song"
            },
            {
                "name": "LyricExtractor",
                "Description": "This API extracts lyrics of a specific song.",
                "input_params": {
                    "song_name": {
                        "description": "the name of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "lyrics": {
                        "description": "the lyrics of the song",
                        "type": "String"
                    }
                },
                "format": "LyricExtractor(song_name) -> lyrics"
            }
        ],
        "Query": "I'm interested in the lyrics of the country song by Johnny Cash from the album \"At Folsom Prison\".",
        "Label": "LyricExtractor(song_name=MusicIdentifier(genre='country', artist='Johnny Cash', album='At Folsom Prison'))",
        "Index": 278
    },
    {
        "APIs": [
            {
                "name": "MusicIdentifier",
                "Description": "This API identifies a specific song from a certain genre, by an artist, from a specific album.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the song",
                        "type": "String"
                    },
                    "artist": {
                        "description": "the artist of the song",
                        "type": "String"
                    },
                    "album": {
                        "description": "the album of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song": {
                        "description": "the specific song identified",
                        "type": "String"
                    }
                },
                "format": "MusicIdentifier(genre, artist, album) -> song"
            },
            {
                "name": "LyricExtractor",
                "Description": "This API extracts lyrics of a specific song.",
                "input_params": {
                    "song_name": {
                        "description": "the name of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "lyrics": {
                        "description": "the lyrics of the song",
                        "type": "String"
                    }
                },
                "format": "LyricExtractor(song_name) -> lyrics"
            }
        ],
        "Query": "I'm looking for the lyrics of a hip hop song by Kendrick Lamar from the album \"To Pimp a Butterfly\".",
        "Label": "LyricExtractor(song_name=MusicIdentifier(genre='hip hop', artist='Kendrick Lamar', album='To Pimp a Butterfly'))",
        "Index": 279
    },
    {
        "APIs": [
            {
                "name": "MovieSuggestion",
                "Description": "This API suggests a movie based on the genre, director, and the year.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "director": {
                        "description": "the director of the movie",
                        "type": "String"
                    },
                    "year": {
                        "description": "the year of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "movie": {
                        "description": "the suggested movie",
                        "type": "String"
                    }
                },
                "format": "MovieSuggestion(genre, director, year) -> movie"
            },
            {
                "name": "MovieReview",
                "Description": "This API provides a review of a particular movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "review": {
                        "description": "the review of the movie",
                        "type": "String"
                    }
                },
                "format": "MovieReview(movie_name) -> review"
            }
        ],
        "Query": "Could you show me the review of a horror movie directed by Stephen King released in 1990?",
        "Label": "MovieReview(movie_name=MovieSuggestion(genre='horror', director='Stephen King', year='1990'))",
        "Index": 280
    },
    {
        "APIs": [
            {
                "name": "MovieSuggestion",
                "Description": "This API suggests a movie based on the genre, director, and the year.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "director": {
                        "description": "the director of the movie",
                        "type": "String"
                    },
                    "year": {
                        "description": "the year of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "movie": {
                        "description": "the suggested movie",
                        "type": "String"
                    }
                },
                "format": "MovieSuggestion(genre, director, year) -> movie"
            },
            {
                "name": "MovieReview",
                "Description": "This API provides a review of a particular movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "review": {
                        "description": "the review of the movie",
                        "type": "String"
                    }
                },
                "format": "MovieReview(movie_name) -> review"
            }
        ],
        "Query": "Can I get a review of a comedy movie directed by Christopher Nolan released in 2008?",
        "Label": "MovieReview(movie_name=MovieSuggestion(genre='comedy', director='Christopher Nolan', year='2008'))",
        "Index": 281
    },
    {
        "APIs": [
            {
                "name": "MovieSuggestion",
                "Description": "This API suggests a movie based on the genre, director, and the year.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "director": {
                        "description": "the director of the movie",
                        "type": "String"
                    },
                    "year": {
                        "description": "the year of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "movie": {
                        "description": "the suggested movie",
                        "type": "String"
                    }
                },
                "format": "MovieSuggestion(genre, director, year) -> movie"
            },
            {
                "name": "MovieReview",
                "Description": "This API provides a review of a particular movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "review": {
                        "description": "the review of the movie",
                        "type": "String"
                    }
                },
                "format": "MovieReview(movie_name) -> review"
            }
        ],
        "Query": "I wonder if I could see the review of a romance movie by Woody Allen in 2011?",
        "Label": "MovieReview(movie_name=MovieSuggestion(genre='romance', director='Woody Allen', year='2011'))",
        "Index": 282
    },
    {
        "APIs": [
            {
                "name": "MovieSuggestion",
                "Description": "This API suggests a movie based on the genre, director, and the year.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "director": {
                        "description": "the director of the movie",
                        "type": "String"
                    },
                    "year": {
                        "description": "the year of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "movie": {
                        "description": "the suggested movie",
                        "type": "String"
                    }
                },
                "format": "MovieSuggestion(genre, director, year) -> movie"
            },
            {
                "name": "MovieReview",
                "Description": "This API provides a review of a particular movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "review": {
                        "description": "the review of the movie",
                        "type": "String"
                    }
                },
                "format": "MovieReview(movie_name) -> review"
            }
        ],
        "Query": "Could you provide a review of a fantasy movie directed by Tim Burton that came out in 2005?",
        "Label": "MovieReview(movie_name=MovieSuggestion(genre='fantasy', director='Tim Burton', year='2005'))",
        "Index": 283
    },
    {
        "APIs": [
            {
                "name": "MovieSuggestion",
                "Description": "This API suggests a movie based on the genre, director, and the year.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "director": {
                        "description": "the director of the movie",
                        "type": "String"
                    },
                    "year": {
                        "description": "the year of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "movie": {
                        "description": "the suggested movie",
                        "type": "String"
                    }
                },
                "format": "MovieSuggestion(genre, director, year) -> movie"
            },
            {
                "name": "MovieReview",
                "Description": "This API provides a review of a particular movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "review": {
                        "description": "the review of the movie",
                        "type": "String"
                    }
                },
                "format": "MovieReview(movie_name) -> review"
            }
        ],
        "Query": "Will you show me the review of a drama movie directed by Quentin Tarantino, which was released in 2012?",
        "Label": "MovieReview(movie_name=MovieSuggestion(genre='drama', director='Quentin Tarantino', year='2012'))",
        "Index": 284
    },
    {
        "APIs": [
            {
                "name": "MovieSuggestion",
                "Description": "This API suggests a movie based on the genre, director, and the year.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "director": {
                        "description": "the director of the movie",
                        "type": "String"
                    },
                    "year": {
                        "description": "the year of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "movie": {
                        "description": "the suggested movie",
                        "type": "String"
                    }
                },
                "format": "MovieSuggestion(genre, director, year) -> movie"
            },
            {
                "name": "MovieReview",
                "Description": "This API provides a review of a particular movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "review": {
                        "description": "the review of the movie",
                        "type": "String"
                    }
                },
                "format": "MovieReview(movie_name) -> review"
            }
        ],
        "Query": "Is it possible to get a review for a thriller movie directed by Alfred Hitchcock released in 1960?",
        "Label": "MovieReview(movie_name=MovieSuggestion(genre='thriller', director='Alfred Hitchcock', year='1960'))",
        "Index": 285
    },
    {
        "APIs": [
            {
                "name": "MovieSuggestion",
                "Description": "This API suggests a movie based on the genre, director, and the year.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "director": {
                        "description": "the director of the movie",
                        "type": "String"
                    },
                    "year": {
                        "description": "the year of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "movie": {
                        "description": "the suggested movie",
                        "type": "String"
                    }
                },
                "format": "MovieSuggestion(genre, director, year) -> movie"
            },
            {
                "name": "MovieReview",
                "Description": "This API provides a review of a particular movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "review": {
                        "description": "the review of the movie",
                        "type": "String"
                    }
                },
                "format": "MovieReview(movie_name) -> review"
            }
        ],
        "Query": "Can you tell me the review of a sci-fi movie directed by Steven Spielberg released in 1982?",
        "Label": "MovieReview(movie_name=MovieSuggestion(genre='sci-fi', director='Steven Spielberg', year='1982'))",
        "Index": 286
    },
    {
        "APIs": [
            {
                "name": "MovieSuggestion",
                "Description": "This API suggests a movie based on the genre, director, and the year.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "director": {
                        "description": "the director of the movie",
                        "type": "String"
                    },
                    "year": {
                        "description": "the year of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "movie": {
                        "description": "the suggested movie",
                        "type": "String"
                    }
                },
                "format": "MovieSuggestion(genre, director, year) -> movie"
            },
            {
                "name": "MovieReview",
                "Description": "This API provides a review of a particular movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "review": {
                        "description": "the review of the movie",
                        "type": "String"
                    }
                },
                "format": "MovieReview(movie_name) -> review"
            }
        ],
        "Query": "Could you show me the review of a romance movie directed by Richard Linklater released in 1995?",
        "Label": "MovieReview(movie_name=MovieSuggestion(genre='romance', director='Richard Linklater', year='1995'))",
        "Index": 287
    },
    {
        "APIs": [
            {
                "name": "MovieSuggestion",
                "Description": "This API suggests a movie based on the genre, director, and the year.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "director": {
                        "description": "the director of the movie",
                        "type": "String"
                    },
                    "year": {
                        "description": "the year of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "movie": {
                        "description": "the suggested movie",
                        "type": "String"
                    }
                },
                "format": "MovieSuggestion(genre, director, year) -> movie"
            },
            {
                "name": "MovieReview",
                "Description": "This API provides a review of a particular movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "review": {
                        "description": "the review of the movie",
                        "type": "String"
                    }
                },
                "format": "MovieReview(movie_name) -> review"
            }
        ],
        "Query": "Can you provide me the review for an action movie directed by Michael Bay from 2007?",
        "Label": "MovieReview(movie_name=MovieSuggestion(genre='action', director='Michael Bay', year='2007'))",
        "Index": 288
    },
    {
        "APIs": [
            {
                "name": "SearchFlight",
                "Description": "This API is to search for flights based on user's departure, destination, and date.",
                "input_params": {
                    "city_from": {
                        "description": "the departure city",
                        "type": "String"
                    },
                    "city_to": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "SearchFlight(city_from, city_to, date) -> flight_id"
            },
            {
                "name": "GetFlightDetails",
                "Description": "This API is to get detailed information about a specific flight.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "details": {
                        "description": "detailed information about the flight",
                        "type": "String"
                    }
                },
                "format": "GetFlightDetails(flight_id) -> details"
            }
        ],
        "Query": "Could you please provide me flight details for the best flight from Los Angeles to New York on 25th July?",
        "Label": "GetFlightDetails(flight_id=SearchFlight(city_from='Los Angeles', city_to='New York', date='25th July'))",
        "Index": 289
    },
    {
        "APIs": [
            {
                "name": "SearchFlight",
                "Description": "This API is to search for flights based on user's departure, destination, and date.",
                "input_params": {
                    "city_from": {
                        "description": "the departure city",
                        "type": "String"
                    },
                    "city_to": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "SearchFlight(city_from, city_to, date) -> flight_id"
            },
            {
                "name": "GetFlightDetails",
                "Description": "This API is to get detailed information about a specific flight.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "details": {
                        "description": "detailed information about the flight",
                        "type": "String"
                    }
                },
                "format": "GetFlightDetails(flight_id) -> details"
            }
        ],
        "Query": "Can you find me the flight details of the first flight from San Diego to Chicago on 15th June?",
        "Label": "GetFlightDetails(flight_id=SearchFlight(city_from='San Diego', city_to='Chicago', date='15th June'))",
        "Index": 290
    },
    {
        "APIs": [
            {
                "name": "SearchFlight",
                "Description": "This API is to search for flights based on user's departure, destination, and date.",
                "input_params": {
                    "city_from": {
                        "description": "the departure city",
                        "type": "String"
                    },
                    "city_to": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "SearchFlight(city_from, city_to, date) -> flight_id"
            },
            {
                "name": "GetFlightDetails",
                "Description": "This API is to get detailed information about a specific flight.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "details": {
                        "description": "detailed information about the flight",
                        "type": "String"
                    }
                },
                "format": "GetFlightDetails(flight_id) -> details"
            }
        ],
        "Query": "I need details for the earliest flight from Boston to Miami on 20th August.",
        "Label": "GetFlightDetails(flight_id=SearchFlight(city_from='Boston', city_to='Miami', date='20th August'))",
        "Index": 291
    },
    {
        "APIs": [
            {
                "name": "SearchFlight",
                "Description": "This API is to search for flights based on user's departure, destination, and date.",
                "input_params": {
                    "city_from": {
                        "description": "the departure city",
                        "type": "String"
                    },
                    "city_to": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "SearchFlight(city_from, city_to, date) -> flight_id"
            },
            {
                "name": "GetFlightDetails",
                "Description": "This API is to get detailed information about a specific flight.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "details": {
                        "description": "detailed information about the flight",
                        "type": "String"
                    }
                },
                "format": "GetFlightDetails(flight_id) -> details"
            }
        ],
        "Query": "What are the details for the flight from Toronto to Vancouver on 10th September?",
        "Label": "GetFlightDetails(flight_id=SearchFlight(city_from='Toronto', city_to='Vancouver', date='10th September'))",
        "Index": 292
    },
    {
        "APIs": [
            {
                "name": "SearchFlight",
                "Description": "This API is to search for flights based on user's departure, destination, and date.",
                "input_params": {
                    "city_from": {
                        "description": "the departure city",
                        "type": "String"
                    },
                    "city_to": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "SearchFlight(city_from, city_to, date) -> flight_id"
            },
            {
                "name": "GetFlightDetails",
                "Description": "This API is to get detailed information about a specific flight.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "details": {
                        "description": "detailed information about the flight",
                        "type": "String"
                    }
                },
                "format": "GetFlightDetails(flight_id) -> details"
            }
        ],
        "Query": "Could you fetch me the details of the flight from London to Paris on 5th December?",
        "Label": "GetFlightDetails(flight_id=SearchFlight(city_from='London', city_to='Paris', date='5th December'))",
        "Index": 293
    },
    {
        "APIs": [
            {
                "name": "SearchFlight",
                "Description": "This API is to search for flights based on user's departure, destination, and date.",
                "input_params": {
                    "city_from": {
                        "description": "the departure city",
                        "type": "String"
                    },
                    "city_to": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "SearchFlight(city_from, city_to, date) -> flight_id"
            },
            {
                "name": "GetFlightDetails",
                "Description": "This API is to get detailed information about a specific flight.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "details": {
                        "description": "detailed information about the flight",
                        "type": "String"
                    }
                },
                "format": "GetFlightDetails(flight_id) -> details"
            }
        ],
        "Query": "Can I get the details for the flight from Tokyo to Beijing on 30th January?",
        "Label": "GetFlightDetails(flight_id=SearchFlight(city_from='Tokyo', city_to='Beijing', date='30th January'))",
        "Index": 294
    },
    {
        "APIs": [
            {
                "name": "SearchFlight",
                "Description": "This API is to search for flights based on user's departure, destination, and date.",
                "input_params": {
                    "city_from": {
                        "description": "the departure city",
                        "type": "String"
                    },
                    "city_to": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "SearchFlight(city_from, city_to, date) -> flight_id"
            },
            {
                "name": "GetFlightDetails",
                "Description": "This API is to get detailed information about a specific flight.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "details": {
                        "description": "detailed information about the flight",
                        "type": "String"
                    }
                },
                "format": "GetFlightDetails(flight_id) -> details"
            }
        ],
        "Query": "Can you find me the details for the flight from Houston to Miami on 12th December?",
        "Label": "GetFlightDetails(flight_id=SearchFlight(city_from='Houston', city_to='Miami', date='12th December'))",
        "Index": 295
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast of a specific location on a specific date.",
                "input_params": {
                    "location": {
                        "description": "the location for weather forecast",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date for weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_info": {
                        "description": "the weather forecast information",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(location, date) -> weather_info"
            },
            {
                "name": "GetClothingRecommendation",
                "Description": "This API is to get clothing recommendation based on the weather forecast.",
                "input_params": {
                    "weather_info": {
                        "description": "the weather forecast information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_recommendation": {
                        "description": "the recommended clothing based on the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetClothingRecommendation(weather_info) -> clothing_recommendation"
            }
        ],
        "Query": "What should I wear in Paris on 15th March?",
        "Label": "GetClothingRecommendation(weather_info=GetWeatherForecast(location='Paris', date='15th March'))",
        "Index": 296
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast of a specific location on a specific date.",
                "input_params": {
                    "location": {
                        "description": "the location for weather forecast",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date for weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_info": {
                        "description": "the weather forecast information",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(location, date) -> weather_info"
            },
            {
                "name": "GetClothingRecommendation",
                "Description": "This API is to get clothing recommendation based on the weather forecast.",
                "input_params": {
                    "weather_info": {
                        "description": "the weather forecast information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_recommendation": {
                        "description": "the recommended clothing based on the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetClothingRecommendation(weather_info) -> clothing_recommendation"
            }
        ],
        "Query": "What is the clothing recommendation for Sydney on April 21st?",
        "Label": "GetClothingRecommendation(weather_info=GetWeatherForecast(location='Sydney', date='April 21st'))",
        "Index": 297
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast of a specific location on a specific date.",
                "input_params": {
                    "location": {
                        "description": "the location for weather forecast",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date for weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_info": {
                        "description": "the weather forecast information",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(location, date) -> weather_info"
            },
            {
                "name": "GetClothingRecommendation",
                "Description": "This API is to get clothing recommendation based on the weather forecast.",
                "input_params": {
                    "weather_info": {
                        "description": "the weather forecast information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_recommendation": {
                        "description": "the recommended clothing based on the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetClothingRecommendation(weather_info) -> clothing_recommendation"
            }
        ],
        "Query": "What clothes should I wear in London on 1st May?",
        "Label": "GetClothingRecommendation(weather_info=GetWeatherForecast(location='London', date='1st May'))",
        "Index": 298
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast of a specific location on a specific date.",
                "input_params": {
                    "location": {
                        "description": "the location for weather forecast",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date for weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_info": {
                        "description": "the weather forecast information",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(location, date) -> weather_info"
            },
            {
                "name": "GetClothingRecommendation",
                "Description": "This API is to get clothing recommendation based on the weather forecast.",
                "input_params": {
                    "weather_info": {
                        "description": "the weather forecast information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_recommendation": {
                        "description": "the recommended clothing based on the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetClothingRecommendation(weather_info) -> clothing_recommendation"
            }
        ],
        "Query": "What should I wear in Tokyo on June 30th?",
        "Label": "GetClothingRecommendation(weather_info=GetWeatherForecast(location='Tokyo', date='June 30th'))",
        "Index": 299
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast of a specific location on a specific date.",
                "input_params": {
                    "location": {
                        "description": "the location for weather forecast",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date for weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_info": {
                        "description": "the weather forecast information",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(location, date) -> weather_info"
            },
            {
                "name": "GetClothingRecommendation",
                "Description": "This API is to get clothing recommendation based on the weather forecast.",
                "input_params": {
                    "weather_info": {
                        "description": "the weather forecast information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_recommendation": {
                        "description": "the recommended clothing based on the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetClothingRecommendation(weather_info) -> clothing_recommendation"
            }
        ],
        "Query": "What is the clothing suggestion for New York City on July 4th?",
        "Label": "GetClothingRecommendation(weather_info=GetWeatherForecast(location='New York City', date='July 4th'))",
        "Index": 300
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast of a specific location on a specific date.",
                "input_params": {
                    "location": {
                        "description": "the location for weather forecast",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date for weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_info": {
                        "description": "the weather forecast information",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(location, date) -> weather_info"
            },
            {
                "name": "GetClothingRecommendation",
                "Description": "This API is to get clothing recommendation based on the weather forecast.",
                "input_params": {
                    "weather_info": {
                        "description": "the weather forecast information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_recommendation": {
                        "description": "the recommended clothing based on the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetClothingRecommendation(weather_info) -> clothing_recommendation"
            }
        ],
        "Query": "What clothes should I prepare for Berlin on December 25th?",
        "Label": "GetClothingRecommendation(weather_info=GetWeatherForecast(location='Berlin', date='December 25th'))",
        "Index": 301
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast of a specific location on a specific date.",
                "input_params": {
                    "location": {
                        "description": "the location for weather forecast",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date for weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_info": {
                        "description": "the weather forecast information",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(location, date) -> weather_info"
            },
            {
                "name": "GetClothingRecommendation",
                "Description": "This API is to get clothing recommendation based on the weather forecast.",
                "input_params": {
                    "weather_info": {
                        "description": "the weather forecast information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_recommendation": {
                        "description": "the recommended clothing based on the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetClothingRecommendation(weather_info) -> clothing_recommendation"
            }
        ],
        "Query": "What's the suitable attire in London on 1st April?",
        "Label": "GetClothingRecommendation(weather_info=GetWeatherForecast(location='London', date='1st April'))",
        "Index": 302
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast of a specific location on a specific date.",
                "input_params": {
                    "location": {
                        "description": "the location for weather forecast",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date for weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_info": {
                        "description": "the weather forecast information",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(location, date) -> weather_info"
            },
            {
                "name": "GetClothingRecommendation",
                "Description": "This API is to get clothing recommendation based on the weather forecast.",
                "input_params": {
                    "weather_info": {
                        "description": "the weather forecast information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_recommendation": {
                        "description": "the recommended clothing based on the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetClothingRecommendation(weather_info) -> clothing_recommendation"
            }
        ],
        "Query": "What attire should I put on in New York on 4th July?",
        "Label": "GetClothingRecommendation(weather_info=GetWeatherForecast(location='New York', date='4th July'))",
        "Index": 303
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast of a specific location on a specific date.",
                "input_params": {
                    "location": {
                        "description": "the location for weather forecast",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date for weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_info": {
                        "description": "the weather forecast information",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(location, date) -> weather_info"
            },
            {
                "name": "GetClothingRecommendation",
                "Description": "This API is to get clothing recommendation based on the weather forecast.",
                "input_params": {
                    "weather_info": {
                        "description": "the weather forecast information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_recommendation": {
                        "description": "the recommended clothing based on the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetClothingRecommendation(weather_info) -> clothing_recommendation"
            }
        ],
        "Query": "What should I dress in Tokyo on 10th October?",
        "Label": "GetClothingRecommendation(weather_info=GetWeatherForecast(location='Tokyo', date='10th October'))",
        "Index": 304
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast of a specific location on a specific date.",
                "input_params": {
                    "location": {
                        "description": "the location for weather forecast",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date for weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_info": {
                        "description": "the weather forecast information",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(location, date) -> weather_info"
            },
            {
                "name": "GetClothingRecommendation",
                "Description": "This API is to get clothing recommendation based on the weather forecast.",
                "input_params": {
                    "weather_info": {
                        "description": "the weather forecast information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_recommendation": {
                        "description": "the recommended clothing based on the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetClothingRecommendation(weather_info) -> clothing_recommendation"
            }
        ],
        "Query": "What's the recommended clothing in Sydney on 25th December?",
        "Label": "GetClothingRecommendation(weather_info=GetWeatherForecast(location='Sydney', date='25th December'))",
        "Index": 305
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast of a specific location on a specific date.",
                "input_params": {
                    "location": {
                        "description": "the location for weather forecast",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date for weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_info": {
                        "description": "the weather forecast information",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(location, date) -> weather_info"
            },
            {
                "name": "GetClothingRecommendation",
                "Description": "This API is to get clothing recommendation based on the weather forecast.",
                "input_params": {
                    "weather_info": {
                        "description": "the weather forecast information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_recommendation": {
                        "description": "the recommended clothing based on the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetClothingRecommendation(weather_info) -> clothing_recommendation"
            }
        ],
        "Query": "What should I wear in Beijing on 5th May?",
        "Label": "GetClothingRecommendation(weather_info=GetWeatherForecast(location='Beijing', date='5th May'))",
        "Index": 306
    },
    {
        "APIs": [
            {
                "name": "GetHotelAvailability",
                "Description": "This API checks the availability of hotels in a specific city on specific dates.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "dates": {
                        "description": "specific dates",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel": {
                        "description": "list of available hotels",
                        "type": "List"
                    }
                },
                "format": "GetHotelAvailability(city, dates) -> hotel"
            },
            {
                "name": "GetRestaurants",
                "Description": "This API provides a list of restaurants in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurants": {
                        "description": "list of restaurants",
                        "type": "List"
                    }
                },
                "format": "GetRestaurants(city) -> restaurants"
            },
            {
                "name": "PlanTrip",
                "Description": "This API plans a trip including a hotel stay and restaurants visits.",
                "input_params": {
                    "hotel": {
                        "description": "list of available hotels",
                        "type": "List"
                    },
                    "restaurants": {
                        "description": "list of restaurants",
                        "type": "List"
                    }
                },
                "output_params": {
                    "trip": {
                        "description": "planned trip details",
                        "type": "Object"
                    }
                },
                "format": "PlanTrip(hotel, restaurants) -> trip"
            }
        ],
        "Query": "I need to plan a trip to Los Angeles next month. Can you assist?",
        "Label": "PlanTrip(hotel=GetHotelAvailability(city='Los Angeles', dates='next month'), restaurants=GetRestaurants(city='Los Angeles'))",
        "Index": 307
    },
    {
        "APIs": [
            {
                "name": "GetHotelAvailability",
                "Description": "This API checks the availability of hotels in a specific city on specific dates.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "dates": {
                        "description": "specific dates",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel": {
                        "description": "list of available hotels",
                        "type": "List"
                    }
                },
                "format": "GetHotelAvailability(city, dates) -> hotel"
            },
            {
                "name": "GetRestaurants",
                "Description": "This API provides a list of restaurants in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurants": {
                        "description": "list of restaurants",
                        "type": "List"
                    }
                },
                "format": "GetRestaurants(city) -> restaurants"
            },
            {
                "name": "PlanTrip",
                "Description": "This API plans a trip including a hotel stay and restaurants visits.",
                "input_params": {
                    "hotel": {
                        "description": "list of available hotels",
                        "type": "List"
                    },
                    "restaurants": {
                        "description": "list of restaurants",
                        "type": "List"
                    }
                },
                "output_params": {
                    "trip": {
                        "description": "planned trip details",
                        "type": "Object"
                    }
                },
                "format": "PlanTrip(hotel, restaurants) -> trip"
            }
        ],
        "Query": "Can you assist me in planning a trip to Miami for the upcoming holiday?",
        "Label": "PlanTrip(hotel=GetHotelAvailability(city='Miami', dates='upcoming holiday'), restaurants=GetRestaurants(city='Miami'))",
        "Index": 308
    },
    {
        "APIs": [
            {
                "name": "GetHotelAvailability",
                "Description": "This API checks the availability of hotels in a specific city on specific dates.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "dates": {
                        "description": "specific dates",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel": {
                        "description": "list of available hotels",
                        "type": "List"
                    }
                },
                "format": "GetHotelAvailability(city, dates) -> hotel"
            },
            {
                "name": "GetRestaurants",
                "Description": "This API provides a list of restaurants in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurants": {
                        "description": "list of restaurants",
                        "type": "List"
                    }
                },
                "format": "GetRestaurants(city) -> restaurants"
            },
            {
                "name": "PlanTrip",
                "Description": "This API plans a trip including a hotel stay and restaurants visits.",
                "input_params": {
                    "hotel": {
                        "description": "list of available hotels",
                        "type": "List"
                    },
                    "restaurants": {
                        "description": "list of restaurants",
                        "type": "List"
                    }
                },
                "output_params": {
                    "trip": {
                        "description": "planned trip details",
                        "type": "Object"
                    }
                },
                "format": "PlanTrip(hotel, restaurants) -> trip"
            }
        ],
        "Query": "Can you help me plan a trip to Tokyo this summer?",
        "Label": "PlanTrip(hotel=GetHotelAvailability(city='Tokyo', dates='this summer'), restaurants=GetRestaurants(city='Tokyo'))",
        "Index": 309
    },
    {
        "APIs": [
            {
                "name": "CurrentExchangeRate",
                "Description": "This API is to get the current exchange rate for a specific currency.",
                "input_params": {
                    "currency": {
                        "description": "the currency code",
                        "type": "String"
                    }
                },
                "output_params": {
                    "exchangeRate": {
                        "description": "the current exchange rate",
                        "type": "Float"
                    }
                },
                "format": "CurrentExchangeRate(currency) -> exchangeRate"
            },
            {
                "name": "BudgetInLocalCurrency",
                "Description": "This API is to calculate the budget in local currency using the original budget and current exchange rate.",
                "input_params": {
                    "budget": {
                        "description": "the original budget in USD",
                        "type": "Float"
                    },
                    "exchangeRate": {
                        "description": "the current exchange rate",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "localBudget": {
                        "description": "the budget in local currency",
                        "type": "Float"
                    }
                },
                "format": "BudgetInLocalCurrency(budget, exchangeRate) -> localBudget"
            },
            {
                "name": "SuggestDiningOptions",
                "Description": "This API is to suggest dining options based on the local budget and location.",
                "input_params": {
                    "localBudget": {
                        "description": "the budget in local currency",
                        "type": "Float"
                    },
                    "location": {
                        "description": "the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "diningOptions": {
                        "description": "a list of suggested dining options",
                        "type": "List"
                    }
                },
                "format": "SuggestDiningOptions(localBudget, location) -> diningOptions"
            }
        ],
        "Query": "I have 300 USD and I'm planning to visit Paris. Can you suggest some dining places?",
        "Label": "SuggestDiningOptions(localBudget=BudgetInLocalCurrency(budget=300, exchangeRate=CurrentExchangeRate(currency='USD')),location='Paris')",
        "Index": 310
    },
    {
        "APIs": [
            {
                "name": "CurrentExchangeRate",
                "Description": "This API is to get the current exchange rate for a specific currency.",
                "input_params": {
                    "currency": {
                        "description": "the currency code",
                        "type": "String"
                    }
                },
                "output_params": {
                    "exchangeRate": {
                        "description": "the current exchange rate",
                        "type": "Float"
                    }
                },
                "format": "CurrentExchangeRate(currency) -> exchangeRate"
            },
            {
                "name": "BudgetInLocalCurrency",
                "Description": "This API is to calculate the budget in local currency using the original budget and current exchange rate.",
                "input_params": {
                    "budget": {
                        "description": "the original budget in USD",
                        "type": "Float"
                    },
                    "exchangeRate": {
                        "description": "the current exchange rate",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "localBudget": {
                        "description": "the budget in local currency",
                        "type": "Float"
                    }
                },
                "format": "BudgetInLocalCurrency(budget, exchangeRate) -> localBudget"
            },
            {
                "name": "SuggestDiningOptions",
                "Description": "This API is to suggest dining options based on the local budget and location.",
                "input_params": {
                    "localBudget": {
                        "description": "the budget in local currency",
                        "type": "Float"
                    },
                    "location": {
                        "description": "the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "diningOptions": {
                        "description": "a list of suggested dining options",
                        "type": "List"
                    }
                },
                "format": "SuggestDiningOptions(localBudget, location) -> diningOptions"
            }
        ],
        "Query": "I am going to visit London with a budget of 500 USD. Can you recommend some restaurants?",
        "Label": "SuggestDiningOptions(localBudget=BudgetInLocalCurrency(budget=500, exchangeRate=CurrentExchangeRate(currency='USD')),location='London')",
        "Index": 311
    },
    {
        "APIs": [
            {
                "name": "CurrentExchangeRate",
                "Description": "This API is to get the current exchange rate for a specific currency.",
                "input_params": {
                    "currency": {
                        "description": "the currency code",
                        "type": "String"
                    }
                },
                "output_params": {
                    "exchangeRate": {
                        "description": "the current exchange rate",
                        "type": "Float"
                    }
                },
                "format": "CurrentExchangeRate(currency) -> exchangeRate"
            },
            {
                "name": "BudgetInLocalCurrency",
                "Description": "This API is to calculate the budget in local currency using the original budget and current exchange rate.",
                "input_params": {
                    "budget": {
                        "description": "the original budget in USD",
                        "type": "Float"
                    },
                    "exchangeRate": {
                        "description": "the current exchange rate",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "localBudget": {
                        "description": "the budget in local currency",
                        "type": "Float"
                    }
                },
                "format": "BudgetInLocalCurrency(budget, exchangeRate) -> localBudget"
            },
            {
                "name": "SuggestDiningOptions",
                "Description": "This API is to suggest dining options based on the local budget and location.",
                "input_params": {
                    "localBudget": {
                        "description": "the budget in local currency",
                        "type": "Float"
                    },
                    "location": {
                        "description": "the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "diningOptions": {
                        "description": "a list of suggested dining options",
                        "type": "List"
                    }
                },
                "format": "SuggestDiningOptions(localBudget, location) -> diningOptions"
            }
        ],
        "Query": "I'm traveling to Sydney with 250 USD. What are some dining options?",
        "Label": "SuggestDiningOptions(localBudget=BudgetInLocalCurrency(budget=250, exchangeRate=CurrentExchangeRate(currency='USD')),location='Sydney')",
        "Index": 312
    },
    {
        "APIs": [
            {
                "name": "CurrentExchangeRate",
                "Description": "This API is to get the current exchange rate for a specific currency.",
                "input_params": {
                    "currency": {
                        "description": "the currency code",
                        "type": "String"
                    }
                },
                "output_params": {
                    "exchangeRate": {
                        "description": "the current exchange rate",
                        "type": "Float"
                    }
                },
                "format": "CurrentExchangeRate(currency) -> exchangeRate"
            },
            {
                "name": "BudgetInLocalCurrency",
                "Description": "This API is to calculate the budget in local currency using the original budget and current exchange rate.",
                "input_params": {
                    "budget": {
                        "description": "the original budget in USD",
                        "type": "Float"
                    },
                    "exchangeRate": {
                        "description": "the current exchange rate",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "localBudget": {
                        "description": "the budget in local currency",
                        "type": "Float"
                    }
                },
                "format": "BudgetInLocalCurrency(budget, exchangeRate) -> localBudget"
            },
            {
                "name": "SuggestDiningOptions",
                "Description": "This API is to suggest dining options based on the local budget and location.",
                "input_params": {
                    "localBudget": {
                        "description": "the budget in local currency",
                        "type": "Float"
                    },
                    "location": {
                        "description": "the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "diningOptions": {
                        "description": "a list of suggested dining options",
                        "type": "List"
                    }
                },
                "format": "SuggestDiningOptions(localBudget, location) -> diningOptions"
            }
        ],
        "Query": "I will be in Beijing with a 400 USD budget. Can you suggest where I can eat?",
        "Label": "SuggestDiningOptions(localBudget=BudgetInLocalCurrency(budget=400, exchangeRate=CurrentExchangeRate(currency='USD')),location='Beijing')",
        "Index": 313
    },
    {
        "APIs": [
            {
                "name": "CurrentExchangeRate",
                "Description": "This API is to get the current exchange rate for a specific currency.",
                "input_params": {
                    "currency": {
                        "description": "the currency code",
                        "type": "String"
                    }
                },
                "output_params": {
                    "exchangeRate": {
                        "description": "the current exchange rate",
                        "type": "Float"
                    }
                },
                "format": "CurrentExchangeRate(currency) -> exchangeRate"
            },
            {
                "name": "BudgetInLocalCurrency",
                "Description": "This API is to calculate the budget in local currency using the original budget and current exchange rate.",
                "input_params": {
                    "budget": {
                        "description": "the original budget in USD",
                        "type": "Float"
                    },
                    "exchangeRate": {
                        "description": "the current exchange rate",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "localBudget": {
                        "description": "the budget in local currency",
                        "type": "Float"
                    }
                },
                "format": "BudgetInLocalCurrency(budget, exchangeRate) -> localBudget"
            },
            {
                "name": "SuggestDiningOptions",
                "Description": "This API is to suggest dining options based on the local budget and location.",
                "input_params": {
                    "localBudget": {
                        "description": "the budget in local currency",
                        "type": "Float"
                    },
                    "location": {
                        "description": "the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "diningOptions": {
                        "description": "a list of suggested dining options",
                        "type": "List"
                    }
                },
                "format": "SuggestDiningOptions(localBudget, location) -> diningOptions"
            }
        ],
        "Query": "I'm planning a trip to Rome with 350 USD. Could you recommend some dining places?",
        "Label": "SuggestDiningOptions(localBudget=BudgetInLocalCurrency(budget=350, exchangeRate=CurrentExchangeRate(currency='USD')),location='Rome')",
        "Index": 314
    },
    {
        "APIs": [
            {
                "name": "CurrentExchangeRate",
                "Description": "This API is to get the current exchange rate for a specific currency.",
                "input_params": {
                    "currency": {
                        "description": "the currency code",
                        "type": "String"
                    }
                },
                "output_params": {
                    "exchangeRate": {
                        "description": "the current exchange rate",
                        "type": "Float"
                    }
                },
                "format": "CurrentExchangeRate(currency) -> exchangeRate"
            },
            {
                "name": "BudgetInLocalCurrency",
                "Description": "This API is to calculate the budget in local currency using the original budget and current exchange rate.",
                "input_params": {
                    "budget": {
                        "description": "the original budget in USD",
                        "type": "Float"
                    },
                    "exchangeRate": {
                        "description": "the current exchange rate",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "localBudget": {
                        "description": "the budget in local currency",
                        "type": "Float"
                    }
                },
                "format": "BudgetInLocalCurrency(budget, exchangeRate) -> localBudget"
            },
            {
                "name": "SuggestDiningOptions",
                "Description": "This API is to suggest dining options based on the local budget and location.",
                "input_params": {
                    "localBudget": {
                        "description": "the budget in local currency",
                        "type": "Float"
                    },
                    "location": {
                        "description": "the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "diningOptions": {
                        "description": "a list of suggested dining options",
                        "type": "List"
                    }
                },
                "format": "SuggestDiningOptions(localBudget, location) -> diningOptions"
            }
        ],
        "Query": "I'll be in London with a budget of 150 USD. What are some eating places you can suggest?",
        "Label": "SuggestDiningOptions(localBudget=BudgetInLocalCurrency(budget=150, exchangeRate=CurrentExchangeRate(currency='USD')),location='London')",
        "Index": 315
    },
    {
        "APIs": [
            {
                "name": "CurrentExchangeRate",
                "Description": "This API is to get the current exchange rate for a specific currency.",
                "input_params": {
                    "currency": {
                        "description": "the currency code",
                        "type": "String"
                    }
                },
                "output_params": {
                    "exchangeRate": {
                        "description": "the current exchange rate",
                        "type": "Float"
                    }
                },
                "format": "CurrentExchangeRate(currency) -> exchangeRate"
            },
            {
                "name": "BudgetInLocalCurrency",
                "Description": "This API is to calculate the budget in local currency using the original budget and current exchange rate.",
                "input_params": {
                    "budget": {
                        "description": "the original budget in USD",
                        "type": "Float"
                    },
                    "exchangeRate": {
                        "description": "the current exchange rate",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "localBudget": {
                        "description": "the budget in local currency",
                        "type": "Float"
                    }
                },
                "format": "BudgetInLocalCurrency(budget, exchangeRate) -> localBudget"
            },
            {
                "name": "SuggestDiningOptions",
                "Description": "This API is to suggest dining options based on the local budget and location.",
                "input_params": {
                    "localBudget": {
                        "description": "the budget in local currency",
                        "type": "Float"
                    },
                    "location": {
                        "description": "the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "diningOptions": {
                        "description": "a list of suggested dining options",
                        "type": "List"
                    }
                },
                "format": "SuggestDiningOptions(localBudget, location) -> diningOptions"
            }
        ],
        "Query": "I have 300 USD for meals in Paris. Can you recommend some dining options?",
        "Label": "SuggestDiningOptions(localBudget=BudgetInLocalCurrency(budget=300, exchangeRate=CurrentExchangeRate(currency='USD')),location='Paris')",
        "Index": 316
    },
    {
        "APIs": [
            {
                "name": "CurrentExchangeRate",
                "Description": "This API is to get the current exchange rate for a specific currency.",
                "input_params": {
                    "currency": {
                        "description": "the currency code",
                        "type": "String"
                    }
                },
                "output_params": {
                    "exchangeRate": {
                        "description": "the current exchange rate",
                        "type": "Float"
                    }
                },
                "format": "CurrentExchangeRate(currency) -> exchangeRate"
            },
            {
                "name": "BudgetInLocalCurrency",
                "Description": "This API is to calculate the budget in local currency using the original budget and current exchange rate.",
                "input_params": {
                    "budget": {
                        "description": "the original budget in USD",
                        "type": "Float"
                    },
                    "exchangeRate": {
                        "description": "the current exchange rate",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "localBudget": {
                        "description": "the budget in local currency",
                        "type": "Float"
                    }
                },
                "format": "BudgetInLocalCurrency(budget, exchangeRate) -> localBudget"
            },
            {
                "name": "SuggestDiningOptions",
                "Description": "This API is to suggest dining options based on the local budget and location.",
                "input_params": {
                    "localBudget": {
                        "description": "the budget in local currency",
                        "type": "Float"
                    },
                    "location": {
                        "description": "the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "diningOptions": {
                        "description": "a list of suggested dining options",
                        "type": "List"
                    }
                },
                "format": "SuggestDiningOptions(localBudget, location) -> diningOptions"
            }
        ],
        "Query": "I am traveling to Rome with 250 USD. What dining options do you suggest?",
        "Label": "SuggestDiningOptions(localBudget=BudgetInLocalCurrency(budget=250, exchangeRate=CurrentExchangeRate(currency='USD')),location='Rome')",
        "Index": 317
    },
    {
        "APIs": [
            {
                "name": "CurrentExchangeRate",
                "Description": "This API is to get the current exchange rate for a specific currency.",
                "input_params": {
                    "currency": {
                        "description": "the currency code",
                        "type": "String"
                    }
                },
                "output_params": {
                    "exchangeRate": {
                        "description": "the current exchange rate",
                        "type": "Float"
                    }
                },
                "format": "CurrentExchangeRate(currency) -> exchangeRate"
            },
            {
                "name": "BudgetInLocalCurrency",
                "Description": "This API is to calculate the budget in local currency using the original budget and current exchange rate.",
                "input_params": {
                    "budget": {
                        "description": "the original budget in USD",
                        "type": "Float"
                    },
                    "exchangeRate": {
                        "description": "the current exchange rate",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "localBudget": {
                        "description": "the budget in local currency",
                        "type": "Float"
                    }
                },
                "format": "BudgetInLocalCurrency(budget, exchangeRate) -> localBudget"
            },
            {
                "name": "SuggestDiningOptions",
                "Description": "This API is to suggest dining options based on the local budget and location.",
                "input_params": {
                    "localBudget": {
                        "description": "the budget in local currency",
                        "type": "Float"
                    },
                    "location": {
                        "description": "the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "diningOptions": {
                        "description": "a list of suggested dining options",
                        "type": "List"
                    }
                },
                "format": "SuggestDiningOptions(localBudget, location) -> diningOptions"
            }
        ],
        "Query": "I have a 100 USD food budget for my trip to Berlin. Can you suggest where I can eat?",
        "Label": "SuggestDiningOptions(localBudget=BudgetInLocalCurrency(budget=100, exchangeRate=CurrentExchangeRate(currency='USD')),location='Berlin')",
        "Index": 318
    },
    {
        "APIs": [
            {
                "name": "CurrentExchangeRate",
                "Description": "This API is to get the current exchange rate for a specific currency.",
                "input_params": {
                    "currency": {
                        "description": "the currency code",
                        "type": "String"
                    }
                },
                "output_params": {
                    "exchangeRate": {
                        "description": "the current exchange rate",
                        "type": "Float"
                    }
                },
                "format": "CurrentExchangeRate(currency) -> exchangeRate"
            },
            {
                "name": "BudgetInLocalCurrency",
                "Description": "This API is to calculate the budget in local currency using the original budget and current exchange rate.",
                "input_params": {
                    "budget": {
                        "description": "the original budget in USD",
                        "type": "Float"
                    },
                    "exchangeRate": {
                        "description": "the current exchange rate",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "localBudget": {
                        "description": "the budget in local currency",
                        "type": "Float"
                    }
                },
                "format": "BudgetInLocalCurrency(budget, exchangeRate) -> localBudget"
            },
            {
                "name": "SuggestDiningOptions",
                "Description": "This API is to suggest dining options based on the local budget and location.",
                "input_params": {
                    "localBudget": {
                        "description": "the budget in local currency",
                        "type": "Float"
                    },
                    "location": {
                        "description": "the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "diningOptions": {
                        "description": "a list of suggested dining options",
                        "type": "List"
                    }
                },
                "format": "SuggestDiningOptions(localBudget, location) -> diningOptions"
            }
        ],
        "Query": "I'm going to Sydney and I have 350 USD for meals. Can you recommend some places to eat?",
        "Label": "SuggestDiningOptions(localBudget=BudgetInLocalCurrency(budget=350, exchangeRate=CurrentExchangeRate(currency='USD')),location='Sydney')",
        "Index": 319
    },
    {
        "APIs": [
            {
                "name": "GetCurrentFuelPrice",
                "Description": "This API is to get the current fuel price of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "fuelPrice": {
                        "description": "the current fuel price",
                        "type": "Decimal"
                    }
                },
                "format": "GetCurrentFuelPrice(city) -> fuelPrice"
            },
            {
                "name": "GetDrivingDistance",
                "Description": "This API is to get the driving distance between two points.",
                "input_params": {
                    "startPoint": {
                        "description": "the starting point of the journey",
                        "type": "String"
                    },
                    "endPoint": {
                        "description": "the ending point of the journey",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "the driving distance between the two points",
                        "type": "Decimal"
                    }
                },
                "format": "GetDrivingDistance(startPoint, endPoint) -> distance"
            },
            {
                "name": "CalculateFuelCost",
                "Description": "This API is to calculate the potential fuel cost based on the fuel price and distance.",
                "input_params": {
                    "fuelPrice": {
                        "description": "the current fuel price",
                        "type": "Decimal"
                    },
                    "distance": {
                        "description": "the driving distance",
                        "type": "Decimal"
                    }
                },
                "output_params": {
                    "cost": {
                        "description": "the potential fuel cost",
                        "type": "Decimal"
                    }
                },
                "format": "CalculateFuelCost(fuelPrice, distance) -> cost"
            }
        ],
        "Query": "I'm planning on driving from Austin to Dallas next week, how much will the gas cost me?",
        "Label": "CalculateFuelCost(fuelPrice=GetCurrentFuelPrice(city='Austin'), distance=GetDrivingDistance(startPoint='Austin', endPoint='Dallas'))",
        "Index": 320
    },
    {
        "APIs": [
            {
                "name": "GetCurrentFuelPrice",
                "Description": "This API is to get the current fuel price of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "fuelPrice": {
                        "description": "the current fuel price",
                        "type": "Decimal"
                    }
                },
                "format": "GetCurrentFuelPrice(city) -> fuelPrice"
            },
            {
                "name": "GetDrivingDistance",
                "Description": "This API is to get the driving distance between two points.",
                "input_params": {
                    "startPoint": {
                        "description": "the starting point of the journey",
                        "type": "String"
                    },
                    "endPoint": {
                        "description": "the ending point of the journey",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "the driving distance between the two points",
                        "type": "Decimal"
                    }
                },
                "format": "GetDrivingDistance(startPoint, endPoint) -> distance"
            },
            {
                "name": "CalculateFuelCost",
                "Description": "This API is to calculate the potential fuel cost based on the fuel price and distance.",
                "input_params": {
                    "fuelPrice": {
                        "description": "the current fuel price",
                        "type": "Decimal"
                    },
                    "distance": {
                        "description": "the driving distance",
                        "type": "Decimal"
                    }
                },
                "output_params": {
                    "cost": {
                        "description": "the potential fuel cost",
                        "type": "Decimal"
                    }
                },
                "format": "CalculateFuelCost(fuelPrice, distance) -> cost"
            }
        ],
        "Query": "How much would it cost me to drive from Atlanta to Savannah?",
        "Label": "CalculateFuelCost(fuelPrice=GetCurrentFuelPrice(city='Atlanta'), distance=GetDrivingDistance(startPoint='Atlanta', endPoint='Savannah'))",
        "Index": 321
    },
    {
        "APIs": [
            {
                "name": "GetCurrentFuelPrice",
                "Description": "This API is to get the current fuel price of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "fuelPrice": {
                        "description": "the current fuel price",
                        "type": "Decimal"
                    }
                },
                "format": "GetCurrentFuelPrice(city) -> fuelPrice"
            },
            {
                "name": "GetDrivingDistance",
                "Description": "This API is to get the driving distance between two points.",
                "input_params": {
                    "startPoint": {
                        "description": "the starting point of the journey",
                        "type": "String"
                    },
                    "endPoint": {
                        "description": "the ending point of the journey",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "the driving distance between the two points",
                        "type": "Decimal"
                    }
                },
                "format": "GetDrivingDistance(startPoint, endPoint) -> distance"
            },
            {
                "name": "CalculateFuelCost",
                "Description": "This API is to calculate the potential fuel cost based on the fuel price and distance.",
                "input_params": {
                    "fuelPrice": {
                        "description": "the current fuel price",
                        "type": "Decimal"
                    },
                    "distance": {
                        "description": "the driving distance",
                        "type": "Decimal"
                    }
                },
                "output_params": {
                    "cost": {
                        "description": "the potential fuel cost",
                        "type": "Decimal"
                    }
                },
                "format": "CalculateFuelCost(fuelPrice, distance) -> cost"
            }
        ],
        "Query": "What's the cost of fuel if I drive from New York to Boston?",
        "Label": "CalculateFuelCost(fuelPrice=GetCurrentFuelPrice(city='New York'), distance=GetDrivingDistance(startPoint='New York', endPoint='Boston'))",
        "Index": 322
    },
    {
        "APIs": [
            {
                "name": "GetCurrentFuelPrice",
                "Description": "This API is to get the current fuel price of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "fuelPrice": {
                        "description": "the current fuel price",
                        "type": "Decimal"
                    }
                },
                "format": "GetCurrentFuelPrice(city) -> fuelPrice"
            },
            {
                "name": "GetDrivingDistance",
                "Description": "This API is to get the driving distance between two points.",
                "input_params": {
                    "startPoint": {
                        "description": "the starting point of the journey",
                        "type": "String"
                    },
                    "endPoint": {
                        "description": "the ending point of the journey",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "the driving distance between the two points",
                        "type": "Decimal"
                    }
                },
                "format": "GetDrivingDistance(startPoint, endPoint) -> distance"
            },
            {
                "name": "CalculateFuelCost",
                "Description": "This API is to calculate the potential fuel cost based on the fuel price and distance.",
                "input_params": {
                    "fuelPrice": {
                        "description": "the current fuel price",
                        "type": "Decimal"
                    },
                    "distance": {
                        "description": "the driving distance",
                        "type": "Decimal"
                    }
                },
                "output_params": {
                    "cost": {
                        "description": "the potential fuel cost",
                        "type": "Decimal"
                    }
                },
                "format": "CalculateFuelCost(fuelPrice, distance) -> cost"
            }
        ],
        "Query": "Can you tell me the gas costs for driving from Miami to Orlando?",
        "Label": "CalculateFuelCost(fuelPrice=GetCurrentFuelPrice(city='Miami'), distance=GetDrivingDistance(startPoint='Miami', endPoint='Orlando'))",
        "Index": 323
    },
    {
        "APIs": [
            {
                "name": "GetCurrentFuelPrice",
                "Description": "This API is to get the current fuel price of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "fuelPrice": {
                        "description": "the current fuel price",
                        "type": "Decimal"
                    }
                },
                "format": "GetCurrentFuelPrice(city) -> fuelPrice"
            },
            {
                "name": "GetDrivingDistance",
                "Description": "This API is to get the driving distance between two points.",
                "input_params": {
                    "startPoint": {
                        "description": "the starting point of the journey",
                        "type": "String"
                    },
                    "endPoint": {
                        "description": "the ending point of the journey",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "the driving distance between the two points",
                        "type": "Decimal"
                    }
                },
                "format": "GetDrivingDistance(startPoint, endPoint) -> distance"
            },
            {
                "name": "CalculateFuelCost",
                "Description": "This API is to calculate the potential fuel cost based on the fuel price and distance.",
                "input_params": {
                    "fuelPrice": {
                        "description": "the current fuel price",
                        "type": "Decimal"
                    },
                    "distance": {
                        "description": "the driving distance",
                        "type": "Decimal"
                    }
                },
                "output_params": {
                    "cost": {
                        "description": "the potential fuel cost",
                        "type": "Decimal"
                    }
                },
                "format": "CalculateFuelCost(fuelPrice, distance) -> cost"
            }
        ],
        "Query": "I need to know the gas expenditure for my trip from Houston to San Antonio.",
        "Label": "CalculateFuelCost(fuelPrice=GetCurrentFuelPrice(city='Houston'), distance=GetDrivingDistance(startPoint='Houston', endPoint='San Antonio'))",
        "Index": 324
    },
    {
        "APIs": [
            {
                "name": "GetCurrentFuelPrice",
                "Description": "This API is to get the current fuel price of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "fuelPrice": {
                        "description": "the current fuel price",
                        "type": "Decimal"
                    }
                },
                "format": "GetCurrentFuelPrice(city) -> fuelPrice"
            },
            {
                "name": "GetDrivingDistance",
                "Description": "This API is to get the driving distance between two points.",
                "input_params": {
                    "startPoint": {
                        "description": "the starting point of the journey",
                        "type": "String"
                    },
                    "endPoint": {
                        "description": "the ending point of the journey",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "the driving distance between the two points",
                        "type": "Decimal"
                    }
                },
                "format": "GetDrivingDistance(startPoint, endPoint) -> distance"
            },
            {
                "name": "CalculateFuelCost",
                "Description": "This API is to calculate the potential fuel cost based on the fuel price and distance.",
                "input_params": {
                    "fuelPrice": {
                        "description": "the current fuel price",
                        "type": "Decimal"
                    },
                    "distance": {
                        "description": "the driving distance",
                        "type": "Decimal"
                    }
                },
                "output_params": {
                    "cost": {
                        "description": "the potential fuel cost",
                        "type": "Decimal"
                    }
                },
                "format": "CalculateFuelCost(fuelPrice, distance) -> cost"
            }
        ],
        "Query": "I'm planning to drive from Seattle to Portland, how much will it cost me in gas?",
        "Label": "CalculateFuelCost(fuelPrice=GetCurrentFuelPrice(city='Seattle'), distance=GetDrivingDistance(startPoint='Seattle', endPoint='Portland'))",
        "Index": 325
    },
    {
        "APIs": [
            {
                "name": "GetCurrentFuelPrice",
                "Description": "This API is to get the current fuel price of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "fuelPrice": {
                        "description": "the current fuel price",
                        "type": "Decimal"
                    }
                },
                "format": "GetCurrentFuelPrice(city) -> fuelPrice"
            },
            {
                "name": "GetDrivingDistance",
                "Description": "This API is to get the driving distance between two points.",
                "input_params": {
                    "startPoint": {
                        "description": "the starting point of the journey",
                        "type": "String"
                    },
                    "endPoint": {
                        "description": "the ending point of the journey",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "the driving distance between the two points",
                        "type": "Decimal"
                    }
                },
                "format": "GetDrivingDistance(startPoint, endPoint) -> distance"
            },
            {
                "name": "CalculateFuelCost",
                "Description": "This API is to calculate the potential fuel cost based on the fuel price and distance.",
                "input_params": {
                    "fuelPrice": {
                        "description": "the current fuel price",
                        "type": "Decimal"
                    },
                    "distance": {
                        "description": "the driving distance",
                        "type": "Decimal"
                    }
                },
                "output_params": {
                    "cost": {
                        "description": "the potential fuel cost",
                        "type": "Decimal"
                    }
                },
                "format": "CalculateFuelCost(fuelPrice, distance) -> cost"
            }
        ],
        "Query": "How much would it cost to drive from New York to Washington DC considering the fuel price?",
        "Label": "CalculateFuelCost(fuelPrice=GetCurrentFuelPrice(city='New York'), distance=GetDrivingDistance(startPoint='New York', endPoint='Washington DC'))",
        "Index": 326
    },
    {
        "APIs": [
            {
                "name": "GetCurrentFuelPrice",
                "Description": "This API is to get the current fuel price of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "fuelPrice": {
                        "description": "the current fuel price",
                        "type": "Decimal"
                    }
                },
                "format": "GetCurrentFuelPrice(city) -> fuelPrice"
            },
            {
                "name": "GetDrivingDistance",
                "Description": "This API is to get the driving distance between two points.",
                "input_params": {
                    "startPoint": {
                        "description": "the starting point of the journey",
                        "type": "String"
                    },
                    "endPoint": {
                        "description": "the ending point of the journey",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "the driving distance between the two points",
                        "type": "Decimal"
                    }
                },
                "format": "GetDrivingDistance(startPoint, endPoint) -> distance"
            },
            {
                "name": "CalculateFuelCost",
                "Description": "This API is to calculate the potential fuel cost based on the fuel price and distance.",
                "input_params": {
                    "fuelPrice": {
                        "description": "the current fuel price",
                        "type": "Decimal"
                    },
                    "distance": {
                        "description": "the driving distance",
                        "type": "Decimal"
                    }
                },
                "output_params": {
                    "cost": {
                        "description": "the potential fuel cost",
                        "type": "Decimal"
                    }
                },
                "format": "CalculateFuelCost(fuelPrice, distance) -> cost"
            }
        ],
        "Query": "I'm thinking about a road trip from Los Angeles to San Francisco. Can you calculate the gas cost?",
        "Label": "CalculateFuelCost(fuelPrice=GetCurrentFuelPrice(city='Los Angeles'), distance=GetDrivingDistance(startPoint='Los Angeles', endPoint='San Francisco'))",
        "Index": 327
    },
    {
        "APIs": [
            {
                "name": "GetCurrentFuelPrice",
                "Description": "This API is to get the current fuel price of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "fuelPrice": {
                        "description": "the current fuel price",
                        "type": "Decimal"
                    }
                },
                "format": "GetCurrentFuelPrice(city) -> fuelPrice"
            },
            {
                "name": "GetDrivingDistance",
                "Description": "This API is to get the driving distance between two points.",
                "input_params": {
                    "startPoint": {
                        "description": "the starting point of the journey",
                        "type": "String"
                    },
                    "endPoint": {
                        "description": "the ending point of the journey",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "the driving distance between the two points",
                        "type": "Decimal"
                    }
                },
                "format": "GetDrivingDistance(startPoint, endPoint) -> distance"
            },
            {
                "name": "CalculateFuelCost",
                "Description": "This API is to calculate the potential fuel cost based on the fuel price and distance.",
                "input_params": {
                    "fuelPrice": {
                        "description": "the current fuel price",
                        "type": "Decimal"
                    },
                    "distance": {
                        "description": "the driving distance",
                        "type": "Decimal"
                    }
                },
                "output_params": {
                    "cost": {
                        "description": "the potential fuel cost",
                        "type": "Decimal"
                    }
                },
                "format": "CalculateFuelCost(fuelPrice, distance) -> cost"
            }
        ],
        "Query": "If I take a drive from Chicago to Detroit, how much I should expect to spend on fuel?",
        "Label": "CalculateFuelCost(fuelPrice=GetCurrentFuelPrice(city='Chicago'), distance=GetDrivingDistance(startPoint='Chicago', endPoint='Detroit'))",
        "Index": 328
    },
    {
        "APIs": [
            {
                "name": "GetCurrentFuelPrice",
                "Description": "This API is to get the current fuel price of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "fuelPrice": {
                        "description": "the current fuel price",
                        "type": "Decimal"
                    }
                },
                "format": "GetCurrentFuelPrice(city) -> fuelPrice"
            },
            {
                "name": "GetDrivingDistance",
                "Description": "This API is to get the driving distance between two points.",
                "input_params": {
                    "startPoint": {
                        "description": "the starting point of the journey",
                        "type": "String"
                    },
                    "endPoint": {
                        "description": "the ending point of the journey",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "the driving distance between the two points",
                        "type": "Decimal"
                    }
                },
                "format": "GetDrivingDistance(startPoint, endPoint) -> distance"
            },
            {
                "name": "CalculateFuelCost",
                "Description": "This API is to calculate the potential fuel cost based on the fuel price and distance.",
                "input_params": {
                    "fuelPrice": {
                        "description": "the current fuel price",
                        "type": "Decimal"
                    },
                    "distance": {
                        "description": "the driving distance",
                        "type": "Decimal"
                    }
                },
                "output_params": {
                    "cost": {
                        "description": "the potential fuel cost",
                        "type": "Decimal"
                    }
                },
                "format": "CalculateFuelCost(fuelPrice, distance) -> cost"
            }
        ],
        "Query": "I'm going to drive from Atlanta to Miami, can you give me an estimate of the fuel cost?",
        "Label": "CalculateFuelCost(fuelPrice=GetCurrentFuelPrice(city='Atlanta'), distance=GetDrivingDistance(startPoint='Atlanta', endPoint='Miami'))",
        "Index": 329
    },
    {
        "APIs": [
            {
                "name": "GetAverageHousePrice",
                "Description": "This API is to get the average house price of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location of the house",
                        "type": "String"
                    }
                },
                "output_params": {
                    "housePrice": {
                        "description": "the average house price",
                        "type": "Float"
                    }
                },
                "format": "GetAverageHousePrice(location) -> housePrice"
            },
            {
                "name": "GetLoanInterestRate",
                "Description": "This API is to get the loan interest rate of a specific bank.",
                "input_params": {
                    "bank": {
                        "description": "the name of the bank",
                        "type": "String"
                    }
                },
                "output_params": {
                    "interestRate": {
                        "description": "the loan interest rate",
                        "type": "Float"
                    }
                },
                "format": "GetLoanInterestRate(bank) -> interestRate"
            },
            {
                "name": "CalculateMortgagePayment",
                "Description": "This API is to calculate the monthly mortgage payment based on the house price and interest rate.",
                "input_params": {
                    "housePrice": {
                        "description": "the house price",
                        "type": "Float"
                    },
                    "interestRate": {
                        "description": "the loan interest rate",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "mortgagePayment": {
                        "description": "the monthly mortgage payment",
                        "type": "Float"
                    }
                },
                "format": "CalculateMortgagePayment(housePrice, interestRate) -> mortgagePayment"
            }
        ],
        "Query": "I'm considering buying a house in San Francisco with a loan from Bank of America, how much will the monthly mortgage be?",
        "Label": "CalculateMortgagePayment(housePrice=GetAverageHousePrice(location='San Francisco'), interestRate=GetLoanInterestRate(bank='Bank of America'))",
        "Index": 330
    },
    {
        "APIs": [
            {
                "name": "GetAverageHousePrice",
                "Description": "This API is to get the average house price of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location of the house",
                        "type": "String"
                    }
                },
                "output_params": {
                    "housePrice": {
                        "description": "the average house price",
                        "type": "Float"
                    }
                },
                "format": "GetAverageHousePrice(location) -> housePrice"
            },
            {
                "name": "GetLoanInterestRate",
                "Description": "This API is to get the loan interest rate of a specific bank.",
                "input_params": {
                    "bank": {
                        "description": "the name of the bank",
                        "type": "String"
                    }
                },
                "output_params": {
                    "interestRate": {
                        "description": "the loan interest rate",
                        "type": "Float"
                    }
                },
                "format": "GetLoanInterestRate(bank) -> interestRate"
            },
            {
                "name": "CalculateMortgagePayment",
                "Description": "This API is to calculate the monthly mortgage payment based on the house price and interest rate.",
                "input_params": {
                    "housePrice": {
                        "description": "the house price",
                        "type": "Float"
                    },
                    "interestRate": {
                        "description": "the loan interest rate",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "mortgagePayment": {
                        "description": "the monthly mortgage payment",
                        "type": "Float"
                    }
                },
                "format": "CalculateMortgagePayment(housePrice, interestRate) -> mortgagePayment"
            }
        ],
        "Query": "I'm planning to purchase a property in New York with a loan from Wells Fargo, how much should I pay every month?",
        "Label": "CalculateMortgagePayment(housePrice=GetAverageHousePrice(location='New York'), interestRate=GetLoanInterestRate(bank='Wells Fargo'))",
        "Index": 331
    },
    {
        "APIs": [
            {
                "name": "GetAverageHousePrice",
                "Description": "This API is to get the average house price of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location of the house",
                        "type": "String"
                    }
                },
                "output_params": {
                    "housePrice": {
                        "description": "the average house price",
                        "type": "Float"
                    }
                },
                "format": "GetAverageHousePrice(location) -> housePrice"
            },
            {
                "name": "GetLoanInterestRate",
                "Description": "This API is to get the loan interest rate of a specific bank.",
                "input_params": {
                    "bank": {
                        "description": "the name of the bank",
                        "type": "String"
                    }
                },
                "output_params": {
                    "interestRate": {
                        "description": "the loan interest rate",
                        "type": "Float"
                    }
                },
                "format": "GetLoanInterestRate(bank) -> interestRate"
            },
            {
                "name": "CalculateMortgagePayment",
                "Description": "This API is to calculate the monthly mortgage payment based on the house price and interest rate.",
                "input_params": {
                    "housePrice": {
                        "description": "the house price",
                        "type": "Float"
                    },
                    "interestRate": {
                        "description": "the loan interest rate",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "mortgagePayment": {
                        "description": "the monthly mortgage payment",
                        "type": "Float"
                    }
                },
                "format": "CalculateMortgagePayment(housePrice, interestRate) -> mortgagePayment"
            }
        ],
        "Query": "I'm thinking about investing in a house in Miami with a loan from Chase, what would be my monthly payment?",
        "Label": "CalculateMortgagePayment(housePrice=GetAverageHousePrice(location='Miami'), interestRate=GetLoanInterestRate(bank='Chase'))",
        "Index": 332
    },
    {
        "APIs": [
            {
                "name": "GetAverageHousePrice",
                "Description": "This API is to get the average house price of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location of the house",
                        "type": "String"
                    }
                },
                "output_params": {
                    "housePrice": {
                        "description": "the average house price",
                        "type": "Float"
                    }
                },
                "format": "GetAverageHousePrice(location) -> housePrice"
            },
            {
                "name": "GetLoanInterestRate",
                "Description": "This API is to get the loan interest rate of a specific bank.",
                "input_params": {
                    "bank": {
                        "description": "the name of the bank",
                        "type": "String"
                    }
                },
                "output_params": {
                    "interestRate": {
                        "description": "the loan interest rate",
                        "type": "Float"
                    }
                },
                "format": "GetLoanInterestRate(bank) -> interestRate"
            },
            {
                "name": "CalculateMortgagePayment",
                "Description": "This API is to calculate the monthly mortgage payment based on the house price and interest rate.",
                "input_params": {
                    "housePrice": {
                        "description": "the house price",
                        "type": "Float"
                    },
                    "interestRate": {
                        "description": "the loan interest rate",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "mortgagePayment": {
                        "description": "the monthly mortgage payment",
                        "type": "Float"
                    }
                },
                "format": "CalculateMortgagePayment(housePrice, interestRate) -> mortgagePayment"
            }
        ],
        "Query": "If I purchase a property in Seattle and finance it through Capital One, what will be my monthly mortgage payment?",
        "Label": "CalculateMortgagePayment(housePrice=GetAverageHousePrice(location='Seattle'), interestRate=GetLoanInterestRate(bank='Capital One'))",
        "Index": 333
    },
    {
        "APIs": [
            {
                "name": "GetAverageHousePrice",
                "Description": "This API is to get the average house price of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location of the house",
                        "type": "String"
                    }
                },
                "output_params": {
                    "housePrice": {
                        "description": "the average house price",
                        "type": "Float"
                    }
                },
                "format": "GetAverageHousePrice(location) -> housePrice"
            },
            {
                "name": "GetLoanInterestRate",
                "Description": "This API is to get the loan interest rate of a specific bank.",
                "input_params": {
                    "bank": {
                        "description": "the name of the bank",
                        "type": "String"
                    }
                },
                "output_params": {
                    "interestRate": {
                        "description": "the loan interest rate",
                        "type": "Float"
                    }
                },
                "format": "GetLoanInterestRate(bank) -> interestRate"
            },
            {
                "name": "CalculateMortgagePayment",
                "Description": "This API is to calculate the monthly mortgage payment based on the house price and interest rate.",
                "input_params": {
                    "housePrice": {
                        "description": "the house price",
                        "type": "Float"
                    },
                    "interestRate": {
                        "description": "the loan interest rate",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "mortgagePayment": {
                        "description": "the monthly mortgage payment",
                        "type": "Float"
                    }
                },
                "format": "CalculateMortgagePayment(housePrice, interestRate) -> mortgagePayment"
            }
        ],
        "Query": "I'm contemplating buying a house in Chicago with a loan from PNC Bank, how much would I have to pay each month?",
        "Label": "CalculateMortgagePayment(housePrice=GetAverageHousePrice(location='Chicago'), interestRate=GetLoanInterestRate(bank='PNC Bank'))",
        "Index": 334
    },
    {
        "APIs": [
            {
                "name": "GetAverageHousePrice",
                "Description": "This API is to get the average house price of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location of the house",
                        "type": "String"
                    }
                },
                "output_params": {
                    "housePrice": {
                        "description": "the average house price",
                        "type": "Float"
                    }
                },
                "format": "GetAverageHousePrice(location) -> housePrice"
            },
            {
                "name": "GetLoanInterestRate",
                "Description": "This API is to get the loan interest rate of a specific bank.",
                "input_params": {
                    "bank": {
                        "description": "the name of the bank",
                        "type": "String"
                    }
                },
                "output_params": {
                    "interestRate": {
                        "description": "the loan interest rate",
                        "type": "Float"
                    }
                },
                "format": "GetLoanInterestRate(bank) -> interestRate"
            },
            {
                "name": "CalculateMortgagePayment",
                "Description": "This API is to calculate the monthly mortgage payment based on the house price and interest rate.",
                "input_params": {
                    "housePrice": {
                        "description": "the house price",
                        "type": "Float"
                    },
                    "interestRate": {
                        "description": "the loan interest rate",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "mortgagePayment": {
                        "description": "the monthly mortgage payment",
                        "type": "Float"
                    }
                },
                "format": "CalculateMortgagePayment(housePrice, interestRate) -> mortgagePayment"
            }
        ],
        "Query": "I'm planning to purchase a property in New York with a loan from Wells Fargo, what would be the monthly mortgage?",
        "Label": "CalculateMortgagePayment(housePrice=GetAverageHousePrice(location='New York'), interestRate=GetLoanInterestRate(bank='Wells Fargo'))",
        "Index": 335
    },
    {
        "APIs": [
            {
                "name": "GetAverageHousePrice",
                "Description": "This API is to get the average house price of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location of the house",
                        "type": "String"
                    }
                },
                "output_params": {
                    "housePrice": {
                        "description": "the average house price",
                        "type": "Float"
                    }
                },
                "format": "GetAverageHousePrice(location) -> housePrice"
            },
            {
                "name": "GetLoanInterestRate",
                "Description": "This API is to get the loan interest rate of a specific bank.",
                "input_params": {
                    "bank": {
                        "description": "the name of the bank",
                        "type": "String"
                    }
                },
                "output_params": {
                    "interestRate": {
                        "description": "the loan interest rate",
                        "type": "Float"
                    }
                },
                "format": "GetLoanInterestRate(bank) -> interestRate"
            },
            {
                "name": "CalculateMortgagePayment",
                "Description": "This API is to calculate the monthly mortgage payment based on the house price and interest rate.",
                "input_params": {
                    "housePrice": {
                        "description": "the house price",
                        "type": "Float"
                    },
                    "interestRate": {
                        "description": "the loan interest rate",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "mortgagePayment": {
                        "description": "the monthly mortgage payment",
                        "type": "Float"
                    }
                },
                "format": "CalculateMortgagePayment(housePrice, interestRate) -> mortgagePayment"
            }
        ],
        "Query": "If I take a loan from Chase Bank to buy a house in Los Angeles, what will be the monthly mortgage payment?",
        "Label": "CalculateMortgagePayment(housePrice=GetAverageHousePrice(location='Los Angeles'), interestRate=GetLoanInterestRate(bank='Chase Bank'))",
        "Index": 336
    },
    {
        "APIs": [
            {
                "name": "GetAverageHousePrice",
                "Description": "This API is to get the average house price of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location of the house",
                        "type": "String"
                    }
                },
                "output_params": {
                    "housePrice": {
                        "description": "the average house price",
                        "type": "Float"
                    }
                },
                "format": "GetAverageHousePrice(location) -> housePrice"
            },
            {
                "name": "GetLoanInterestRate",
                "Description": "This API is to get the loan interest rate of a specific bank.",
                "input_params": {
                    "bank": {
                        "description": "the name of the bank",
                        "type": "String"
                    }
                },
                "output_params": {
                    "interestRate": {
                        "description": "the loan interest rate",
                        "type": "Float"
                    }
                },
                "format": "GetLoanInterestRate(bank) -> interestRate"
            },
            {
                "name": "CalculateMortgagePayment",
                "Description": "This API is to calculate the monthly mortgage payment based on the house price and interest rate.",
                "input_params": {
                    "housePrice": {
                        "description": "the house price",
                        "type": "Float"
                    },
                    "interestRate": {
                        "description": "the loan interest rate",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "mortgagePayment": {
                        "description": "the monthly mortgage payment",
                        "type": "Float"
                    }
                },
                "format": "CalculateMortgagePayment(housePrice, interestRate) -> mortgagePayment"
            }
        ],
        "Query": "I'm thinking of buying a house in Chicago through a loan from Citibank, how much would my monthly mortgage be?",
        "Label": "CalculateMortgagePayment(housePrice=GetAverageHousePrice(location='Chicago'), interestRate=GetLoanInterestRate(bank='Citibank'))",
        "Index": 337
    },
    {
        "APIs": [
            {
                "name": "GetAverageHousePrice",
                "Description": "This API is to get the average house price of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location of the house",
                        "type": "String"
                    }
                },
                "output_params": {
                    "housePrice": {
                        "description": "the average house price",
                        "type": "Float"
                    }
                },
                "format": "GetAverageHousePrice(location) -> housePrice"
            },
            {
                "name": "GetLoanInterestRate",
                "Description": "This API is to get the loan interest rate of a specific bank.",
                "input_params": {
                    "bank": {
                        "description": "the name of the bank",
                        "type": "String"
                    }
                },
                "output_params": {
                    "interestRate": {
                        "description": "the loan interest rate",
                        "type": "Float"
                    }
                },
                "format": "GetLoanInterestRate(bank) -> interestRate"
            },
            {
                "name": "CalculateMortgagePayment",
                "Description": "This API is to calculate the monthly mortgage payment based on the house price and interest rate.",
                "input_params": {
                    "housePrice": {
                        "description": "the house price",
                        "type": "Float"
                    },
                    "interestRate": {
                        "description": "the loan interest rate",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "mortgagePayment": {
                        "description": "the monthly mortgage payment",
                        "type": "Float"
                    }
                },
                "format": "CalculateMortgagePayment(housePrice, interestRate) -> mortgagePayment"
            }
        ],
        "Query": "What will be the monthly mortgage if I buy a house in Seattle with a loan from US Bank?",
        "Label": "CalculateMortgagePayment(housePrice=GetAverageHousePrice(location='Seattle'), interestRate=GetLoanInterestRate(bank='US Bank'))",
        "Index": 338
    },
    {
        "APIs": [
            {
                "name": "BookTable",
                "Description": "This API allows the user to book a table at a specific restaurant for a given date and time.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the booking",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant_name, date, time) -> booking status"
            },
            {
                "name": "GetRestaurant",
                "Description": "This API the name of the restaurant recommended based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city to search for restaurants",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine to search for restaurants",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "GetRestaurant(city,cuisine) -> restaurant_name"
            }
        ],
        "Query": "Please help me make a reservation for a good Italian restaurant in San Francisco tomorrow evening?",
        "Label": "BookTable(restaurant_name=GetRestaurant(city='San Francisco', cuisine='Italian'), date='tomorrow', time='evening')",
        "Index": 339
    },
    {
        "APIs": [
            {
                "name": "BookTable",
                "Description": "This API allows the user to book a table at a specific restaurant for a given date and time.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the booking",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant_name, date, time) -> booking status"
            },
            {
                "name": "GetRestaurant",
                "Description": "This API the name of the restaurant recommended based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city to search for restaurants",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine to search for restaurants",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "GetRestaurant(city,cuisine) -> restaurant_name"
            }
        ],
        "Query": "I'd like to book a table for a Chinese restaurant in New York this Friday night.",
        "Label": "BookTable(restaurant_name=GetRestaurant(city='New York', cuisine='Chinese'), date='this Friday', time='night')",
        "Index": 340
    },
    {
        "APIs": [
            {
                "name": "BookTable",
                "Description": "This API allows the user to book a table at a specific restaurant for a given date and time.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the booking",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant_name, date, time) -> booking status"
            },
            {
                "name": "GetRestaurant",
                "Description": "This API the name of the restaurant recommended based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city to search for restaurants",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine to search for restaurants",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "GetRestaurant(city,cuisine) -> restaurant_name"
            }
        ],
        "Query": "Can I reserve a table at a French restaurant in Paris for tomorrow at lunch?",
        "Label": "BookTable(restaurant_name=GetRestaurant(city='Paris', cuisine='French'), date='tomorrow', time='lunch')",
        "Index": 341
    },
    {
        "APIs": [
            {
                "name": "BookTable",
                "Description": "This API allows the user to book a table at a specific restaurant for a given date and time.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the booking",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant_name, date, time) -> booking status"
            },
            {
                "name": "GetRestaurant",
                "Description": "This API the name of the restaurant recommended based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city to search for restaurants",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine to search for restaurants",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "GetRestaurant(city,cuisine) -> restaurant_name"
            }
        ],
        "Query": "I need a reservation for a Mexican restaurant in Los Angeles next Monday at 7 pm.",
        "Label": "BookTable(restaurant_name=GetRestaurant(city='Los Angeles', cuisine='Mexican'), date='next Monday', time='7 pm')",
        "Index": 342
    },
    {
        "APIs": [
            {
                "name": "BookTable",
                "Description": "This API allows the user to book a table at a specific restaurant for a given date and time.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the booking",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant_name, date, time) -> booking status"
            },
            {
                "name": "GetRestaurant",
                "Description": "This API the name of the restaurant recommended based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city to search for restaurants",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine to search for restaurants",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "GetRestaurant(city,cuisine) -> restaurant_name"
            }
        ],
        "Query": "Please book a table for me at a Japanese restaurant in Tokyo this Sunday for dinner.",
        "Label": "BookTable(restaurant_name=GetRestaurant(city='Tokyo', cuisine='Japanese'), date='this Sunday', time='dinner')",
        "Index": 343
    },
    {
        "APIs": [
            {
                "name": "BookTable",
                "Description": "This API allows the user to book a table at a specific restaurant for a given date and time.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the booking",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant_name, date, time) -> booking status"
            },
            {
                "name": "GetRestaurant",
                "Description": "This API the name of the restaurant recommended based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city to search for restaurants",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine to search for restaurants",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "GetRestaurant(city,cuisine) -> restaurant_name"
            }
        ],
        "Query": "Can you make a reservation for an Indian restaurant in Delhi for me on next Thursday at 8 pm?",
        "Label": "BookTable(restaurant_name=GetRestaurant(city='Delhi', cuisine='Indian'), date='next Thursday', time='8 pm')",
        "Index": 344
    },
    {
        "APIs": [
            {
                "name": "BookTable",
                "Description": "This API allows the user to book a table at a specific restaurant for a given date and time.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the booking",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant_name, date, time) -> booking status"
            },
            {
                "name": "GetRestaurant",
                "Description": "This API the name of the restaurant recommended based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city to search for restaurants",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine to search for restaurants",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "GetRestaurant(city,cuisine) -> restaurant_name"
            }
        ],
        "Query": "I need to book a table for a Chinese restaurant in New York City for lunch tomorrow.",
        "Label": "BookTable(restaurant_name=GetRestaurant(city='New York City', cuisine='Chinese'), date='tomorrow', time='lunch')",
        "Index": 345
    },
    {
        "APIs": [
            {
                "name": "BookTable",
                "Description": "This API allows the user to book a table at a specific restaurant for a given date and time.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the booking",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant_name, date, time) -> booking status"
            },
            {
                "name": "GetRestaurant",
                "Description": "This API the name of the restaurant recommended based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city to search for restaurants",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine to search for restaurants",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "GetRestaurant(city,cuisine) -> restaurant_name"
            }
        ],
        "Query": "Can you assist in reserving a table at a French restaurant in Paris for dinner tonight?",
        "Label": "BookTable(restaurant_name=GetRestaurant(city='Paris', cuisine='French'), date='today', time='dinner')",
        "Index": 346
    },
    {
        "APIs": [
            {
                "name": "BookTable",
                "Description": "This API allows the user to book a table at a specific restaurant for a given date and time.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the booking",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant_name, date, time) -> booking status"
            },
            {
                "name": "GetRestaurant",
                "Description": "This API the name of the restaurant recommended based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city to search for restaurants",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine to search for restaurants",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "GetRestaurant(city,cuisine) -> restaurant_name"
            }
        ],
        "Query": "I'm looking to book a table for lunch at an Indian restaurant in London tomorrow.",
        "Label": "BookTable(restaurant_name=GetRestaurant(city='London', cuisine='Indian'), date='tomorrow', time='lunch')",
        "Index": 347
    },
    {
        "APIs": [
            {
                "name": "BookTable",
                "Description": "This API allows the user to book a table at a specific restaurant for a given date and time.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the booking",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant_name, date, time) -> booking status"
            },
            {
                "name": "GetRestaurant",
                "Description": "This API the name of the restaurant recommended based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city to search for restaurants",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine to search for restaurants",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "GetRestaurant(city,cuisine) -> restaurant_name"
            }
        ],
        "Query": "Help me reserve a table for dinner at a Japanese restaurant in Tokyo tonight.",
        "Label": "BookTable(restaurant_name=GetRestaurant(city='Tokyo', cuisine='Japanese'), date='today', time='dinner')",
        "Index": 348
    },
    {
        "APIs": [
            {
                "name": "BookTable",
                "Description": "This API allows the user to book a table at a specific restaurant for a given date and time.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the booking",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant_name, date, time) -> booking status"
            },
            {
                "name": "GetRestaurant",
                "Description": "This API the name of the restaurant recommended based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city to search for restaurants",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine to search for restaurants",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "GetRestaurant(city,cuisine) -> restaurant_name"
            }
        ],
        "Query": "Can I make a reservation for a Mexican restaurant in Los Angeles for breakfast tomorrow?",
        "Label": "BookTable(restaurant_name=GetRestaurant(city='Los Angeles', cuisine='Mexican'), date='tomorrow', time='breakfast')",
        "Index": 349
    },
    {
        "APIs": [
            {
                "name": "SearchRecipe",
                "Description": "This API is to search for recipe based on user preferences.",
                "input_params": {
                    "cuisine": {
                        "description": "the cuisine preference",
                        "type": "String"
                    },
                    "diet": {
                        "description": "the diet preference",
                        "type": "String"
                    },
                    "ingredients": {
                        "description": "the list of ingredients",
                        "type": "List"
                    }
                },
                "output_params": {
                    "recipe": {
                        "description": "the searched recipe",
                        "type": "String"
                    }
                },
                "format": "SearchRecipe(cuisine, diet, ingredients) -> recipe"
            },
            {
                "name": "GetRecipeInstructions",
                "Description": "This API is to get the instructions to prepare a specific recipe.",
                "input_params": {
                    "recipe_name": {
                        "description": "the name of the recipe",
                        "type": "String"
                    }
                },
                "output_params": {
                    "instructions": {
                        "description": "the instructions for the recipe",
                        "type": "String"
                    }
                },
                "format": "GetRecipeInstructions(recipe_name) -> instructions"
            }
        ],
        "Query": "Can you give me the steps to cook a nutritious Mexican dish with rice and beans?",
        "Label": "GetRecipeInstructions(recipe_name=SearchRecipe(cuisine='Mexican', diet='nutritious', ingredients=['rice', 'beans']))",
        "Index": 350
    },
    {
        "APIs": [
            {
                "name": "SearchRecipe",
                "Description": "This API is to search for recipe based on user preferences.",
                "input_params": {
                    "cuisine": {
                        "description": "the cuisine preference",
                        "type": "String"
                    },
                    "diet": {
                        "description": "the diet preference",
                        "type": "String"
                    },
                    "ingredients": {
                        "description": "the list of ingredients",
                        "type": "List"
                    }
                },
                "output_params": {
                    "recipe": {
                        "description": "the searched recipe",
                        "type": "String"
                    }
                },
                "format": "SearchRecipe(cuisine, diet, ingredients) -> recipe"
            },
            {
                "name": "GetRecipeInstructions",
                "Description": "This API is to get the instructions to prepare a specific recipe.",
                "input_params": {
                    "recipe_name": {
                        "description": "the name of the recipe",
                        "type": "String"
                    }
                },
                "output_params": {
                    "instructions": {
                        "description": "the instructions for the recipe",
                        "type": "String"
                    }
                },
                "format": "GetRecipeInstructions(recipe_name) -> instructions"
            }
        ],
        "Query": "I need to know how to prepare a vegan Japanese meal with tofu and vegetables.",
        "Label": "GetRecipeInstructions(recipe_name=SearchRecipe(cuisine='Japanese', diet='vegan', ingredients=['tofu', 'vegetables']))",
        "Index": 351
    },
    {
        "APIs": [
            {
                "name": "SearchRecipe",
                "Description": "This API is to search for recipe based on user preferences.",
                "input_params": {
                    "cuisine": {
                        "description": "the cuisine preference",
                        "type": "String"
                    },
                    "diet": {
                        "description": "the diet preference",
                        "type": "String"
                    },
                    "ingredients": {
                        "description": "the list of ingredients",
                        "type": "List"
                    }
                },
                "output_params": {
                    "recipe": {
                        "description": "the searched recipe",
                        "type": "String"
                    }
                },
                "format": "SearchRecipe(cuisine, diet, ingredients) -> recipe"
            },
            {
                "name": "GetRecipeInstructions",
                "Description": "This API is to get the instructions to prepare a specific recipe.",
                "input_params": {
                    "recipe_name": {
                        "description": "the name of the recipe",
                        "type": "String"
                    }
                },
                "output_params": {
                    "instructions": {
                        "description": "the instructions for the recipe",
                        "type": "String"
                    }
                },
                "format": "GetRecipeInstructions(recipe_name) -> instructions"
            }
        ],
        "Query": "Show me the method to cook a healthy Chinese dish with chicken and broccoli.",
        "Label": "GetRecipeInstructions(recipe_name=SearchRecipe(cuisine='Chinese', diet='healthy', ingredients=['chicken', 'broccoli']))",
        "Index": 352
    },
    {
        "APIs": [
            {
                "name": "SearchRecipe",
                "Description": "This API is to search for recipe based on user preferences.",
                "input_params": {
                    "cuisine": {
                        "description": "the cuisine preference",
                        "type": "String"
                    },
                    "diet": {
                        "description": "the diet preference",
                        "type": "String"
                    },
                    "ingredients": {
                        "description": "the list of ingredients",
                        "type": "List"
                    }
                },
                "output_params": {
                    "recipe": {
                        "description": "the searched recipe",
                        "type": "String"
                    }
                },
                "format": "SearchRecipe(cuisine, diet, ingredients) -> recipe"
            },
            {
                "name": "GetRecipeInstructions",
                "Description": "This API is to get the instructions to prepare a specific recipe.",
                "input_params": {
                    "recipe_name": {
                        "description": "the name of the recipe",
                        "type": "String"
                    }
                },
                "output_params": {
                    "instructions": {
                        "description": "the instructions for the recipe",
                        "type": "String"
                    }
                },
                "format": "GetRecipeInstructions(recipe_name) -> instructions"
            }
        ],
        "Query": "I need directions to prepare a nutritious Mexican dish with beef and tomatoes.",
        "Label": "GetRecipeInstructions(recipe_name=SearchRecipe(cuisine='Mexican', diet='nutritious', ingredients=['beef', 'tomatoes']))",
        "Index": 353
    },
    {
        "APIs": [
            {
                "name": "SearchRecipe",
                "Description": "This API is to search for recipe based on user preferences.",
                "input_params": {
                    "cuisine": {
                        "description": "the cuisine preference",
                        "type": "String"
                    },
                    "diet": {
                        "description": "the diet preference",
                        "type": "String"
                    },
                    "ingredients": {
                        "description": "the list of ingredients",
                        "type": "List"
                    }
                },
                "output_params": {
                    "recipe": {
                        "description": "the searched recipe",
                        "type": "String"
                    }
                },
                "format": "SearchRecipe(cuisine, diet, ingredients) -> recipe"
            },
            {
                "name": "GetRecipeInstructions",
                "Description": "This API is to get the instructions to prepare a specific recipe.",
                "input_params": {
                    "recipe_name": {
                        "description": "the name of the recipe",
                        "type": "String"
                    }
                },
                "output_params": {
                    "instructions": {
                        "description": "the instructions for the recipe",
                        "type": "String"
                    }
                },
                "format": "GetRecipeInstructions(recipe_name) -> instructions"
            }
        ],
        "Query": "Show me the steps to cook a low-fat Greek meal with fish and olives.",
        "Label": "GetRecipeInstructions(recipe_name=SearchRecipe(cuisine='Greek', diet='low-fat', ingredients=['fish', 'olives']))",
        "Index": 354
    },
    {
        "APIs": [
            {
                "name": "SearchRecipe",
                "Description": "This API is to search for recipe based on user preferences.",
                "input_params": {
                    "cuisine": {
                        "description": "the cuisine preference",
                        "type": "String"
                    },
                    "diet": {
                        "description": "the diet preference",
                        "type": "String"
                    },
                    "ingredients": {
                        "description": "the list of ingredients",
                        "type": "List"
                    }
                },
                "output_params": {
                    "recipe": {
                        "description": "the searched recipe",
                        "type": "String"
                    }
                },
                "format": "SearchRecipe(cuisine, diet, ingredients) -> recipe"
            },
            {
                "name": "GetRecipeInstructions",
                "Description": "This API is to get the instructions to prepare a specific recipe.",
                "input_params": {
                    "recipe_name": {
                        "description": "the name of the recipe",
                        "type": "String"
                    }
                },
                "output_params": {
                    "instructions": {
                        "description": "the instructions for the recipe",
                        "type": "String"
                    }
                },
                "format": "GetRecipeInstructions(recipe_name) -> instructions"
            }
        ],
        "Query": "What are the instructions for preparing a gluten-free French dish with duck and potatoes?",
        "Label": "GetRecipeInstructions(recipe_name=SearchRecipe(cuisine='French', diet='gluten-free', ingredients=['duck', 'potatoes']))",
        "Index": 355
    },
    {
        "APIs": [
            {
                "name": "SearchRecipe",
                "Description": "This API is to search for recipe based on user preferences.",
                "input_params": {
                    "cuisine": {
                        "description": "the cuisine preference",
                        "type": "String"
                    },
                    "diet": {
                        "description": "the diet preference",
                        "type": "String"
                    },
                    "ingredients": {
                        "description": "the list of ingredients",
                        "type": "List"
                    }
                },
                "output_params": {
                    "recipe": {
                        "description": "the searched recipe",
                        "type": "String"
                    }
                },
                "format": "SearchRecipe(cuisine, diet, ingredients) -> recipe"
            },
            {
                "name": "GetRecipeInstructions",
                "Description": "This API is to get the instructions to prepare a specific recipe.",
                "input_params": {
                    "recipe_name": {
                        "description": "the name of the recipe",
                        "type": "String"
                    }
                },
                "output_params": {
                    "instructions": {
                        "description": "the instructions for the recipe",
                        "type": "String"
                    }
                },
                "format": "GetRecipeInstructions(recipe_name) -> instructions"
            }
        ],
        "Query": "How do I prepare a vegan Chinese meal with tofu and broccoli?",
        "Label": "GetRecipeInstructions(recipe_name=SearchRecipe(cuisine='Chinese', diet='vegan', ingredients=['tofu', 'broccoli']))",
        "Index": 356
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the temperature for a specific location.",
                "input_params": {
                    "location": {
                        "description": "location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "temperature": {
                        "description": "the temperature",
                        "type": "Float"
                    }
                },
                "format": "WeatherForecast(location) -> temperature"
            },
            {
                "name": "GetCityPopulation",
                "Description": "This API is to get the population of a specific city.",
                "input_params": {
                    "city": {
                        "description": "city name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "format": "GetCityPopulation(city) -> population"
            },
            {
                "name": "RecommendActivity",
                "Description": "This API is to recommend an activity based on the temperature and population of a city.",
                "input_params": {
                    "temperature": {
                        "description": "the temperature of the city",
                        "type": "Float"
                    },
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "activity": {
                        "description": "the recommended activity",
                        "type": "String"
                    }
                },
                "format": "RecommendActivity(temperature, population) -> activity"
            }
        ],
        "Query": "What's a good activity to do in Los Angeles?",
        "Label": "RecommendActivity(temperature=WeatherForecast(location='Los Angeles'), population=GetCityPopulation(city='Los Angeles'))",
        "Index": 357
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the temperature for a specific location.",
                "input_params": {
                    "location": {
                        "description": "location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "temperature": {
                        "description": "the temperature",
                        "type": "Float"
                    }
                },
                "format": "WeatherForecast(location) -> temperature"
            },
            {
                "name": "GetCityPopulation",
                "Description": "This API is to get the population of a specific city.",
                "input_params": {
                    "city": {
                        "description": "city name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "format": "GetCityPopulation(city) -> population"
            },
            {
                "name": "RecommendActivity",
                "Description": "This API is to recommend an activity based on the temperature and population of a city.",
                "input_params": {
                    "temperature": {
                        "description": "the temperature of the city",
                        "type": "Float"
                    },
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "activity": {
                        "description": "the recommended activity",
                        "type": "String"
                    }
                },
                "format": "RecommendActivity(temperature, population) -> activity"
            }
        ],
        "Query": "I'm heading to Boston next week, what activity do you recommend?",
        "Label": "RecommendActivity(temperature=WeatherForecast(location='Boston'), population=GetCityPopulation(city='Boston'))",
        "Index": 358
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the temperature for a specific location.",
                "input_params": {
                    "location": {
                        "description": "location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "temperature": {
                        "description": "the temperature",
                        "type": "Float"
                    }
                },
                "format": "WeatherForecast(location) -> temperature"
            },
            {
                "name": "GetCityPopulation",
                "Description": "This API is to get the population of a specific city.",
                "input_params": {
                    "city": {
                        "description": "city name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "format": "GetCityPopulation(city) -> population"
            },
            {
                "name": "RecommendActivity",
                "Description": "This API is to recommend an activity based on the temperature and population of a city.",
                "input_params": {
                    "temperature": {
                        "description": "the temperature of the city",
                        "type": "Float"
                    },
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "activity": {
                        "description": "the recommended activity",
                        "type": "String"
                    }
                },
                "format": "RecommendActivity(temperature, population) -> activity"
            }
        ],
        "Query": "Planning a trip to San Francisco, any recommended activities?",
        "Label": "RecommendActivity(temperature=WeatherForecast(location='San Francisco'), population=GetCityPopulation(city='San Francisco'))",
        "Index": 359
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the temperature for a specific location.",
                "input_params": {
                    "location": {
                        "description": "location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "temperature": {
                        "description": "the temperature",
                        "type": "Float"
                    }
                },
                "format": "WeatherForecast(location) -> temperature"
            },
            {
                "name": "GetCityPopulation",
                "Description": "This API is to get the population of a specific city.",
                "input_params": {
                    "city": {
                        "description": "city name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "format": "GetCityPopulation(city) -> population"
            },
            {
                "name": "RecommendActivity",
                "Description": "This API is to recommend an activity based on the temperature and population of a city.",
                "input_params": {
                    "temperature": {
                        "description": "the temperature of the city",
                        "type": "Float"
                    },
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "activity": {
                        "description": "the recommended activity",
                        "type": "String"
                    }
                },
                "format": "RecommendActivity(temperature, population) -> activity"
            }
        ],
        "Query": "I am planning to travel to Los Angeles next week, can you suggest me an activity?",
        "Label": "RecommendActivity(temperature=WeatherForecast(location='Los Angeles'), population=GetCityPopulation(city='Los Angeles'))",
        "Index": 360
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the temperature for a specific location.",
                "input_params": {
                    "location": {
                        "description": "location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "temperature": {
                        "description": "the temperature",
                        "type": "Float"
                    }
                },
                "format": "WeatherForecast(location) -> temperature"
            },
            {
                "name": "GetCityPopulation",
                "Description": "This API is to get the population of a specific city.",
                "input_params": {
                    "city": {
                        "description": "city name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "format": "GetCityPopulation(city) -> population"
            },
            {
                "name": "RecommendActivity",
                "Description": "This API is to recommend an activity based on the temperature and population of a city.",
                "input_params": {
                    "temperature": {
                        "description": "the temperature of the city",
                        "type": "Float"
                    },
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "activity": {
                        "description": "the recommended activity",
                        "type": "String"
                    }
                },
                "format": "RecommendActivity(temperature, population) -> activity"
            }
        ],
        "Query": "I am heading to Chicago this weekend, what activity should I do there?",
        "Label": "RecommendActivity(temperature=WeatherForecast(location='Chicago'), population=GetCityPopulation(city='Chicago'))",
        "Index": 361
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the temperature for a specific location.",
                "input_params": {
                    "location": {
                        "description": "location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "temperature": {
                        "description": "the temperature",
                        "type": "Float"
                    }
                },
                "format": "WeatherForecast(location) -> temperature"
            },
            {
                "name": "GetCityPopulation",
                "Description": "This API is to get the population of a specific city.",
                "input_params": {
                    "city": {
                        "description": "city name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "format": "GetCityPopulation(city) -> population"
            },
            {
                "name": "RecommendActivity",
                "Description": "This API is to recommend an activity based on the temperature and population of a city.",
                "input_params": {
                    "temperature": {
                        "description": "the temperature of the city",
                        "type": "Float"
                    },
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "activity": {
                        "description": "the recommended activity",
                        "type": "String"
                    }
                },
                "format": "RecommendActivity(temperature, population) -> activity"
            }
        ],
        "Query": "Can you recommend an activity for my trip to Boston next month?",
        "Label": "RecommendActivity(temperature=WeatherForecast(location='Boston'), population=GetCityPopulation(city='Boston'))",
        "Index": 362
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the temperature for a specific location.",
                "input_params": {
                    "location": {
                        "description": "location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "temperature": {
                        "description": "the temperature",
                        "type": "Float"
                    }
                },
                "format": "WeatherForecast(location) -> temperature"
            },
            {
                "name": "GetCityPopulation",
                "Description": "This API is to get the population of a specific city.",
                "input_params": {
                    "city": {
                        "description": "city name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "format": "GetCityPopulation(city) -> population"
            },
            {
                "name": "RecommendActivity",
                "Description": "This API is to recommend an activity based on the temperature and population of a city.",
                "input_params": {
                    "temperature": {
                        "description": "the temperature of the city",
                        "type": "Float"
                    },
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "activity": {
                        "description": "the recommended activity",
                        "type": "String"
                    }
                },
                "format": "RecommendActivity(temperature, population) -> activity"
            }
        ],
        "Query": "What activity should I plan for my visit to Miami?",
        "Label": "RecommendActivity(temperature=WeatherForecast(location='Miami'), population=GetCityPopulation(city='Miami'))",
        "Index": 363
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the temperature for a specific location.",
                "input_params": {
                    "location": {
                        "description": "location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "temperature": {
                        "description": "the temperature",
                        "type": "Float"
                    }
                },
                "format": "WeatherForecast(location) -> temperature"
            },
            {
                "name": "GetCityPopulation",
                "Description": "This API is to get the population of a specific city.",
                "input_params": {
                    "city": {
                        "description": "city name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "format": "GetCityPopulation(city) -> population"
            },
            {
                "name": "RecommendActivity",
                "Description": "This API is to recommend an activity based on the temperature and population of a city.",
                "input_params": {
                    "temperature": {
                        "description": "the temperature of the city",
                        "type": "Float"
                    },
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "activity": {
                        "description": "the recommended activity",
                        "type": "String"
                    }
                },
                "format": "RecommendActivity(temperature, population) -> activity"
            }
        ],
        "Query": "I have a trip to San Francisco, what activity would you recommend?",
        "Label": "RecommendActivity(temperature=WeatherForecast(location='San Francisco'), population=GetCityPopulation(city='San Francisco'))",
        "Index": 364
    },
    {
        "APIs": [
            {
                "Name": "SearchRestaurant",
                "Description": "This API finds a restaurant in a given city and with a certain cuisine.",
                "input_params": {
                    "city": {
                        "description": "city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "cuisine type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    }
                },
                "format": "SearchRestaurant(city, cuisine) -> restaurant_name"
            },
            {
                "Name": "RecommendItems",
                "Description": "This API retrieves the menu of a given restaurant and recommend items.",
                "input_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recommend_items": {
                        "description": "recommended items in menu",
                        "type": "List"
                    }
                },
                "format": "RecommendItems(restaurant_name) -> recommend_items"
            },
            {
                "Name": "PlaceOrder",
                "Description": "This API allows the user to place an order at a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    },
                    "order_items": {
                        "description": "ordered items, the items must be in menu",
                        "type": "List"
                    },
                    "table_number": {
                        "description": "table number",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "order status",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(restaurant_name, order_items, table_number) -> order_status"
            }
        ],
        "Query": "I'm in San Francisco and I'm craving Italian food. Please place an order for me in any nearby restaurant at table number 5.",
        "Label": "PlaceOrder(restaurant_name=SearchRestaurant(city='San Francisco', cuisine='Italian'), order_items=RecommendItems(restaurant_name=SearchRestaurant(city='San Francisco', cuisine='Italian')), table_number=5)",
        "Index": 365
    },
    {
        "APIs": [
            {
                "Name": "SearchRestaurant",
                "Description": "This API finds a restaurant in a given city and with a certain cuisine.",
                "input_params": {
                    "city": {
                        "description": "city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "cuisine type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    }
                },
                "format": "SearchRestaurant(city, cuisine) -> restaurant_name"
            },
            {
                "Name": "RecommendItems",
                "Description": "This API retrieves the menu of a given restaurant and recommend items.",
                "input_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recommend_items": {
                        "description": "recommended items in menu",
                        "type": "List"
                    }
                },
                "format": "RecommendItems(restaurant_name) -> recommend_items"
            },
            {
                "Name": "PlaceOrder",
                "Description": "This API allows the user to place an order at a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    },
                    "order_items": {
                        "description": "ordered items, the items must be in menu",
                        "type": "List"
                    },
                    "table_number": {
                        "description": "table number",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "order status",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(restaurant_name, order_items, table_number) -> order_status"
            }
        ],
        "Query": "I am in New York City and I am in the mood for Chinese food. Can you make a reservation for me in a local restaurant at table 7?",
        "Label": "PlaceOrder(restaurant_name=SearchRestaurant(city='New York City', cuisine='Chinese'), order_items=RecommendItems(restaurant_name=SearchRestaurant(city='New York City', cuisine='Chinese')), table_number=7)",
        "Index": 366
    },
    {
        "APIs": [
            {
                "Name": "SearchRestaurant",
                "Description": "This API finds a restaurant in a given city and with a certain cuisine.",
                "input_params": {
                    "city": {
                        "description": "city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "cuisine type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    }
                },
                "format": "SearchRestaurant(city, cuisine) -> restaurant_name"
            },
            {
                "Name": "RecommendItems",
                "Description": "This API retrieves the menu of a given restaurant and recommend items.",
                "input_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recommend_items": {
                        "description": "recommended items in menu",
                        "type": "List"
                    }
                },
                "format": "RecommendItems(restaurant_name) -> recommend_items"
            },
            {
                "Name": "PlaceOrder",
                "Description": "This API allows the user to place an order at a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    },
                    "order_items": {
                        "description": "ordered items, the items must be in menu",
                        "type": "List"
                    },
                    "table_number": {
                        "description": "table number",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "order status",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(restaurant_name, order_items, table_number) -> order_status"
            }
        ],
        "Query": "I am currently in Los Angeles and I am craving Mexican food. Could you place an order for me in a nearby Mexican restaurant at table 11?",
        "Label": "PlaceOrder(restaurant_name=SearchRestaurant(city='Los Angeles', cuisine='Mexican'), order_items=RecommendItems(restaurant_name=SearchRestaurant(city='Los Angeles', cuisine='Mexican')), table_number=11)",
        "Index": 367
    },
    {
        "APIs": [
            {
                "Name": "SearchRestaurant",
                "Description": "This API finds a restaurant in a given city and with a certain cuisine.",
                "input_params": {
                    "city": {
                        "description": "city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "cuisine type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    }
                },
                "format": "SearchRestaurant(city, cuisine) -> restaurant_name"
            },
            {
                "Name": "RecommendItems",
                "Description": "This API retrieves the menu of a given restaurant and recommend items.",
                "input_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recommend_items": {
                        "description": "recommended items in menu",
                        "type": "List"
                    }
                },
                "format": "RecommendItems(restaurant_name) -> recommend_items"
            },
            {
                "Name": "PlaceOrder",
                "Description": "This API allows the user to place an order at a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    },
                    "order_items": {
                        "description": "ordered items, the items must be in menu",
                        "type": "List"
                    },
                    "table_number": {
                        "description": "table number",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "order status",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(restaurant_name, order_items, table_number) -> order_status"
            }
        ],
        "Query": "I am in Tokyo and I want to eat Sushi. Please help me order in any local restaurant at table number 3.",
        "Label": "PlaceOrder(restaurant_name=SearchRestaurant(city='Tokyo', cuisine='Sushi'), order_items=RecommendItems(restaurant_name=SearchRestaurant(city='Tokyo', cuisine='Sushi')), table_number=3)",
        "Index": 368
    },
    {
        "APIs": [
            {
                "Name": "SearchRestaurant",
                "Description": "This API finds a restaurant in a given city and with a certain cuisine.",
                "input_params": {
                    "city": {
                        "description": "city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "cuisine type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    }
                },
                "format": "SearchRestaurant(city, cuisine) -> restaurant_name"
            },
            {
                "Name": "RecommendItems",
                "Description": "This API retrieves the menu of a given restaurant and recommend items.",
                "input_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recommend_items": {
                        "description": "recommended items in menu",
                        "type": "List"
                    }
                },
                "format": "RecommendItems(restaurant_name) -> recommend_items"
            },
            {
                "Name": "PlaceOrder",
                "Description": "This API allows the user to place an order at a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    },
                    "order_items": {
                        "description": "ordered items, the items must be in menu",
                        "type": "List"
                    },
                    "table_number": {
                        "description": "table number",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "order status",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(restaurant_name, order_items, table_number) -> order_status"
            }
        ],
        "Query": "I am in London and I am feeling like eating Indian food. Can you place an order for me in a nearby Indian restaurant at table 9?",
        "Label": "PlaceOrder(restaurant_name=SearchRestaurant(city='London', cuisine='Indian'), order_items=RecommendItems(restaurant_name=SearchRestaurant(city='London', cuisine='Indian')), table_number=9)",
        "Index": 369
    },
    {
        "APIs": [
            {
                "Name": "SearchRestaurant",
                "Description": "This API finds a restaurant in a given city and with a certain cuisine.",
                "input_params": {
                    "city": {
                        "description": "city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "cuisine type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    }
                },
                "format": "SearchRestaurant(city, cuisine) -> restaurant_name"
            },
            {
                "Name": "RecommendItems",
                "Description": "This API retrieves the menu of a given restaurant and recommend items.",
                "input_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recommend_items": {
                        "description": "recommended items in menu",
                        "type": "List"
                    }
                },
                "format": "RecommendItems(restaurant_name) -> recommend_items"
            },
            {
                "Name": "PlaceOrder",
                "Description": "This API allows the user to place an order at a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    },
                    "order_items": {
                        "description": "ordered items, the items must be in menu",
                        "type": "List"
                    },
                    "table_number": {
                        "description": "table number",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "order status",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(restaurant_name, order_items, table_number) -> order_status"
            }
        ],
        "Query": "I am in Rome and I am craving for Pizza. Could you make a reservation for me in a local pizzeria at table 12?",
        "Label": "PlaceOrder(restaurant_name=SearchRestaurant(city='Rome', cuisine='Pizza'), order_items=RecommendItems(restaurant_name=SearchRestaurant(city='Rome', cuisine='Pizza')), table_number=12)",
        "Index": 370
    },
    {
        "APIs": [
            {
                "Name": "SearchRestaurant",
                "Description": "This API finds a restaurant in a given city and with a certain cuisine.",
                "input_params": {
                    "city": {
                        "description": "city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "cuisine type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    }
                },
                "format": "SearchRestaurant(city, cuisine) -> restaurant_name"
            },
            {
                "Name": "RecommendItems",
                "Description": "This API retrieves the menu of a given restaurant and recommend items.",
                "input_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recommend_items": {
                        "description": "recommended items in menu",
                        "type": "List"
                    }
                },
                "format": "RecommendItems(restaurant_name) -> recommend_items"
            },
            {
                "Name": "PlaceOrder",
                "Description": "This API allows the user to place an order at a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    },
                    "order_items": {
                        "description": "ordered items, the items must be in menu",
                        "type": "List"
                    },
                    "table_number": {
                        "description": "table number",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "order status",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(restaurant_name, order_items, table_number) -> order_status"
            }
        ],
        "Query": "I am in New York and I am in the mood for Chinese cuisine. Can you order for me at any nearby restaurant at table number 10.",
        "Label": "PlaceOrder(restaurant_name=SearchRestaurant(city='New York', cuisine='Chinese'), order_items=RecommendItems(restaurant_name=SearchRestaurant(city='New York', cuisine='Chinese')), table_number=10)",
        "Index": 371
    },
    {
        "APIs": [
            {
                "Name": "SearchRestaurant",
                "Description": "This API finds a restaurant in a given city and with a certain cuisine.",
                "input_params": {
                    "city": {
                        "description": "city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "cuisine type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    }
                },
                "format": "SearchRestaurant(city, cuisine) -> restaurant_name"
            },
            {
                "Name": "RecommendItems",
                "Description": "This API retrieves the menu of a given restaurant and recommend items.",
                "input_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recommend_items": {
                        "description": "recommended items in menu",
                        "type": "List"
                    }
                },
                "format": "RecommendItems(restaurant_name) -> recommend_items"
            },
            {
                "Name": "PlaceOrder",
                "Description": "This API allows the user to place an order at a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    },
                    "order_items": {
                        "description": "ordered items, the items must be in menu",
                        "type": "List"
                    },
                    "table_number": {
                        "description": "table number",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "order status",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(restaurant_name, order_items, table_number) -> order_status"
            }
        ],
        "Query": "I'm currently in Los Angeles and I feel like eating Mexican food. Could you place an order for me in any local restaurant at table number 3?",
        "Label": "PlaceOrder(restaurant_name=SearchRestaurant(city='Los Angeles', cuisine='Mexican'), order_items=RecommendItems(restaurant_name=SearchRestaurant(city='Los Angeles', cuisine='Mexican')), table_number=3)",
        "Index": 372
    },
    {
        "APIs": [
            {
                "Name": "SearchRestaurant",
                "Description": "This API finds a restaurant in a given city and with a certain cuisine.",
                "input_params": {
                    "city": {
                        "description": "city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "cuisine type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    }
                },
                "format": "SearchRestaurant(city, cuisine) -> restaurant_name"
            },
            {
                "Name": "RecommendItems",
                "Description": "This API retrieves the menu of a given restaurant and recommend items.",
                "input_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recommend_items": {
                        "description": "recommended items in menu",
                        "type": "List"
                    }
                },
                "format": "RecommendItems(restaurant_name) -> recommend_items"
            },
            {
                "Name": "PlaceOrder",
                "Description": "This API allows the user to place an order at a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    },
                    "order_items": {
                        "description": "ordered items, the items must be in menu",
                        "type": "List"
                    },
                    "table_number": {
                        "description": "table number",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "order status",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(restaurant_name, order_items, table_number) -> order_status"
            }
        ],
        "Query": "I am in Chicago and I crave for Japanese dishes. Can you place an order from any nearby restaurant for me at table number 7?",
        "Label": "PlaceOrder(restaurant_name=SearchRestaurant(city='Chicago', cuisine='Japanese'), order_items=RecommendItems(restaurant_name=SearchRestaurant(city='Chicago', cuisine='Japanese')), table_number=7)",
        "Index": 373
    },
    {
        "APIs": [
            {
                "Name": "SearchRestaurant",
                "Description": "This API finds a restaurant in a given city and with a certain cuisine.",
                "input_params": {
                    "city": {
                        "description": "city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "cuisine type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    }
                },
                "format": "SearchRestaurant(city, cuisine) -> restaurant_name"
            },
            {
                "Name": "RecommendItems",
                "Description": "This API retrieves the menu of a given restaurant and recommend items.",
                "input_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recommend_items": {
                        "description": "recommended items in menu",
                        "type": "List"
                    }
                },
                "format": "RecommendItems(restaurant_name) -> recommend_items"
            },
            {
                "Name": "PlaceOrder",
                "Description": "This API allows the user to place an order at a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    },
                    "order_items": {
                        "description": "ordered items, the items must be in menu",
                        "type": "List"
                    },
                    "table_number": {
                        "description": "table number",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "order status",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(restaurant_name, order_items, table_number) -> order_status"
            }
        ],
        "Query": "I'm in Boston and I desire some French cuisine. Could you please place an order for me in any restaurant around at table number 4?",
        "Label": "PlaceOrder(restaurant_name=SearchRestaurant(city='Boston', cuisine='French'), order_items=RecommendItems(restaurant_name=SearchRestaurant(city='Boston', cuisine='French')), table_number=4)",
        "Index": 374
    },
    {
        "APIs": [
            {
                "Name": "SearchRestaurant",
                "Description": "This API finds a restaurant in a given city and with a certain cuisine.",
                "input_params": {
                    "city": {
                        "description": "city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "cuisine type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    }
                },
                "format": "SearchRestaurant(city, cuisine) -> restaurant_name"
            },
            {
                "Name": "RecommendItems",
                "Description": "This API retrieves the menu of a given restaurant and recommend items.",
                "input_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recommend_items": {
                        "description": "recommended items in menu",
                        "type": "List"
                    }
                },
                "format": "RecommendItems(restaurant_name) -> recommend_items"
            },
            {
                "Name": "PlaceOrder",
                "Description": "This API allows the user to place an order at a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "restaurant name",
                        "type": "String"
                    },
                    "order_items": {
                        "description": "ordered items, the items must be in menu",
                        "type": "List"
                    },
                    "table_number": {
                        "description": "table number",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "order status",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(restaurant_name, order_items, table_number) -> order_status"
            }
        ],
        "Query": "I am in Houston and I want to eat Indian food. Please place an order for me in any close restaurant at table number 6.",
        "Label": "PlaceOrder(restaurant_name=SearchRestaurant(city='Houston', cuisine='Indian'), order_items=RecommendItems(restaurant_name=SearchRestaurant(city='Houston', cuisine='Indian')), table_number=6)",
        "Index": 375
    },
    {
        "APIs": [
            {
                "Name": "SearchRestaurant",
                "Description": "This API finds a restaurant and its location in a certain cuisine.",
                "input_params": {
                    "cuisine": {
                        "description": "cuisine type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_location": {
                        "description": "restaurant location",
                        "type": "String"
                    }
                },
                "format": "SearchRestaurant(cuisine) -> restaurant_location"
            },
            {
                "Name": "GetRoute",
                "Description": "This API provides the optimal driving route between two locations.",
                "input_params": {
                    "origin_location": {
                        "description": "starting location,the format: (Latitude,longitude),eg.(23,145)",
                        "type": "String"
                    },
                    "destination_location": {
                        "description": "destination location,the format: (Latitude,longitude),eg.(23,145)",
                        "type": "String"
                    }
                },
                "output_params": {
                    "route": {
                        "description": "optimal driving route",
                        "type": "String"
                    }
                },
                "format": "GetRoute(origin_location,destination_location) -> route"
            },
            {
                "name": "GetUserLocation",
                "Description": "This API returns the location of a certain user",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the user, it should be a number, not a character",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_location": {
                        "description": "the location of the user, the format: (Latitude,longitude),eg.(23,145)",
                        "type": "String"
                    }
                },
                "format": "GetUserLocation(person_ID) -> user_location"
            },
            {
                "name": "PersonName2ID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "person_name": {
                        "description": "the name of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "PersonName2ID(person_name) -> person_ID"
            }
        ],
        "Query": "Give Mike the quickest route to a highly recommended Mexican food place",
        "Label": "GetRoute(origin_location=GetUserLocation(person_ID=PersonName2ID(person_name='Mike')),destination_location=SearchRestaurant(cuisine='Mexican'))",
        "Index": 376
    },
    {
        "APIs": [
            {
                "Name": "SearchRestaurant",
                "Description": "This API finds a restaurant and its location in a certain cuisine.",
                "input_params": {
                    "cuisine": {
                        "description": "cuisine type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_location": {
                        "description": "restaurant location",
                        "type": "String"
                    }
                },
                "format": "SearchRestaurant(cuisine) -> restaurant_location"
            },
            {
                "Name": "GetRoute",
                "Description": "This API provides the optimal driving route between two locations.",
                "input_params": {
                    "origin_location": {
                        "description": "starting location,the format: (Latitude,longitude),eg.(23,145)",
                        "type": "String"
                    },
                    "destination_location": {
                        "description": "destination location,the format: (Latitude,longitude),eg.(23,145)",
                        "type": "String"
                    }
                },
                "output_params": {
                    "route": {
                        "description": "optimal driving route",
                        "type": "String"
                    }
                },
                "format": "GetRoute(origin_location,destination_location) -> route"
            },
            {
                "name": "GetUserLocation",
                "Description": "This API returns the location of a certain user",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the user, it should be a number, not a character",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_location": {
                        "description": "the location of the user, the format: (Latitude,longitude),eg.(23,145)",
                        "type": "String"
                    }
                },
                "format": "GetUserLocation(person_ID) -> user_location"
            },
            {
                "name": "PersonName2ID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "person_name": {
                        "description": "the name of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "PersonName2ID(person_name) -> person_ID"
            }
        ],
        "Query": "Can you suggest the optimal route for Lisa to a recommended restaurant for Japanese cuisine?",
        "Label": "GetRoute(origin_location=GetUserLocation(person_ID=PersonName2ID(person_name='Lisa')),destination_location=SearchRestaurant(cuisine='Japanese'))",
        "Index": 377
    },
    {
        "APIs": [
            {
                "Name": "SearchRestaurant",
                "Description": "This API finds a restaurant and its location in a certain cuisine.",
                "input_params": {
                    "cuisine": {
                        "description": "cuisine type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_location": {
                        "description": "restaurant location",
                        "type": "String"
                    }
                },
                "format": "SearchRestaurant(cuisine) -> restaurant_location"
            },
            {
                "Name": "GetRoute",
                "Description": "This API provides the optimal driving route between two locations.",
                "input_params": {
                    "origin_location": {
                        "description": "starting location,the format: (Latitude,longitude),eg.(23,145)",
                        "type": "String"
                    },
                    "destination_location": {
                        "description": "destination location,the format: (Latitude,longitude),eg.(23,145)",
                        "type": "String"
                    }
                },
                "output_params": {
                    "route": {
                        "description": "optimal driving route",
                        "type": "String"
                    }
                },
                "format": "GetRoute(origin_location,destination_location) -> route"
            },
            {
                "name": "GetUserLocation",
                "Description": "This API returns the location of a certain user",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the user, it should be a number, not a character",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_location": {
                        "description": "the location of the user, the format: (Latitude,longitude),eg.(23,145)",
                        "type": "String"
                    }
                },
                "format": "GetUserLocation(person_ID) -> user_location"
            },
            {
                "name": "PersonName2ID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "person_name": {
                        "description": "the name of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "PersonName2ID(person_name) -> person_ID"
            }
        ],
        "Query": "Find the optimal driving route for Lucy to a recommended restaurant that serves French cuisine",
        "Label": "GetRoute(origin_location=GetUserLocation(person_ID=PersonName2ID(person_name='Lucy')),destination_location=SearchRestaurant(cuisine='French'))",
        "Index": 378
    },
    {
        "APIs": [
            {
                "Name": "SearchRestaurant",
                "Description": "This API finds a restaurant and its location in a certain cuisine.",
                "input_params": {
                    "cuisine": {
                        "description": "cuisine type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_location": {
                        "description": "restaurant location",
                        "type": "String"
                    }
                },
                "format": "SearchRestaurant(cuisine) -> restaurant_location"
            },
            {
                "Name": "GetRoute",
                "Description": "This API provides the optimal driving route between two locations.",
                "input_params": {
                    "origin_location": {
                        "description": "starting location,the format: (Latitude,longitude),eg.(23,145)",
                        "type": "String"
                    },
                    "destination_location": {
                        "description": "destination location,the format: (Latitude,longitude),eg.(23,145)",
                        "type": "String"
                    }
                },
                "output_params": {
                    "route": {
                        "description": "optimal driving route",
                        "type": "String"
                    }
                },
                "format": "GetRoute(origin_location,destination_location) -> route"
            },
            {
                "name": "GetUserLocation",
                "Description": "This API returns the location of a certain user",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the user, it should be a number, not a character",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_location": {
                        "description": "the location of the user, the format: (Latitude,longitude),eg.(23,145)",
                        "type": "String"
                    }
                },
                "format": "GetUserLocation(person_ID) -> user_location"
            },
            {
                "name": "PersonName2ID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "person_name": {
                        "description": "the name of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "PersonName2ID(person_name) -> person_ID"
            }
        ],
        "Query": "Can you provide the best driving route for Lisa to a recommended Mexican restaurant?",
        "Label": "GetRoute(origin_location=GetUserLocation(person_ID=PersonName2ID(person_name='Lisa')),destination_location=SearchRestaurant(cuisine='Mexican'))",
        "Index": 379
    },
    {
        "APIs": [
            {
                "Name": "SearchRestaurant",
                "Description": "This API finds a restaurant and its location in a certain cuisine.",
                "input_params": {
                    "cuisine": {
                        "description": "cuisine type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_location": {
                        "description": "restaurant location",
                        "type": "String"
                    }
                },
                "format": "SearchRestaurant(cuisine) -> restaurant_location"
            },
            {
                "Name": "GetRoute",
                "Description": "This API provides the optimal driving route between two locations.",
                "input_params": {
                    "origin_location": {
                        "description": "starting location,the format: (Latitude,longitude),eg.(23,145)",
                        "type": "String"
                    },
                    "destination_location": {
                        "description": "destination location,the format: (Latitude,longitude),eg.(23,145)",
                        "type": "String"
                    }
                },
                "output_params": {
                    "route": {
                        "description": "optimal driving route",
                        "type": "String"
                    }
                },
                "format": "GetRoute(origin_location,destination_location) -> route"
            },
            {
                "name": "GetUserLocation",
                "Description": "This API returns the location of a certain user",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the user, it should be a number, not a character",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_location": {
                        "description": "the location of the user, the format: (Latitude,longitude),eg.(23,145)",
                        "type": "String"
                    }
                },
                "format": "GetUserLocation(person_ID) -> user_location"
            },
            {
                "name": "PersonName2ID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "person_name": {
                        "description": "the name of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "PersonName2ID(person_name) -> person_ID"
            }
        ],
        "Query": "Find the best route for Emma to drive to a top-rated French restaurant",
        "Label": "GetRoute(origin_location=GetUserLocation(person_ID=PersonName2ID(person_name='Emma')),destination_location=SearchRestaurant(cuisine='French'))",
        "Index": 380
    },
    {
        "APIs": [
            {
                "Name": "SearchRestaurant",
                "Description": "This API finds a restaurant and its location in a certain cuisine.",
                "input_params": {
                    "cuisine": {
                        "description": "cuisine type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_location": {
                        "description": "restaurant location",
                        "type": "String"
                    }
                },
                "format": "SearchRestaurant(cuisine) -> restaurant_location"
            },
            {
                "Name": "GetRoute",
                "Description": "This API provides the optimal driving route between two locations.",
                "input_params": {
                    "origin_location": {
                        "description": "starting location,the format: (Latitude,longitude),eg.(23,145)",
                        "type": "String"
                    },
                    "destination_location": {
                        "description": "destination location,the format: (Latitude,longitude),eg.(23,145)",
                        "type": "String"
                    }
                },
                "output_params": {
                    "route": {
                        "description": "optimal driving route",
                        "type": "String"
                    }
                },
                "format": "GetRoute(origin_location,destination_location) -> route"
            },
            {
                "name": "GetUserLocation",
                "Description": "This API returns the location of a certain user",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the user, it should be a number, not a character",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_location": {
                        "description": "the location of the user, the format: (Latitude,longitude),eg.(23,145)",
                        "type": "String"
                    }
                },
                "format": "GetUserLocation(person_ID) -> user_location"
            },
            {
                "name": "PersonName2ID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "person_name": {
                        "description": "the name of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "PersonName2ID(person_name) -> person_ID"
            }
        ],
        "Query": "How can Sara drive to a recommended Indian restaurant in the most optimal way?",
        "Label": "GetRoute(origin_location=GetUserLocation(person_ID=PersonName2ID(person_name='Sara')),destination_location=SearchRestaurant(cuisine='Indian'))",
        "Index": 381
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API returns the weather forecast of a specified city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather report": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather report"
            },
            {
                "name": "RecommendOutfit",
                "Description": "This API recommends an outfit based on the weather conditions.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit details": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "RecommendOutfit(weather) -> outfit details"
            }
        ],
        "Query": "Whats suitable to wear in Omaha on May 7th?",
        "Label": "RecommendOutfit(weather=GetWeatherForecast(city='Omaha', date='May 7th'))",
        "Index": 382
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API returns the weather forecast of a specified city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather report": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather report"
            },
            {
                "name": "RecommendOutfit",
                "Description": "This API recommends an outfit based on the weather conditions.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit details": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "RecommendOutfit(weather) -> outfit details"
            }
        ],
        "Query": "Whats the recommended outfit for March 28th in Oklahoma City?",
        "Label": "RecommendOutfit(weather=GetWeatherForecast(city='Oklahoma City', date='March 28th'))",
        "Index": 383
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API returns the weather forecast of a specified city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather report": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather report"
            },
            {
                "name": "RecommendOutfit",
                "Description": "This API recommends an outfit based on the weather conditions.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit details": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "RecommendOutfit(weather) -> outfit details"
            }
        ],
        "Query": "I need guidance on my clothing for Martin Luther King Jr. Day in Albuquerque.",
        "Label": "RecommendOutfit(weather=GetWeatherForecast(city='Albuquerque', date='Martin Luther King Jr. Day'))",
        "Index": 384
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API returns the weather forecast of a specified city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather report": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather report"
            },
            {
                "name": "RecommendOutfit",
                "Description": "This API recommends an outfit based on the weather conditions.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit details": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "RecommendOutfit(weather) -> outfit details"
            }
        ],
        "Query": "Whats the dress code for Presidents Day in Milwaukee?",
        "Label": "RecommendOutfit(weather=GetWeatherForecast(city='Milwaukee', date='Presidents Day'))",
        "Index": 385
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API returns the weather forecast of a specified city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather report": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather report"
            },
            {
                "name": "RecommendOutfit",
                "Description": "This API recommends an outfit based on the weather conditions.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit details": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "RecommendOutfit(weather) -> outfit details"
            }
        ],
        "Query": "Could you help me choose my attire for Christmas in Salt Lake City?",
        "Label": "RecommendOutfit(weather=GetWeatherForecast(city='Salt Lake City', date='Christmas'))",
        "Index": 386
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API returns the weather forecast of a specified city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather report": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather report"
            },
            {
                "name": "RecommendOutfit",
                "Description": "This API recommends an outfit based on the weather conditions.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit details": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "RecommendOutfit(weather) -> outfit details"
            }
        ],
        "Query": "Any suggestions on what to put on for January 22nd in San Antonio?",
        "Label": "RecommendOutfit(weather=GetWeatherForecast(city='San Antonio', date='January 22nd'))",
        "Index": 387
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API returns the weather forecast of a specified city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather report": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather report"
            },
            {
                "name": "RecommendOutfit",
                "Description": "This API recommends an outfit based on the weather conditions.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit details": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "RecommendOutfit(weather) -> outfit details"
            }
        ],
        "Query": "How should I be dressed for Groundhog Day in Detroit?",
        "Label": "RecommendOutfit(weather=GetWeatherForecast(city='Detroit', date='Groundhog Day'))",
        "Index": 388
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API returns the weather forecast of a specified city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather report": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather report"
            },
            {
                "name": "RecommendOutfit",
                "Description": "This API recommends an outfit based on the weather conditions.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit details": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "RecommendOutfit(weather) -> outfit details"
            }
        ],
        "Query": "What is the appropriate attire for Tucson on October 22nd?",
        "Label": "RecommendOutfit(weather=GetWeatherForecast(city='Tucson', date='October 22nd'))",
        "Index": 389
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API returns the weather forecast of a specified city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather report": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather report"
            },
            {
                "name": "RecommendOutfit",
                "Description": "This API recommends an outfit based on the weather conditions.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit details": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "RecommendOutfit(weather) -> outfit details"
            }
        ],
        "Query": "Any ideas, advice on what to put on for March 15th in Detroit?",
        "Label": "RecommendOutfit(weather=GetWeatherForecast(city='Detroit', date='March 15th'))",
        "Index": 390
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API returns the weather forecast of a specified city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather report": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather report"
            },
            {
                "name": "RecommendOutfit",
                "Description": "This API recommends an outfit based on the weather conditions.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit details": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "RecommendOutfit(weather) -> outfit details"
            }
        ],
        "Query": "What should I wear in Las Vegas on Cyber Monday?",
        "Label": "RecommendOutfit(weather=GetWeatherForecast(city='Las Vegas', date='Cyber Monday'))",
        "Index": 391
    },
    {
        "APIs": [
            {
                "name": "CityName2Weather",
                "Description": "This API is to fetch the current weather for a specific city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the current weather of the city",
                        "type": "String"
                    }
                },
                "format": "CityName2Weather(city_name) -> weather"
            },
            {
                "name": "ActivityRecommend",
                "Description": "This API is to recommend suitable activities based on the weather in a specific city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "weather": {
                        "description": "the current weather of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity": {
                        "description": "the recommended activity based on the weather",
                        "type": "String"
                    }
                },
                "format": "ActivityRecommend(city_name, weather) -> activity"
            },
            {
                "name": "ActivityBook",
                "Description": "This API is to book an activity for a specific user.",
                "input_params": {
                    "activity": {
                        "description": "the activity to be booked",
                        "type": "String"
                    },
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_confirmation": {
                        "description": "the confirmation of the booking",
                        "type": "String"
                    }
                },
                "format": "ActivityBook(activity, user_name) -> booking_confirmation"
            },
            {
                "name": "UserName2ID",
                "Description": "This API is to convert a username to a user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(user_name) -> user_ID"
            }
        ],
        "Query": "I'm Alice, what can I do in New York today considering the weather and could you book it for me?",
        "Label": "ActivityBook(activity=ActivityRecommend(city_name='New York', weather=CityName2Weather(city_name='New York')), user_name='Alice')",
        "Index": 392
    },
    {
        "APIs": [
            {
                "name": "RestaurantName2ID",
                "Description": "This API is to convert a restaurant name to a specific restaurant ID.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantName2ID(restaurant_name) -> restaurant_ID"
            },
            {
                "name": "MenuItem2ID",
                "Description": "This API is to convert a menu item name with restaurant ID to a specific menu item ID.",
                "input_params": {
                    "menu_item": {
                        "description": "the name of the menu item",
                        "type": "String"
                    },
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "menu_item_ID": {
                        "description": "the ID of the menu item",
                        "type": "Integer"
                    }
                },
                "format": "MenuItem2ID(menu_item, restaurant_id) -> menu_item_ID"
            },
            {
                "name": "OrderFood",
                "Description": "This API is to order a specific menu item from a specific restaurant.",
                "input_params": {
                    "menu_item_id": {
                        "description": "the ID of the menu item",
                        "type": "Integer"
                    },
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    },
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_confirmation_code": {
                        "description": "the confirmation code of the order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(menu_item_id, restaurant_id, user_ID) -> order_confirmation_code"
            },
            {
                "name": "UserName2ID",
                "Description": "This API is to convert a username to a user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(user_name) -> user_ID"
            }
        ],
        "Query": "Hi, I'm Bob. Can you please order a pepperoni pizza for me from Domino's Pizza?",
        "Label": "OrderFood(menu_item_id=MenuItem2ID(menu_item='pepperoni pizza', restaurant_id=RestaurantName2ID(restaurant_name='Domino's Pizza')), restaurant_id=RestaurantName2ID(restaurant_name='Domino's Pizza'), user_ID=UserName2ID(user_name='Bob'))",
        "Index": 393
    },
    {
        "APIs": [
            {
                "name": "UserName2ID",
                "Description": "This API is to convert a user name to a user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(user_name) -> user_ID"
            },
            {
                "name": "RetrieveEmail",
                "Description": "This API is to retrieve the email of a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "email": {
                        "description": "the email of the user",
                        "type": "String"
                    }
                },
                "format": "RetrieveEmail(user_ID) -> email"
            },
            {
                "name": "SendEmail",
                "Description": "This API is to send an email to a user.",
                "input_params": {
                    "email": {
                        "description": "the email of the user",
                        "type": "String"
                    },
                    "message": {
                        "description": "the message to be sent",
                        "type": "String"
                    }
                },
                "output_params": {
                    "email_status": {
                        "description": "the status of the email sending",
                        "type": "String"
                    }
                },
                "format": "SendEmail(email, message) -> email_status"
            }
        ],
        "Query": "Send an email to user \"Alice\" with the message \"Meeting at 10AM tomorrow\"",
        "Label": "SendEmail(email=RetrieveEmail(user_ID=UserName2ID(user_name='Alice')), message='Meeting at 10AM tomorrow')",
        "Index": 394
    },
    {
        "APIs": [
            {
                "name": "UserName2ID",
                "Description": "This API is to convert a user name to a user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(user_name) -> user_ID"
            },
            {
                "name": "FoodName2ID",
                "Description": "This API is to convert a food name to a food ID.",
                "input_params": {
                    "food_name": {
                        "description": "the name of the food",
                        "type": "String"
                    }
                },
                "output_params": {
                    "food_ID": {
                        "description": "the ID of the food",
                        "type": "Integer"
                    }
                },
                "format": "FoodName2ID(food_name) -> food_ID"
            },
            {
                "name": "OrderFood",
                "Description": "This API is to process the order of food.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "food_ID": {
                        "description": "the ID of the food",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "ordered_food": {
                        "description": "the ordered food",
                        "type": "String"
                    }
                },
                "format": "OrderFood(user_ID, food_ID) -> ordered_food"
            }
        ],
        "Query": "Alice wants to order a pizza.",
        "Label": "OrderFood(user_ID=UserName2ID(user_name='Alice'), food_ID=FoodName2ID(food_name='pizza'))",
        "Index": 395
    },
    {
        "APIs": [
            {
                "name": "CarName2ID",
                "Description": "This API is to convert a car name to a car ID.",
                "input_params": {
                    "car_name": {
                        "description": "the name of the car",
                        "type": "String"
                    }
                },
                "output_params": {
                    "car_ID": {
                        "description": "the ID of the car",
                        "type": "Integer"
                    }
                },
                "format": "CarName2ID(car_name) -> car_ID"
            },
            {
                "name": "DriverName2ID",
                "Description": "This API is to convert a driver name to a driver ID.",
                "input_params": {
                    "driver_name": {
                        "description": "the name of the driver",
                        "type": "String"
                    }
                },
                "output_params": {
                    "driver_ID": {
                        "description": "the ID of the driver",
                        "type": "Integer"
                    }
                },
                "format": "DriverName2ID(driver_name) -> driver_ID"
            },
            {
                "name": "BookCab",
                "Description": "This API is to book a cab.",
                "input_params": {
                    "driver_ID": {
                        "description": "the ID of the driver",
                        "type": "Integer"
                    },
                    "car_ID": {
                        "description": "the ID of the car",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booked_cab": {
                        "description": "the status of the booked cab",
                        "type": "String"
                    }
                },
                "format": "BookCab(driver_ID, car_ID) -> booked_cab"
            }
        ],
        "Query": "Emily wants to book a cab with driver John and car named \"Super Cab\"",
        "Label": "BookCab(driver_ID=DriverName2ID(driver_name='John'), car_ID=CarName2ID(car_name='Super Cab'))",
        "Index": 396
    },
    {
        "APIs": [
            {
                "name": "Email2Username",
                "Description": "This API is to convert an email to a username.",
                "input_params": {
                    "email": {
                        "description": "the email address",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_name": {
                        "description": "the username",
                        "type": "String"
                    }
                },
                "format": "Email2Username(email) -> user_name"
            },
            {
                "name": "ISBN2Title",
                "Description": "This API is to convert an ISBN to a book title.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "format": "ISBN2Title(ISBN) -> book_title"
            },
            {
                "name": "AddBookToReadingList",
                "Description": "This API is to add a book to a user's reading list.",
                "input_params": {
                    "user_name": {
                        "description": "the username of the user",
                        "type": "String"
                    },
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reading_list": {
                        "description": "the updated reading list",
                        "type": "List"
                    }
                },
                "format": "AddBookToReadingList(user_name, book_title) -> reading_list"
            }
        ],
        "Query": "Can you add the book with ISBN '978-3-16-148410-0' to the reading list of the user with the email 'john.doe@gmail.com'?",
        "Label": "AddBookToReadingList(user_name=Email2Username(email='john.doe@gmail.com'), book_title=ISBN2Title(ISBN='978-3-16-148410-0'))",
        "Index": 397
    },
    {
        "APIs": [
            {
                "name": "AuthorName2ID",
                "Description": "This API is to convert an author name to an author ID.",
                "input_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "format": "AuthorName2ID(author_name) -> author_ID"
            },
            {
                "name": "BookTitle2ID",
                "Description": "This API is to convert a book title to a book ID.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookTitle2ID(book_title) -> book_ID"
            },
            {
                "name": "AddBookToAuthor",
                "Description": "This API is to add a book to an author's library.",
                "input_params": {
                    "author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "author_books": {
                        "description": "the updated library of the author",
                        "type": "List"
                    }
                },
                "format": "AddBookToAuthor(author_ID, book_ID) -> author_books"
            }
        ],
        "Query": "Can you add the book 'War and Peace' to Leo Tolstoy's library?",
        "Label": "AddBookToAuthor(author_ID=AuthorName2ID(author_name='Leo Tolstoy'), book_ID=BookTitle2ID(book_title='War and Peace'))",
        "Index": 398
    },
    {
        "APIs": [
            {
                "name": "CityName2ID",
                "Description": "This API is to convert a city name to a city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityName2ID(city_name) -> city_ID"
            },
            {
                "name": "RestaurantName2ID",
                "Description": "This API is to convert a restaurant name to a restaurant ID.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantName2ID(restaurant_name) -> restaurant_ID"
            },
            {
                "name": "AddRestaurantToCity",
                "Description": "This API is to add a restaurant to a city's list.",
                "input_params": {
                    "city_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "city_restaurants": {
                        "description": "the updated list of restaurants in the city",
                        "type": "List"
                    }
                },
                "format": "AddRestaurantToCity(city_ID, restaurant_ID) -> city_restaurants"
            }
        ],
        "Query": "Can you add the restaurant 'Chez Panisse' to Berkeley's list?",
        "Label": "AddRestaurantToCity(city_ID=CityName2ID(city_name='Berkeley'), restaurant_ID=RestaurantName2ID(restaurant_name='Chez Panisse'))",
        "Index": 399
    },
    {
        "APIs": [
            {
                "name": "FlightDestination2Code",
                "Description": "This API is to convert flight destination to its corresponding flight code.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_code": {
                        "description": "the code of the flight",
                        "type": "String"
                    }
                },
                "format": "FlightDestination2Code(destination) -> flight_code"
            },
            {
                "name": "CheckFlightAvailability",
                "Description": "This API is to check the availability of a flight using flight code and date.",
                "input_params": {
                    "flight_code": {
                        "description": "the code of the flight",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight_status": {
                        "description": "the status of the flight",
                        "type": "String"
                    }
                },
                "format": "CheckFlightAvailability(flight_code,date) -> flight_status"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight using user ID, flight code and date.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "String"
                    },
                    "flight_code": {
                        "description": "the code of the flight",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "Booking confirmation": {
                        "description": "the confirmation of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(user_ID,flight_code,date) -> Booking confirmation"
            }
        ],
        "Query": "Can you book a flight to Paris for user456 on June 1st, 2022?",
        "Label": "BookFlight(user_ID='user456',flight_code=FlightDestination2Code(destination='Paris'), date='June 1st, 2022')",
        "Index": 400
    },
    {
        "APIs": [
            {
                "name": "FlightCode2ID",
                "Description": "This API is to convert flight code to flight ID.",
                "input_params": {
                    "Flight_code": {
                        "description": "the flight code",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FlightCode2ID(Flight_code) -> Flight_ID"
            },
            {
                "name": "DateConversion",
                "Description": "This API is to convert date in any format to standard format.",
                "input_params": {
                    "date": {
                        "description": "the date in any format",
                        "type": "String"
                    }
                },
                "output_params": {
                    "standard_date": {
                        "description": "the date in standard format",
                        "type": "String"
                    }
                },
                "format": "DateConversion(date) -> standard_date"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "Flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Flight_Booking_confirmation": {
                        "description": "the booking confirmation of the flight",
                        "type": "String"
                    }
                },
                "format": "BookFlight(Flight_ID, date) -> Flight_Booking_confirmation"
            }
        ],
        "Query": "Can you book a flight for BA 1234 on May 5th?",
        "Label": "BookFlight(Flight_ID=FlightCode2ID(Flight_code='BA 1234'), date=DateConversion(date='May 5th'))",
        "Index": 401
    },
    {
        "APIs": [
            {
                "name": "HotelName2ID",
                "Description": "This API is to convert hotel name to hotel ID.",
                "input_params": {
                    "Hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    }
                },
                "format": "HotelName2ID(Hotel_name) -> Hotel_ID"
            },
            {
                "name": "RoomType2ID",
                "Description": "This API is to convert room type to room ID.",
                "input_params": {
                    "Room_type": {
                        "description": "the type of the room",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Room_ID": {
                        "description": "the ID of the room",
                        "type": "Integer"
                    }
                },
                "format": "RoomType2ID(Room_type) -> Room_ID"
            },
            {
                "name": "CheckAvailability",
                "Description": "This API is to check room availability in a hotel.",
                "input_params": {
                    "Hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    },
                    "Room_ID": {
                        "description": "the ID of the room",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date to check availability",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "Availability_status": {
                        "description": "the availability status of the room",
                        "type": "String"
                    }
                },
                "format": "CheckAvailability(Hotel_ID, Room_ID, date) -> Availability_status"
            }
        ],
        "Query": "Can you check if a Deluxe Room is available at Hilton Hotel on 15th August?",
        "Label": "CheckAvailability(Hotel_ID=HotelName2ID(Hotel_name='Hilton Hotel'), Room_ID=RoomType2ID(Room_type='Deluxe Room'), date='15th August')",
        "Index": 402
    },
    {
        "APIs": [
            {
                "name": "BookName2ID",
                "Description": "This API is to convert book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookName2ID(book_name) -> Book_ID"
            },
            {
                "name": "AuthorName2ID",
                "Description": "This API is to convert author name to author ID.",
                "input_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "format": "AuthorName2ID(author_name) -> Author_ID"
            },
            {
                "name": "ReserveBook",
                "Description": "This API is to reserve a book from the library.",
                "input_params": {
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    },
                    "Author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of reservation",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "Reservation_confirmation": {
                        "description": "the confirmation of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveBook(Book_ID,Author_ID,date) -> Reservation_confirmation"
            }
        ],
        "Query": "Can you help me reserve 'Origin' by 'Dan Brown' on 20th August?",
        "Label": "ReserveBook(Book_ID=BookName2ID(book_name='Origin'), Author_ID=AuthorName2ID(author_name='Dan Brown'), date='20th August')",
        "Index": 403
    },
    {
        "APIs": [
            {
                "name": "Email2UserID",
                "Description": "This API is to convert user's email to user ID.",
                "input_params": {
                    "email": {
                        "description": "the email of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "User_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "Email2UserID(email) -> User_ID"
            },
            {
                "name": "BookTitle2BookID",
                "Description": "This API converts book title to book ID.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookTitle2BookID(book_title) -> Book_ID"
            },
            {
                "name": "BorrowBook",
                "Description": "This API is to borrow a book from library by a user.",
                "input_params": {
                    "User_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "Borrow confirmation": {
                        "description": "the confirmation of the book borrowing",
                        "type": "String"
                    }
                },
                "format": "BorrowBook(User_ID, Book_ID) -> Borrow confirmation"
            }
        ],
        "Query": "Can I borrow the book 'The Great Gatsby' using my email john@gmail.com?",
        "Label": "BorrowBook(User_ID=Email2UserID(email='john@gmail.com'), Book_ID=BookTitle2BookID(book_title='The Great Gatsby'))",
        "Index": 404
    },
    {
        "APIs": [
            {
                "name": "CityName2Weather",
                "Description": "This API retrieves the current weather for a specific city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather information",
                        "type": "String"
                    }
                },
                "format": "CityName2Weather(city_name) -> weather"
            },
            {
                "name": "CityName2Timezone",
                "Description": "This API retrieves the timezone for a specific city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "timezone": {
                        "description": "the timezone information",
                        "type": "String"
                    }
                },
                "format": "CityName2Timezone(city_name) -> timezone"
            },
            {
                "name": "WeatherAndTimezone2ClothingAdvice",
                "Description": "This API provides clothing advice based on the weather and timezone.",
                "input_params": {
                    "weather": {
                        "description": "the weather information",
                        "type": "String"
                    },
                    "timezone": {
                        "description": "the timezone information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_advice": {
                        "description": "the clothing advice",
                        "type": "String"
                    }
                },
                "format": "WeatherAndTimezone2ClothingAdvice(weather, timezone) -> clothing_advice"
            }
        ],
        "Query": "What should I wear in Chicago today?",
        "Label": "WeatherAndTimezone2ClothingAdvice(weather=CityName2Weather(city_name='Chicago'), timezone=CityName2Timezone(city_name='Chicago'))",
        "Index": 405
    },
    {
        "APIs": [
            {
                "name": "SatelliteName2ID",
                "Description": "This API is to convert satellite name to satellite ID.",
                "input_params": {
                    "satellite_name": {
                        "description": "the name of the satellite",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Satellite_ID": {
                        "description": "the ID of the satellite",
                        "type": "Integer"
                    }
                },
                "format": "SatelliteName2ID(satellite_name) -> Satellite_ID"
            },
            {
                "name": "Frequency2ID",
                "Description": "This API converts frequency to frequency ID.",
                "input_params": {
                    "frequency": {
                        "description": "the frequency value",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Frequency_ID": {
                        "description": "the ID of the frequency",
                        "type": "Integer"
                    }
                },
                "format": "Frequency2ID(frequency) -> Frequency_ID"
            },
            {
                "name": "EstablishCommunication",
                "Description": "This API is to establish communication with a specific satellite at a specific frequency and time.",
                "input_params": {
                    "Satellite_ID": {
                        "description": "the ID of the satellite",
                        "type": "Integer"
                    },
                    "Frequency_ID": {
                        "description": "the ID of the frequency",
                        "type": "Integer"
                    },
                    "time": {
                        "description": "the time of communication",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "Communication_establishment_confirmation": {
                        "description": "the confirmation of communication establishment",
                        "type": "String"
                    }
                },
                "format": "EstablishCommunication(Satellite_ID, Frequency_ID, time) -> Communication_establishment_confirmation"
            }
        ],
        "Query": "Can you establish a communication with Hubble Space Telescope at 4.6 GHz frequency at 10:00 PM tonight?",
        "Label": "EstablishCommunication(Satellite_ID=SatelliteName2ID(satellite_name='Hubble Space Telescope'), Frequency_ID=Frequency2ID(frequency='4.6 GHz'), time='10:00 PM')",
        "Index": 406
    },
    {
        "APIs": [
            {
                "name": "GetBookIdByTitle",
                "Description": "This API finds the book's ID based on its title.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "GetBookIdByTitle(book_title) -> book_id"
            },
            {
                "name": "PurchaseBook",
                "Description": "This API allows a user to purchase a book.",
                "input_params": {
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "PurchaseBook(user_id, book_id) -> purchase_status"
            },
            {
                "name": "UserName2UserId",
                "Description": "This API converts user name to user id.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2UserId(user_name) -> user_id"
            }
        ],
        "Query": "I need to buy the book titled \"Python Programming for Beginners\" for the user with the name JohnDoe.",
        "Label": "PurchaseBook(user_id=UserName2UserId(user_name='JohnDoe'), book_id=GetBookIdByTitle(book_title='Python Programming for Beginners'))",
        "Index": 407
    },
    {
        "APIs": [
            {
                "name": "ProductId2Cost",
                "Description": "This API gets the cost of a product based on its Id.",
                "input_params": {
                    "product_id": {
                        "description": "the id of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_cost": {
                        "description": "the cost of the product",
                        "type": "Float"
                    }
                },
                "format": "ProductId2Cost(product_id) -> product_cost"
            },
            {
                "name": "CartId2TotalCost",
                "Description": "This API calculates the total cost of all products in a cart.",
                "input_params": {
                    "cart_id": {
                        "description": "the id of the cart",
                        "type": "String"
                    }
                },
                "output_params": {
                    "total_cost": {
                        "description": "the total cost of all products in the cart",
                        "type": "Float"
                    }
                },
                "format": "CartId2TotalCost(cart_id) -> total_cost"
            },
            {
                "name": "UserId2CartId",
                "Description": "This API finds the user's cart id based on the user id.",
                "input_params": {
                    "user_id": {
                        "description": "the id of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cart_id": {
                        "description": "the id of the cart",
                        "type": "String"
                    }
                },
                "format": "UserId2CartId(user_id) -> cart_id"
            }
        ],
        "Query": "I need to find out how much I need to pay for all the items in my cart. My user id is U12345.",
        "Label": "CartId2TotalCost(cart_id=UserId2CartId(user_id='U12345'))",
        "Index": 408
    },
    {
        "APIs": [
            {
                "name": "UserId2Location",
                "Description": "This API finds the user's current location based on user id.",
                "input_params": {
                    "user_id": {
                        "description": "the id of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_location": {
                        "description": "the current location of the user",
                        "type": "String"
                    }
                },
                "format": "UserId2Location(user_id) -> user_location"
            },
            {
                "name": "FindNearestStore",
                "Description": "This API finds the nearest store of a specific type based on user location.",
                "input_params": {
                    "user_location": {
                        "description": "the current location of the user",
                        "type": "String"
                    },
                    "store_type": {
                        "description": "the type of store to find",
                        "type": "String"
                    }
                },
                "output_params": {
                    "nearest_store": {
                        "description": "the nearest store of the specified type",
                        "type": "String"
                    }
                },
                "format": "FindNearestStore(user_location, store_type) -> nearest_store"
            },
            {
                "name": "StoreId2OperatingHours",
                "Description": "This API finds the operating hours of a store based on store id.",
                "input_params": {
                    "store_id": {
                        "description": "the id of the store",
                        "type": "String"
                    }
                },
                "output_params": {
                    "operating_hours": {
                        "description": "the operating hours of the store",
                        "type": "String"
                    }
                },
                "format": "StoreId2OperatingHours(store_id) -> operating_hours"
            }
        ],
        "Query": "I am user U67890 and I need to find the operating hours of the nearest grocery store to my current location.",
        "Label": "StoreId2OperatingHours(store_id=FindNearestStore(user_location=UserId2Location(user_id='U67890'), store_type='grocery'))",
        "Index": 409
    },
    {
        "APIs": [
            {
                "name": "ProductID2Availability",
                "Description": "This API checks the availability of a product based on its Id.",
                "input_params": {
                    "product_id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "product_availability": {
                        "description": "the availability status of the product",
                        "type": "String"
                    }
                },
                "format": "ProductID2Availability(product_id) -> product_availability"
            },
            {
                "name": "AddToCart",
                "Description": "This API adds a product to a user's cart.",
                "input_params": {
                    "product_id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    },
                    "user_id": {
                        "description": "the Id of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cart_status": {
                        "description": "the status of the cart after adding the product",
                        "type": "String"
                    }
                },
                "format": "AddToCart(product_id, user_id) -> cart_status"
            },
            {
                "name": "ProductName2ProductID",
                "Description": "This API converts product name to product id.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ProductID(product_name) -> product_id"
            }
        ],
        "Query": "I want to add the product 'iPhone 12' to my cart with the user id '12345'.",
        "Label": "AddToCart(product_id=ProductName2ProductID(product_name='iPhone 12'), user_id='12345')",
        "Index": 410
    },
    {
        "APIs": [
            {
                "name": "Location2Coordinates",
                "Description": "This API converts the location name to its geographical coordinates.",
                "input_params": {
                    "location_name": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "coordinates": {
                        "description": "the geographical coordinates of the location",
                        "type": "String"
                    }
                },
                "format": "Location2Coordinates(location_name) -> coordinates"
            },
            {
                "name": "WeatherInfo",
                "Description": "This API retrieves the weather information for a specific location.",
                "input_params": {
                    "coordinates": {
                        "description": "the geographical coordinates of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_data": {
                        "description": "the weather information for the location",
                        "type": "String"
                    }
                },
                "format": "WeatherInfo(coordinates) -> weather_data"
            },
            {
                "name": "GenerateWeatherReport",
                "Description": "This API generates a detailed weather report based on the provided weather data.",
                "input_params": {
                    "weather_data": {
                        "description": "the weather information for a specific location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "report": {
                        "description": "the detailed weather report",
                        "type": "String"
                    }
                },
                "format": "GenerateWeatherReport(weather_data) -> report"
            }
        ],
        "Query": "Can you generate a detailed weather report for New York City?",
        "Label": "GenerateWeatherReport(weather_data=WeatherInfo(coordinates=Location2Coordinates(location_name='New York City')))",
        "Index": 411
    },
    {
        "APIs": [
            {
                "name": "FindHotel",
                "Description": "This API finds the available hotel details in a specified city within given check-in and check-out dates.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotel_details": {
                        "description": "the details of available hotels",
                        "type": "List"
                    }
                },
                "format": "FindHotel(city, check_in_date, check_out_date) -> hotel_details"
            },
            {
                "name": "GetUserBudget",
                "Description": "This API returns a user's budget for hotel booking.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "budget": {
                        "description": "the budget for hotel booking",
                        "type": "Float"
                    }
                },
                "format": "GetUserBudget(user_ID) -> budget"
            },
            {
                "name": "BookHotel",
                "Description": "This API books a hotel using the hotel details and the user's budget, if the hotel price is within the budget.",
                "input_params": {
                    "hotel_details": {
                        "description": "the details of the hotel",
                        "type": "List"
                    },
                    "budget": {
                        "description": "the budget for hotel booking",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the hotel booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(hotel_details, budget) -> booking_status"
            }
        ],
        "Query": "Can you book a hotel for me in London from 1st June to 5th June within my budget?",
        "Label": "BookHotel(hotel_details=FindHotel(city='London', check_in_date='1st June', check_out_date='5th June'), budget=GetUserBudget(user_ID))",
        "Index": 412
    },
    {
        "APIs": [
            {
                "name": "Product2ID",
                "Description": "This API generates the ID of a specific product through its product name.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "Product2ID(product_name) -> product_ID"
            },
            {
                "name": "OrderProduct",
                "Description": "This API allows the user to order a specific product in a certain quantity.",
                "input_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderProduct(product_ID, user_ID, quantity) -> order_status"
            },
            {
                "name": "RecommendProduct",
                "Description": "This API suggests a product name according to the category preferred by the user.",
                "input_params": {
                    "category": {
                        "description": "the preferred category of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_name": {
                        "description": "the suggested product name",
                        "type": "String"
                    }
                },
                "format": "RecommendProduct(category) -> product_name"
            },
            {
                "name": "GetFavouriteCategory",
                "Description": "This API will provide the favourite category of the specified user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "category": {
                        "description": "the favourite category of the user",
                        "type": "String"
                    }
                },
                "format": "GetFavouriteCategory(user_ID) -> category"
            },
            {
                "name": "UserEmail2ID",
                "Description": "This API generates the ID of a specific user through the user email.",
                "input_params": {
                    "user_email": {
                        "description": "the email of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmail2ID(user_email) -> user_ID"
            }
        ],
        "Query": "My email is bob@example.com, I want to order 3 products from my favourite category.",
        "Label": "OrderProduct(product_ID=Product2ID(product_name=RecommendProduct(category=GetFavouriteCategory(user_ID=UserEmail2ID(user_email='bob@example.com')))), user_ID=UserEmail2ID(user_email='bob@example.com'), quantity='3')",
        "Index": 413
    },
    {
        "APIs": [
            {
                "name": "SearchMovieByGenre",
                "Description": "This API is used to retrieve a movie ID by using the movie's genre.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "SearchMovieByGenre(genre) -> movie_ID"
            },
            {
                "name": "GetUserFavoriteGenre",
                "Description": "This API will return the user's favorite movie genre based on user ID.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_genre": {
                        "description": "the favorite genre of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserFavoriteGenre(user_ID) -> user_genre"
            },
            {
                "name": "ReserveMovieTicket",
                "Description": "This API reserves a movie ticket for a certain date.",
                "input_params": {
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the movie ticket reservation",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the movie ticket reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveMovieTicket(movie_ID, date) -> reservation_status"
            },
            {
                "name": "GetUserID",
                "Description": "This API retrieves the user ID by using the user name.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            }
        ],
        "Query": "I'm Mike, can you book a movie ticket for my favorite genre next Friday?",
        "Label": "ReserveMovieTicket(movie_ID=SearchMovieByGenre(genre=GetUserFavoriteGenre(user_ID=GetUserID(userName='Mike'))), date='next Friday')",
        "Index": 414
    },
    {
        "APIs": [
            {
                "name": "FindRestaurantByCuisine",
                "Description": "This API is used to retrieve a restaurant ID by using the restaurant's cuisine.",
                "input_params": {
                    "cuisine": {
                        "description": "the cuisine of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "FindRestaurantByCuisine(cuisine) -> restaurant_ID"
            },
            {
                "name": "GetUserFavoriteCuisine",
                "Description": "This API will return the user's favorite cuisine based on user ID.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_cuisine": {
                        "description": "the favorite cuisine of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserFavoriteCuisine(user_ID) -> user_cuisine"
            },
            {
                "name": "BookRestaurantTable",
                "Description": "This API books a table at a restaurant for a certain date.",
                "input_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookRestaurantTable(restaurant_ID, date) -> booking_status"
            },
            {
                "name": "GetUserID",
                "Description": "This API retrieves the user ID by using the user name.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            }
        ],
        "Query": "I'm John, can you book a table for my favorite cuisine next Saturday?",
        "Label": "BookRestaurantTable(restaurant_ID=FindRestaurantByCuisine(cuisine=GetUserFavoriteCuisine(user_ID=GetUserID(userName='John'))), date='next Saturday')",
        "Index": 415
    },
    {
        "APIs": [
            {
                "name": "FindRestaurantByCuisine",
                "Description": "This API is used to retrieve restaurant ID by using the restaurant's cuisine type.",
                "input_params": {
                    "cuisine": {
                        "description": "the cuisine type of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "FindRestaurantByCuisine(cuisine) -> restaurant_ID"
            },
            {
                "name": "GetUserPreferredCuisine",
                "Description": "This API will return the user's preferred cuisine based on user ID.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_cuisine": {
                        "description": "the preferred cuisine of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserPreferredCuisine(user_ID) -> user_cuisine"
            },
            {
                "name": "ReserveTable",
                "Description": "This API reserves a table at a restaurant for a certain date and time.",
                "input_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the reservation",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveTable(restaurant_ID, date, time) -> reservation_status"
            },
            {
                "name": "GetUserID",
                "Description": "This API retrieves the user ID by using the user name.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            }
        ],
        "Query": "Hi, I'm John. Could you reserve a table for dinner at my favorite cuisine restaurant tomorrow at 7pm?",
        "Label": "ReserveTable(restaurant_ID=FindRestaurantByCuisine(cuisine=GetUserPreferredCuisine(user_ID=GetUserID(userName='John'))), date='tomorrow', time='7pm')",
        "Index": 416
    },
    {
        "APIs": [
            {
                "name": "Username2City",
                "Description": "This API is to convert username to the city they live in.",
                "input_params": {
                    "username": {
                        "description": "the username of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "the city the person lives in",
                        "type": "String"
                    }
                },
                "format": "Username2City(username) -> city"
            },
            {
                "name": "City2Weather",
                "Description": "This API is to get the current weather of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the current weather of the city",
                        "type": "String"
                    }
                },
                "format": "City2Weather(city) -> weather"
            },
            {
                "name": "Weather2Advice",
                "Description": "This API is to provide advice based on the current weather.",
                "input_params": {
                    "weather": {
                        "description": "the current weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "advice": {
                        "description": "advice based on the current weather",
                        "type": "String"
                    }
                },
                "format": "Weather2Advice(weather) -> advice"
            }
        ],
        "Query": "My username is 'JohnDoe123'. Can you give me advice based on the current weather of my city?",
        "Label": "Weather2Advice(weather=City2Weather(city=Username2City(username='JohnDoe123')))",
        "Index": 417
    },
    {
        "APIs": [
            {
                "name": "Card2Number",
                "Description": "This API is to convert card ID to card number.",
                "input_params": {
                    "card_id": {
                        "description": "the ID of the card",
                        "type": "String"
                    }
                },
                "output_params": {
                    "card_number": {
                        "description": "the number of the card",
                        "type": "String"
                    }
                },
                "format": "Card2Number(card_id) -> card_number"
            },
            {
                "name": "CheckCardBalance",
                "Description": "This API allows the user to check the balance in a card.",
                "input_params": {
                    "card_number": {
                        "description": "the number of the card",
                        "type": "String"
                    }
                },
                "output_params": {
                    "card_balance": {
                        "description": "the balance in the card",
                        "type": "Float"
                    }
                },
                "format": "CheckCardBalance(card_number) -> card_balance"
            },
            {
                "name": "OrderProduct",
                "Description": "This API returns the price of a product based on the product ID.",
                "input_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_price": {
                        "description": "the price of the product",
                        "type": "Float"
                    }
                },
                "format": "OrderProduct(product_id) -> product_price"
            },
            {
                "name": "EnoughBalance",
                "Description": "This API checks if there is sufficient balance in the card for the product order and returns an order status.",
                "input_params": {
                    "product_price": {
                        "description": "the price of the product",
                        "type": "Float"
                    },
                    "card_balance": {
                        "description": "the balance in the card",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "EnoughBalance(product_price, card_balance) -> order_status"
            }
        ],
        "Query": "I have a card with the ID '9876', can I afford a product with the ID 'abc123' using this card?",
        "Label": "EnoughBalance(product_price=OrderProduct(product_id='abc123'), card_balance=CheckCardBalance(card_number=Card2Number(card_id='9876')))",
        "Index": 418
    },
    {
        "APIs": [
            {
                "name": "GetUserLocation",
                "Description": "This API returns the current location of a certain user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the current location of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserLocation(user_name) -> location"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API provides the weather forecast of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the specific location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the weather forecast of the location",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(location) -> weather_status"
            },
            {
                "name": "SuggestApparel",
                "Description": "This API suggests suitable apparel based on the weather status.",
                "input_params": {
                    "weather_status": {
                        "description": "the weather status",
                        "type": "String"
                    }
                },
                "output_params": {
                    "apparel": {
                        "description": "the suggested apparel based on the weather status",
                        "type": "String"
                    }
                },
                "format": "SuggestApparel(weather_status) -> apparel"
            }
        ],
        "Query": "Hi, I'm John. Can you recommend what should I wear today?",
        "Label": "SuggestApparel(weather_status=WeatherForecast(location=GetUserLocation(user_name='John')))",
        "Index": 419
    },
    {
        "APIs": [
            {
                "name": "GetUserFavoriteFood",
                "Description": "This API provides the user's favorite food.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "favorite_food": {
                        "description": "the favorite food of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserFavoriteFood(user_name) -> favorite_food"
            },
            {
                "name": "FindRestaurant",
                "Description": "This API finds a restaurant that serves the user's favorite food.",
                "input_params": {
                    "favorite_food": {
                        "description": "the favorite food of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(favorite_food) -> restaurant"
            },
            {
                "name": "GetRestaurantRating",
                "Description": "This API provides the rating of a particular restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "rating": {
                        "description": "the rating of the restaurant",
                        "type": "Float"
                    }
                },
                "format": "GetRestaurantRating(restaurant) -> rating"
            }
        ],
        "Query": "Hello, I'm Lisa. Can you find a highly-rated restaurant that serves my favorite food?",
        "Label": "GetRestaurantRating(restaurant=FindRestaurant(favorite_food=GetUserFavoriteFood(user_name='Lisa')))",
        "Index": 420
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API returns the weather forecast for a certain city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city_name) -> weather"
            },
            {
                "name": "GetUserLocation",
                "Description": "This API returns the location of a certain user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "format": "GetUserLocation(user_name) -> city_name"
            },
            {
                "name": "SuggestOutfit",
                "Description": "This API suggests an outfit based on the current weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the suggested outfit",
                        "type": "String"
                    }
                },
                "format": "SuggestOutfit(weather) -> outfit"
            }
        ],
        "Query": "I am Anna, what should I wear today?",
        "Label": "SuggestOutfit(weather=WeatherForecast(city_name=GetUserLocation(user_name='Anna')))",
        "Index": 421
    },
    {
        "APIs": [
            {
                "name": "GetUserBirthday",
                "Description": "The API returns the birthday of a certain user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_birthday": {
                        "description": "the birthday of the user",
                        "type": "Date"
                    }
                },
                "format": "GetUserBirthday(user_name) -> user_birthday"
            },
            {
                "name": "Birthday2ZodiacSign",
                "Description": "This API is used to convert a user's birthday to their zodiac sign.",
                "input_params": {
                    "birthday": {
                        "description": "the birthday of the user",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "zodiac_sign": {
                        "description": "the zodiac sign of the user",
                        "type": "String"
                    }
                },
                "format": "Birthday2ZodiacSign(birthday) -> zodiac_sign"
            },
            {
                "name": "ZodiacSignHoroscope",
                "Description": "This API returns the daily horoscope for a specific zodiac sign.",
                "input_params": {
                    "zodiac_sign": {
                        "description": "the zodiac sign of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "horoscope": {
                        "description": "the daily horoscope for the zodiac sign",
                        "type": "String"
                    }
                },
                "format": "ZodiacSignHoroscope(zodiac_sign) -> horoscope"
            }
        ],
        "Query": "I'm Lucy, Can you tell me what my horoscope is for today?",
        "Label": "ZodiacSignHoroscope(zodiac_sign=Birthday2ZodiacSign(birthday=GetUserBirthday(user_name='Lucy')))",
        "Index": 422
    },
    {
        "APIs": [
            {
                "name": "GetUserCurrentWeather",
                "Description": "This API returns the current weather at the location of a certain user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_weather": {
                        "description": "the current weather at the user's location",
                        "type": "String"
                    }
                },
                "format": "GetUserCurrentWeather(user_name) -> user_weather"
            },
            {
                "name": "RecommendOutfit",
                "Description": "This API recommends an outfit based on the current weather.",
                "input_params": {
                    "weather": {
                        "description": "the current weather",
                        "type": "String"
                    },
                    "style": {
                        "description": "the user's preference of clothing style",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "RecommendOutfit(weather, style) -> outfit"
            },
            {
                "name": "GetUserPreference",
                "Description": "This API returns a user's preference of clothing style.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_preference": {
                        "description": "the user's preference of clothing style",
                        "type": "String"
                    }
                },
                "format": "GetUserPreference(user_name) -> user_preference"
            }
        ],
        "Query": "I'm Lisa, what should I wear today based on my style and the weather where I'm located?",
        "Label": "RecommendOutfit(weather=GetUserCurrentWeather(user_name='Lisa'), style=GetUserPreference(user_name='Lisa'))",
        "Index": 423
    },
    {
        "APIs": [
            {
                "name": "FindNearestRestaurant",
                "Description": "This API finds the nearest restaurant of a specific cuisine type according to the user's geolocation.",
                "input_params": {
                    "geolocation": {
                        "description": "the geolocation of the user",
                        "type": "String"
                    },
                    "cuisine_type": {
                        "description": "the preferred type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the nearest restaurant that serves the preferred type of cuisine",
                        "type": "String"
                    }
                },
                "format": "FindNearestRestaurant(geolocation, cuisine_type) -> restaurant"
            },
            {
                "name": "GetUserGeolocation",
                "Description": "This API returns the geolocation of a certain user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_geolocation": {
                        "description": "the geolocation of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserGeolocation(user_name) -> user_geolocation"
            },
            {
                "name": "GetUserCuisinePreference",
                "Description": "This API returns a user's preferred type of cuisine.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_cuisine_preference": {
                        "description": "the preferred type of cuisine",
                        "type": "String"
                    }
                },
                "format": "GetUserCuisinePreference(user_name) -> user_cuisine_preference"
            }
        ],
        "Query": "I'm Tom, could you recommend the nearest restaurant that serves my favorite type of cuisine?",
        "Label": "FindNearestRestaurant(geolocation=GetUserGeolocation(user_name='Tom'), cuisine_type=GetUserCuisinePreference(user_name='Tom'))",
        "Index": 424
    },
    {
        "APIs": [
            {
                "name": "GetCinema",
                "Description": "This API fetches a cinema playing a given movie in a certain city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cinema_name": {
                        "description": "the name of the cinema",
                        "type": "String"
                    }
                },
                "format": "GetCinema(city, movie) -> cinema_name"
            },
            {
                "name": "CheckTime",
                "Description": "This API checks the show time of a movie in a certain cinema.",
                "input_params": {
                    "cinema_name": {
                        "description": "the name of the cinema",
                        "type": "String"
                    },
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "show_time": {
                        "description": "the show time of the movie",
                        "type": "String"
                    }
                },
                "format": "CheckTime(cinema_name, movie) -> show_time"
            },
            {
                "name": "BookTicket",
                "Description": "This API is used to book a movie ticket.",
                "input_params": {
                    "cinema_name": {
                        "description": "the name of the cinema",
                        "type": "String"
                    },
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "show_time": {
                        "description": "the show time of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ticket_status": {
                        "description": "the status of the ticket booking",
                        "type": "String"
                    }
                },
                "format": "BookTicket(cinema_name, movie, show_time) -> ticket_status"
            }
        ],
        "Query": "I'm in New York and I want to watch the movie 'Inception'. Could you help me book a ticket?",
        "Label": "BookTicket(cinema_name=GetCinema(city='New York', movie='Inception'), movie='Inception', show_time=CheckTime(cinema_name=GetCinema(city='New York', movie='Inception'), movie='Inception'))",
        "Index": 425
    },
    {
        "APIs": [
            {
                "name": "FindHotel",
                "Description": "This API finds a hotel with a certain star rating in a certain city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "star_rating": {
                        "description": "the star rating of the hotel",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "FindHotel(city, star_rating) -> hotel_name"
            },
            {
                "name": "CheckAvailability",
                "Description": "This API checks the availability of a certain hotel on certain dates.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "availability_status": {
                        "description": "the availability status of the hotel",
                        "type": "String"
                    }
                },
                "format": "CheckAvailability(hotel_name, check_in_date, check_out_date) -> availability_status"
            },
            {
                "name": "BookRoom",
                "Description": "This API books a room in a certain hotel for certain dates.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the booking status",
                        "type": "String"
                    }
                },
                "format": "BookRoom(hotel_name, check_in_date, check_out_date) -> booking_status"
            }
        ],
        "Query": "I want to stay in a 5-star hotel in Los Angeles from May 1 to May 5. Can you make a reservation for me?",
        "Label": "BookRoom(hotel_name=FindHotel(city=\"Los Angeles\", star_rating=\"5\"), check_in_date=\"May 1\", check_out_date=\"May 5\")",
        "Index": 426
    },
    {
        "APIs": [
            {
                "name": "FindHotel",
                "Description": "This API finds a hotel of certain quality in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "quality": {
                        "description": "the quality of the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotelName": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "FindHotel(city, quality) -> hotelName"
            },
            {
                "name": "CheckVacancy",
                "Description": "This API checks if there is any room available for a certain date in a certain hotel.",
                "input_params": {
                    "hotelName": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date to check for room availability",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "roomAvailable": {
                        "description": "the availability of rooms",
                        "type": "Boolean"
                    }
                },
                "format": "CheckVacancy(hotelName, date) -> roomAvailable"
            },
            {
                "name": "BookRoom",
                "Description": "This API books room for certain date in a certain hotel.",
                "input_params": {
                    "hotelName": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date to book the room",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "bookingStatus": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookRoom(hotelName, date) -> bookingStatus"
            }
        ],
        "Query": "I want to book a luxury hotel in Paris for 21st December",
        "Label": "BookRoom(hotelName=FindHotel(city='Paris', quality='luxury'), date='21st December')",
        "Index": 427
    },
    {
        "APIs": [
            {
                "name": "UserNameToID",
                "Description": "This API is used to convert the name of the user to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserNameToID(user_name) -> user_ID"
            },
            {
                "name": "BookNameToID",
                "Description": "This API is used to convert the name of the book to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookNameToID(book_name) -> book_ID"
            },
            {
                "name": "BorrowBook",
                "Description": "This API allows a user to borrow a book until a specified return date.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    },
                    "return_date": {
                        "description": "the specified return date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "borrow_status": {
                        "description": "the status of the borrow",
                        "type": "String"
                    }
                },
                "format": "BorrowBook(user_ID, book_ID, return_date) -> borrow_status"
            }
        ],
        "Query": "Can John borrow \"War and Peace\" until the end of this month?",
        "Label": "BorrowBook(user_ID=UserNameToID(user_name='John'),book_ID=BookNameToID(book_name='War and Peace'), return_date='end of this month')",
        "Index": 428
    },
    {
        "APIs": [
            {
                "name": "CustomerNameToID",
                "Description": "This API is used to convert the name of the customer to customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerNameToID(customer_name) -> customer_ID"
            },
            {
                "name": "ProductNameToID",
                "Description": "This API is used to convert the name of the product to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductNameToID(product_name) -> product_ID"
            },
            {
                "name": "AddProductToCart",
                "Description": "This API adds a certain quantity of a particular product to the customer's cart.",
                "input_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the product to be added to the cart",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "cart_status": {
                        "description": "the status of the cart after adding the product",
                        "type": "String"
                    }
                },
                "format": "AddProductToCart(product_ID, customer_ID, quantity) -> cart_status"
            }
        ],
        "Query": "Can you add 3 iPhone 12 to Jack's cart?",
        "Label": "AddProductToCart(product_ID=ProductNameToID(product_name='iPhone 12'), customer_ID=CustomerNameToID(customer_name='Jack'), quantity=3)",
        "Index": 429
    },
    {
        "APIs": [
            {
                "name": "ProductNameToID",
                "Description": "This API is used to convert the product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductNameToID(product_name) -> product_ID"
            },
            {
                "name": "StoreNameToID",
                "Description": "This API is to convert the store name to store ID.",
                "input_params": {
                    "store_name": {
                        "description": "the name of the store",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_ID": {
                        "description": "the ID of the store",
                        "type": "Integer"
                    }
                },
                "format": "StoreNameToID(store_name) -> store_ID"
            },
            {
                "name": "PlaceOrder",
                "Description": "This API places an order for a particular product in a specified quantity from a specified store.",
                "input_params": {
                    "store_ID": {
                        "description": "the ID of the store",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the product to order",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(store_ID, product_ID, quantity) -> order_status"
            }
        ],
        "Query": "Can you place an order for 2 units of 'Apple iPhone 12' from 'Best Buy'?",
        "Label": "PlaceOrder(store_ID=StoreNameToID(store_name='Best Buy'), product_ID=ProductNameToID(product_name='Apple iPhone 12'), quantity='2')",
        "Index": 430
    },
    {
        "APIs": [
            {
                "name": "UsernameToID",
                "Description": "This API is used to convert the username to user ID.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UsernameToID(username) -> user_ID"
            },
            {
                "name": "MovieNameToID",
                "Description": "This API is to convert the movie name to movie ID.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieNameToID(movie_name) -> movie_ID"
            },
            {
                "name": "RentMovie",
                "Description": "This API rents a movie for a particular user on a specified date.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of rental",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "rental_status": {
                        "description": "the status of the rental",
                        "type": "String"
                    }
                },
                "format": "RentMovie(user_ID, movie_ID, date) -> rental_status"
            }
        ],
        "Query": "Can you rent the movie 'Inception' for the user 'JohnDoe' on April 1, 2022?",
        "Label": "RentMovie(user_ID=UsernameToID(username='JohnDoe'), movie_ID=MovieNameToID(movie_name='Inception'), date='April 1, 2022')",
        "Index": 431
    },
    {
        "APIs": [
            {
                "name": "ProductNameToID",
                "Description": "This API is used to convert the product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductNameToID(product_name) -> product_ID"
            },
            {
                "name": "CustomerNameToID",
                "Description": "This API is to convert the customer name to customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerNameToID(customer_name) -> customer_ID"
            },
            {
                "name": "PurchaseProduct",
                "Description": "This API executes a product purchase for a particular customer with a specific quantity.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the product to purchase",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "PurchaseProduct(customer_ID, product_ID, quantity) -> purchase_status"
            }
        ],
        "Query": "Can you help John Doe purchase 3 units of 'Product X'?",
        "Label": "PurchaseProduct(customer_ID=CustomerNameToID(customer_name='John Doe'), product_ID=ProductNameToID(product_name='Product X'), quantity=3)",
        "Index": 432
    },
    {
        "APIs": [
            {
                "name": "CityNameToID",
                "Description": "This API is used to convert the city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityNameToID(city_name) -> city_ID"
            },
            {
                "name": "HotelNameToID",
                "Description": "This API is to convert the hotel name to hotel ID.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    }
                },
                "format": "HotelNameToID(hotel_name) -> hotel_ID"
            },
            {
                "name": "BookHotel",
                "Description": "This API books a hotel room in a particular city, for a specific hotel, and for the given duration.",
                "input_params": {
                    "city_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(city_ID, hotel_ID, check_in_date, check_out_date) -> booking_status"
            }
        ],
        "Query": "Can you book a room at 'Hotel Luxury' in 'London' from August 1 to August 10?",
        "Label": "BookHotel(city_ID=CityNameToID(city_name='London'), hotel_ID=HotelNameToID(hotel_name='Hotel Luxury'), check_in_date='August 1', check_out_date='August 10')",
        "Index": 433
    },
    {
        "APIs": [
            {
                "name": "ProductIDToName",
                "Description": "This API is used to convert the product ID to product name.",
                "input_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "format": "ProductIDToName(product_ID) -> product_name"
            },
            {
                "name": "CustomerNameToID",
                "Description": "This API is used to convert the customer name to customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerNameToID(customer_name) -> customer_ID"
            },
            {
                "name": "AddToCart",
                "Description": "This API adds the specified quantity of a particular product to a customer's shopping cart.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the product to be added to the cart",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "cart_status": {
                        "description": "the status of the shopping cart after adding the product",
                        "type": "String"
                    }
                },
                "format": "AddToCart(customer_ID, product_ID, quantity) -> cart_status"
            }
        ],
        "Query": "Can you add 3 of product 456 to John Doe's shopping cart?",
        "Label": "AddToCart(customer_ID=CustomerNameToID(customer_name='John Doe'), product_ID='456', quantity='3')",
        "Index": 434
    },
    {
        "APIs": [
            {
                "name": "CityNameToID",
                "Description": "This API is used to convert the city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityNameToID(city_name) -> city_ID"
            },
            {
                "name": "HotelNameToID",
                "Description": "This API is used to convert the hotel name to hotel ID.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    }
                },
                "format": "HotelNameToID(hotel_name) -> hotel_ID"
            },
            {
                "name": "BookRoom",
                "Description": "This API books a room in a specified hotel in a given city, for a particular check-in and check-out date.",
                "input_params": {
                    "city_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookRoom(city_ID, hotel_ID, check_in_date, check_out_date) -> booking_status"
            }
        ],
        "Query": "Can you book a room in 'The Grand' hotel in 'New York' from 10th June to 15th June?",
        "Label": "BookRoom(city_ID=CityNameToID(city_name='New York'), hotel_ID=HotelNameToID(hotel_name='The Grand'), check_in_date='10th June', check_out_date='15th June')",
        "Index": 435
    },
    {
        "APIs": [
            {
                "name": "ProductNameToID",
                "Description": "This API is used to convert the product's name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductNameToID(product_name) -> product_ID"
            },
            {
                "name": "SupplierNameToID",
                "Description": "This API is to convert the supplier name to supplier ID.",
                "input_params": {
                    "supplier_name": {
                        "description": "the name of the supplier",
                        "type": "String"
                    }
                },
                "output_params": {
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    }
                },
                "format": "SupplierNameToID(supplier_name) -> supplier_ID"
            },
            {
                "name": "OrderProduct",
                "Description": "This API orders a product for a particular supplier.",
                "input_params": {
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderProduct(supplier_ID, product_ID) -> order_status"
            }
        ],
        "Query": "Can you order the 'Sony Headphones' from supplier 'ElectroHub'?",
        "Label": "OrderProduct(supplier_ID=SupplierNameToID(supplier_name='ElectroHub'), product_ID=ProductNameToID(product_name='Sony Headphones'))",
        "Index": 436
    },
    {
        "APIs": [
            {
                "name": "FlightNumberToID",
                "Description": "This API is used to convert the flight number to flight ID.",
                "input_params": {
                    "flight_number": {
                        "description": "the flight number",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FlightNumberToID(flight_number) -> flight_ID"
            },
            {
                "name": "PassengerNameToID",
                "Description": "This API is to convert the passenger name to passenger ID.",
                "input_params": {
                    "passenger_name": {
                        "description": "the name of the passenger",
                        "type": "String"
                    }
                },
                "output_params": {
                    "passenger_ID": {
                        "description": "the ID of the passenger",
                        "type": "Integer"
                    }
                },
                "format": "PassengerNameToID(passenger_name) -> passenger_ID"
            },
            {
                "name": "BookFlight",
                "Description": "This API books a flight for a particular passenger.",
                "input_params": {
                    "passenger_ID": {
                        "description": "the ID of the passenger",
                        "type": "Integer"
                    },
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(passenger_ID, flight_ID) -> booking_status"
            }
        ],
        "Query": "Can you book flight 'AA123' for passenger 'John Doe'?",
        "Label": "BookFlight(passenger_ID=PassengerNameToID(passenger_name='John Doe'), flight_ID=FlightNumberToID(flight_number='AA123'))",
        "Index": 437
    },
    {
        "APIs": [
            {
                "name": "SongNameToID",
                "Description": "This API is used to convert the song's name to song ID.",
                "input_params": {
                    "song_name": {
                        "description": "the name of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song_ID": {
                        "description": "the ID of the song",
                        "type": "Integer"
                    }
                },
                "format": "SongNameToID(song_name) -> song_ID"
            },
            {
                "name": "UserNameToID",
                "Description": "This API is used to convert the user's name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserNameToID(user_name) -> user_ID"
            },
            {
                "name": "PlaySong",
                "Description": "This API plays a song for a particular user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "song_ID": {
                        "description": "the ID of the song",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "play_status": {
                        "description": "the status of the song playback",
                        "type": "String"
                    }
                },
                "format": "PlaySong(user_ID, song_ID) -> play_status"
            }
        ],
        "Query": "Can you play the song 'Imagine' for user JohnLennon?",
        "Label": "PlaySong(user_ID=UserNameToID(user_name='JohnLennon'), song_ID=SongNameToID(song_name='Imagine'))",
        "Index": 438
    },
    {
        "APIs": [
            {
                "name": "ISBNToBookName",
                "Description": "This API is used to convert the ISBN of a book to its name.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "format": "ISBNToBookName(ISBN) -> book_name"
            },
            {
                "name": "UserEmailToID",
                "Description": "This API is used to convert the user's email address to user ID.",
                "input_params": {
                    "email_address": {
                        "description": "the email address of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmailToID(email_address) -> user_ID"
            },
            {
                "name": "ReturnBook",
                "Description": "This API returns a book on behalf of a particular user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "return_status": {
                        "description": "the status of the return",
                        "type": "String"
                    }
                },
                "format": "ReturnBook(user_ID, book_name) -> return_status"
            }
        ],
        "Query": "Can you return the book with ISBN 978-3-16-148410-0 for the user john.doe@example.com?",
        "Label": "ReturnBook(user_ID=UserEmailToID(email_address='john.doe@example.com'), book_name=ISBNToBookName(ISBN='978-3-16-148410-0'))",
        "Index": 439
    },
    {
        "APIs": [
            {
                "name": "UserNameToID",
                "Description": "This API is used to convert the user's name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserNameToID(user_name) -> user_ID"
            },
            {
                "name": "SongTitleToID",
                "Description": "This API is to convert the song title to song ID.",
                "input_params": {
                    "song_title": {
                        "description": "the title of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song_ID": {
                        "description": "the ID of the song",
                        "type": "Integer"
                    }
                },
                "format": "SongTitleToID(song_title) -> song_ID"
            },
            {
                "name": "PlaySong",
                "Description": "This API plays a song for a particular user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "song_ID": {
                        "description": "the ID of the song",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "play_status": {
                        "description": "the status of the song playback",
                        "type": "String"
                    }
                },
                "format": "PlaySong(user_ID, song_ID) -> play_status"
            }
        ],
        "Query": "Could you play the song 'Bohemian Rhapsody' for user George?",
        "Label": "PlaySong(user_ID=UserNameToID(user_name='George'), song_ID=SongTitleToID(song_title='Bohemian Rhapsody'))",
        "Index": 440
    },
    {
        "APIs": [
            {
                "name": "ProductToID",
                "Description": "This API is used to convert the product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductToID(product_name) -> product_ID"
            },
            {
                "name": "UserEmailToID",
                "Description": "This API is used to convert the user's email address to user ID.",
                "input_params": {
                    "email_address": {
                        "description": "the email address of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmailToID(email_address) -> user_ID"
            },
            {
                "name": "PurchaseProduct",
                "Description": "This API purchases a product for a particular user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "PurchaseProduct(user_ID, product_ID) -> purchase_status"
            }
        ],
        "Query": "Can you purchase the product 'iPhone 12' for the user with email jenny@example.com?",
        "Label": "PurchaseProduct(user_ID=UserEmailToID(email_address='jenny@example.com'), product_ID=ProductToID(product_name='iPhone 12'))",
        "Index": 441
    },
    {
        "APIs": [
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert a product's name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "AddProductToCart",
                "Description": "This API is to add a product to a cart.",
                "input_params": {
                    "cart_ID": {
                        "description": "the ID of the cart",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "product_status": {
                        "description": "the status of the product",
                        "type": "String"
                    }
                },
                "format": "AddProductToCart(cart_ID, product_ID) -> product_status"
            },
            {
                "name": "CartName2ID",
                "Description": "This API is to convert a cart's name to cart ID.",
                "input_params": {
                    "cart_name": {
                        "description": "the name of the cart",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cart_ID": {
                        "description": "the ID of the cart",
                        "type": "Integer"
                    }
                },
                "format": "CartName2ID(cart_name) -> cart_ID"
            },
            {
                "name": "GetUsernameID",
                "Description": "This API is to convert a username to user ID.",
                "input_params": {
                    "username": {
                        "description": "the username",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "GetUsernameID(username) -> person_ID"
            }
        ],
        "Query": "Please add the product \"iPhone 12\" to Michael's cart \"Tech Products\" with his username michael_tech.",
        "Label": "AddProductToCart(cart_ID=CartName2ID(cart_name='Tech Products'), product_ID=ProductName2ID(product_name='iPhone 12'))",
        "Index": 442
    },
    {
        "APIs": [
            {
                "name": "MovieName2ID",
                "Description": "This API is to convert a movie's name to movie ID.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieName2ID(movie_name) -> movie_ID"
            },
            {
                "name": "AddMovieToWatchlist",
                "Description": "This API is to add a movie to a watchlist.",
                "input_params": {
                    "watchlist_ID": {
                        "description": "the ID of the watchlist",
                        "type": "Integer"
                    },
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "movie_status": {
                        "description": "the status of the movie",
                        "type": "String"
                    }
                },
                "format": "AddMovieToWatchlist(watchlist_ID, movie_ID) -> movie_status"
            },
            {
                "name": "WatchlistName2ID",
                "Description": "This API is to convert a watchlist's name to watchlist ID.",
                "input_params": {
                    "watchlist_name": {
                        "description": "the name of the watchlist",
                        "type": "String"
                    }
                },
                "output_params": {
                    "watchlist_ID": {
                        "description": "the ID of the watchlist",
                        "type": "Integer"
                    }
                },
                "format": "WatchlistName2ID(watchlist_name) -> watchlist_ID"
            },
            {
                "name": "GetUsernameID",
                "Description": "This API is to convert a username to user ID.",
                "input_params": {
                    "username": {
                        "description": "the username",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "GetUsernameID(username) -> person_ID"
            }
        ],
        "Query": "Can you please add the movie 'Inception' to John's watchlist 'Favorite Movies' with his username john_movies?",
        "Label": "AddMovieToWatchlist(watchlist_ID=WatchlistName2ID(watchlist_name='Favorite Movies'), movie_ID=MovieName2ID(movie_name='Inception'))",
        "Index": 443
    },
    {
        "APIs": [
            {
                "name": "ProductIDToName",
                "Description": "This API is used to convert a product id to its name.",
                "input_params": {
                    "productId": {
                        "description": "the id of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "format": "ProductIDToName(productId) -> product_name"
            },
            {
                "name": "StoreIDToAddress",
                "Description": "This API is used to convert a store id to its address.",
                "input_params": {
                    "storeId": {
                        "description": "the id of the store",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_address": {
                        "description": "the address of the store",
                        "type": "String"
                    }
                },
                "format": "StoreIDToAddress(storeId) -> store_address"
            },
            {
                "name": "CheckProductAvailability",
                "Description": "This API checks the availability of a product in a specific store.",
                "input_params": {
                    "store_address": {
                        "description": "the address of the store",
                        "type": "String"
                    },
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_availability": {
                        "description": "the availability of the product",
                        "type": "String"
                    }
                },
                "format": "CheckProductAvailability(store_address, product_name) -> product_availability"
            },
            {
                "name": "PlaceOrder",
                "Description": "This API places an order for a certain quantity of a product.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    },
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    },
                    "store_address": {
                        "description": "the address of the store",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_confirmation": {
                        "description": "the confirmation of the order",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(user_name, product_name, store_address, quantity) -> order_confirmation"
            }
        ],
        "Query": "Can you order 2 units of product with id '45678' for user 'jane_doe' from store with id '12'?",
        "Label": "PlaceOrder(user_name='jane_doe', product_name=ProductIDToName(productId='45678'), store_address=StoreIDToAddress(storeId='12'), quantity='2')",
        "Index": 444
    },
    {
        "APIs": [
            {
                "name": "ISBN2Book",
                "Description": "This API is used to convert an ISBN to a book title.",
                "input_params": {
                    "isbn": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "format": "ISBN2Book(isbn) -> book_title"
            },
            {
                "name": "Book2Author",
                "Description": "This API is used to convert a book title to an author name.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "format": "Book2Author(book_title) -> author_name"
            },
            {
                "name": "CheckAuthorAvailability",
                "Description": "This API checks if the author is available for a book discussion.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "String"
                    },
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "availability_status": {
                        "description": "the availability status of the author",
                        "type": "String"
                    }
                },
                "format": "CheckAuthorAvailability(user_ID, author_name) -> availability_status"
            },
            {
                "name": "ScheduleDiscussion",
                "Description": "This API is used to schedule a book discussion with the author.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "String"
                    },
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    },
                    "date_time": {
                        "description": "the date and time of the book discussion",
                        "type": "String"
                    }
                },
                "output_params": {
                    "schedule_status": {
                        "description": "the schedule status of the book discussion",
                        "type": "String"
                    }
                },
                "format": "ScheduleDiscussion(user_ID, author_name, date_time) -> schedule_status"
            }
        ],
        "Query": "I, user789, would like to have a book discussion with the author of the book with ISBN 978-3-16-148410-0 on 1st of July at 3pm.",
        "Label": "ScheduleDiscussion(user_ID='user789', author_name=Book2Author(book_title=ISBN2Book(isbn='978-3-16-148410-0')), date_time='1st of July at 3pm')",
        "Index": 445
    },
    {
        "APIs": [
            {
                "name": "LocateCity",
                "Description": "This API returns the coordinates of a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Coordinates": {
                        "description": "the coordinates of the city",
                        "type": "String"
                    }
                },
                "format": "LocateCity(city) -> Coordinates"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API provides the weather forecast for the given coordinates.",
                "input_params": {
                    "coordinates": {
                        "description": "the coordinates of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(coordinates) -> weather"
            },
            {
                "name": "GetClothingAdvice",
                "Description": "This API gives clothing advice based on the weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_advice": {
                        "description": "the clothing advice",
                        "type": "String"
                    }
                },
                "format": "GetClothingAdvice(weather) -> clothing_advice"
            }
        ],
        "Query": "What should I wear in Paris tomorrow?",
        "Label": "GetClothingAdvice(weather=WeatherForecast(coordinates=LocateCity(city='Paris')))",
        "Index": 446
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API returns the ID of a restaurant based on the city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "FindRestaurant(city, cuisine) -> restaurant_ID"
            },
            {
                "name": "GetMenu",
                "Description": "This API returns the menu of a particular restaurant.",
                "input_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "String"
                    }
                },
                "format": "GetMenu(restaurant_ID) -> menu"
            },
            {
                "name": "RecommendDish",
                "Description": "This API recommends a dish from a given menu.",
                "input_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "dish": {
                        "description": "the recommended dish",
                        "type": "String"
                    }
                },
                "format": "RecommendDish(menu) -> dish"
            }
        ],
        "Query": "What's a good dish to try from an Indian restaurant in Chicago?",
        "Label": "RecommendDish(menu=GetMenu(restaurant_ID=FindRestaurant(city='Chicago', cuisine='Indian')))",
        "Index": 447
    },
    {
        "APIs": [
            {
                "name": "CityName2WeatherCode",
                "Description": "This API converts a city name to its weather code.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_code": {
                        "description": "the weather code of the city",
                        "type": "String"
                    }
                },
                "format": "CityName2WeatherCode(city_name) -> weather_code"
            },
            {
                "name": "WeatherCode2Forecast",
                "Description": "This API provides the weather forecast for a specific date based on the weather code.",
                "input_params": {
                    "weather_code": {
                        "description": "the weather code of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date for the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the weather forecast for the specific date",
                        "type": "String"
                    }
                },
                "format": "WeatherCode2Forecast(weather_code, date) -> weather_forecast"
            },
            {
                "name": "PlanTrip",
                "Description": "This API plans a trip based on the city, date, and weather forecast.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date for the trip",
                        "type": "String"
                    },
                    "weather_forecast": {
                        "description": "the weather forecast for the specific date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "trip_plan": {
                        "description": "the plan for the trip",
                        "type": "String"
                    }
                },
                "format": "PlanTrip(city_name, date, weather_forecast) -> trip_plan"
            }
        ],
        "Query": "Can you plan a trip for me to Paris on June 12?",
        "Label": "PlanTrip(city_name='Paris', date='June 12', weather_forecast=WeatherCode2Forecast(weather_code=CityName2WeatherCode(city_name='Paris'), date='June 12'))",
        "Index": 448
    },
    {
        "APIs": [
            {
                "name": "StringToDatetime",
                "Description": "This API converts a string to a datetime object.",
                "input_params": {
                    "date_string": {
                        "description": "the string representation of the date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "date": {
                        "description": "the datetime object",
                        "type": "Datetime"
                    }
                },
                "format": "StringToDatetime(date_string) -> date"
            },
            {
                "name": "EventName2ID",
                "Description": "This API converts an event name to its ID.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    }
                },
                "format": "EventName2ID(event_name) -> event_ID"
            },
            {
                "name": "VenueName2ID",
                "Description": "This API converts a venue name to its ID.",
                "input_params": {
                    "venue_name": {
                        "description": "the name of the venue",
                        "type": "String"
                    }
                },
                "output_params": {
                    "venue_ID": {
                        "description": "the ID of the venue",
                        "type": "Integer"
                    }
                },
                "format": "VenueName2ID(venue_name) -> venue_ID"
            },
            {
                "name": "BookEventTicket",
                "Description": "This API books a ticket for a specified event on a specified date at a specified venue.",
                "input_params": {
                    "event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    },
                    "venue_ID": {
                        "description": "the ID of the venue",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Datetime"
                    }
                },
                "output_params": {
                    "Booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookEventTicket(event_ID, venue_ID, date) -> Booking status"
            }
        ],
        "Query": "Can you book a ticket for the 'Radiohead concert' at the 'Madison Square Garden' on 'December 1, 2022'?",
        "Label": "BookEventTicket(event_ID=EventName2ID(event_name='Radiohead concert'), venue_ID=VenueName2ID(venue_name='Madison Square Garden'), date=StringToDatetime(date_string='December 1, 2022'))",
        "Index": 449
    },
    {
        "APIs": [
            {
                "name": "CourseName2ID",
                "Description": "This API converts a course name to its ID.",
                "input_params": {
                    "course_name": {
                        "description": "the name of the course",
                        "type": "String"
                    }
                },
                "output_params": {
                    "course_ID": {
                        "description": "the ID of the course",
                        "type": "Integer"
                    }
                },
                "format": "CourseName2ID(course_name) -> course_ID"
            },
            {
                "name": "InstructorName2ID",
                "Description": "This API converts an instructor's name to their ID.",
                "input_params": {
                    "instructor_name": {
                        "description": "the name of the instructor",
                        "type": "String"
                    }
                },
                "output_params": {
                    "instructor_ID": {
                        "description": "the ID of the instructor",
                        "type": "Integer"
                    }
                },
                "format": "InstructorName2ID(instructor_name) -> instructor_ID"
            },
            {
                "name": "EnrollCourse",
                "Description": "This API enrolls a student in a course with a specific instructor.",
                "input_params": {
                    "course_ID": {
                        "description": "the ID of the course",
                        "type": "Integer"
                    },
                    "student_ID": {
                        "description": "the ID of the student",
                        "type": "Integer"
                    },
                    "instructor_ID": {
                        "description": "the ID of the instructor",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "Enrollment status": {
                        "description": "the status of the enrollment",
                        "type": "String"
                    }
                },
                "format": "EnrollCourse(course_ID, student_ID, instructor_ID) -> Enrollment status"
            },
            {
                "name": "StudentName2ID",
                "Description": "This API converts a student's name to their ID.",
                "input_params": {
                    "student_name": {
                        "description": "the name of the student",
                        "type": "String"
                    }
                },
                "output_params": {
                    "student_ID": {
                        "description": "the ID of the student",
                        "type": "Integer"
                    }
                },
                "format": "StudentName2ID(student_name) -> student_ID"
            }
        ],
        "Query": "Can you enroll \"Tom\" in the \"Mathematics\" course taught by \"Dr. Smith\"?",
        "Label": "EnrollCourse(course_ID=CourseName2ID(course_name='Mathematics'), student_ID=StudentName2ID(student_name='Tom'), instructor_ID=InstructorName2ID(instructor_name='Dr. Smith'))",
        "Index": 450
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API provides the current weather information of the specified city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_info": {
                        "description": "the current weather information",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather_info"
            },
            {
                "name": "FindIndoorActivities",
                "Description": "This API suggests popular indoor activities in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity_name": {
                        "description": "the name of the suggested indoor activity",
                        "type": "String"
                    }
                },
                "format": "FindIndoorActivities(city) -> activity_name"
            },
            {
                "name": "BookActivity",
                "Description": "This API allows the user to book a particular indoor activity in a specific city.",
                "input_params": {
                    "activity_name": {
                        "description": "the name of the indoor activity",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookActivity(activity_name, city) -> booking_status"
            }
        ],
        "Query": "It looks like it's going to rain in Paris today. I don't want my day to be wasted. Can you suggest and book an indoor activity for me?",
        "Label": "BookActivity(activity_name=FindIndoorActivities(city='Paris'), city='Paris')",
        "Index": 451
    },
    {
        "APIs": [
            {
                "name": "CheckFlightStatus",
                "Description": "This API allows the user to check the current status of a certain flight.",
                "input_params": {
                    "flight_number": {
                        "description": "the number of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_status": {
                        "description": "the status of the flight",
                        "type": "String"
                    }
                },
                "format": "CheckFlightStatus(flight_number) -> flight_status"
            },
            {
                "name": "FindNearbyHotels",
                "Description": "This API provides the names of nearby hotels in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "FindNearbyHotels(city) -> hotel_name"
            },
            {
                "name": "BookHotel",
                "Description": "This API allows the user to book a specific hotel in a certain city.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(hotel_name, city) -> booking_status"
            }
        ],
        "Query": "My flight AA123 to New York has been delayed. Could you find and book a nearby hotel for me?",
        "Label": "BookHotel(hotel_name=FindNearbyHotels(city='New York'), city='New York')",
        "Index": 452
    },
    {
        "APIs": [
            {
                "name": "GetLocationCoordinates",
                "Description": "This API returns the geographical coordinates (latitude and longitude) of a specified city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "latitude": {
                        "description": "the latitude coordinate of the city",
                        "type": "Float"
                    },
                    "longitude": {
                        "description": "the longitude coordinate of the city",
                        "type": "Float"
                    }
                },
                "format": "GetLocationCoordinates(city) -> (latitude, longitude)"
            },
            {
                "name": "PredictWeather",
                "Description": "This API provides the weather forecast for a location based on geographic coordinates on a specific date.",
                "input_params": {
                    "coordinates": {
                        "description": "the geographic coordinates (latitude and longitude) of the location",
                        "type": "Tuple (Float, Float)"
                    },
                    "date": {
                        "description": "the specific date for the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather conditions": {
                        "description": "the weather conditions for the specified location and date",
                        "type": "String"
                    }
                },
                "format": "PredictWeather(coordinates, date) -> weather conditions"
            },
            {
                "name": "SuggestActivity",
                "Description": "This API suggests an activity based on the weather conditions.",
                "input_params": {
                    "weather": {
                        "description": "the weather conditions",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity": {
                        "description": "the suggested activity based on the weather conditions",
                        "type": "String"
                    }
                },
                "format": "SuggestActivity(weather) -> activity"
            }
        ],
        "Query": "What can I do in Paris on June 1st?",
        "Label": "SuggestActivity(weather=PredictWeather(coordinates=GetLocationCoordinates(city='Paris'), date='June 1st'))",
        "Index": 453
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API returns the name of a restaurant based on the specified cuisine.",
                "input_params": {
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(cuisine) -> restaurant_name"
            },
            {
                "name": "GetMenu",
                "Description": "This API returns a list of menu items from a given restaurant name.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu_items": {
                        "description": "a list of menu items",
                        "type": "List"
                    }
                },
                "format": "GetMenu(restaurant_name) -> menu_items"
            },
            {
                "name": "OrderFood",
                "Description": "This API allows the user to order a specified menu item from a restaurant to a given delivery address.",
                "input_params": {
                    "menu_item": {
                        "description": "the menu item to order",
                        "type": "String"
                    },
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "delivery_address": {
                        "description": "the delivery address",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(menu_item, restaurant_name, delivery_address) -> order_status"
            }
        ],
        "Query": "Can you find me an Italian restaurant and order spaghetti from its menu to my home?",
        "Label": "OrderFood(menu_item='spaghetti', restaurant_name=FindRestaurant(cuisine='Italian'), delivery_address='home')",
        "Index": 454
    },
    {
        "APIs": [
            {
                "name": "SearchBook",
                "Description": "This API returns the ID of a book based on a specified title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "SearchBook(title) -> book_id"
            },
            {
                "name": "GetBookReview",
                "Description": "This API gives a review of a book given its ID.",
                "input_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "review": {
                        "description": "the review of the book",
                        "type": "String"
                    }
                },
                "format": "GetBookReview(book_id) -> review"
            },
            {
                "name": "ShareReview",
                "Description": "This API allows the user to share a review on a specified social media platform.",
                "input_params": {
                    "review": {
                        "description": "the review of the book",
                        "type": "String"
                    },
                    "social_media_platform": {
                        "description": "the social media platform to share the review",
                        "type": "String"
                    }
                },
                "output_params": {
                    "share_status": {
                        "description": "the status of the sharing",
                        "type": "String"
                    }
                },
                "format": "ShareReview(review, social_media_platform) -> share_status"
            }
        ],
        "Query": "Can you find the book 'Harry Potter' and share its review on my Facebook page?",
        "Label": "ShareReview(review=GetBookReview(book_id=SearchBook(title='Harry Potter')), social_media_platform='Facebook')",
        "Index": 455
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API returns the title of a movie based on the given genre.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovie(genre) -> movie_title"
            },
            {
                "name": "GetShowtimes",
                "Description": "This API gives the showtime for a given movie in a specific city.",
                "input_params": {
                    "movie_title": {
                        "description": "the title of the movie",
                        "type": "String"
                    },
                    "city": {
                        "description": "the city where the showtime is requested",
                        "type": "String"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "the showtime of the movie in the specified city",
                        "type": "Time"
                    }
                },
                "format": "GetShowtimes(movie_title, city) -> showtime"
            },
            {
                "name": "ReserveTickets",
                "Description": "This API allows the user to reserve a certain number of tickets for a specific showtime.",
                "input_params": {
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "Time"
                    },
                    "number_of_tickets": {
                        "description": "the number of tickets to be reserved",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the ticket reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveTickets(showtime, number_of_tickets) -> reservation_status"
            }
        ],
        "Query": "Can you find me a comedy movie and reserve two tickets for its earliest showtime in New York?",
        "Label": "ReserveTickets(showtime=GetShowtimes(movie_title=FindMovie(genre='comedy'), city='New York'), number_of_tickets=2)",
        "Index": 456
    },
    {
        "APIs": [
            {
                "name": "SearchBook",
                "Description": "This API provides the name of a book based on the specified genre.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "format": "SearchBook(genre) -> book_name"
            },
            {
                "name": "LocateLibrary",
                "Description": "This API provides the name of a library in the specified city.",
                "input_params": {
                    "city": {
                        "description": "the city name",
                        "type": "String"
                    }
                },
                "output_params": {
                    "library_name": {
                        "description": "the name of the library",
                        "type": "String"
                    }
                },
                "format": "LocateLibrary(city) -> library_name"
            },
            {
                "name": "BorrowBook",
                "Description": "This API allows the user to borrow a specified book from a chosen library.",
                "input_params": {
                    "library_name": {
                        "description": "the name of the library",
                        "type": "String"
                    },
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "borrow_status": {
                        "description": "the status of the borrowing",
                        "type": "String"
                    }
                },
                "format": "BorrowBook(library_name, book_name) -> borrow_status"
            }
        ],
        "Query": "Can you find me a sci-fi book and borrow it from a library in Boston?",
        "Label": "BorrowBook(library_name=LocateLibrary(city='Boston'), book_name=SearchBook(genre='sci-fi'))",
        "Index": 457
    },
    {
        "APIs": [
            {
                "name": "RestaurantLocator",
                "Description": "This API is to find a specific restaurant by city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine the restaurant serves",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the details of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "RestaurantLocator(city, cuisine) -> restaurant"
            },
            {
                "name": "DishFinder",
                "Description": "This API is to get information about a specific dish from a particular restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the details of the restaurant",
                        "type": "Object"
                    },
                    "dish": {
                        "description": "the name of the dish",
                        "type": "String"
                    }
                },
                "output_params": {
                    "dish_details": {
                        "description": "the details of the dish",
                        "type": "Object"
                    }
                },
                "format": "DishFinder(restaurant, dish) -> dish_details"
            },
            {
                "name": "FoodReview",
                "Description": "This API is to get reviews of a particular dish.",
                "input_params": {
                    "dish_details": {
                        "description": "the details of the dish",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "review": {
                        "description": "the reviews of the dish",
                        "type": "Object"
                    }
                },
                "format": "FoodReview(dish_details) -> review"
            }
        ],
        "Query": "I'm looking for reviews of a Tiramisu dish from an Italian restaurant in New York.",
        "Label": "FoodReview(dish_details=DishFinder(restaurant=RestaurantLocator(city='New York', cuisine='Italian'), dish='Tiramisu'))",
        "Index": 458
    },
    {
        "APIs": [
            {
                "name": "FoodFinder",
                "Description": "This API identifies a specific restaurant serving a certain cuisine in a particular location.",
                "input_params": {
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FoodFinder(cuisine, location) -> restaurant_name"
            },
            {
                "name": "MenuDetails",
                "Description": "This API provides the menu of a specific restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "String"
                    }
                },
                "format": "MenuDetails(restaurant_name) -> menu"
            },
            {
                "name": "FoodIngredients",
                "Description": "This API gives the ingredients of a specific dish from a certain restaurant.",
                "input_params": {
                    "dish_name": {
                        "description": "the name of the dish",
                        "type": "String"
                    },
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ingredients": {
                        "description": "the ingredients of the dish",
                        "type": "String"
                    }
                },
                "format": "FoodIngredients(dish_name, restaurant_name) -> ingredients"
            }
        ],
        "Query": "I want to know the ingredients of the 'Margherita Pizza' from an Italian restaurant in New York.",
        "Label": "FoodIngredients(dish_name='Margherita Pizza', restaurant_name=FoodFinder(cuisine='Italian', location='New York'))",
        "Index": 459
    },
    {
        "APIs": [
            {
                "name": "FindNearestBookStore",
                "Description": "This API is to find the nearest bookstore based on the user's location.",
                "input_params": {
                    "city": {
                        "description": "the city where the user is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_name": {
                        "description": "the name of the nearest bookstore",
                        "type": "String"
                    }
                },
                "format": "FindNearestBookStore(city) -> store_name"
            },
            {
                "name": "SearchBook",
                "Description": "This API is to search a specific book in a given store.",
                "input_params": {
                    "store_name": {
                        "description": "the name of the store",
                        "type": "String"
                    },
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "SearchBook(store_name, book_title) -> book_id"
            },
            {
                "name": "CheckAvailability",
                "Description": "This API is to check the availability of a specific book.",
                "input_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "availability_status": {
                        "description": "the availability status of the book",
                        "type": "String"
                    }
                },
                "format": "CheckAvailability(book_id) -> availability_status"
            }
        ],
        "Query": "Can you help me check if the book 'To Kill a Mockingbird' is available in the nearest bookstore in Los Angeles?",
        "Label": "CheckAvailability(book_id=SearchBook(store_name=FindNearestBookStore(city='Los Angeles'), book_title='To Kill a Mockingbird'))",
        "Index": 460
    },
    {
        "APIs": [
            {
                "name": "GetLocalCinema",
                "Description": "This API is to find the local cinema based on the user's location.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cinema_name": {
                        "description": "the name of the cinema",
                        "type": "String"
                    }
                },
                "format": "GetLocalCinema(city) -> cinema_name"
            },
            {
                "name": "GetCurrentMovies",
                "Description": "This API is to get the list of movies currently being shown in a given cinema.",
                "input_params": {
                    "cinema_name": {
                        "description": "the name of the cinema",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_list": {
                        "description": "a list of movies currently being shown",
                        "type": "List"
                    }
                },
                "format": "GetCurrentMovies(cinema_name) -> movie_list"
            },
            {
                "name": "GetMovieReviews",
                "Description": "This API fetches the reviews of a specific movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reviews": {
                        "description": "the reviews of the movie",
                        "type": "List"
                    }
                },
                "format": "GetMovieReviews(movie_name) -> reviews"
            }
        ],
        "Query": "Can you find the reviews for the movie currently showing at the nearest cinema in San Francisco?",
        "Label": "GetMovieReviews(movie_name=GetCurrentMovies(cinema_name=GetLocalCinema(city='San Francisco')))",
        "Index": 461
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant in a specific city that serves a specified type of cuisine.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "cuisine_type": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "FindRestaurant(city, cuisine_type) -> restaurant_id"
            },
            {
                "name": "GetRestaurantMenu",
                "Description": "This API is to get the menu from a specific restaurant.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "menu_id": {
                        "description": "the ID of the menu",
                        "type": "Integer"
                    }
                },
                "format": "GetRestaurantMenu(restaurant_id) -> menu_id"
            },
            {
                "name": "OrderFood",
                "Description": "This API is to order a specific quantity of a certain dish from a menu.",
                "input_params": {
                    "menu_id": {
                        "description": "the ID of the menu",
                        "type": "Integer"
                    },
                    "dish_name": {
                        "description": "the name of the dish",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity of the dish to order",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_id": {
                        "description": "the ID of the order",
                        "type": "Integer"
                    }
                },
                "format": "OrderFood(menu_id, dish_name, quantity) -> order_id"
            }
        ],
        "Query": "Could you please order 2 pizzas from the best Italian restaurant in New York?",
        "Label": "OrderFood(menu_id=GetRestaurantMenu(restaurant_id=FindRestaurant(city='New York', cuisine_type='Italian')), dish_name='Pizza', quantity=2)",
        "Index": 462
    },
    {
        "APIs": [
            {
                "name": "GetMovieDetails",
                "Description": "This API is to get the details of a specific movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_info": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "format": "GetMovieDetails(movie_name) -> movie_info"
            },
            {
                "name": "GetActorDetails",
                "Description": "This API is to get the details of actors in a specific movie.",
                "input_params": {
                    "movie_info": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "actor_info": {
                        "description": "the details of the actors",
                        "type": "Object"
                    }
                },
                "format": "GetActorDetails(movie_info) -> actor_info"
            },
            {
                "name": "GetMovieRecommendation",
                "Description": "This API is to get movie recommendations based on the actors' performances.",
                "input_params": {
                    "actor_info": {
                        "description": "the details of the actors",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "movie_recommendation": {
                        "description": "the recommended movies",
                        "type": "Object"
                    }
                },
                "format": "GetMovieRecommendation(actor_info) -> movie_recommendation"
            }
        ],
        "Query": "I really liked the movie 'Inception'. Can you suggest another movie with similar actors?",
        "Label": "GetMovieRecommendation(actor_info=GetActorDetails(movie_info=GetMovieDetails(movie_name='Inception')))",
        "Index": 463
    },
    {
        "APIs": [
            {
                "name": "SearchRestaurant",
                "Description": "This API is to search for a restaurant in a specific city that serves a specific type of cuisine.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "type_of_cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_info": {
                        "description": "information about the restaurant",
                        "type": "String"
                    }
                },
                "format": "SearchRestaurant(city, type_of_cuisine) -> restaurant_info"
            },
            {
                "name": "FindOpenHours",
                "Description": "This API is used to find the opening hours of the selected restaurant.",
                "input_params": {
                    "restaurant_info": {
                        "description": "information about the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "open_hours": {
                        "description": "the opening hours of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindOpenHours(restaurant_info) -> open_hours"
            },
            {
                "name": "MakeReservation",
                "Description": "This API is to make a reservation at a restaurant based on its open hours for a specific number of people at a certain date and time.",
                "input_params": {
                    "open_hours": {
                        "description": "the opening hours of the restaurant",
                        "type": "String"
                    },
                    "number_of_people": {
                        "description": "the number of people for the reservation",
                        "type": "Integer"
                    },
                    "date_time": {
                        "description": "the date and time for the reservation",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reservation_info": {
                        "description": "information about the reservation",
                        "type": "String"
                    }
                },
                "format": "MakeReservation(open_hours, number_of_people, date_time) -> reservation_info"
            }
        ],
        "Query": "I want to make a reservation for 4 at an Italian restaurant in Boston on 1st September at 7 pm.",
        "Label": "MakeReservation(open_hours=FindOpenHours(restaurant_info=SearchRestaurant(city='Boston', type_of_cuisine='Italian')), number_of_people=4, date_time='1st September at 7 pm')",
        "Index": 464
    },
    {
        "APIs": [
            {
                "name": "CheckFlights",
                "Description": "This API checks available flights from source to destination.",
                "input_params": {
                    "source": {
                        "description": "the source location",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight": {
                        "description": "the available flight details",
                        "type": "Object"
                    }
                },
                "format": "CheckFlights(source, destination) -> flight"
            },
            {
                "name": "BookHotel",
                "Description": "This API books a hotel at the given location and date.",
                "input_params": {
                    "location": {
                        "description": "the location of the hotel",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotel": {
                        "description": "the booked hotel details",
                        "type": "Object"
                    }
                },
                "format": "BookHotel(location, date) -> hotel"
            },
            {
                "name": "PlanItinerary",
                "Description": "This API plans an itinerary based on the location and the user's interests.",
                "input_params": {
                    "location": {
                        "description": "the location for the itinerary",
                        "type": "String"
                    },
                    "interests": {
                        "description": "the user's interests",
                        "type": "String"
                    },
                    "flight": {
                        "description": "the flight details",
                        "type": "Object"
                    },
                    "hotel": {
                        "description": "the hotel details",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "itinerary": {
                        "description": "the planned itinerary",
                        "type": "Object"
                    }
                },
                "format": "PlanItinerary(location, interests) -> itinerary"
            }
        ],
        "Query": "I'm planning a vacation to Barcelona. Can you find a flight from New York, book a hotel and plan an itinerary based on my interest in art?",
        "Label": "PlanItinerary(location='Barcelona', interests='art', flight=CheckFlights(source='New York', destination='Barcelona'), hotel=BookHotel(location='Barcelona', date='flight.date'))",
        "Index": 465
    },
    {
        "APIs": [
            {
                "name": "FindAddress",
                "Description": "This API finds the address of a specific contact.",
                "input_params": {
                    "contact": {
                        "description": "the name of the contact",
                        "type": "String"
                    }
                },
                "output_params": {
                    "address": {
                        "description": "the address of the contact",
                        "type": "String"
                    }
                },
                "format": "FindAddress(contact) -> address"
            },
            {
                "name": "CheckTraffic",
                "Description": "This API checks the current traffic condition to a specific destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination to check traffic condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "traffic_condition": {
                        "description": "the current traffic condition to the destination",
                        "type": "String"
                    }
                },
                "format": "CheckTraffic(destination) -> traffic_condition"
            },
            {
                "name": "EstimateTravelTime",
                "Description": "This API estimates travel time based on current traffic conditions.",
                "input_params": {
                    "traffic_condition": {
                        "description": "the current traffic condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "estimated_travel_time": {
                        "description": "the estimated travel time",
                        "type": "Time"
                    }
                },
                "format": "EstimateTravelTime(traffic_condition) -> estimated_travel_time"
            }
        ],
        "Query": "What time should I leave to meet John at his place?",
        "Label": "EstimateTravelTime(traffic_condition=CheckTraffic(destination=FindAddress(contact='John')))",
        "Index": 466
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API provides the weather forecast for a specific city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast for the specified city and date",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather"
            },
            {
                "name": "GetLocalEvents",
                "Description": "This API provides a list of local events happening in a specific city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the local events",
                        "type": "String"
                    }
                },
                "output_params": {
                    "events": {
                        "description": "a list of local events happening in the specified city and date",
                        "type": "List"
                    }
                },
                "format": "GetLocalEvents(city, date) -> events"
            },
            {
                "name": "PlanOutdoorActivities",
                "Description": "This API plans outdoor activities based on the weather forecast and local events.",
                "input_params": {
                    "weather": {
                        "description": "the weather forecast for a specific city and date",
                        "type": "String"
                    },
                    "events": {
                        "description": "a list of local events happening in a specific city and date",
                        "type": "List"
                    }
                },
                "output_params": {
                    "activities": {
                        "description": "a list of planned outdoor activities based on the weather forecast and local events",
                        "type": "List"
                    }
                },
                "format": "PlanOutdoorActivities(weather, events) -> activities"
            }
        ],
        "Query": "Can you plan some outdoor activities for me in San Francisco next weekend?",
        "Label": "PlanOutdoorActivities(weather=GetWeatherForecast(city='San Francisco', date='next weekend'), events=GetLocalEvents(city='San Francisco', date='next weekend'))",
        "Index": 467
    },
    {
        "APIs": [
            {
                "name": "FindDoctor",
                "Description": "This API is to find a doctor based on specialty and location.",
                "input_params": {
                    "specialty": {
                        "description": "the specialty of the doctor",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location where the doctor is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "doctor": {
                        "description": "the information of the doctor",
                        "type": "Object"
                    }
                },
                "format": "FindDoctor(specialty, location) -> doctor"
            },
            {
                "name": "GetAppointment",
                "Description": "This API is to get an appointment with a specific doctor on a certain date.",
                "input_params": {
                    "doctor_id": {
                        "description": "the ID of the doctor",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the appointment",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "appointment": {
                        "description": "the information of the appointment",
                        "type": "Object"
                    }
                },
                "format": "GetAppointment(doctor_id, date) -> appointment"
            },
            {
                "name": "ConfirmAppointment",
                "Description": "This API is to confirm a specific appointment.",
                "input_params": {
                    "appointment_id": {
                        "description": "the ID of the appointment",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "confirmation": {
                        "description": "the confirmation status of the appointment",
                        "type": "String"
                    }
                },
                "format": "ConfirmAppointment(appointment_id) -> confirmation"
            }
        ],
        "Query": "Can you confirm an appointment with a cardiologist in New York for August 10th?",
        "Label": "ConfirmAppointment(appointment_id=GetAppointment(doctor_id=FindDoctor(specialty='cardiologist', location='New York'), date='August 10th'))",
        "Index": 468
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the current weather condition at a specific location.",
                "input_params": {
                    "location": {
                        "description": "the specific location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weatherCondition": {
                        "description": "the current weather condition",
                        "type": "String"
                    }
                },
                "format": "GetWeather(location) -> weatherCondition"
            },
            {
                "name": "FindRestaurant",
                "Description": "This API is to find restaurants serving a specific cuisine at a given location.",
                "input_params": {
                    "location": {
                        "description": "the given location",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the specific cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantList": {
                        "description": "a list of restaurants serving the specific cuisine at the given location",
                        "type": "List"
                    }
                },
                "format": "FindRestaurant(location, cuisine) -> restaurantList"
            },
            {
                "name": "BookReservation",
                "Description": "This API is to book a reservation at a specific restaurant for a specific party size and time.",
                "input_params": {
                    "restaurantName": {
                        "description": "the name of the specific restaurant",
                        "type": "String"
                    },
                    "partySize": {
                        "description": "the size of the party",
                        "type": "Integer"
                    },
                    "time": {
                        "description": "the specific time for the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservationStatus": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "BookReservation(restaurantName, partySize, time) -> reservationStatus"
            }
        ],
        "Query": "I am in New York and I am craving Italian food. Based on the weather, can I book a reservation for 4 people at an Italian restaurant tonight at 8 pm?",
        "Label": "BookReservation(restaurantName=FindRestaurant(location='New York', cuisine='Italian'), partySize=4, time='8 pm')",
        "Index": 469
    },
    {
        "APIs": [
            {
                "name": "GetRestaurant",
                "Description": "This API is to fetch the list of restaurants at a given location.",
                "input_params": {
                    "location": {
                        "description": "the location where the user is looking for restaurants",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantList": {
                        "description": "a list of restaurants at the given location",
                        "type": "List"
                    }
                },
                "format": "GetRestaurant(location) -> restaurantList"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to fetch the menu items available at the given restaurants.",
                "input_params": {
                    "restaurantList": {
                        "description": "a list of restaurants",
                        "type": "List"
                    }
                },
                "output_params": {
                    "menuItems": {
                        "description": "menu items available at the given restaurants",
                        "type": "List"
                    }
                },
                "format": "GetMenu(restaurantList) -> menuItems"
            },
            {
                "name": "PlaceOrder",
                "Description": "This API is to place an order for selected menu items from a restaurant in the given list.",
                "input_params": {
                    "menuItems": {
                        "description": "selected menu items",
                        "type": "List"
                    },
                    "restaurantList": {
                        "description": "a list of restaurants",
                        "type": "List"
                    }
                },
                "output_params": {
                    "orderConfirmation": {
                        "description": "order confirmation",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(menuItems, restaurantList) -> orderConfirmation"
            }
        ],
        "Query": "I am in New York City and looking for a place to eat. Can you help me order a pizza?",
        "Label": "PlaceOrder(menuItems=GetMenu(restaurantList=GetRestaurant(location='New York City')), restaurantList=GetRestaurant(location='New York City'))",
        "Index": 470
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to fetch the current weather and forecast at a given location.",
                "input_params": {
                    "location": {
                        "description": "the location for weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weatherForecast": {
                        "description": "the weather forecast for the given location",
                        "type": "String"
                    }
                },
                "format": "GetWeather(location) -> weatherForecast"
            },
            {
                "name": "GetClothingAdvice",
                "Description": "This API is to fetch clothing recommendations based on the weather forecast.",
                "input_params": {
                    "weatherForecast": {
                        "description": "the weather forecast for clothing recommendations",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothingRecommendation": {
                        "description": "the clothing recommendations based on the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetClothingAdvice(weatherForecast) -> clothingRecommendation"
            },
            {
                "name": "PlanDay",
                "Description": "This API is to plan the day's activities and outfits based on the weather and clothing recommendations.",
                "input_params": {
                    "weatherForecast": {
                        "description": "the weather forecast for planning the day",
                        "type": "String"
                    },
                    "clothingRecommendation": {
                        "description": "the clothing recommendations for planning the day",
                        "type": "String"
                    }
                },
                "output_params": {
                    "dayPlan": {
                        "description": "the plan for the day's activities and outfits",
                        "type": "String"
                    }
                },
                "format": "PlanDay(weatherForecast, clothingRecommendation) -> dayPlan"
            }
        ],
        "Query": "I am in San Francisco and unsure about the weather. Could you help me plan my day?",
        "Label": "PlanDay(weatherForecast=GetWeather(location='San Francisco'), clothingRecommendation=GetClothingAdvice(weatherForecast=GetWeather(location='San Francisco')))",
        "Index": 471
    },
    {
        "APIs": [
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight from the departure to the destination.",
                "input_params": {
                    "departure": {
                        "description": "the departure location",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight": {
                        "description": "the booked flight",
                        "type": "String"
                    }
                },
                "format": "BookFlight(departure, destination) -> flight"
            },
            {
                "name": "FindAccommodation",
                "Description": "This API is to find accommodation in the destination within the specified budget.",
                "input_params": {
                    "destination": {
                        "description": "the destination location",
                        "type": "String"
                    },
                    "budget": {
                        "description": "the budget for accommodation",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "accommodation": {
                        "description": "the found accommodation",
                        "type": "String"
                    }
                },
                "format": "FindAccommodation(destination, budget) -> accommodation"
            },
            {
                "name": "CreateTravelPlan",
                "Description": "This API is to create a travel plan including flight and accommodation.",
                "input_params": {
                    "flight": {
                        "description": "the booked flight",
                        "type": "String"
                    },
                    "accommodation": {
                        "description": "the found accommodation",
                        "type": "String"
                    }
                },
                "output_params": {
                    "travelPlan": {
                        "description": "the created travel plan",
                        "type": "String"
                    }
                },
                "format": "CreateTravelPlan(flight, accommodation) -> travelPlan"
            }
        ],
        "Query": "I want to travel from San Francisco to Paris with a budget of 3000 USD for accommodation. Can you help me with my travel plans?",
        "Label": "CreateTravelPlan(flight=BookFlight(departure='San Francisco', destination='Paris'), accommodation=FindAccommodation(destination='Paris', budget=3000))",
        "Index": 472
    },
    {
        "APIs": [
            {
                "name": "GetCurrentTemperature",
                "Description": "This API is to get the current temperature for a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "temperature": {
                        "description": "the current temperature of the city",
                        "type": "Float"
                    }
                },
                "format": "GetCurrentTemperature(city) -> temperature"
            },
            {
                "name": "DetermineTemperatureType",
                "Description": "This API is to determine the type of temperature (Hot, Mild, Cold) based on the current temperature.",
                "input_params": {
                    "temperature": {
                        "description": "the current temperature",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "temperatureType": {
                        "description": "the type of temperature (Hot, Mild, Cold)",
                        "type": "String"
                    }
                },
                "format": "DetermineTemperatureType(temperature) -> temperatureType"
            },
            {
                "name": "SuggestClothingOptions",
                "Description": "This API is to suggest clothing options based on the temperature type and gender.",
                "input_params": {
                    "temperatureType": {
                        "description": "the type of temperature (Hot, Mild, Cold)",
                        "type": "String"
                    },
                    "gender": {
                        "description": "the gender of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothingOptions": {
                        "description": "the suggested clothing options",
                        "type": "List"
                    }
                },
                "format": "SuggestClothingOptions(temperatureType, gender) -> clothingOptions"
            }
        ],
        "Query": "I'm a Female and I'm traveling to London next week. What kind of clothes should I pack?",
        "Label": "SuggestClothingOptions(temperatureType=DetermineTemperatureType(temperature=GetCurrentTemperature(city='London')),gender='Female')",
        "Index": 473
    },
    {
        "APIs": [
            {
                "name": "GetHealthInformation",
                "Description": "This API provides general health information based on age and gender.",
                "input_params": {
                    "age": {
                        "description": "the age of the person",
                        "type": "Integer"
                    },
                    "gender": {
                        "description": "the gender of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "HealthInformation": {
                        "description": "the general health information",
                        "type": "String"
                    }
                },
                "format": "GetHealthInformation(age, gender) -> HealthInformation"
            },
            {
                "name": "GetDietPlan",
                "Description": "This API generates a diet plan based on the provided health information.",
                "input_params": {
                    "HealthInformation": {
                        "description": "the general health information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "DietPlan": {
                        "description": "the generated diet plan",
                        "type": "String"
                    }
                },
                "format": "GetDietPlan(HealthInformation) -> DietPlan"
            },
            {
                "name": "GetExerciseRoutine",
                "Description": "This API recommends an exercise routine based on the health information.",
                "input_params": {
                    "HealthInformation": {
                        "description": "the general health information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ExerciseRoutine": {
                        "description": "the recommended exercise routine",
                        "type": "String"
                    }
                },
                "format": "GetExerciseRoutine(HealthInformation) -> ExerciseRoutine"
            },
            {
                "name": "CreateWellnessPlan",
                "Description": "This API creates a comprehensive wellness plan that includes a diet plan and exercise routine.",
                "input_params": {
                    "DietPlan": {
                        "description": "the generated diet plan",
                        "type": "String"
                    },
                    "ExerciseRoutine": {
                        "description": "the recommended exercise routine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "WellnessPlan": {
                        "description": "the comprehensive wellness plan",
                        "type": "String"
                    }
                },
                "format": "CreateWellnessPlan(DietPlan, ExerciseRoutine) -> WellnessPlan"
            }
        ],
        "Query": "I am a 45-year-old woman looking to improve my health. Can you help me create a wellness plan?",
        "Label": "CreateWellnessPlan(DietPlan=GetDietPlan(HealthInformation=GetHealthInformation(age=45, gender='woman')), ExerciseRoutine=GetExerciseRoutine(HealthInformation=GetHealthInformation(age=45, gender='woman')))",
        "Index": 474
    },
    {
        "APIs": [
            {
                "name": "FetchMovieDetails",
                "Description": "This API retrieves the details of a movie by its title.",
                "input_params": {
                    "title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "MovieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "format": "FetchMovieDetails(title) -> MovieDetails"
            },
            {
                "name": "GetDirectorFilmography",
                "Description": "This API retrieves the filmography of a director by their name.",
                "input_params": {
                    "DirectorName": {
                        "description": "the name of the director",
                        "type": "String"
                    }
                },
                "output_params": {
                    "DirectorFilmography": {
                        "description": "the filmography of the director",
                        "type": "Object"
                    }
                },
                "format": "GetDirectorFilmography(DirectorName) -> DirectorFilmography"
            },
            {
                "name": "SuggestSimilarMovies",
                "Description": "This API suggests similar movies based on the given movie details.",
                "input_params": {
                    "MovieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "SimilarMovies": {
                        "description": "the list of similar movies",
                        "type": "Object"
                    }
                },
                "format": "SuggestSimilarMovies(MovieDetails) -> SimilarMovies"
            },
            {
                "name": "BuildMoviePlaylist",
                "Description": "This API builds a movie playlist including the main movie, similar movies and other movies from the same director.",
                "input_params": {
                    "MovieDetails": {
                        "description": "the details of the main movie",
                        "type": "Object"
                    },
                    "SimilarMovies": {
                        "description": "the list of similar movies",
                        "type": "Object"
                    },
                    "DirectorFilmography": {
                        "description": "the filmography of the director",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "MoviePlaylist": {
                        "description": "the movie playlist",
                        "type": "Object"
                    }
                },
                "format": "BuildMoviePlaylist(MovieDetails, SimilarMovies, DirectorFilmography) -> MoviePlaylist"
            }
        ],
        "Query": "I just watched \"Inception\". Can you build a movie playlist for me?",
        "Label": "BuildMoviePlaylist(MovieDetails=FetchMovieDetails(title='Inception'), SimilarMovies=SuggestSimilarMovies(MovieDetails=FetchMovieDetails(title='Inception')), DirectorFilmography=GetDirectorFilmography(DirectorName=FetchMovieDetails(title='Inception').director))",
        "Index": 475
    },
    {
        "APIs": [
            {
                "name": "GetBookGenre",
                "Description": "This API provides the genre of a specified book.",
                "input_params": {
                    "bookTitle": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "BookGenre": {
                        "description": "the genre of the book",
                        "type": "String"
                    }
                },
                "format": "GetBookGenre(bookTitle) -> BookGenre"
            },
            {
                "name": "GetAuthorDetails",
                "Description": "This API provides the details of the author of the specified book.",
                "input_params": {
                    "bookTitle": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "AuthorDetails": {
                        "description": "the details of the author",
                        "type": "String"
                    }
                },
                "format": "GetAuthorDetails(bookTitle) -> AuthorDetails"
            },
            {
                "name": "GetSimilarBooks",
                "Description": "This API provides a list of similar books based on the input of book genre and author details.",
                "input_params": {
                    "BookGenre": {
                        "description": "the genre of the book",
                        "type": "String"
                    },
                    "AuthorDetails": {
                        "description": "the details of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "SimilarBooksList": {
                        "description": "a list of similar books",
                        "type": "List"
                    }
                },
                "format": "GetSimilarBooks(BookGenre, AuthorDetails) -> SimilarBooksList"
            }
        ],
        "Query": "I just finished reading 'The Alchemist', could you suggest some similar books for me to read?",
        "Label": "GetSimilarBooks(BookGenre=GetBookGenre(bookTitle='The Alchemist'), AuthorDetails=GetAuthorDetails(bookTitle='The Alchemist'))",
        "Index": 476
    },
    {
        "APIs": [
            {
                "name": "CheckInventory",
                "Description": "This API checks the inventory status of a specific product.",
                "input_params": {
                    "productID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "InventoryStatus": {
                        "description": "the inventory status of the product",
                        "type": "String"
                    }
                },
                "format": "CheckInventory(productID) -> InventoryStatus"
            },
            {
                "name": "EstimateDeliveryTime",
                "Description": "This API estimates the delivery time for a product to a specific location.",
                "input_params": {
                    "productID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "location": {
                        "description": "the location for delivery",
                        "type": "String"
                    }
                },
                "output_params": {
                    "DeliveryTime": {
                        "description": "the estimated delivery time for the product",
                        "type": "String"
                    }
                },
                "format": "EstimateDeliveryTime(productID, location) -> DeliveryTime"
            },
            {
                "name": "CalculateShippingCost",
                "Description": "This API calculates the shipping cost for a product to a specific location.",
                "input_params": {
                    "productID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "location": {
                        "description": "the location for delivery",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ShippingCost": {
                        "description": "the calculated shipping cost for the product",
                        "type": "Float"
                    }
                },
                "format": "CalculateShippingCost(productID, location) -> ShippingCost"
            },
            {
                "name": "PlaceOrder",
                "Description": "This API places an order if the product is in stock, and provides estimated delivery time and shipping cost.",
                "input_params": {
                    "InventoryStatus": {
                        "description": "the inventory status of the product",
                        "type": "String"
                    },
                    "DeliveryTime": {
                        "description": "the estimated delivery time for the product",
                        "type": "String"
                    },
                    "ShippingCost": {
                        "description": "the calculated shipping cost for the product",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "OrderConfirmation": {
                        "description": "the confirmation of the placed order",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(InventoryStatus, DeliveryTime, ShippingCost) -> OrderConfirmation"
            }
        ],
        "Query": "I want to order a new television, product ID 12345, to my home in New York. Can you help me with this?",
        "Label": "PlaceOrder(InventoryStatus=CheckInventory(productID='12345'), DeliveryTime=EstimateDeliveryTime(productID='12345', location='New York'), ShippingCost=CalculateShippingCost(productID='12345', location='New York'))",
        "Index": 477
    },
    {
        "APIs": [
            {
                "name": "FindFlight",
                "Description": "This API is to find the available flights from one point to another.",
                "input_params": {
                    "startPoint": {
                        "description": "the starting point of the flight",
                        "type": "String"
                    },
                    "endPoint": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight": {
                        "description": "the available flight options",
                        "type": "List"
                    }
                },
                "format": "FindFlight(startPoint, endPoint) -> flight"
            },
            {
                "name": "GetFlightPrice",
                "Description": "This API is to get the price of a specific flight.",
                "input_params": {
                    "flight": {
                        "description": "the flight option",
                        "type": "String"
                    }
                },
                "output_params": {
                    "price": {
                        "description": "the price of the flight",
                        "type": "Float"
                    }
                },
                "format": "GetFlightPrice(flight) -> price"
            },
            {
                "name": "CheckLuggageAllowance",
                "Description": "This API is to check the luggage allowance of a specific flight.",
                "input_params": {
                    "flight": {
                        "description": "the flight option",
                        "type": "String"
                    }
                },
                "output_params": {
                    "luggage": {
                        "description": "the luggage allowance of the flight",
                        "type": "String"
                    }
                },
                "format": "CheckLuggageAllowance(flight) -> luggage"
            },
            {
                "name": "GetLuggageFee",
                "Description": "This API is to get the luggage fee based on the luggage allowance and the weight of the luggage.",
                "input_params": {
                    "luggage": {
                        "description": "the luggage allowance of the flight",
                        "type": "String"
                    },
                    "weight": {
                        "description": "the weight of the luggage",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "fee": {
                        "description": "the luggage fee",
                        "type": "Float"
                    }
                },
                "format": "GetLuggageFee(luggage, weight) -> fee"
            }
        ],
        "Query": "I am flying from New York to Los Angeles and I have 50kg of luggage. How much will it cost me?",
        "Label": "GetLuggageFee(luggage=CheckLuggageAllowance(flight=FindFlight(startPoint='New York', endPoint='Los Angeles')), weight=50)",
        "Index": 478
    },
    {
        "APIs": [
            {
                "name": "GetHotelRoomRate",
                "Description": "This API is to get the rate of a hotel room in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "roomRate": {
                        "description": "the rate of the hotel room",
                        "type": "Float"
                    }
                },
                "format": "GetHotelRoomRate(city) -> roomRate"
            },
            {
                "name": "GetMealCost",
                "Description": "This API is to get the cost of meals in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "mealCost": {
                        "description": "the cost of meals",
                        "type": "Float"
                    }
                },
                "format": "GetMealCost(city) -> mealCost"
            },
            {
                "name": "GetSightSeeingCost",
                "Description": "This API is to get the cost for sightseeing in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "sightSeeingCost": {
                        "description": "the cost for sightseeing",
                        "type": "Float"
                    }
                },
                "format": "GetSightSeeingCost(city) -> sightSeeingCost"
            },
            {
                "name": "CalculateVacationCost",
                "Description": "This API is to calculate the total cost of a vacation including hotel room, meals and sightseeing.",
                "input_params": {
                    "roomRate": {
                        "description": "the rate of the hotel room",
                        "type": "Float"
                    },
                    "mealCost": {
                        "description": "the cost of meals",
                        "type": "Float"
                    },
                    "sightSeeingCost": {
                        "description": "the cost for sightseeing",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "totalCost": {
                        "description": "the total cost of the vacation",
                        "type": "Float"
                    }
                },
                "format": "CalculateVacationCost(roomRate, mealCost, sightSeeingCost) -> totalCost"
            }
        ],
        "Query": "I'm planning a vacation to Paris. How much will the hotel, meals and sightseeing cost me?",
        "Label": "CalculateVacationCost(roomRate=GetHotelRoomRate(city='Paris'), mealCost=GetMealCost(city='Paris'), sightSeeingCost=GetSightSeeingCost(city='Paris'))",
        "Index": 479
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast of a specific city at a certain date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weatherForecast": {
                        "description": "the weather forecast for the specified city and date",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weatherForecast"
            },
            {
                "name": "GetSuitableClothing",
                "Description": "This API is to recommend suitable clothing based on the weather forecast.",
                "input_params": {
                    "weatherForecast": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing": {
                        "description": "the recommended clothing based on the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetSuitableClothing(weatherForecast) -> clothing"
            },
            {
                "name": "GetPackingList",
                "Description": "This API is to generate a packing list for a trip to a certain destination, based on the clothing needed and the number of days to stay.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the trip",
                        "type": "String"
                    },
                    "clothing": {
                        "description": "the recommended clothing",
                        "type": "String"
                    },
                    "days": {
                        "description": "the number of days to stay",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "packingList": {
                        "description": "the generated packing list",
                        "type": "String"
                    }
                },
                "format": "GetPackingList(destination, clothing, days) -> packingList"
            }
        ],
        "Query": "I'm going to Seattle for a 5-day trip next week, what should I pack?",
        "Label": "GetPackingList(destination='Seattle', clothing=GetSuitableClothing(weatherForecast=GetWeatherForecast(city='Seattle', date='next week')), days=5)",
        "Index": 480
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast of a specific city at a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weatherForecast": {
                        "description": "the weather forecast of the city at the specific date",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weatherForecast"
            },
            {
                "name": "FindOutdoorActivities",
                "Description": "This API is to find suitable outdoor activities based on the city and weather forecast.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "weatherForecast": {
                        "description": "the weather forecast of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activities": {
                        "description": "the suitable outdoor activities based on the city and weather forecast",
                        "type": "List"
                    }
                },
                "format": "FindOutdoorActivities(city, weatherForecast) -> activities"
            },
            {
                "name": "FindRestaurants",
                "Description": "This API is to find restaurants of a specific cuisine type in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "cuisineType": {
                        "description": "the specific cuisine type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurants": {
                        "description": "the restaurants of the specific cuisine type in the specific city",
                        "type": "List"
                    }
                },
                "format": "FindRestaurants(city, cuisineType) -> restaurants"
            },
            {
                "name": "PlanDayOut",
                "Description": "This API is to plan a day out including outdoor activities and restaurants in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "activities": {
                        "description": "the suitable outdoor activities",
                        "type": "List"
                    },
                    "restaurants": {
                        "description": "the restaurants",
                        "type": "List"
                    }
                },
                "output_params": {
                    "dayPlan": {
                        "description": "the plan for a day out including outdoor activities and restaurants",
                        "type": "String"
                    }
                },
                "format": "PlanDayOut(city, activities, restaurants) -> dayPlan"
            }
        ],
        "Query": "I'm going to visit San Francisco next Sunday, can you suggest some outdoor activities and a Japanese restaurant for me depending on the weather?",
        "Label": "PlanDayOut(city='San Francisco', activities=FindOutdoorActivities(city='San Francisco', weatherForecast=GetWeatherForecast(city='San Francisco', date='next Sunday')), restaurants=FindRestaurants(city='San Francisco', cuisineType='Japanese'))",
        "Index": 481
    },
    {
        "APIs": [
            {
                "name": "GetPopulation",
                "Description": "This API is to get the population of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "population": {
                        "description": "the population of the location",
                        "type": "Integer"
                    }
                },
                "format": "GetPopulation(location) -> population"
            },
            {
                "name": "GetActiveCases",
                "Description": "This API is to get the number of active COVID-19 cases in a specific location.",
                "input_params": {
                    "location": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activeCases": {
                        "description": "the number of active COVID-19 cases",
                        "type": "Integer"
                    }
                },
                "format": "GetActiveCases(location) -> activeCases"
            },
            {
                "name": "CalculateInfectionRate",
                "Description": "This API is to calculate the infection rate based on the population and the number of active COVID-19 cases.",
                "input_params": {
                    "population": {
                        "description": "the population of the location",
                        "type": "Integer"
                    },
                    "activeCases": {
                        "description": "the number of active COVID-19 cases",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "infectionRate": {
                        "description": "the infection rate",
                        "type": "Float"
                    }
                },
                "format": "CalculateInfectionRate(population, activeCases) -> infectionRate"
            }
        ],
        "Query": "What is the current COVID-19 infection rate in New York City?",
        "Label": "CalculateInfectionRate(population=GetPopulation(location='New York City'), activeCases=GetActiveCases(location='New York City'))",
        "Index": 482
    },
    {
        "APIs": [
            {
                "name": "GetLocalWeather",
                "Description": "This API is to get the current weather conditions of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the current weather conditions",
                        "type": "String"
                    }
                },
                "format": "GetLocalWeather(city) -> weather"
            },
            {
                "name": "GetRecommendedClothing",
                "Description": "This API recommends suitable clothing based on the current weather.",
                "input_params": {
                    "weather": {
                        "description": "the current weather conditions",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing": {
                        "description": "the recommended clothing",
                        "type": "String"
                    }
                },
                "format": "GetRecommendedClothing(weather) -> clothing"
            },
            {
                "name": "GetDestinationTravelAdvice",
                "Description": "This API provides travel advice for a specific city depending on the suitable clothing.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "clothing": {
                        "description": "the recommended clothing",
                        "type": "String"
                    }
                },
                "output_params": {
                    "travelAdvice": {
                        "description": "the travel advice for the city",
                        "type": "String"
                    }
                },
                "format": "GetDestinationTravelAdvice(city, clothing) -> travelAdvice"
            }
        ],
        "Query": "I'm visiting London tomorrow. What should I wear and do you have any travel advice?",
        "Label": "GetDestinationTravelAdvice(city='London', clothing=GetRecommendedClothing(weather=GetLocalWeather(city='London')))",
        "Index": 483
    },
    {
        "APIs": [
            {
                "name": "GetStockPrice",
                "Description": "This API is to get the current price of a specific stock.",
                "input_params": {
                    "stockId": {
                        "description": "the ID of the stock",
                        "type": "String"
                    }
                },
                "output_params": {
                    "price": {
                        "description": "the current price of the stock",
                        "type": "Float"
                    }
                },
                "format": "GetStockPrice(stockId) -> price"
            },
            {
                "name": "PredictFutureStockPrice",
                "Description": "This API predicts the future price of a stock based on its current price.",
                "input_params": {
                    "stockId": {
                        "description": "the ID of the stock",
                        "type": "String"
                    },
                    "currentPrice": {
                        "description": "the current price of the stock",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "futurePrice": {
                        "description": "the predicted future price of the stock",
                        "type": "Float"
                    }
                },
                "format": "PredictFutureStockPrice(stockId, currentPrice) -> futurePrice"
            },
            {
                "name": "SuggestStockAction",
                "Description": "This API suggests whether to buy, sell, or hold a stock based on its current and predicted future price.",
                "input_params": {
                    "stockId": {
                        "description": "the ID of the stock",
                        "type": "String"
                    },
                    "currentPrice": {
                        "description": "the current price of the stock",
                        "type": "Float"
                    },
                    "futurePrice": {
                        "description": "the predicted future price of the stock",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "action": {
                        "description": "the suggested action for the stock (buy, sell, or hold)",
                        "type": "String"
                    }
                },
                "format": "SuggestStockAction(stockId, currentPrice, futurePrice) -> action"
            }
        ],
        "Query": "I own shares in Microsoft. Given its current price, would it be better to buy more, sell, or hold?",
        "Label": "SuggestStockAction(stockId='Microsoft', currentPrice=GetStockPrice(stockId='Microsoft'), futurePrice=PredictFutureStockPrice(stockId='Microsoft', currentPrice=GetStockPrice(stockId='Microsoft')))",
        "Index": 484
    },
    {
        "APIs": [
            {
                "name": "GetMovieByName",
                "Description": "This API is to get the details of a movie by its name.",
                "input_params": {
                    "movieName": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "format": "GetMovieByName(movieName) -> movieDetails"
            },
            {
                "name": "FindNearestCinema",
                "Description": "This API is to find the nearest cinema that is currently showing the movie.",
                "input_params": {
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "cinemaLocation": {
                        "description": "the location of the nearest cinema",
                        "type": "String"
                    }
                },
                "format": "FindNearestCinema(movieDetails) -> cinemaLocation"
            },
            {
                "name": "CalculateTravelTime",
                "Description": "This API is to calculate the travel time to the cinema from the current location.",
                "input_params": {
                    "cinemaLocation": {
                        "description": "the location of the cinema",
                        "type": "String"
                    }
                },
                "output_params": {
                    "travelTime": {
                        "description": "the travel time to the cinema",
                        "type": "Time"
                    }
                },
                "format": "CalculateTravelTime(cinemaLocation) -> travelTime"
            }
        ],
        "Query": "I want to watch the movie 'Interstellar'. Can you tell me how long it will take to get to the nearest cinema showing it?",
        "Label": "CalculateTravelTime(cinemaLocation=FindNearestCinema(movieDetails=GetMovieByName(movieName='Interstellar')))",
        "Index": 485
    },
    {
        "APIs": [
            {
                "name": "GetLocalWeather",
                "Description": "This API is to get the current weather condition of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the current weather condition",
                        "type": "String"
                    }
                },
                "format": "GetLocalWeather(city) -> weather"
            },
            {
                "name": "RecommendClothing",
                "Description": "This API is to recommend appropriate clothing based on the current weather condition.",
                "input_params": {
                    "weather": {
                        "description": "the current weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing": {
                        "description": "the recommended clothing",
                        "type": "String"
                    }
                },
                "format": "RecommendClothing(weather) -> clothing"
            },
            {
                "name": "FindTrendingFashion",
                "Description": "This API is to find the trending fashion in a particular season for a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "season": {
                        "description": "the current season",
                        "type": "String"
                    }
                },
                "output_params": {
                    "fashion": {
                        "description": "the trending fashion",
                        "type": "String"
                    }
                },
                "format": "FindTrendingFashion(city, season) -> fashion"
            },
            {
                "name": "GenerateOutfit",
                "Description": "This API is to generate a stylish outfit based on the recommended clothing and trending fashion.",
                "input_params": {
                    "clothing": {
                        "description": "the recommended clothing",
                        "type": "String"
                    },
                    "fashion": {
                        "description": "the trending fashion",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the generated outfit",
                        "type": "String"
                    }
                },
                "format": "GenerateOutfit(clothing, fashion) -> outfit"
            }
        ],
        "Query": "I'm going to a party in Paris tonight. What should I wear considering the weather and the current fashion trends?",
        "Label": "GenerateOutfit(clothing=RecommendClothing(weather=GetLocalWeather(city='Paris')), fashion=FindTrendingFashion(city='Paris', season='current'))",
        "Index": 486
    },
    {
        "APIs": [
            {
                "name": "CalculateDistance",
                "Description": "This API calculates the distance between two locations.",
                "input_params": {
                    "StartLocation": {
                        "description": "the starting location",
                        "type": "String"
                    },
                    "EndLocation": {
                        "description": "the ending location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Distance": {
                        "description": "the calculated distance",
                        "type": "Float"
                    }
                },
                "format": "CalculateDistance(StartLocation, EndLocation) -> Distance"
            },
            {
                "name": "EstimateDeliveryTime",
                "Description": "This API estimates the delivery time based on the distance and transport mode.",
                "input_params": {
                    "Distance": {
                        "description": "the distance between the locations",
                        "type": "Float"
                    },
                    "TransportMode": {
                        "description": "the mode of transport",
                        "type": "String"
                    }
                },
                "output_params": {
                    "DeliveryTime": {
                        "description": "the estimated delivery time",
                        "type": "Time"
                    }
                },
                "format": "EstimateDeliveryTime(Distance, TransportMode) -> DeliveryTime"
            },
            {
                "name": "PlaceOrder",
                "Description": "This API is used to place an order for a product to be delivered from start location to end location.",
                "input_params": {
                    "ProductID": {
                        "description": "the ID of the product",
                        "type": "String"
                    },
                    "Quantity": {
                        "description": "the quantity of the product",
                        "type": "Integer"
                    },
                    "StartLocation": {
                        "description": "the starting location",
                        "type": "String"
                    },
                    "EndLocation": {
                        "description": "the ending location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "OrderID": {
                        "description": "the ID of the order",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(ProductID, Quantity, StartLocation, EndLocation) -> OrderID"
            }
        ],
        "Query": "I want to place an order for ProductID \"P5678\" with a quantity of 2, to be delivered from New York to Boston using a bicycle courier. Can you estimate the delivery time?",
        "Label": "EstimateDeliveryTime(Distance=CalculateDistance(StartLocation='New York', EndLocation='Boston'), TransportMode='Bicycle')",
        "Index": 487
    },
    {
        "APIs": [
            {
                "name": "GetLocationData",
                "Description": "This API retrieves location of a specific user.",
                "input_params": {
                    "Username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Location": {
                        "description": "the location of the user",
                        "type": "String"
                    }
                },
                "format": "GetLocationData(Username) -> Location"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API provides a weather forecast for a specific location.",
                "input_params": {
                    "Location": {
                        "description": "the location for weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "WeatherReport": {
                        "description": "the weather forecast for the location",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(Location) -> WeatherReport"
            },
            {
                "name": "SuggestOutfit",
                "Description": "This API suggests an outfit based on the weather forecast.",
                "input_params": {
                    "WeatherReport": {
                        "description": "the weather report for outfit suggestion",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Outfit": {
                        "description": "the suggested outfit based on the weather",
                        "type": "String"
                    }
                },
                "format": "SuggestOutfit(WeatherReport) -> Outfit"
            }
        ],
        "Query": "I am Jane. What should I wear today based on the weather at my location?",
        "Label": "SuggestOutfit(WeatherReport=WeatherForecast(Location=GetLocationData(Username='Jane')))",
        "Index": 488
    },
    {
        "APIs": [
            {
                "name": "TrackSpending",
                "Description": "This API is used to track the spending of a specific user.",
                "input_params": {
                    "Username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "SpendingReport": {
                        "description": "the spending report of the user",
                        "type": "Object"
                    }
                },
                "format": "TrackSpending(Username) -> SpendingReport"
            },
            {
                "name": "CalculateSavings",
                "Description": "This API calculates the possible savings based on the spending report of a user.",
                "input_params": {
                    "SpendingReport": {
                        "description": "the spending report of the user",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "Savings": {
                        "description": "the possible savings of the user",
                        "type": "Object"
                    }
                },
                "format": "CalculateSavings(SpendingReport) -> Savings"
            },
            {
                "name": "SuggestInvestment",
                "Description": "This API suggests an investment plan based on the savings of a user.",
                "input_params": {
                    "Savings": {
                        "description": "the possible savings of the user",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "InvestmentPlan": {
                        "description": "the suggested investment plan for the user",
                        "type": "Object"
                    }
                },
                "format": "SuggestInvestment(Savings) -> InvestmentPlan"
            }
        ],
        "Query": "I am John. Based on my spending, how can I save and where should I invest?",
        "Label": "SuggestInvestment(Savings=CalculateSavings(SpendingReport=TrackSpending(Username='John')))",
        "Index": 489
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API fetches the weather forecast for a specific city.",
                "input_params": {
                    "City": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Forecast": {
                        "description": "the weather forecast for the city",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(City) -> Forecast"
            },
            {
                "name": "RestaurantRecommendations",
                "Description": "This API fetches restaurant recommendations for a specific city based on user reviews and ratings.",
                "input_params": {
                    "City": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Recommendations": {
                        "description": "the restaurant recommendations for the city",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommendations(City) -> Recommendations"
            },
            {
                "name": "OptimalTravelDate",
                "Description": "This API calculates the optimal travel date considering both the weather forecast and availability of recommended restaurants.",
                "input_params": {
                    "WeatherForecast": {
                        "description": "the weather forecast for a specific city",
                        "type": "String"
                    },
                    "RestaurantRecommendations": {
                        "description": "the restaurant recommendations for a specific city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "TravelDate": {
                        "description": "the optimal travel date",
                        "type": "String"
                    }
                },
                "format": "OptimalTravelDate(WeatherForecast, RestaurantRecommendations) -> TravelDate"
            }
        ],
        "Query": "I want to plan a date night in New York. When should I go?",
        "Label": "OptimalTravelDate(WeatherForecast=WeatherForecast(City='New York'), RestaurantRecommendations=RestaurantRecommendations(City='New York'))",
        "Index": 490
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API fetches the weather forecast for a specific location.",
                "input_params": {
                    "Location": {
                        "description": "the location for which weather forecast is needed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Forecast": {
                        "description": "the weather forecast for the specified location",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(Location) -> Forecast"
            },
            {
                "name": "TouristAttractions",
                "Description": "This API provides the tourist attractions for a specific location.",
                "input_params": {
                    "Location": {
                        "description": "the location for which tourist attractions are needed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Attractions": {
                        "description": "the tourist attractions for the specified location",
                        "type": "List"
                    }
                },
                "format": "TouristAttractions(Location) -> Attractions"
            },
            {
                "name": "PlanItinerary",
                "Description": "This API plans an itinerary considering both weather forecast and tourist attractions.",
                "input_params": {
                    "WeatherForecast": {
                        "description": "the weather forecast for the specified location",
                        "type": "String"
                    },
                    "TouristAttractions": {
                        "description": "the tourist attractions for the specified location",
                        "type": "List"
                    }
                },
                "output_params": {
                    "Itinerary": {
                        "description": "the planned itinerary considering both weather forecast and tourist attractions",
                        "type": "List"
                    }
                },
                "format": "PlanItinerary(WeatherForecast, TouristAttractions) -> Itinerary"
            }
        ],
        "Query": "I am going to London next week. Can you help me plan my itinerary?",
        "Label": "PlanItinerary(WeatherForecast=WeatherForecast(Location='London'), TouristAttractions=TouristAttractions(Location='London'))",
        "Index": 491
    },
    {
        "APIs": [
            {
                "name": "CheckWeather",
                "Description": "This API is to check the weather at a specified location.",
                "input_params": {
                    "location": {
                        "description": "the location to check the weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather at the specified location",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(location) -> weather"
            },
            {
                "name": "SuggestOutfit",
                "Description": "This API is to suggest an outfit based on the weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather to base the outfit suggestion on",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the suggested outfit based on the weather",
                        "type": "String"
                    }
                },
                "format": "SuggestOutfit(weather) -> outfit"
            },
            {
                "name": "FindItemInWardrobe",
                "Description": "This API is to find a specified outfit in my wardrobe.",
                "input_params": {
                    "outfit": {
                        "description": "the outfit to find in the wardrobe",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location of the specified outfit in the wardrobe",
                        "type": "String"
                    }
                },
                "format": "FindItemInWardrobe(outfit) -> location"
            }
        ],
        "Query": "What should I wear today for my trip to London and where can I find it in my wardrobe?",
        "Label": "FindItemInWardrobe(SuggestOutfit(CheckWeather('London')))",
        "Index": 492
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on the type of cuisine and location.",
                "input_params": {
                    "cuisine_type": {
                        "description": "the type of cuisine",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the restaurant information",
                        "type": "Object"
                    }
                },
                "format": "FindRestaurant(cuisine_type, location) -> restaurant"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to retrieve the menu from a specific restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the restaurant information",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "GetMenu(restaurant) -> menu"
            },
            {
                "name": "RecommendDish",
                "Description": "This API is to recommend a dish from the menu based on dietary restrictions.",
                "input_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "Object"
                    },
                    "dietary_restrictions": {
                        "description": "the dietary restrictions",
                        "type": "String"
                    }
                },
                "output_params": {
                    "dish": {
                        "description": "the recommended dish",
                        "type": "String"
                    }
                },
                "format": "RecommendDish(menu, dietary_restrictions) -> dish"
            }
        ],
        "Query": "I am in New York and want to eat Italian food but I am lactose intolerant. Can you recommend something for me?",
        "Label": "RecommendDish(GetMenu(FindRestaurant('Italian', 'New York')), 'lactose intolerant')",
        "Index": 493
    },
    {
        "APIs": [
            {
                "name": "CheckWeather",
                "Description": "This API checks the current weather of the specified location.",
                "input_params": {
                    "location": {
                        "description": "the location to check the weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the current weather",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(location) -> weather"
            },
            {
                "name": "FindClothes",
                "Description": "This API finds the most appropriate outfit to wear based on the current weather.",
                "input_params": {
                    "weather": {
                        "description": "the current weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "FindClothes(weather) -> outfit"
            },
            {
                "name": "PlanOutfit",
                "Description": "This API suggests a final outfit to wear based on the event and recommended outfit based on weather.",
                "input_params": {
                    "event": {
                        "description": "the event for which outfit is required",
                        "type": "String"
                    },
                    "outfit": {
                        "description": "the recommended outfit based on weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "final_outfit": {
                        "description": "the final outfit suggestion",
                        "type": "String"
                    }
                },
                "format": "PlanOutfit(event, outfit) -> final_outfit"
            }
        ],
        "Query": "What should I wear for my business meeting in New York today?",
        "Label": "PlanOutfit(event='business meeting', outfit=FindClothes(CheckWeather('New York')))",
        "Index": 494
    },
    {
        "APIs": [
            {
                "name": "FetchIngredients",
                "Description": "This API fetches the list of ingredients required for a particular dish.",
                "input_params": {
                    "dish_name": {
                        "description": "the name of the dish",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ingredients": {
                        "description": "the list of ingredients required for the dish",
                        "type": "List"
                    }
                },
                "format": "FetchIngredients(dish_name) -> ingredients"
            },
            {
                "name": "FindGroceryStores",
                "Description": "This API finds grocery stores in a given location.",
                "input_params": {
                    "location": {
                        "description": "the location to search for grocery stores",
                        "type": "String"
                    }
                },
                "output_params": {
                    "stores": {
                        "description": "the list of grocery stores in the given location",
                        "type": "List"
                    }
                },
                "format": "FindGroceryStores(location) -> stores"
            },
            {
                "name": "ComparePrices",
                "Description": "This API compares the prices of ingredients in different stores and returns the store with the lowest cost.",
                "input_params": {
                    "ingredients": {
                        "description": "the list of ingredients to compare prices",
                        "type": "List"
                    },
                    "stores": {
                        "description": "the list of grocery stores to compare prices",
                        "type": "List"
                    }
                },
                "output_params": {
                    "cheapest_store": {
                        "description": "the grocery store with the lowest cost for the ingredients",
                        "type": "String"
                    }
                },
                "format": "ComparePrices(ingredients, stores) -> cheapest_store"
            }
        ],
        "Query": "Where can I buy the cheapest ingredients for spaghetti in San Francisco?",
        "Label": "ComparePrices(FetchIngredients('spaghetti'), FindGroceryStores('San Francisco'))",
        "Index": 495
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant in a specific city serving a specific cuisine.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_info": {
                        "description": "information about the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(city, cuisine) -> restaurant_info"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to retrieve the menu details of a specific restaurant.",
                "input_params": {
                    "restaurant_info": {
                        "description": "information about the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu_details": {
                        "description": "details of the menu",
                        "type": "String"
                    }
                },
                "format": "GetMenu(restaurant_info) -> menu_details"
            },
            {
                "name": "CalculateCalories",
                "Description": "This API is to calculate the total calories of dishes in the menu.",
                "input_params": {
                    "menu_details": {
                        "description": "details of the menu",
                        "type": "String"
                    }
                },
                "output_params": {
                    "calorie_info": {
                        "description": "information about the total calories",
                        "type": "String"
                    }
                },
                "format": "CalculateCalories(menu_details) -> calorie_info"
            }
        ],
        "Query": "How many calories will I consume if I eat at the best Italian restaurant in New York tonight?",
        "Label": "CalculateCalories(menu_details=GetMenu(restaurant_info=FindRestaurant(city='New York', cuisine='Italian')))",
        "Index": 496
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant of a specific cuisine in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(city, cuisine) -> restaurant_name"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a specific restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "String"
                    }
                },
                "format": "GetMenu(restaurant_name) -> menu"
            },
            {
                "name": "SuggestFood",
                "Description": "This API is to suggest food from the menu based on dietary preferences.",
                "input_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "String"
                    },
                    "dietary_preferences": {
                        "description": "the dietary preferences",
                        "type": "String"
                    }
                },
                "output_params": {
                    "food_suggestion": {
                        "description": "the suggested food",
                        "type": "String"
                    }
                },
                "format": "SuggestFood(menu, dietary_preferences) -> food_suggestion"
            }
        ],
        "Query": "Can you suggest a vegan dish from an Italian restaurant in New York?",
        "Label": "SuggestFood(menu=GetMenu(restaurant_name=FindRestaurant(city='New York', cuisine='Italian')), dietary_preferences='vegan')",
        "Index": 497
    },
    {
        "APIs": [
            {
                "name": "GetFlightDetails",
                "Description": "This API gives you the flight details for a particular route on a specific date.",
                "input_params": {
                    "from_city": {
                        "description": "the city of departure",
                        "type": "String"
                    },
                    "to_city": {
                        "description": "the city of arrival",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_details": {
                        "description": "the details of the flight",
                        "type": "String"
                    }
                },
                "format": "GetFlightDetails(from_city, to_city, date) -> flight_details"
            },
            {
                "name": "CheckLuggageAllowance",
                "Description": "This API checks the luggage allowance for a specific flight.",
                "input_params": {
                    "flight_details": {
                        "description": "the details of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "luggage_allowance": {
                        "description": "the luggage allowance for the flight",
                        "type": "String"
                    }
                },
                "format": "CheckLuggageAllowance(flight_details) -> luggage_allowance"
            },
            {
                "name": "CalculateLuggageWeight",
                "Description": "This API calculates the total weight of the luggage based on the inputted items.",
                "input_params": {
                    "luggage_items": {
                        "description": "the items of luggage",
                        "type": "List of Strings"
                    }
                },
                "output_params": {
                    "luggage_weight": {
                        "description": "the total weight of the luggage",
                        "type": "Float"
                    }
                },
                "format": "CalculateLuggageWeight(luggage_items) -> luggage_weight"
            },
            {
                "name": "CanCarryLuggage",
                "Description": "This API tells if the calculated luggage weight is within the allowed limit or not.",
                "input_params": {
                    "luggage_weight": {
                        "description": "the total weight of the luggage",
                        "type": "Float"
                    },
                    "luggage_allowance": {
                        "description": "the luggage allowance for the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "permission": {
                        "description": "the permission to carry the luggage",
                        "type": "Boolean"
                    }
                },
                "format": "CanCarryLuggage(luggage_weight, luggage_allowance) -> permission"
            }
        ],
        "Query": "Will I be able to carry a suitcase, a handbag and a laptop bag on my flight from San Francisco to London on 5th June?",
        "Label": "CanCarryLuggage(luggage_weight=CalculateLuggageWeight(luggage_items=['suitcase', 'handbag', 'laptop bag']), luggage_allowance=CheckLuggageAllowance(flight_details=GetFlightDetails(from_city='San Francisco', to_city='London', date='5th June')))",
        "Index": 498
    },
    {
        "APIs": [
            {
                "name": "FindBook",
                "Description": "This API is to find a book based on a specified title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book": {
                        "description": "the information of the book",
                        "type": "Object"
                    }
                },
                "format": "FindBook(title) -> book"
            },
            {
                "name": "ReadReview",
                "Description": "This API is to read a review of a specified book.",
                "input_params": {
                    "book": {
                        "description": "the information of the book",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "review": {
                        "description": "the review of the book",
                        "type": "String"
                    }
                },
                "format": "ReadReview(book) -> review"
            },
            {
                "name": "SendReview",
                "Description": "This API is to send the book review to a specified contact.",
                "input_params": {
                    "contact_info": {
                        "description": "the contact information of the recipient",
                        "type": "String"
                    },
                    "review": {
                        "description": "the review of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "sent_confirmation": {
                        "description": "the confirmation of the review sent",
                        "type": "String"
                    }
                },
                "format": "SendReview(contact_info, review) -> sent_confirmation"
            }
        ],
        "Query": "Can you find the book \"The Alchemist\" and send its review to my professor whose email is profjones@university.com?",
        "Label": "SendReview(contact_info='profjones@university.com', review=ReadReview(book=FindBook(title='The Alchemist')))",
        "Index": 499
    },
    {
        "APIs": [
            {
                "name": "SearchFlight",
                "Description": "This API is to search for a flight to a specified destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight": {
                        "description": "the flight details",
                        "type": "Object"
                    }
                },
                "format": "SearchFlight(destination) -> flight"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a specified flight.",
                "input_params": {
                    "flight": {
                        "description": "the flight details",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "ticket": {
                        "description": "the flight ticket",
                        "type": "Object"
                    }
                },
                "format": "BookFlight(flight) -> ticket"
            },
            {
                "name": "SendTicket",
                "Description": "This API is to send the flight ticket to a specified contact.",
                "input_params": {
                    "contact_info": {
                        "description": "the contact information",
                        "type": "String"
                    },
                    "ticket": {
                        "description": "the flight ticket",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "sent_confirmation": {
                        "description": "the confirmation of ticket sent",
                        "type": "String"
                    }
                },
                "format": "SendTicket(contact_info, ticket) -> sent_confirmation"
            }
        ],
        "Query": "Please find a flight to Sydney and book it for me. Then, send the ticket details to my email johnsmith@gmail.com.",
        "Label": "SendTicket(contact_info='johnsmith@gmail.com', ticket=BookFlight(flight=SearchFlight(destination='Sydney')))",
        "Index": 500
    },
    {
        "APIs": [
            {
                "name": "MovieFinder",
                "Description": "This API searches for the movie id of a specific movie name.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_id": {
                        "description": "the id of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieFinder(movie_name) -> movie_id"
            },
            {
                "name": "MovieRatings",
                "Description": "This API finds the rating scores for a specific movie id.",
                "input_params": {
                    "movie_id": {
                        "description": "the id of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "ratingScores": {
                        "description": "the rating scores of the movie",
                        "type": "Float"
                    }
                },
                "format": "MovieRatings(movie_id) -> ratingScores"
            },
            {
                "name": "RatingAverage",
                "Description": "This API calculates the average rating of given rating scores.",
                "input_params": {
                    "ratingScores": {
                        "description": "the rating scores of the movie",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "avgRating": {
                        "description": "the average rating of the movie",
                        "type": "Float"
                    }
                },
                "format": "RatingAverage(ratingScores) -> avgRating"
            }
        ],
        "Query": "What's the average rating of the movie 'Inception'?",
        "Label": "RatingAverage(ratingScores=MovieRatings(movie_id=MovieFinder(movie_name='Inception')))",
        "Index": 501
    },
    {
        "APIs": [
            {
                "name": "MovieLookup",
                "Description": "This API retrieves the movie id of a specific movie name.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_id": {
                        "description": "the id of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieLookup(movie_name) -> movie_id"
            },
            {
                "name": "MovieRating",
                "Description": "This API retrieves all the rating scores for a specific movie id.",
                "input_params": {
                    "movie_id": {
                        "description": "the id of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "rating_scores": {
                        "description": "the rating scores for the movie",
                        "type": "List of Floats"
                    }
                },
                "format": "MovieRating(movie_id) -> rating_scores"
            },
            {
                "name": "HighestRating",
                "Description": "This API retrieves the highest rating score from a list of rating scores.",
                "input_params": {
                    "rating_scores": {
                        "description": "the rating scores for the movie",
                        "type": "List of Floats"
                    }
                },
                "output_params": {
                    "highest_rating": {
                        "description": "the highest rating score",
                        "type": "Float"
                    }
                },
                "format": "HighestRating(rating_scores) -> highest_rating"
            }
        ],
        "Query": "What is the highest rating score for the movie 'Inception'?",
        "Label": "HighestRating(rating_scores=MovieRating(movie_id=MovieLookup(movie_name='Inception')))",
        "Index": 502
    },
    {
        "APIs": [
            {
                "name": "FlightSearch",
                "Description": "This API searches for flight id for a specific destination on a particular date.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FlightSearch(destination, date) -> flight_id"
            },
            {
                "name": "SeatSelection",
                "Description": "This API checks the seat availability for a specific flight id.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "seats": {
                        "description": "the available seats for the flight",
                        "type": "String"
                    }
                },
                "format": "SeatSelection(flight_id) -> seats"
            },
            {
                "name": "UpgradeAvailability",
                "Description": "This API checks if there is any seat upgrade options available for the given seat.",
                "input_params": {
                    "seats": {
                        "description": "the seats to check for upgrade options",
                        "type": "String"
                    }
                },
                "output_params": {
                    "upgradeOptions": {
                        "description": "the available seat upgrade options",
                        "type": "String"
                    }
                },
                "format": "UpgradeAvailability(seats) -> upgradeOptions"
            }
        ],
        "Query": "Is there any seat upgrade available for the flight to Los Angeles on 21st June?",
        "Label": "UpgradeAvailability(seats=SeatSelection(flight_id=FlightSearch(destination='Los Angeles', date='21st June')))",
        "Index": 503
    },
    {
        "APIs": [
            {
                "name": "FlightSearch",
                "Description": "This API searches for flight id for a specific route from departure city to arrival city.",
                "input_params": {
                    "departure_city": {
                        "description": "the departure city",
                        "type": "String"
                    },
                    "arrival_city": {
                        "description": "the arrival city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the id of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FlightSearch(departure_city, arrival_city) -> flight_id"
            },
            {
                "name": "SeatClassAvailability",
                "Description": "This API checks the seat class availability for a specific flight id.",
                "input_params": {
                    "flight_id": {
                        "description": "the id of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "seat_classes": {
                        "description": "the available seat classes",
                        "type": "List"
                    }
                },
                "format": "SeatClassAvailability(flight_id) -> seat_classes"
            },
            {
                "name": "BestSeatClass",
                "Description": "This API finds the best seat class available among the given seat class options.",
                "input_params": {
                    "seat_classes": {
                        "description": "the available seat classes",
                        "type": "List"
                    }
                },
                "output_params": {
                    "bestSeatClass": {
                        "description": "the best seat class",
                        "type": "String"
                    }
                },
                "format": "BestSeatClass(seat_classes) -> bestSeatClass"
            }
        ],
        "Query": "Could you find the best seat class for a flight from Los Angeles to Tokyo?",
        "Label": "BestSeatClass(seat_classes=SeatClassAvailability(flight_id=FlightSearch(departure_city='Los Angeles', arrival_city='Tokyo')))",
        "Index": 504
    },
    {
        "APIs": [
            {
                "name": "HotelSearch",
                "Description": "This API searches for hotel id for a specific city between check-in and check-out dates.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotel_id": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    }
                },
                "format": "HotelSearch(city, check_in_date, check_out_date) -> hotel_id"
            },
            {
                "name": "RoomAvailability",
                "Description": "This API checks the room availability for a specific hotel id.",
                "input_params": {
                    "hotel_id": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "rooms": {
                        "description": "the available rooms",
                        "type": "List"
                    }
                },
                "format": "RoomAvailability(hotel_id) -> rooms"
            },
            {
                "name": "BestRoom",
                "Description": "This API finds the best room available among the given room options.",
                "input_params": {
                    "rooms": {
                        "description": "the available rooms",
                        "type": "List"
                    }
                },
                "output_params": {
                    "bestRoom": {
                        "description": "the best room available",
                        "type": "String"
                    }
                },
                "format": "BestRoom(rooms) -> bestRoom"
            }
        ],
        "Query": "Could you find the best room for a stay in Paris from May 1 to May 7?",
        "Label": "BestRoom(rooms=RoomAvailability(hotel_id=HotelSearch(city='Paris', check_in_date='May 1', check_out_date='May 7')))",
        "Index": 505
    },
    {
        "APIs": [
            {
                "name": "BookSearch",
                "Description": "This API searches for book id for a specific title and author.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    },
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookSearch(title, author) -> book_id"
            },
            {
                "name": "BookStoreAvailability",
                "Description": "This API checks for the store availability for a specific book id.",
                "input_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "store_ids": {
                        "description": "the IDs of the stores where the book is available",
                        "type": "List of Integers"
                    }
                },
                "format": "BookStoreAvailability(book_id) -> store_ids"
            },
            {
                "name": "NearestStore",
                "Description": "This API finds the nearest store among the given store options based on the user's location.",
                "input_params": {
                    "store_ids": {
                        "description": "the IDs of the stores",
                        "type": "List of Integers"
                    },
                    "user_location": {
                        "description": "the location of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "nearest_store": {
                        "description": "the ID of the nearest store",
                        "type": "Integer"
                    }
                },
                "format": "NearestStore(store_ids, user_location) -> nearest_store"
            }
        ],
        "Query": "Could you find the nearest bookstore where I can buy 'The Great Gatsby' by F. Scott Fitzgerald in San Francisco?",
        "Label": "NearestStore(store_ids=BookStoreAvailability(book_id=BookSearch(title='The Great Gatsby', author='F. Scott Fitzgerald')), user_location='San Francisco')",
        "Index": 506
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API searches for restaurant id for a specific name in a particular city.",
                "input_params": {
                    "name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantSearch(name, city) -> restaurant_id"
            },
            {
                "name": "TableAvailability",
                "Description": "This API checks the table availability for a specific restaurant id on a specific date.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date for checking table availability",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "tables": {
                        "description": "the available tables for the given restaurant and date",
                        "type": "List"
                    }
                },
                "format": "TableAvailability(restaurant_id, date) -> tables"
            },
            {
                "name": "BestTable",
                "Description": "This API finds the best table available among the given table options.",
                "input_params": {
                    "tables": {
                        "description": "the list of available tables",
                        "type": "List"
                    }
                },
                "output_params": {
                    "bestTable": {
                        "description": "the best table among the given options",
                        "type": "Table"
                    }
                },
                "format": "BestTable(tables) -> bestTable"
            }
        ],
        "Query": "Could you find the best table for 'La Taqueria' in San Francisco on March 5th?",
        "Label": "BestTable(tables=TableAvailability(restaurant_id=RestaurantSearch(name='La Taqueria', city='San Francisco'), date='March 5th'))",
        "Index": 507
    },
    {
        "APIs": [
            {
                "name": "CurrencyConversion",
                "Description": "This API provides the conversion rate from one currency to another.",
                "input_params": {
                    "from_currency": {
                        "description": "the currency to convert from",
                        "type": "String"
                    },
                    "to_currency": {
                        "description": "the currency to convert to",
                        "type": "String"
                    }
                },
                "output_params": {
                    "conversion_rate": {
                        "description": "the conversion rate from the 'from_currency' to the 'to_currency'",
                        "type": "Float"
                    }
                },
                "format": "CurrencyConversion(from_currency, to_currency) -> conversion_rate"
            },
            {
                "name": "ItemPrice",
                "Description": "This API provides the price of an item.",
                "input_params": {
                    "item_id": {
                        "description": "the ID of the item",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "price": {
                        "description": "the price of the item",
                        "type": "Float"
                    }
                },
                "format": "ItemPrice(item_id) -> price"
            },
            {
                "name": "CalculatePrice",
                "Description": "This API provides the final price of an item after currency conversion.",
                "input_params": {
                    "price": {
                        "description": "the price of the item",
                        "type": "Float"
                    },
                    "conversion_rate": {
                        "description": "the conversion rate from the original currency to the target currency",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "converted_price": {
                        "description": "the final price of the item after currency conversion",
                        "type": "Float"
                    }
                },
                "format": "CalculatePrice(price, conversion_rate) -> converted_price"
            }
        ],
        "Query": "What would be the cost of item ID: 123 in Euros if its price is listed in US dollars?",
        "Label": "CalculatePrice(price=ItemPrice(item_id='123'), conversion_rate=CurrencyConversion(from_currency='USD', to_currency='EUR'))",
        "Index": 508
    },
    {
        "APIs": [
            {
                "name": "CurrentTime",
                "Description": "This API provides the current time in a specified city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "time": {
                        "description": "the current time",
                        "type": "Time"
                    }
                },
                "format": "CurrentTime(city) -> time"
            },
            {
                "name": "OpenMuseums",
                "Description": "This API provides a list of museums that are currently open in a city at a given time.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "time": {
                        "description": "the specified time",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "museums": {
                        "description": "a list of open museums",
                        "type": "List"
                    }
                },
                "format": "OpenMuseums(city, time) -> museums"
            },
            {
                "name": "ArtExhibit",
                "Description": "This API provides a list of current art exhibits at a specified museum.",
                "input_params": {
                    "museum": {
                        "description": "the name of the museum",
                        "type": "String"
                    }
                },
                "output_params": {
                    "exhibits": {
                        "description": "a list of art exhibits",
                        "type": "List"
                    }
                },
                "format": "ArtExhibit(museum) -> exhibits"
            }
        ],
        "Query": "What art exhibits are currently open in museums in Los Angeles?",
        "Label": "ArtExhibit(museum=OpenMuseums(city='Los Angeles', time=CurrentTime(city='Los Angeles')))",
        "Index": 509
    },
    {
        "APIs": [
            {
                "name": "FlightStatus",
                "Description": "This API is used to get the status of a specific flight on a certain date.",
                "input_params": {
                    "airline": {
                        "description": "the name of the airline",
                        "type": "String"
                    },
                    "flight_number": {
                        "description": "the flight number",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_status": {
                        "description": "the status of the flight, including time",
                        "type": "String"
                    }
                },
                "format": "FlightStatus(airline, flight_number, date) -> flight_status"
            },
            {
                "name": "AirportTransportation",
                "Description": "This API is used to suggest transportation options from the city to the airport on a certain date and time considering the flight status.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the transportation",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time of the transportation",
                        "type": "String"
                    }
                },
                "output_params": {
                    "transportation": {
                        "description": "the suggested transportation options",
                        "type": "String"
                    }
                },
                "format": "AirportTransportation(city, date, time) -> transportation"
            },
            {
                "name": "TransportationBooking",
                "Description": "This API is used to book a specific transportation in a certain city on a specific date and time.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "transportation": {
                        "description": "the transportation option",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time of the booking",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking": {
                        "description": "the booking status",
                        "type": "String"
                    }
                },
                "format": "TransportationBooking(city, transportation, date, time) -> booking"
            }
        ],
        "Query": "Can you suggest and book the best transportation for me to catch the Delta flight 5689 on next Monday in Boston?",
        "Label": "TransportationBooking(city='Boston', transportation=AirportTransportation(city='Boston', date='Monday', time=FlightStatus(airline='Delta', flight_number='5689', date='Monday').departure_time), date='Monday', time=FlightStatus(airline='Delta', flight_number='5689', date='Monday').departure_time)",
        "Index": 510
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is used to get the weather forecast for a certain location on a specific date.",
                "input_params": {
                    "location": {
                        "description": "the location for which weather forecast is required",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date for which weather forecast is required",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weatherDetails": {
                        "description": "the details of the weather forecast",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(location, date) -> weatherDetails"
            },
            {
                "name": "RestaurantSearch",
                "Description": "This API is used to search for a restaurant at a certain location serving a specific cuisine type.",
                "input_params": {
                    "location": {
                        "description": "the location where the restaurant search is to be performed",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the specific cuisine type to search for",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantDetails": {
                        "description": "the details of the searched restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantSearch(location, cuisine) -> restaurantDetails"
            },
            {
                "name": "TableReservation",
                "Description": "This API is used to reserve a table at a restaurant on a specific date. The API takes into consideration the weather details to suggest indoor or outdoor seating.",
                "input_params": {
                    "weatherDetails": {
                        "description": "the details of the weather forecast",
                        "type": "String"
                    },
                    "restaurantDetails": {
                        "description": "the details of the searched restaurant",
                        "type": "String"
                    },
                    "num_of_people": {
                        "description": "the number of people for the reservation",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the specific date for the reservation",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reservationDetails": {
                        "description": "the details of the table reservation",
                        "type": "String"
                    }
                },
                "format": "TableReservation(weatherDetails, restaurantDetails, num_of_people, date) -> reservationDetails"
            }
        ],
        "Query": "Can you get me the weather forecast for Paris on 25th of December, find a French restaurant there, and make a reservation for 5 people?",
        "Label": "TableReservation(weatherDetails=WeatherForecast(location='Paris', date='25th of December'), restaurantDetails=RestaurantSearch(location='Paris', cuisine='French'), num_of_people='5', date='25th of December')",
        "Index": 511
    },
    {
        "APIs": [
            {
                "name": "ProductLookup",
                "Description": "This API is to query the product details given a product_id.",
                "input_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_info": {
                        "description": "the details of the product",
                        "type": "Object"
                    }
                },
                "format": "ProductLookup(product_id) -> product_info"
            },
            {
                "name": "CustomerPurchase",
                "Description": "This API fetches the purchase history based on product details.",
                "input_params": {
                    "product_info": {
                        "description": "the details of the product",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "purchase_info": {
                        "description": "the purchase history",
                        "type": "Object"
                    }
                },
                "format": "CustomerPurchase(product_info) -> purchase_info"
            },
            {
                "name": "ProductRating",
                "Description": "This API provides product ratings based on purchase history.",
                "input_params": {
                    "purchase_info": {
                        "description": "the purchase history",
                        "type": "Object"
                    },
                    "number_of_ratings": {
                        "description": "the number of ratings to retrieve",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "ratings": {
                        "description": "the product ratings",
                        "type": "List"
                    }
                },
                "format": "ProductRating(purchase_info, number_of_ratings) -> ratings"
            }
        ],
        "Query": "Can you provide me with ten ratings for the product with id 56789?",
        "Label": "ProductRating(purchase_info=CustomerPurchase(product_info=ProductLookup(product_id='56789')), number_of_ratings='10')",
        "Index": 512
    },
    {
        "APIs": [
            {
                "name": "BookInfo",
                "Description": "This API provides details about a book based on its title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bookdetails": {
                        "description": "the details of the book",
                        "type": "Object"
                    }
                },
                "format": "BookInfo(title) -> bookdetails"
            },
            {
                "name": "AuthorBio",
                "Description": "This API provides information about an author.",
                "input_params": {
                    "author": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "authorData": {
                        "description": "the information about the author",
                        "type": "Object"
                    }
                },
                "format": "AuthorBio(author) -> authorData"
            },
            {
                "name": "ReviewGenerator",
                "Description": "This API generates a review based on the book and its author details.",
                "input_params": {
                    "bookdetails": {
                        "description": "the details of the book",
                        "type": "Object"
                    },
                    "authorData": {
                        "description": "the information about the author",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "review": {
                        "description": "the generated review",
                        "type": "String"
                    }
                },
                "format": "ReviewGenerator(bookdetails, authorData) -> review"
            }
        ],
        "Query": "Can you generate a review for the book 'To Kill a Mockingbird' by Harper Lee?",
        "Label": "ReviewGenerator(bookdetails = BookInfo(title = 'To Kill a Mockingbird'), authorData = AuthorBio(author = 'Harper Lee'))",
        "Index": 513
    },
    {
        "APIs": [
            {
                "name": "CryptoPrice",
                "Description": "This API gives the current price of a specified cryptocurrency.",
                "input_params": {
                    "cryptoType": {
                        "description": "the type of cryptocurrency",
                        "type": "String"
                    }
                },
                "output_params": {
                    "price": {
                        "description": "the current price of the cryptocurrency",
                        "type": "Float"
                    }
                },
                "format": "CryptoPrice(cryptoType) -> price"
            },
            {
                "name": "StockPrice",
                "Description": "This API gives the current price of a specified stock.",
                "input_params": {
                    "stockName": {
                        "description": "the name of the stock",
                        "type": "String"
                    }
                },
                "output_params": {
                    "price": {
                        "description": "the current price of the stock",
                        "type": "Float"
                    }
                },
                "format": "StockPrice(stockName) -> price"
            },
            {
                "name": "InvestmentSuggestion",
                "Description": "This API suggests where to invest considering the prices of cryptocurrency and stock.",
                "input_params": {
                    "cryptoPrice": {
                        "description": "the current price of the cryptocurrency",
                        "type": "Float"
                    },
                    "stockPrice": {
                        "description": "the current price of the stock",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "suggestion": {
                        "description": "the investment suggestion",
                        "type": "String"
                    }
                },
                "format": "InvestmentSuggestion(cryptoPrice, stockPrice) -> suggestion"
            }
        ],
        "Query": "Should I invest in Bitcoin or Tesla stocks considering their current prices?",
        "Label": "InvestmentSuggestion(cryptoPrice = CryptoPrice(cryptoType = 'Bitcoin'), stockPrice = StockPrice(stockName = 'Tesla'))",
        "Index": 514
    },
    {
        "APIs": [
            {
                "name": "BookTitle",
                "Description": "This API retrieves the title of a book given the author and genre.",
                "input_params": {
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    },
                    "genre": {
                        "description": "the genre of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "format": "BookTitle(author, genre) -> title"
            },
            {
                "name": "BookPrice",
                "Description": "This API gives the price of the specified book title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "price": {
                        "description": "the price of the book",
                        "type": "Float"
                    }
                },
                "format": "BookPrice(title) -> price"
            },
            {
                "name": "ShippingEstimate",
                "Description": "This API calculates the estimated shipping cost for the book based on its price and shipping destination.",
                "input_params": {
                    "bookPrice": {
                        "description": "the price of the book",
                        "type": "Float"
                    },
                    "destination": {
                        "description": "the shipping destination",
                        "type": "String"
                    }
                },
                "output_params": {
                    "estimate": {
                        "description": "the estimated shipping cost",
                        "type": "Float"
                    }
                },
                "format": "ShippingEstimate(bookPrice, destination) -> estimate"
            }
        ],
        "Query": "I'm looking to buy a mystery novel by Agatha Christie and have it shipped to Paris. Can you tell me the total cost?",
        "Label": "ShippingEstimate(bookPrice=BookPrice(title=BookTitle(author='Agatha Christie', genre='mystery')),destination='Paris')",
        "Index": 515
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API finds the best restaurant in the given city for the specified cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine the user is looking for",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the best restaurant matching the given city and cuisine",
                        "type": "String"
                    }
                },
                "format": "RestaurantSearch(city, cuisine) -> restaurant"
            },
            {
                "name": "BookTable",
                "Description": "This API books a table at the given restaurant on the specified date and time.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the table booking",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time for the table booking",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bookingID": {
                        "description": "the ID of the table booking",
                        "type": "Integer"
                    }
                },
                "format": "BookTable(restaurant, date, time) -> bookingID"
            },
            {
                "name": "SendInvitation",
                "Description": "This API sends an invitation for the booked table to the provided email.",
                "input_params": {
                    "bookingID": {
                        "description": "the ID of the table booking",
                        "type": "Integer"
                    },
                    "email": {
                        "description": "the email address to send the invitation to",
                        "type": "String"
                    }
                },
                "output_params": {
                    "invitationID": {
                        "description": "the ID of the sent invitation",
                        "type": "Integer"
                    }
                },
                "format": "SendInvitation(bookingID, email) -> invitationID"
            }
        ],
        "Query": "I'm looking for the best Italian restaurant in New York. I want to book a table for two on 14th February at 8 PM and send an invitation to my friend at john@example.com. Can you help?",
        "Label": "SendInvitation(bookingID=BookTable(restaurant=RestaurantSearch(city='New York', cuisine='Italian'), date='14th February', time='8 PM'), email='john@example.com')",
        "Index": 516
    },
    {
        "APIs": [
            {
                "name": "MovieSearch",
                "Description": "This API finds the most popular movie in the specified city of the given genre.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie": {
                        "description": "the most popular movie",
                        "type": "String"
                    }
                },
                "format": "MovieSearch(city, genre) -> movie"
            },
            {
                "name": "ShowTiming",
                "Description": "This API provides the show timings for the selected movie on the specified date.",
                "input_params": {
                    "movie": {
                        "description": "the selected movie",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specified date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "the show timings for the movie on the specified date",
                        "type": "String"
                    }
                },
                "format": "ShowTiming(movie, date) -> showtime"
            },
            {
                "name": "BookTicket",
                "Description": "This API books the tickets for the desired movie at the given showtime and specified seats.",
                "input_params": {
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "String"
                    },
                    "seats": {
                        "description": "the number of seats to book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "ticketID": {
                        "description": "the ID of the booked tickets",
                        "type": "String"
                    }
                },
                "format": "BookTicket(showtime, seats) -> ticketID"
            }
        ],
        "Query": "I'm in Los Angeles and I'd like to watch a horror movie tomorrow. Can you find a popular movie and book two seats for me?",
        "Label": "BookTicket(showtime=ShowTiming(movie=MovieSearch(city='Los Angeles', genre='horror'), date='tomorrow'), seats=2)",
        "Index": 517
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API gives the weather forecast for the given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "forecast": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city) -> forecast"
            },
            {
                "name": "GetClothingRecommendation",
                "Description": "This API provides clothing recommendation based on the weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing": {
                        "description": "the clothing recommendation",
                        "type": "String"
                    }
                },
                "format": "GetClothingRecommendation(weather) -> clothing"
            },
            {
                "name": "PlanOutfit",
                "Description": "This API plans an outfit based on the clothing recommendation and the occasion.",
                "input_params": {
                    "clothing": {
                        "description": "the clothing recommendation",
                        "type": "String"
                    },
                    "occasion": {
                        "description": "the occasion for the outfit",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the planned outfit",
                        "type": "String"
                    }
                },
                "format": "PlanOutfit(clothing, occasion) -> outfit"
            }
        ],
        "Query": "I'm going to a casual party in New York tomorrow, what should I wear?",
        "Label": "PlanOutfit(clothing=GetClothingRecommendation(weather=WeatherForecast(city='New York')), occasion='casual party')",
        "Index": 518
    },
    {
        "APIs": [
            {
                "name": "Weather",
                "Description": "This API gives the current weather conditions for the given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "condition": {
                        "description": "the current weather conditions",
                        "type": "String"
                    }
                },
                "format": "Weather(city) -> condition"
            },
            {
                "name": "FlightDistance",
                "Description": "This API provides the flight distance between the origin and destination cities.",
                "input_params": {
                    "origin": {
                        "description": "the origin city",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "the flight distance between the origin and destination cities",
                        "type": "Float"
                    }
                },
                "format": "FlightDistance(origin, destination) -> distance"
            },
            {
                "name": "FuelCostPerFlight",
                "Description": "This API calculates the fuel cost for the flight given the distance and weather conditions.",
                "input_params": {
                    "distance": {
                        "description": "the flight distance",
                        "type": "Float"
                    },
                    "weatherCondition": {
                        "description": "the current weather conditions",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cost": {
                        "description": "the fuel cost for the flight",
                        "type": "Float"
                    }
                },
                "format": "FuelCostPerFlight(distance, weatherCondition) -> cost"
            }
        ],
        "Query": "I'm planning to fly from Boston to Los Angeles, and I'm curious about the fuel cost considering the current weather in Los Angeles.",
        "Label": "FuelCostPerFlight(distance=FlightDistance(origin='Boston', destination='Los Angeles'), weatherCondition=Weather(city='Los Angeles'))",
        "Index": 519
    },
    {
        "APIs": [
            {
                "name": "FindRecipe",
                "Description": "This API provides the recipe of a specified dish.",
                "input_params": {
                    "dish": {
                        "description": "the name of the dish",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recipe": {
                        "description": "the recipe of the dish",
                        "type": "String"
                    }
                },
                "format": "FindRecipe(dish) -> recipe"
            },
            {
                "name": "CheckPantry",
                "Description": "This API checks the pantry for available ingredients needed for a certain recipe.",
                "input_params": {
                    "recipe": {
                        "description": "the recipe of the dish",
                        "type": "String"
                    }
                },
                "output_params": {
                    "available_ingredients": {
                        "description": "the available ingredients in the pantry",
                        "type": "List"
                    }
                },
                "format": "CheckPantry(recipe) -> available_ingredients"
            },
            {
                "name": "GroceryList",
                "Description": "This API generates a grocery list based on the available ingredients and the recipe.",
                "input_params": {
                    "available_ingredients": {
                        "description": "the available ingredients in the pantry",
                        "type": "List"
                    },
                    "recipe": {
                        "description": "the recipe of the dish",
                        "type": "String"
                    }
                },
                "output_params": {
                    "list": {
                        "description": "the grocery list",
                        "type": "List"
                    }
                },
                "format": "GroceryList(available_ingredients, recipe) -> list"
            }
        ],
        "Query": "Could you generate a grocery list for making spaghetti based on what I have in the pantry?",
        "Label": "GroceryList(available_ingredients=CheckPantry(recipe=FindRecipe(dish='spaghetti')), recipe=FindRecipe(dish='spaghetti'))",
        "Index": 520
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API finds a restaurant in a specific city that serves a specific type of cuisine.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(city, cuisine) -> restaurant"
            },
            {
                "name": "CheckAvailability",
                "Description": "This API checks the availability of a reservation at a specific restaurant, date, and time.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the reservation",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation": {
                        "description": "the availability of the reservation",
                        "type": "String"
                    }
                },
                "format": "CheckAvailability(restaurant, date, time) -> reservation"
            },
            {
                "name": "BookTable",
                "Description": "This API books a table at a specific restaurant on a particular date and time.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the reservation",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "confirmation": {
                        "description": "the confirmation of the booking",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant, date, time) -> confirmation"
            }
        ],
        "Query": "I want to have Italian food in New York on Friday at 7pm. Can I get a reservation?",
        "Label": "BookTable(restaurant=FindRestaurant(city='New York', cuisine='Italian'), date='Friday', time='7pm')",
        "Index": 521
    },
    {
        "APIs": [
            {
                "name": "PharmacyLocator",
                "Description": "This API locates all the pharmacies in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "pharmacies": {
                        "description": "a list of pharmacies in the city",
                        "type": "List"
                    }
                },
                "format": "PharmacyLocator(city) -> pharmacies"
            },
            {
                "name": "MedicineAvailability",
                "Description": "This API checks the availability of specific medicine in a given pharmacy.",
                "input_params": {
                    "pharmacy": {
                        "description": "the name of the pharmacy",
                        "type": "String"
                    },
                    "medicine_name": {
                        "description": "the name of the medicine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "medicine_stock": {
                        "description": "the availability of the medicine in the pharmacy",
                        "type": "Boolean"
                    }
                },
                "format": "MedicineAvailability(pharmacy, medicine_name) -> medicine_stock"
            },
            {
                "name": "OrderMedicine",
                "Description": "This API places an order for a particular medicine at a chosen pharmacy.",
                "input_params": {
                    "pharmacy": {
                        "description": "the name of the pharmacy",
                        "type": "String"
                    },
                    "medicine_name": {
                        "description": "the name of the medicine",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity of the medicine to order",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_confirmation": {
                        "description": "the confirmation of the order",
                        "type": "String"
                    }
                },
                "format": "OrderMedicine(pharmacy, medicine_name, quantity) -> order_confirmation"
            }
        ],
        "Query": "I'm in San Francisco and I need to buy 2 bottles of Ibuprofen. Can you find a pharmacy where it's available and place an order for me?",
        "Label": "OrderMedicine(pharmacy=PharmacyLocator(city='San Francisco'), medicine_name='Ibuprofen', quantity=2)",
        "Index": 522
    },
    {
        "APIs": [
            {
                "name": "GetMovie",
                "Description": "This API is to get the information about a specific movie show.",
                "input_params": {
                    "show": {
                        "description": "the name of the movie show",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_info": {
                        "description": "the information about the movie, including the venue",
                        "type": "String"
                    }
                },
                "format": "GetMovie(show) -> movie_info"
            },
            {
                "name": "RestaurantRecommendation",
                "Description": "This API recommends restaurants based on the venue.",
                "input_params": {
                    "venue": {
                        "description": "the name of the venue",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_list": {
                        "description": "a list of recommended restaurants",
                        "type": "List"
                    }
                },
                "format": "RestaurantRecommendation(venue) -> restaurant_list"
            },
            {
                "name": "BookTable",
                "Description": "This API books a table at a specific restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "no_of_persons": {
                        "description": "the number of persons for the table booking",
                        "type": "Integer"
                    },
                    "time": {
                        "description": "the time for the table booking",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking_confirmation": {
                        "description": "the confirmation of the table booking",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant, no_of_persons, time) -> booking_confirmation"
            }
        ],
        "Query": "We are planning to watch the new Marvel movie tonight. Can you suggest a restaurant for dinner and book a table for 4 at 9 PM?",
        "Label": "BookTable(restaurant=RestaurantRecommendation(venue=GetMovie(show='Marvel')), no_of_persons='4', time='9 PM')",
        "Index": 523
    },
    {
        "APIs": [
            {
                "name": "RestaurantDetails",
                "Description": "This API returns information about a certain restaurant.",
                "input_params": {
                    "restaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantInfo": {
                        "description": "information about the restaurant",
                        "type": "Object"
                    }
                },
                "format": "RestaurantDetails(restaurantName) -> restaurantInfo"
            },
            {
                "name": "CuisineRecommendation",
                "Description": "This API recommends cuisines based on the restaurant's information.",
                "input_params": {
                    "restaurantInfo": {
                        "description": "information about the restaurant",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "cuisineRec": {
                        "description": "recommended cuisines",
                        "type": "List"
                    }
                },
                "format": "CuisineRecommendation(restaurantInfo) -> cuisineRec"
            },
            {
                "name": "MenuSelection",
                "Description": "This API selects a menu based on the restaurant's information and recommended cuisine.",
                "input_params": {
                    "restaurantInfo": {
                        "description": "information about the restaurant",
                        "type": "Object"
                    },
                    "cuisineRec": {
                        "description": "recommended cuisines",
                        "type": "List"
                    }
                },
                "output_params": {
                    "selectedMenu": {
                        "description": "selected menu",
                        "type": "Object"
                    }
                },
                "format": "MenuSelection(restaurantInfo, cuisineRec) -> selectedMenu"
            }
        ],
        "Query": "What's good to eat at the restaurant 'Le Bernardin'?",
        "Label": "MenuSelection(restaurantInfo=RestaurantDetails(restaurantName='Le Bernardin'), cuisineRec=CuisineRecommendation(restaurantInfo=RestaurantDetails(restaurantName='Le Bernardin')))",
        "Index": 524
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API provides the weather forecast for a given city in a certain country.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "country": {
                        "description": "the name of the country",
                        "type": "String"
                    }
                },
                "output_params": {
                    "forecast": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, country) -> forecast"
            },
            {
                "name": "ClothingRecommendation",
                "Description": "This API provides clothing recommendations based on the current weather.",
                "input_params": {
                    "weatherForecast": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothes": {
                        "description": "the recommended clothes",
                        "type": "String"
                    }
                },
                "format": "ClothingRecommendation(weatherForecast) -> clothes"
            },
            {
                "name": "PackItems",
                "Description": "This API generates a list of items to pack based on clothing recommendations and the duration of the trip.",
                "input_params": {
                    "clothingRecommendation": {
                        "description": "the recommended clothes",
                        "type": "String"
                    },
                    "tripDuration": {
                        "description": "the duration of the trip",
                        "type": "String"
                    }
                },
                "output_params": {
                    "packedItems": {
                        "description": "the list of items to pack",
                        "type": "String"
                    }
                },
                "format": "PackItems(clothingRecommendation, tripDuration) -> packedItems"
            }
        ],
        "Query": "What clothes should I pack for a week's trip to Paris, France?",
        "Label": "PackItems(clothingRecommendation=ClothingRecommendation(weatherForecast=WeatherForecast(city='Paris', country='France')), tripDuration='a week')",
        "Index": 525
    },
    {
        "APIs": [
            {
                "name": "CarInfo",
                "Description": "This API retrieves detailed information about a car including its price.",
                "input_params": {
                    "car_name": {
                        "description": "the name of the car",
                        "type": "String"
                    },
                    "country": {
                        "description": "the country where the car is being purchased",
                        "type": "String"
                    }
                },
                "output_params": {
                    "carDetails": {
                        "description": "detailed information about the car including its price",
                        "type": "Object"
                    }
                },
                "format": "CarInfo(car_name, country) -> carDetails"
            },
            {
                "name": "CountryTaxRate",
                "Description": "This API returns the tax rate in a certain country.",
                "input_params": {
                    "country": {
                        "description": "the country for which the tax rate is being retrieved",
                        "type": "String"
                    }
                },
                "output_params": {
                    "taxRate": {
                        "description": "the tax rate in the specified country",
                        "type": "Float"
                    }
                },
                "format": "CountryTaxRate(country) -> taxRate"
            },
            {
                "name": "TaxCostCalculator",
                "Description": "This API calculates the tax cost of a certain price.",
                "input_params": {
                    "price": {
                        "description": "the price of the item",
                        "type": "Float"
                    },
                    "tax_rate": {
                        "description": "the tax rate to be applied",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "taxCost": {
                        "description": "the calculated tax cost",
                        "type": "Float"
                    }
                },
                "format": "TaxCostCalculator(price, tax_rate) -> taxCost"
            }
        ],
        "Query": "I'd like to know how much tax I would pay if I buy a Tesla Model 3 in Germany.",
        "Label": "TaxCostCalculator(price=CarInfo(car_name='Tesla Model 3', country='Germany'), tax_rate=CountryTaxRate(country='Germany'))",
        "Index": 526
    },
    {
        "APIs": [
            {
                "name": "FlightInfo",
                "Description": "This API retrieves detailed information about flights including its cost.",
                "input_params": {
                    "city_from": {
                        "description": "the city of departure",
                        "type": "String"
                    },
                    "city_to": {
                        "description": "the city of arrival",
                        "type": "String"
                    },
                    "date_from": {
                        "description": "the start date of the flight",
                        "type": "Date"
                    },
                    "date_to": {
                        "description": "the end date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flightDetails": {
                        "description": "detailed information about flights including its cost",
                        "type": "Object"
                    }
                },
                "format": "FlightInfo(city_from, city_to, date_from, date_to) -> flightDetails"
            },
            {
                "name": "CountryWeather",
                "Description": "This API returns the weather information in a certain city at a certain date.",
                "input_params": {
                    "city": {
                        "description": "the city for which weather information is required",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which weather information is required",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weatherDetails": {
                        "description": "the weather information in a certain city at a certain date",
                        "type": "Object"
                    }
                },
                "format": "CountryWeather(city, date) -> weatherDetails"
            },
            {
                "name": "WeatherEffectPrice",
                "Description": "This API calculates the potential effects of weather on flight prices.",
                "input_params": {
                    "city": {
                        "description": "the city for which weather effects on flight prices are to be calculated",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which weather effects on flight prices are to be calculated",
                        "type": "Date"
                    },
                    "original_price": {
                        "description": "the original price of the flight",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "adjustedPrice": {
                        "description": "the potential adjusted price of the flight considering weather effects",
                        "type": "Float"
                    }
                },
                "format": "WeatherEffectPrice(city, date, original_price) -> adjustedPrice"
            }
        ],
        "Query": "I'd like to know the potential cost of my flight to Tokyo from New York next month considering the weather effects.",
        "Label": "WeatherEffectPrice(city='Tokyo', date='next month', original_price=FlightInfo(city_from='New York', city_to='Tokyo', date_from='next month', date_to='next month'))",
        "Index": 527
    },
    {
        "APIs": [
            {
                "name": "MovieSearch",
                "Description": "This API helps to find a movie in a specific city of a certain genre.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie": {
                        "description": "the recommended movie",
                        "type": "String"
                    }
                },
                "format": "MovieSearch(city, genre) -> movie"
            },
            {
                "name": "ResturantNearCinema",
                "Description": "This API finds a restaurant near a specific cinema in a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "cinema_name": {
                        "description": "the name of the cinema",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "ResturantNearCinema(city, cinema_name) -> restaurant"
            },
            {
                "name": "TableBooking",
                "Description": "This API allows users to book a table in a specific restaurant at a specified time.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time for table booking",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking": {
                        "description": "the booking status",
                        "type": "String"
                    }
                },
                "format": "TableBooking(restaurant_name, time) -> booking"
            }
        ],
        "Query": "Can you recommend a comedy movie in Los Angeles? And find me a restaurant near the cinema for dinner. Can I book a table there at 7pm?",
        "Label": "TableBooking(restaurant_name=ResturantNearCinema(city='Los Angeles', cinema_name=MovieSearch(city='Los Angeles', genre='comedy')), time='7pm')",
        "Index": 528
    },
    {
        "APIs": [
            {
                "name": "HotelFinder",
                "Description": "This API finds all hotels in a particular city with the specified star rating.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "star_rating": {
                        "description": "the star rating of the hotel",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "HotelFinder(city, star_rating) -> hotel_name"
            },
            {
                "name": "RoomBooking",
                "Description": "This API books the specified number of rooms in the given hotel for the duration of stay.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "number_of_rooms": {
                        "description": "the number of rooms to book",
                        "type": "Integer"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_confirmation": {
                        "description": "the booking confirmation",
                        "type": "String"
                    }
                },
                "format": "RoomBooking(hotel_name, number_of_rooms, check_in_date, check_out_date) -> booking_confirmation"
            },
            {
                "name": "FlightBooking",
                "Description": "This API books a flight from the origin to the destination for the given dates.",
                "input_params": {
                    "origin": {
                        "description": "the origin of the flight",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    },
                    "departure_date": {
                        "description": "the departure date",
                        "type": "Date"
                    },
                    "return_date": {
                        "description": "the return date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight_details": {
                        "description": "the details of the flight",
                        "type": "String"
                    }
                },
                "format": "FlightBooking(origin, destination, departure_date, return_date) -> flight_details"
            }
        ],
        "Query": "Book a 5-star hotel in Paris for 3 nights starting from 10th June and return flight tickets from London to Paris.",
        "Label": "FlightBooking(origin='London', destination='Paris', departure_date='10th June', return_date=RoomBooking(hotel_name=HotelFinder(city='Paris', star_rating=5), number_of_rooms=1, check_in_date='10th June', check_out_date='13th June'))",
        "Index": 529
    },
    {
        "APIs": [
            {
                "name": "BoatDetail",
                "Description": "This API is to query the location information of the boat.",
                "input_params": {
                    "boat_id": {
                        "description": "the ID of the boat",
                        "type": "String"
                    }
                },
                "output_params": {
                    "boat_location": {
                        "description": "the location of the boat",
                        "type": "String"
                    }
                },
                "format": "BoatDetail(boat_id) -> boat_location"
            },
            {
                "name": "TideCheck",
                "Description": "This API is to check the tide status of a location.",
                "input_params": {
                    "boat_location": {
                        "description": "the location of the boat",
                        "type": "String"
                    }
                },
                "output_params": {
                    "tide_status": {
                        "description": "the tide status of the location",
                        "type": "String"
                    }
                },
                "format": "TideCheck(boat_location) -> tide_status"
            },
            {
                "name": "BoatStatus",
                "Description": "This API is to check the status of the boat.",
                "input_params": {
                    "boat_id": {
                        "description": "the ID of the boat",
                        "type": "String"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of the boat",
                        "type": "String"
                    }
                },
                "format": "BoatStatus(boat_id) -> status"
            }
        ],
        "Query": "Can you tell me the tide status for boat with id B1234?",
        "Label": "TideCheck(boat_location=BoatDetail(boat_id='B1234'))",
        "Index": 530
    },
    {
        "APIs": [
            {
                "name": "CityDetail",
                "Description": "This API is to get the coordinates of a city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_coordinates": {
                        "description": "the coordinates of the city",
                        "type": "String"
                    }
                },
                "format": "CityDetail(city_name) -> city_coordinates"
            },
            {
                "name": "PollutionCheck",
                "Description": "This API is to check the pollution index of a location.",
                "input_params": {
                    "city_coordinates": {
                        "description": "the coordinates of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "pollution_index": {
                        "description": "the pollution index of the location",
                        "type": "Integer"
                    }
                },
                "format": "PollutionCheck(city_coordinates) -> pollution_index"
            },
            {
                "name": "TrafficStatus",
                "Description": "This API is to check the traffic status in the city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "traffic_status": {
                        "description": "the traffic status in the city",
                        "type": "String"
                    }
                },
                "format": "TrafficStatus(city_name) -> traffic_status"
            }
        ],
        "Query": "What is the pollution index for the city of New York?",
        "Label": "PollutionCheck(city_coordinates=CityDetail(city_name='New York'))",
        "Index": 531
    },
    {
        "APIs": [
            {
                "name": "MovieNameToID",
                "Description": "This API is to convert a movie name into a movie id.",
                "input_params": {
                    "name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_id": {
                        "description": "the id of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieNameToID(name) -> movie_id"
            },
            {
                "name": "MovieSchedule",
                "Description": "This API is to get the schedule of a movie.",
                "input_params": {
                    "movie_id": {
                        "description": "the id of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "schedule": {
                        "description": "the schedule of the movie",
                        "type": "String"
                    }
                },
                "format": "MovieSchedule(movie_id) -> schedule"
            },
            {
                "name": "ClosetCinema",
                "Description": "This API is to get the nearest cinema playing a movie at a given schedule.",
                "input_params": {
                    "schedule": {
                        "description": "the schedule of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cinema_location": {
                        "description": "the location of the nearest cinema",
                        "type": "String"
                    }
                },
                "format": "ClosetCinema(schedule) -> cinema_location"
            }
        ],
        "Query": "Where is the nearest cinema playing \"Avengers: Endgame\"?",
        "Label": "ClosetCinema(schedule=MovieSchedule(movie_id=MovieNameToID(name='Avengers: Endgame')))",
        "Index": 532
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API is to retrieve the name of a popular restaurant in a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location where the restaurant is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantSearch(location) -> restaurant_name"
            },
            {
                "name": "RestaurantReview",
                "Description": "This API is to provide the recent reviews of a specific restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "review_report": {
                        "description": "the recent reviews of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantReview(restaurant_name) -> review_report"
            },
            {
                "name": "CuisineRecommendations",
                "Description": "This API provides cuisine recommendations based on the reviews and the dietary preferences of the user.",
                "input_params": {
                    "review_report": {
                        "description": "the recent reviews of the restaurant",
                        "type": "String"
                    },
                    "dietary_preferences": {
                        "description": "the dietary preferences of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cuisine": {
                        "description": "the recommended cuisine",
                        "type": "String"
                    }
                },
                "format": "CuisineRecommendations(review_report, dietary_preferences) -> cuisine"
            }
        ],
        "Query": "What meal should I try at the popular restaurant in New York? I prefer vegetarian dishes.",
        "Label": "CuisineRecommendations(review_report=RestaurantReview(restaurant_name=RestaurantSearch(location='New York')), dietary_preferences='vegetarian')",
        "Index": 533
    },
    {
        "APIs": [
            {
                "name": "FlightSearch",
                "Description": "This API is to retrieve the available flight details to a specific destination on a specific date.",
                "input_params": {
                    "destination": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "departure_date": {
                        "description": "the departure date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight_details": {
                        "description": "the details of available flights",
                        "type": "List"
                    }
                },
                "format": "FlightSearch(destination, departure_date) -> flight_details"
            },
            {
                "name": "HotelBooking",
                "Description": "This API books a hotel in the specific location for the given dates.",
                "input_params": {
                    "destination": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotel_booking": {
                        "description": "the booking details of the hotel",
                        "type": "Object"
                    }
                },
                "format": "HotelBooking(destination, check_in_date, check_out_date) -> hotel_booking"
            },
            {
                "name": "ItineraryPlanner",
                "Description": "This API plans an itinerary based on the flight and hotel booking details.",
                "input_params": {
                    "flight_details": {
                        "description": "the details of available flights",
                        "type": "List"
                    },
                    "hotel_booking": {
                        "description": "the booking details of the hotel",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "itinerary": {
                        "description": "the planned itinerary",
                        "type": "Object"
                    }
                },
                "format": "ItineraryPlanner(flight_details, hotel_booking) -> itinerary"
            }
        ],
        "Query": "Can you plan my itinerary? I want to visit Paris on 15th June and return on 20th June.",
        "Label": "ItineraryPlanner(flight_details=FlightSearch(destination='Paris', departure_date='15th June'), hotel_booking=HotelBooking(destination='Paris', check_in_date='15th June', check_out_date='20th June'))",
        "Index": 534
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API is used to search for restaurants serving a specific type of cuisine in a particular city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "cuisine_type": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the restaurant serving the specified cuisine in the given city",
                        "type": "String"
                    }
                },
                "format": "RestaurantSearch(city, cuisine_type) -> restaurant"
            },
            {
                "name": "ReserveTable",
                "Description": "This API is used to make a reservation at a specified restaurant for a certain number of people at a given time.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "number_of_people": {
                        "description": "the number of people for the reservation",
                        "type": "Integer"
                    },
                    "time": {
                        "description": "the time for the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation_code": {
                        "description": "the code for the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveTable(restaurant, number_of_people, time) -> reservation_code"
            },
            {
                "name": "FoodMenuQuery",
                "Description": "This API is used to find out the food menu of a specific restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "food_menu": {
                        "description": "the menu of the specified restaurant",
                        "type": "String"
                    }
                },
                "format": "FoodMenuQuery(restaurant) -> food_menu"
            }
        ],
        "Query": "Can you make a reservation for 4 people at an Italian restaurant in New York at 7pm and tell me what's on the menu?",
        "Label": "ReserveTable(restaurant=RestaurantSearch(city='New York', cuisine_type='Italian'), number_of_people=4, time='7pm')\nFoodMenuQuery(restaurant=RestaurantSearch(city='New York', cuisine_type='Italian'))",
        "Index": 535
    },
    {
        "APIs": [
            {
                "name": "RestaurantByLocation",
                "Description": "This API provides restaurant information in a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location where the user is",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantData": {
                        "description": "the data of restaurants in the specified location",
                        "type": "JSON"
                    }
                },
                "format": "RestaurantByLocation(location) -> restaurantData"
            },
            {
                "name": "CuisineByRestaurant",
                "Description": "This API provides information on the cuisine offered by specific restaurants.",
                "input_params": {
                    "restaurantData": {
                        "description": "the data of restaurants",
                        "type": "JSON"
                    }
                },
                "output_params": {
                    "cuisineData": {
                        "description": "the data of cuisines offered by the restaurants",
                        "type": "JSON"
                    }
                },
                "format": "CuisineByRestaurant(restaurantData) -> cuisineData"
            },
            {
                "name": "FoodDelivery",
                "Description": "This API provides the estimated time of arrival for food delivery based on restaurant and cuisine details.",
                "input_params": {
                    "cuisineData": {
                        "description": "the data of cuisines",
                        "type": "JSON"
                    }
                },
                "output_params": {
                    "deliveryETA": {
                        "description": "the estimated time of arrival for food delivery",
                        "type": "Time"
                    }
                },
                "format": "FoodDelivery(cuisineData) -> deliveryETA"
            }
        ],
        "Query": "I am in New York, craving for Italian food, can you tell me how soon can I get my food delivered?",
        "Label": "FoodDelivery(cuisineData=CuisineByRestaurant(restaurantData=RestaurantByLocation(location='New York')))",
        "Index": 536
    },
    {
        "APIs": [
            {
                "name": "RestaurantByName",
                "Description": "This API provides detailed information about a specific restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_info": {
                        "description": "detailed information about the restaurant",
                        "type": "Object"
                    }
                },
                "format": "RestaurantByName(restaurant_name) -> restaurant_info"
            },
            {
                "name": "FoodByDietType",
                "Description": "This API provides a list of foods based on a specific diet type.",
                "input_params": {
                    "diet_type": {
                        "description": "the type of diet",
                        "type": "String"
                    }
                },
                "output_params": {
                    "food_list": {
                        "description": "a list of foods based on the diet type",
                        "type": "List"
                    }
                },
                "format": "FoodByDietType(diet_type) -> food_list"
            },
            {
                "name": "BestOrder",
                "Description": "This API provides the best order suggestion based on the restaurant and diet type.",
                "input_params": {
                    "restaurant_info": {
                        "description": "detailed information about the restaurant",
                        "type": "Object"
                    },
                    "food_list": {
                        "description": "a list of foods based on the diet type",
                        "type": "List"
                    }
                },
                "output_params": {
                    "order_info": {
                        "description": "the best order suggestion",
                        "type": "Object"
                    }
                },
                "format": "BestOrder(restaurant_info, food_list) -> order_info"
            }
        ],
        "Query": "I am a vegan and I am planning to dine in 'The Green Leaf' restaurant. Can you suggest me the best order?",
        "Label": "BestOrder(restaurant_info=RestaurantByName(restaurant_name='The Green Leaf'), food_list=FoodByDietType(diet_type='vegan'))",
        "Index": 537
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API provides the weather forecast of a city on a certain date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast for the city on the specified date",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather"
            },
            {
                "name": "RestaurantRecommendations",
                "Description": "This API provides recommendations for restaurants in a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurants": {
                        "description": "a list of recommended restaurants in the city",
                        "type": "List"
                    }
                },
                "format": "RestaurantRecommendations(city) -> restaurants"
            },
            {
                "name": "EventFinder",
                "Description": "This API provides information about events happening in a city on a certain date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the event search",
                        "type": "String"
                    }
                },
                "output_params": {
                    "events": {
                        "description": "a list of events happening in the city on the specified date",
                        "type": "List"
                    }
                },
                "format": "EventFinder(city, date) -> events"
            },
            {
                "name": "TripAdvisor",
                "Description": "This API helps in advising your trip by combining weather, restaurants, and events information.",
                "input_params": {
                    "weather": {
                        "description": "the weather forecast for the city on the specified date",
                        "type": "String"
                    },
                    "restaurants": {
                        "description": "a list of recommended restaurants in the city",
                        "type": "List"
                    },
                    "events": {
                        "description": "a list of events happening in the city on the specified date",
                        "type": "List"
                    }
                },
                "output_params": {
                    "trip_advice": {
                        "description": "advice for your trip based on the weather, restaurants, and events information",
                        "type": "String"
                    }
                },
                "format": "TripAdvisor(weather, restaurants, events) -> trip_advice"
            }
        ],
        "Query": "Can you suggest a plan for my trip to Rome next weekend?",
        "Label": "TripAdvisor(weather=WeatherForecast(city='Rome', date='next weekend'), restaurants=RestaurantRecommendations(city='Rome'), events=EventFinder(city='Rome', date='next weekend'))",
        "Index": 538
    },
    {
        "APIs": [
            {
                "name": "SearchMovie",
                "Description": "This API is to search a movie of a specified genre at a specific location.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location where the movie is searched",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_details": {
                        "description": "the details of the movie",
                        "type": "String"
                    }
                },
                "format": "SearchMovie(genre, location) -> movie_details"
            },
            {
                "name": "CheckShowtimes",
                "Description": "This API is to check the showtimes for a specified movie on a certain date.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which showtimes are checked",
                        "type": "String"
                    }
                },
                "output_params": {
                    "showtime_details": {
                        "description": "the details of the showtimes",
                        "type": "String"
                    }
                },
                "format": "CheckShowtimes(movie_name, date) -> showtime_details"
            },
            {
                "name": "BookTickets",
                "Description": "This API is to book a specified number of tickets for a movie at a certain showtime.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "showtime": {
                        "description": "the showtime for which tickets are booked",
                        "type": "String"
                    },
                    "number_of_tickets": {
                        "description": "the number of tickets to be booked",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookTickets(movie_name, showtime, number_of_tickets) -> booking_status"
            }
        ],
        "Query": "I want to book 2 tickets for a horror movie in Los Angeles this Friday at 9pm.",
        "Label": "BookTickets(movie_name=SearchMovie(genre='horror', location='Los Angeles'), showtime=CheckShowtimes(movie_name=SearchMovie(genre='horror', location='Los Angeles'), date='this Friday'), number_of_tickets=2)",
        "Index": 539
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast for a specific city on a specific date.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather forecast": {
                        "description": "the forecasted weather for the specified city and date",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city_name, date) -> weather forecast"
            },
            {
                "name": "FindEventCity",
                "Description": "This API is to find the city where a specific event will take place.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city name": {
                        "description": "the name of the city where the event will take place",
                        "type": "String"
                    }
                },
                "format": "FindEventCity(event_name) -> city name"
            },
            {
                "name": "FindEventDate",
                "Description": "This API is to find the date when a specific event will take place.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "date": {
                        "description": "the date when the event will take place",
                        "type": "Date"
                    }
                },
                "format": "FindEventDate(event_name) -> date"
            }
        ],
        "Query": "What is the weather forecast for the location of the Coachella festival on the day it starts?",
        "Label": "GetWeatherForecast(city_name=FindEventCity(event_name='Coachella'), date=FindEventDate(event_name='Coachella'))",
        "Index": 540
    },
    {
        "APIs": [
            {
                "name": "BookHotel",
                "Description": "This API is used to book a hotel room based on room type and reservation dates.",
                "input_params": {
                    "roomType": {
                        "description": "the type of the hotel room",
                        "type": "String"
                    },
                    "checkInDate": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "checkOutDate": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(roomType, checkInDate, checkOutDate) -> booking status"
            },
            {
                "name": "SearchHotel",
                "Description": "This API is used to find an appropriate hotel in a given city with a specific star rating.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "starRating": {
                        "description": "the star rating of the hotel",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "hotel name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "SearchHotel(city, starRating) -> hotel name"
            },
            {
                "name": "FindRoomType",
                "Description": "This API is used to find suitable room type in a hotel for specific number of guests.",
                "input_params": {
                    "hotelName": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "guestNumber": {
                        "description": "the number of guests",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "room type": {
                        "description": "the type of the hotel room",
                        "type": "String"
                    }
                },
                "format": "FindRoomType(hotelName, guestNumber) -> room type"
            }
        ],
        "Query": "I want to book a hotel in New York for three people from 10th May to 18th May, and I prefer a 4-star hotel.",
        "Label": "BookHotel(roomType=FindRoomType(hotelName=SearchHotel(city='New York', starRating=4), guestNumber=3), checkInDate='10th May', checkOutDate='18th May')",
        "Index": 541
    },
    {
        "APIs": [
            {
                "name": "CreateAppointment",
                "Description": "This API is used to create an appointment with a specific doctor for a specific patient at a certain date and time.",
                "input_params": {
                    "doctorId": {
                        "description": "the ID of the doctor",
                        "type": "Integer"
                    },
                    "patientId": {
                        "description": "the ID of the patient",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the appointment",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time of the appointment",
                        "type": "String"
                    }
                },
                "output_params": {
                    "appointment status": {
                        "description": "the status of the appointment",
                        "type": "String"
                    }
                },
                "format": "CreateAppointment(doctorId, patientId, date, time) -> appointment status"
            },
            {
                "name": "FindDoctor",
                "Description": "This API is used to find a doctor based on specialty.",
                "input_params": {
                    "specialty": {
                        "description": "the specialty of the doctor",
                        "type": "String"
                    }
                },
                "output_params": {
                    "doctor id": {
                        "description": "the ID of the doctor",
                        "type": "Integer"
                    }
                },
                "format": "FindDoctor(specialty) -> doctor id"
            },
            {
                "name": "FindPatient",
                "Description": "This API is used to find a patient based on patient name.",
                "input_params": {
                    "patientName": {
                        "description": "the name of the patient",
                        "type": "String"
                    }
                },
                "output_params": {
                    "patient id": {
                        "description": "the ID of the patient",
                        "type": "Integer"
                    }
                },
                "format": "FindPatient(patientName) -> patient id"
            }
        ],
        "Query": "I want to make an appointment with a cardiologist for John Doe on 15th June at 11:00 AM",
        "Label": "CreateAppointment(doctorId=FindDoctor(specialty='cardiologist'), patientId=FindPatient(patientName='John Doe'), date='15th June', time='11:00 AM')",
        "Index": 542
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get weather information of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_info": {
                        "description": "the weather information of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather_info"
            },
            {
                "name": "GetLunchRecommendation",
                "Description": "This API is to get lunch recommendation based on the weather.",
                "input_params": {
                    "weather_info": {
                        "description": "the weather information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "food_recommendation": {
                        "description": "the lunch recommendation",
                        "type": "String"
                    }
                },
                "format": "GetLunchRecommendation(weather_info) -> food_recommendation"
            },
            {
                "name": "OrderFood",
                "Description": "This API is to order specified food from a specified restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "food_item": {
                        "description": "the specified food item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(restaurant, food_item) -> order_status"
            }
        ],
        "Query": "I want to know the weather in New York and get a lunch recommendation based on the weather, and then I want to order that food from 'New York Pizza House'.",
        "Label": "OrderFood(restaurant='New York Pizza House', food_item=GetLunchRecommendation(weather_info=GetWeather(city='New York')))",
        "Index": 543
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API is to find a movie based on genre and location.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location where the movie is available",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovie(genre, location) -> movie_name"
            },
            {
                "name": "FindShowtime",
                "Description": "This API is to find the showtime for a specific movie in a given location on a specific date.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location where the movie is available",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which the showtime is required",
                        "type": "String"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "String"
                    }
                },
                "format": "FindShowtime(movie_name, location, date) -> showtime"
            },
            {
                "name": "BookMovieTicket",
                "Description": "This API is to book movie tickets for a specific movie at a specific showtime.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "String"
                    },
                    "number_of_tickets": {
                        "description": "the number of tickets to be booked",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking confirmation": {
                        "description": "the confirmation of the booking",
                        "type": "String"
                    }
                },
                "format": "BookMovieTicket(movie_name, showtime, number_of_tickets) -> booking confirmation"
            }
        ],
        "Query": "I want to watch a sci-fi movie in Los Angeles on June 10th for 3 people. Could you find a suitable movie and book the tickets?",
        "Label": "BookMovieTicket(movie_name=FindMovie(genre='sci-fi', location='Los Angeles'), showtime=FindShowtime(movie_name=FindMovie(genre='sci-fi', location='Los Angeles'), location='Los Angeles', date='June 10th'), number_of_tickets=3)",
        "Index": 544
    },
    {
        "APIs": [
            {
                "name": "FetchUserDetails",
                "Description": "This API is to fetch user details based on the user_id.",
                "input_params": {
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_details": {
                        "description": "the details of the user",
                        "type": "Object"
                    }
                },
                "format": "FetchUserDetails(user_id) -> user_details"
            },
            {
                "name": "GenerateOrderSummary",
                "Description": "This API is to generate a summary of the order using the order_id.",
                "input_params": {
                    "order_id": {
                        "description": "the ID of the order",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order_summary": {
                        "description": "the summary of the order",
                        "type": "Object"
                    }
                },
                "format": "GenerateOrderSummary(order_id) -> order_summary"
            },
            {
                "name": "EmailUser",
                "Description": "This API is to send an email to a user.",
                "input_params": {
                    "user_details": {
                        "description": "the details of the user",
                        "type": "Object"
                    },
                    "message": {
                        "description": "the message to be sent",
                        "type": "String"
                    }
                },
                "output_params": {
                    "email_status": {
                        "description": "the status of the email",
                        "type": "String"
                    }
                },
                "format": "EmailUser(user_details, message) -> email_status"
            }
        ],
        "Query": "I want to send an email with the order summary of order with id 'ord456' to the user with id 'usr789'.",
        "Label": "EmailUser(user_details=FetchUserDetails(user_id='usr789'), message=GenerateOrderSummary(order_id='ord456'))",
        "Index": 545
    },
    {
        "APIs": [
            {
                "name": "CityName2Weather",
                "Description": "This API is to convert city name to weather information.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather information of the city",
                        "type": "String"
                    }
                },
                "format": "CityName2Weather(city_name) -> weather"
            },
            {
                "name": "ActivityRecommend",
                "Description": "This API is to recommend activities based on city and weather.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "weather": {
                        "description": "the weather information of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity": {
                        "description": "the recommended activity",
                        "type": "String"
                    }
                },
                "format": "ActivityRecommend(city_name, weather) -> activity"
            },
            {
                "name": "ActivityBook",
                "Description": "This API is to book an activity for a user.",
                "input_params": {
                    "activity": {
                        "description": "the recommended activity",
                        "type": "String"
                    },
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "ActivityBook(activity, user_name) -> booking_status"
            }
        ],
        "Query": "I'm Bob, what can I do in Chicago today given the weather and could you arrange it for me?",
        "Label": "ActivityBook(activity=ActivityRecommend(city_name='Chicago', weather=CityName2Weather(city_name='Chicago')), user_name='Bob')",
        "Index": 546
    },
    {
        "APIs": [
            {
                "name": "CityName2Weather",
                "Description": "This API is to convert city name to weather information.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather information of the city",
                        "type": "String"
                    }
                },
                "format": "CityName2Weather(city_name) -> weather"
            },
            {
                "name": "ActivityRecommend",
                "Description": "This API is to recommend activities based on city and weather information.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "weather": {
                        "description": "the weather information of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity": {
                        "description": "the recommended activity",
                        "type": "String"
                    }
                },
                "format": "ActivityRecommend(city_name, weather) -> activity"
            },
            {
                "name": "ActivityBook",
                "Description": "This API is to book an activity for a user.",
                "input_params": {
                    "activity": {
                        "description": "the recommended activity",
                        "type": "String"
                    },
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "ActivityBook(activity, user_name) -> booking status"
            }
        ],
        "Query": "I'm Jake, what can I do in Los Angeles this evening considering the weather and could you secure it for me?",
        "Label": "ActivityBook(activity=ActivityRecommend(city_name='Los Angeles', weather=CityName2Weather(city_name='Los Angeles')), user_name='Jake')",
        "Index": 547
    },
    {
        "APIs": [
            {
                "name": "UserName2ID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(user_name) -> user_ID"
            },
            {
                "name": "RestaurantName2ID",
                "Description": "This API is to convert restaurant name to restaurant ID.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantName2ID(restaurant_name) -> restaurant_ID"
            },
            {
                "name": "FoodOrder",
                "Description": "This API is to order food.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    },
                    "food_item": {
                        "description": "the name of the food item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the food order",
                        "type": "String"
                    }
                },
                "format": "FoodOrder(user_ID, restaurant_ID, food_item) -> order_status"
            }
        ],
        "Query": "Hi, I'm Sarah. Can you please order a cheeseburger for me from McDonald's?",
        "Label": "FoodOrder(user_ID=UserName2ID(user_name='Sarah'), restaurant_ID=RestaurantName2ID(restaurant_name=\"McDonald's\"), food_item='cheeseburger')",
        "Index": 548
    },
    {
        "APIs": [
            {
                "name": "UserName2ID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(user_name) -> user_ID"
            },
            {
                "name": "RestaurantName2ID",
                "Description": "This API is to convert restaurant name to restaurant ID.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantName2ID(restaurant_name) -> restaurant_ID"
            },
            {
                "name": "FoodOrder",
                "Description": "This API is to order food from a restaurant.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    },
                    "food_item": {
                        "description": "the item of food to be ordered",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the food order",
                        "type": "String"
                    }
                },
                "format": "FoodOrder(user_ID, restaurant_ID, food_item) -> order_status"
            }
        ],
        "Query": "Hello, my name is Mike. Can you order some sushi for me from SushiYaa?",
        "Label": "FoodOrder(user_ID=UserName2ID(user_name='Mike'), restaurant_ID=RestaurantName2ID(restaurant_name='SushiYaa'), food_item='sushi')",
        "Index": 549
    },
    {
        "APIs": [
            {
                "name": "BookName2ISBN",
                "Description": "This API is to convert book name to book ISBN.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "isbn": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "format": "BookName2ISBN(book_name) -> isbn"
            },
            {
                "name": "Library2ID",
                "Description": "This API is to convert library name to library ID.",
                "input_params": {
                    "library_name": {
                        "description": "the name of the library",
                        "type": "String"
                    }
                },
                "output_params": {
                    "library_id": {
                        "description": "the ID of the library",
                        "type": "Integer"
                    }
                },
                "format": "Library2ID(library_name) -> library_id"
            },
            {
                "name": "UserName2ID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(user_name) -> user_ID"
            },
            {
                "name": "ReserveBook",
                "Description": "This API is to reserve a book at a library.",
                "input_params": {
                    "isbn": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    },
                    "library_id": {
                        "description": "the ID of the library",
                        "type": "Integer"
                    },
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveBook(isbn, library_id, user_ID) -> reservation_status"
            }
        ],
        "Query": "Hello, I am Ethan. Please, could you reserve \"Moby Dick\" for me at the Downtown Library?",
        "Label": "ReserveBook(isbn=BookName2ISBN(book_name='Moby Dick'), library_id=Library2ID(library_name='Downtown Library'), user_ID=UserName2ID(user_name='Ethan'))",
        "Index": 550
    },
    {
        "APIs": [
            {
                "name": "UserName2ID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(user_name) -> user_ID"
            },
            {
                "name": "RetrieveEmail",
                "Description": "This API is to retrieve the email address of a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "email": {
                        "description": "the email address of the user",
                        "type": "String"
                    }
                },
                "format": "RetrieveEmail(user_ID) -> email"
            },
            {
                "name": "SendEmail",
                "Description": "This API is to send an email to a user.",
                "input_params": {
                    "email": {
                        "description": "the email address of the user",
                        "type": "String"
                    },
                    "message": {
                        "description": "the content of the email",
                        "type": "String"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of the email sending",
                        "type": "String"
                    }
                },
                "format": "SendEmail(email, message) -> status"
            }
        ],
        "Query": "Send an email to user 'David' with the message 'Meeting rescheduled to 2PM on Friday'",
        "Label": "SendEmail(email=RetrieveEmail(user_ID=UserName2ID(user_name='David')), message='Meeting rescheduled to 2PM on Friday')",
        "Index": 551
    },
    {
        "APIs": [
            {
                "name": "DriverName2ID",
                "Description": "This API is to convert driver name to driver ID.",
                "input_params": {
                    "driver_name": {
                        "description": "the name of the driver",
                        "type": "String"
                    }
                },
                "output_params": {
                    "driver_ID": {
                        "description": "the ID of the driver",
                        "type": "Integer"
                    }
                },
                "format": "DriverName2ID(driver_name) -> driver_ID"
            },
            {
                "name": "CarName2ID",
                "Description": "This API is to convert car name to car ID.",
                "input_params": {
                    "car_name": {
                        "description": "the name of the car",
                        "type": "String"
                    }
                },
                "output_params": {
                    "car_ID": {
                        "description": "the ID of the car",
                        "type": "Integer"
                    }
                },
                "format": "CarName2ID(car_name) -> car_ID"
            },
            {
                "name": "BookCab",
                "Description": "This API is to book a cab.",
                "input_params": {
                    "driver_ID": {
                        "description": "the ID of the driver",
                        "type": "Integer"
                    },
                    "car_ID": {
                        "description": "the ID of the car",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookCab(driver_ID, car_ID) -> booking_status"
            }
        ],
        "Query": "Liam wants to book a cab with driver Richard and car named \"Eco Trip\"",
        "Label": "BookCab(driver_ID=DriverName2ID(driver_name='Richard'), car_ID=CarName2ID(car_name='Eco Trip'))",
        "Index": 552
    },
    {
        "APIs": [
            {
                "name": "DriverName2ID",
                "Description": "This API is to convert driver name to driver ID.",
                "input_params": {
                    "driver_name": {
                        "description": "the name of the driver",
                        "type": "String"
                    }
                },
                "output_params": {
                    "driver_ID": {
                        "description": "the ID of the driver",
                        "type": "Integer"
                    }
                },
                "format": "DriverName2ID(driver_name) -> driver_ID"
            },
            {
                "name": "CarName2ID",
                "Description": "This API is to convert car name to car ID.",
                "input_params": {
                    "car_name": {
                        "description": "the name of the car",
                        "type": "String"
                    }
                },
                "output_params": {
                    "car_ID": {
                        "description": "the ID of the car",
                        "type": "Integer"
                    }
                },
                "format": "CarName2ID(car_name) -> car_ID"
            },
            {
                "name": "BookCab",
                "Description": "This API is to book a cab.",
                "input_params": {
                    "driver_ID": {
                        "description": "the ID of the driver",
                        "type": "Integer"
                    },
                    "car_ID": {
                        "description": "the ID of the car",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookCab(driver_ID, car_ID) -> booking_status"
            }
        ],
        "Query": "Liam wants to book a cab with driver Richard and car named \"Eco Trip\"",
        "Label": "BookCab(driver_ID=DriverName2ID(driver_name='Richard'), car_ID=CarName2ID(car_name='Eco Trip'))",
        "Index": 553
    },
    {
        "APIs": [
            {
                "name": "Email2Username",
                "Description": "This API is to convert user email to username.",
                "input_params": {
                    "email": {
                        "description": "the email of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_name": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "format": "Email2Username(email) -> user_name"
            },
            {
                "name": "ISBN2Title",
                "Description": "This API is to convert book ISBN to book title.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "format": "ISBN2Title(ISBN) -> book_title"
            },
            {
                "name": "AddBookToReadingList",
                "Description": "This API is to add a book to the reading list of a user.",
                "input_params": {
                    "user_name": {
                        "description": "the username of the user",
                        "type": "String"
                    },
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of adding the book to the reading list",
                        "type": "String"
                    }
                },
                "format": "AddBookToReadingList(user_name, book_title) -> status"
            }
        ],
        "Query": "Could you add the book having ISBN '978-1-4028-9462-6' to the reading list of the user with the email 'sarah.white@hotmail.com'?",
        "Label": "AddBookToReadingList(user_name=Email2Username(email='sarah.white@hotmail.com'), book_title=ISBN2Title(ISBN='978-1-4028-9462-6'))",
        "Index": 554
    },
    {
        "APIs": [
            {
                "name": "Email2Username",
                "Description": "This API is to convert user email to username.",
                "input_params": {
                    "email": {
                        "description": "the email of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_name": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "format": "Email2Username(email) -> user_name"
            },
            {
                "name": "ISBN2Title",
                "Description": "This API is to convert book ISBN to book title.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "format": "ISBN2Title(ISBN) -> book_title"
            },
            {
                "name": "AddBookToReadingList",
                "Description": "This API is to add a book to a user's reading list.",
                "input_params": {
                    "user_name": {
                        "description": "the username of the user",
                        "type": "String"
                    },
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of adding the book to the reading list",
                        "type": "String"
                    }
                },
                "format": "AddBookToReadingList(user_name, book_title) -> status"
            }
        ],
        "Query": "Can you include the book with ISBN '978-0-471-64877-3' to the reading list of the user with the email 'mike.jones@yahoo.com'?",
        "Label": "AddBookToReadingList(user_name=Email2Username(email='mike.jones@yahoo.com'), book_title=ISBN2Title(ISBN='978-0-471-64877-3'))",
        "Index": 555
    },
    {
        "APIs": [
            {
                "name": "Email2Username",
                "Description": "This API is to convert user email to username.",
                "input_params": {
                    "email": {
                        "description": "the email of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_name": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "format": "Email2Username(email) -> user_name"
            },
            {
                "name": "ISBN2Title",
                "Description": "This API is to convert book ISBN to book title.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "format": "ISBN2Title(ISBN) -> book_title"
            },
            {
                "name": "AddBookToReadingList",
                "Description": "This API is to add a book to a user's reading list.",
                "input_params": {
                    "user_name": {
                        "description": "the username of the user",
                        "type": "String"
                    },
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of adding the book to the reading list",
                        "type": "String"
                    }
                },
                "format": "AddBookToReadingList(user_name, book_title) -> status"
            }
        ],
        "Query": "Could you place the book with ISBN '978-0-387-31073-2' to the reading list of the user with the email 'jane.smith@outlook.com'?",
        "Label": "AddBookToReadingList(user_name=Email2Username(email='jane.smith@outlook.com'), book_title=ISBN2Title(ISBN='978-0-387-31073-2'))",
        "Index": 556
    },
    {
        "APIs": [
            {
                "name": "Email2Username",
                "Description": "This API is to convert user email to username.",
                "input_params": {
                    "email": {
                        "description": "the email of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_name": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "format": "Email2Username(email) -> user_name"
            },
            {
                "name": "ISBN2Title",
                "Description": "This API is to convert book ISBN to book title.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "format": "ISBN2Title(ISBN) -> book_title"
            },
            {
                "name": "AddBookToReadingList",
                "Description": "This API is to add a book to a user's reading list.",
                "input_params": {
                    "user_name": {
                        "description": "the username of the user",
                        "type": "String"
                    },
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of adding the book to the reading list",
                        "type": "String"
                    }
                },
                "format": "AddBookToReadingList(user_name, book_title) -> status"
            }
        ],
        "Query": "Could you place the book with ISBN '978-0-387-31073-2' to the reading list of the user with the email 'jane.smith@outlook.com'?",
        "Label": "AddBookToReadingList(user_name=Email2Username(email='jane.smith@outlook.com'), book_title=ISBN2Title(ISBN='978-0-387-31073-2'))",
        "Index": 557
    },
    {
        "APIs": [
            {
                "name": "Email2Username",
                "Description": "This API is to convert user email to username.",
                "input_params": {
                    "email": {
                        "description": "the email of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_name": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "format": "Email2Username(email) -> user_name"
            },
            {
                "name": "ISBN2Title",
                "Description": "This API is to convert ISBN to book title.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "format": "ISBN2Title(ISBN) -> book_title"
            },
            {
                "name": "AddBookToReadingList",
                "Description": "This API is to add a book to the reading list of a user.",
                "input_params": {
                    "user_name": {
                        "description": "the username of the user",
                        "type": "String"
                    },
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of adding the book to the reading list",
                        "type": "String"
                    }
                },
                "format": "AddBookToReadingList(user_name, book_title) -> status"
            }
        ],
        "Query": "Could you insert the book with ISBN '978-0-13-110362-7' to the reading list of the user with the email 'linda.wilson@gmail.com'?",
        "Label": "AddBookToReadingList(user_name=Email2Username(email='linda.wilson@gmail.com'), book_title=ISBN2Title(ISBN='978-0-13-110362-7'))",
        "Index": 558
    },
    {
        "APIs": [
            {
                "name": "AuthorName2ID",
                "Description": "This API is to convert author name to author ID.",
                "input_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "format": "AuthorName2ID(author_name) -> author_ID"
            },
            {
                "name": "BookTitle2ID",
                "Description": "This API is to convert book title to book ID.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookTitle2ID(book_title) -> book_ID"
            },
            {
                "name": "AddBookToAuthor",
                "Description": "This API is to add a book to an author's library.",
                "input_params": {
                    "author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "library_status": {
                        "description": "the status of adding the book to the library",
                        "type": "String"
                    }
                },
                "format": "AddBookToAuthor(author_ID, book_ID) -> library_status"
            }
        ],
        "Query": "Can you add the book '1984' to George Orwell's library?",
        "Label": "AddBookToAuthor(author_ID=AuthorName2ID(author_name='George Orwell'), book_ID=BookTitle2ID(book_title='1984'))",
        "Index": 559
    },
    {
        "APIs": [
            {
                "name": "AuthorName2ID",
                "Description": "This API is to convert author name to author ID.",
                "input_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "format": "AuthorName2ID(author_name) -> author_ID"
            },
            {
                "name": "BookTitle2ID",
                "Description": "This API is to convert book title to book ID.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookTitle2ID(book_title) -> book_ID"
            },
            {
                "name": "AddBookToAuthor",
                "Description": "This API is to add a book to an author's library.",
                "input_params": {
                    "author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "library_status": {
                        "description": "the status of adding the book to the library",
                        "type": "String"
                    }
                },
                "format": "AddBookToAuthor(author_ID, book_ID) -> library_status"
            }
        ],
        "Query": "Can you add the book 'To Kill a Mockingbird' to Harper Lee's library?",
        "Label": "AddBookToAuthor(author_ID=AuthorName2ID(author_name='Harper Lee'), book_ID=BookTitle2ID(book_title='To Kill a Mockingbird'))",
        "Index": 560
    },
    {
        "APIs": [
            {
                "name": "AuthorName2ID",
                "Description": "This API is to convert author name to author ID.",
                "input_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "format": "AuthorName2ID(author_name) -> author_ID"
            },
            {
                "name": "BookTitle2ID",
                "Description": "This API is to convert book title to book ID.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookTitle2ID(book_title) -> book_ID"
            },
            {
                "name": "AddBookToAuthor",
                "Description": "This API is to add a book to an author's library.",
                "input_params": {
                    "author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "library_status": {
                        "description": "the status of adding the book to the library",
                        "type": "String"
                    }
                },
                "format": "AddBookToAuthor(author_ID, book_ID) -> library_status"
            }
        ],
        "Query": "Can you add the book 'Pride and Prejudice' to Jane Austen's library?",
        "Label": "AddBookToAuthor(author_ID=AuthorName2ID(author_name='Jane Austen'), book_ID=BookTitle2ID(book_title='Pride and Prejudice'))",
        "Index": 561
    },
    {
        "APIs": [
            {
                "name": "AuthorName2ID",
                "Description": "This API is to convert author name to author ID.",
                "input_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "format": "AuthorName2ID(author_name) -> author_ID"
            },
            {
                "name": "BookTitle2ID",
                "Description": "This API is to convert book title to book ID.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookTitle2ID(book_title) -> book_ID"
            },
            {
                "name": "AddBookToAuthor",
                "Description": "This API is to add a book to an author's library.",
                "input_params": {
                    "author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of the operation",
                        "type": "String"
                    }
                },
                "format": "AddBookToAuthor(author_ID, book_ID) -> status"
            }
        ],
        "Query": "Can you add the book 'Pride and Prejudice' to Jane Austen's library?",
        "Label": "AddBookToAuthor(author_ID=AuthorName2ID(author_name='Jane Austen'), book_ID=BookTitle2ID(book_title='Pride and Prejudice'))",
        "Index": 562
    },
    {
        "APIs": [
            {
                "name": "AuthorName2ID",
                "Description": "This API is to convert author name to author ID.",
                "input_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "format": "AuthorName2ID(author_name) -> author_ID"
            },
            {
                "name": "BookTitle2ID",
                "Description": "This API is to convert book title to book ID.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookTitle2ID(book_title) -> book_ID"
            },
            {
                "name": "AddBookToAuthor",
                "Description": "This API is to add a book to an author's library.",
                "input_params": {
                    "author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of adding the book to the author's library",
                        "type": "String"
                    }
                },
                "format": "AddBookToAuthor(author_ID, book_ID) -> status"
            }
        ],
        "Query": "Can you add the book 'The Great Gatsby' to F. Scott Fitzgerald's library?",
        "Label": "AddBookToAuthor(author_ID=AuthorName2ID(author_name='F. Scott Fitzgerald'), book_ID=BookTitle2ID(book_title='The Great Gatsby'))",
        "Index": 563
    },
    {
        "APIs": [
            {
                "name": "CityName2ID",
                "Description": "This API is to convert city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityName2ID(city_name) -> city_ID"
            },
            {
                "name": "RestaurantName2ID",
                "Description": "This API is to convert restaurant name to restaurant ID.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantName2ID(restaurant_name) -> restaurant_ID"
            },
            {
                "name": "AddRestaurantToCity",
                "Description": "This API is to add a restaurant to a city's list.",
                "input_params": {
                    "city_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of adding the restaurant to the city's list",
                        "type": "String"
                    }
                },
                "format": "AddRestaurantToCity(city_ID, restaurant_ID) -> status"
            }
        ],
        "Query": "Can you add the restaurant 'Starbucks' to Los Angeles's list?",
        "Label": "AddRestaurantToCity(city_ID=CityName2ID(city_name='Los Angeles'), restaurant_ID=RestaurantName2ID(restaurant_name='Starbucks'))",
        "Index": 564
    },
    {
        "APIs": [
            {
                "name": "CityName2ID",
                "Description": "This API is to convert city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityName2ID(city_name) -> city_ID"
            },
            {
                "name": "RestaurantName2ID",
                "Description": "This API is to convert restaurant name to restaurant ID.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantName2ID(restaurant_name) -> restaurant_ID"
            },
            {
                "name": "AddRestaurantToCity",
                "Description": "This API is to add a restaurant to a city's list.",
                "input_params": {
                    "city_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of adding the restaurant to the city's list",
                        "type": "String"
                    }
                },
                "format": "AddRestaurantToCity(city_ID, restaurant_ID) -> status"
            }
        ],
        "Query": "Can you add the restaurant 'Taco Bell' to Dallas's list?",
        "Label": "AddRestaurantToCity(city_ID=CityName2ID(city_name='Dallas'), restaurant_ID=RestaurantName2ID(restaurant_name='Taco Bell'))",
        "Index": 565
    },
    {
        "APIs": [
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "StoreName2ID",
                "Description": "This API is to convert store name to store ID.",
                "input_params": {
                    "store_name": {
                        "description": "the name of the store",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_ID": {
                        "description": "the ID of the store",
                        "type": "Integer"
                    }
                },
                "format": "StoreName2ID(store_name) -> store_ID"
            },
            {
                "name": "AddProductToStore",
                "Description": "This API is to add a product to a store.",
                "input_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "store_ID": {
                        "description": "the ID of the store",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the product to add",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of the operation",
                        "type": "String"
                    }
                },
                "format": "AddProductToStore(product_ID, store_ID, quantity) -> status"
            }
        ],
        "Query": "Can you add 15 units of 'Samsung Galaxy S21' to the 'Gadget Planet' store?",
        "Label": "AddProductToStore(product_ID=ProductName2ID(product_name='Samsung Galaxy S21'), store_ID=StoreName2ID(store_name='Gadget Planet'), quantity=15)",
        "Index": 566
    },
    {
        "APIs": [
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "StoreName2ID",
                "Description": "This API is to convert store name to store ID.",
                "input_params": {
                    "store_name": {
                        "description": "the name of the store",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_ID": {
                        "description": "the ID of the store",
                        "type": "Integer"
                    }
                },
                "format": "StoreName2ID(store_name) -> store_ID"
            },
            {
                "name": "AddProductToStore",
                "Description": "This API is to add a product to a store.",
                "input_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "store_ID": {
                        "description": "the ID of the store",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the product to add",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of the operation",
                        "type": "String"
                    }
                },
                "format": "AddProductToStore(product_ID, store_ID, quantity) -> status"
            }
        ],
        "Query": "Can you add 30 units of 'Dell Inspiron 15' to the 'Laptop Hub' store?",
        "Label": "AddProductToStore(product_ID=ProductName2ID(product_name='Dell Inspiron 15'), store_ID=StoreName2ID(store_name='Laptop Hub'), quantity=30)",
        "Index": 567
    },
    {
        "APIs": [
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "StoreName2ID",
                "Description": "This API is to convert store name to store ID.",
                "input_params": {
                    "store_name": {
                        "description": "the name of the store",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_ID": {
                        "description": "the ID of the store",
                        "type": "Integer"
                    }
                },
                "format": "StoreName2ID(store_name) -> store_ID"
            },
            {
                "name": "AddProductToStore",
                "Description": "This API is to add a product to a store.",
                "input_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "store_ID": {
                        "description": "the ID of the store",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the product to be added",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of the operation",
                        "type": "String"
                    }
                },
                "format": "AddProductToStore(product_ID, store_ID, quantity) -> status"
            }
        ],
        "Query": "Can you add 25 units of 'Sony Bravia 55 Inch Smart TV' to the 'Electronic Zone' store?",
        "Label": "AddProductToStore(product_ID=ProductName2ID(product_name='Sony Bravia 55 Inch Smart TV'), store_ID=StoreName2ID(store_name='Electronic Zone'), quantity=25)",
        "Index": 568
    },
    {
        "APIs": [
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "StoreName2ID",
                "Description": "This API is to convert store name to store ID.",
                "input_params": {
                    "store_name": {
                        "description": "the name of the store",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_ID": {
                        "description": "the ID of the store",
                        "type": "Integer"
                    }
                },
                "format": "StoreName2ID(store_name) -> store_ID"
            },
            {
                "name": "AddProductToStore",
                "Description": "This API is to add a product to a store.",
                "input_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "store_ID": {
                        "description": "the ID of the store",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the product to be added",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of the operation",
                        "type": "String"
                    }
                },
                "format": "AddProductToStore(product_ID, store_ID, quantity) -> status"
            }
        ],
        "Query": "Can you add 25 units of 'Sony Bravia 55 Inch Smart TV' to the 'Electronic Zone' store?",
        "Label": "AddProductToStore(product_ID=ProductName2ID(product_name='Sony Bravia 55 Inch Smart TV'), store_ID=StoreName2ID(store_name='Electronic Zone'), quantity=25)",
        "Index": 569
    },
    {
        "APIs": [
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "StoreName2ID",
                "Description": "This API is to convert store name to store ID.",
                "input_params": {
                    "store_name": {
                        "description": "the name of the store",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_ID": {
                        "description": "the ID of the store",
                        "type": "Integer"
                    }
                },
                "format": "StoreName2ID(store_name) -> store_ID"
            },
            {
                "name": "AddProductToStore",
                "Description": "This API is to add a product to a store.",
                "input_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "store_ID": {
                        "description": "the ID of the store",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the product to be added",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of the operation",
                        "type": "String"
                    }
                },
                "format": "AddProductToStore(product_ID, store_ID, quantity) -> status"
            }
        ],
        "Query": "Can you add 50 units of 'Canon EOS 90D DSLR Camera' to the 'Photography World' store?",
        "Label": "AddProductToStore(product_ID=ProductName2ID(product_name='Canon EOS 90D DSLR Camera'), store_ID=StoreName2ID(store_name='Photography World'), quantity=50)",
        "Index": 570
    },
    {
        "APIs": [
            {
                "name": "BookTitle2ISBN",
                "Description": "This API is to convert book title to book ISBN.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "format": "BookTitle2ISBN(book_title) -> ISBN"
            },
            {
                "name": "BuyBook",
                "Description": "This API is to purchase a book for a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "String"
                    },
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "BuyBook(user_ID, ISBN) -> purchase_status"
            }
        ],
        "Query": "Can you purchase the book 'To Kill a Mockingbird' for user456?",
        "Label": "BuyBook(user_ID='user456', ISBN=BookTitle2ISBN(book_title='To Kill a Mockingbird'))",
        "Index": 571
    },
    {
        "APIs": [
            {
                "name": "BookTitle2ISBN",
                "Description": "This API is to convert book title to book ISBN.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "format": "BookTitle2ISBN(book_title) -> ISBN"
            },
            {
                "name": "BuyBook",
                "Description": "This API is to acquire a book for a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "String"
                    },
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "acquisition_status": {
                        "description": "the status of the book acquisition",
                        "type": "String"
                    }
                },
                "format": "BuyBook(user_ID, ISBN) -> acquisition_status"
            }
        ],
        "Query": "Can you acquire the book 'Pride and Prejudice' for user789?",
        "Label": "BuyBook(user_ID='user789', ISBN=BookTitle2ISBN(book_title='Pride and Prejudice'))",
        "Index": 572
    },
    {
        "APIs": [
            {
                "name": "BookTitle2ISBN",
                "Description": "This API is to convert book title to book ISBN.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "format": "BookTitle2ISBN(book_title) -> ISBN"
            },
            {
                "name": "BuyBook",
                "Description": "This API is to buy a book for a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "String"
                    },
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "BuyBook(user_ID, ISBN) -> purchase_status"
            }
        ],
        "Query": "Can you obtain the book '1984' for user112?",
        "Label": "BuyBook(user_ID='user112', ISBN=BookTitle2ISBN(book_title='1984'))",
        "Index": 573
    },
    {
        "APIs": [
            {
                "name": "BookTitle2ISBN",
                "Description": "This API is to convert book title to book ISBN.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "format": "BookTitle2ISBN(book_title) -> ISBN"
            },
            {
                "name": "BuyBook",
                "Description": "This API is to buy a book for a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "String"
                    },
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "BuyBook(user_ID, ISBN) -> purchase_status"
            }
        ],
        "Query": "Can you obtain the book '1984' for user112?",
        "Label": "BuyBook(user_ID='user112', ISBN=BookTitle2ISBN(book_title='1984'))",
        "Index": 574
    },
    {
        "APIs": [
            {
                "name": "BookTitle2ISBN",
                "Description": "This API is to convert book title to book ISBN.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "format": "BookTitle2ISBN(book_title) -> ISBN"
            },
            {
                "name": "BuyBook",
                "Description": "This API is to procure a book for a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "String"
                    },
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "procurement_status": {
                        "description": "the status of the procurement",
                        "type": "String"
                    }
                },
                "format": "BuyBook(user_ID, ISBN) -> procurement_status"
            }
        ],
        "Query": "Can you procure the book 'The Catcher in the Rye' for user556?",
        "Label": "BuyBook(user_ID='user556', ISBN=BookTitle2ISBN(book_title='The Catcher in the Rye'))",
        "Index": 575
    },
    {
        "APIs": [
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "String"
                    },
                    "flight_code": {
                        "description": "the code of the flight destination",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(user_ID,flight_code,date) -> booking status"
            },
            {
                "name": "FlightDestination2Code",
                "Description": "This API is to convert flight destination name to flight code.",
                "input_params": {
                    "destination": {
                        "description": "the name of the flight destination",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_code": {
                        "description": "the code of the flight destination",
                        "type": "String"
                    }
                },
                "format": "FlightDestination2Code(destination) -> flight_code"
            }
        ],
        "Query": "Can you book a flight to New York for user123 on May 5th, 2022?",
        "Label": "BookFlight(user_ID='user123',flight_code=FlightDestination2Code(destination='New York'), date='May 5th, 2022')",
        "Index": 576
    },
    {
        "APIs": [
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "String"
                    },
                    "flight_code": {
                        "description": "the code of the flight destination",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(user_ID, flight_code, date) -> booking status"
            },
            {
                "name": "FlightDestination2Code",
                "Description": "This API is to convert flight destination name to flight code.",
                "input_params": {
                    "destination": {
                        "description": "the name of the flight destination",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_code": {
                        "description": "the code of the flight destination",
                        "type": "String"
                    }
                },
                "format": "FlightDestination2Code(destination) -> flight_code"
            }
        ],
        "Query": "Can you book a flight to London for user789 on July 7th, 2022?",
        "Label": "BookFlight(user_ID='user789', flight_code=FlightDestination2Code(destination='London'), date='July 7th, 2022')",
        "Index": 577
    },
    {
        "APIs": [
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "String"
                    },
                    "flight_code": {
                        "description": "the code of the flight destination",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(user_ID,flight_code,date) -> booking status"
            },
            {
                "name": "FlightDestination2Code",
                "Description": "This API is to convert flight destination to flight code.",
                "input_params": {
                    "destination": {
                        "description": "the name of the flight destination",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_code": {
                        "description": "the code of the flight destination",
                        "type": "String"
                    }
                },
                "format": "FlightDestination2Code(destination) -> flight_code"
            }
        ],
        "Query": "Can you book a flight to Tokyo for user321 on September 9th, 2022?",
        "Label": "BookFlight(user_ID='user321',flight_code=FlightDestination2Code(destination='Tokyo'), date='September 9th, 2022')",
        "Index": 578
    },
    {
        "APIs": [
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "String"
                    },
                    "flight_code": {
                        "description": "the code of the flight",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(user_ID, flight_code, date) -> booking status"
            },
            {
                "name": "FlightDestination2Code",
                "Description": "This API is to convert flight destination to flight code.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_code": {
                        "description": "the code of the flight",
                        "type": "String"
                    }
                },
                "format": "FlightDestination2Code(destination) -> flight_code"
            }
        ],
        "Query": "Can you book a flight to Tokyo for user321 on September 9th, 2022?",
        "Label": "BookFlight(user_ID='user321', flight_code=FlightDestination2Code(destination='Tokyo'), date='September 9th, 2022')",
        "Index": 579
    },
    {
        "APIs": [
            {
                "name": "FlightCode2ID",
                "Description": "This API is to convert flight code to flight ID.",
                "input_params": {
                    "Flight_code": {
                        "description": "the flight code",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FlightCode2ID(Flight_code) -> Flight_ID"
            },
            {
                "name": "DateConversion",
                "Description": "This API is to convert date string to date format.",
                "input_params": {
                    "date": {
                        "description": "the date string",
                        "type": "String"
                    }
                },
                "output_params": {
                    "date": {
                        "description": "the converted date",
                        "type": "Date"
                    }
                },
                "format": "DateConversion(date) -> date"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "Flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(Flight_ID, date) -> booking status"
            }
        ],
        "Query": "Can you book a flight for AF 7890 on March 3rd?",
        "Label": "BookFlight(Flight_ID=FlightCode2ID(Flight_code='AF 7890'), date=DateConversion(date='March 3rd'))",
        "Index": 580
    },
    {
        "APIs": [
            {
                "name": "FlightCode2ID",
                "Description": "This API is to convert flight code to flight ID.",
                "input_params": {
                    "Flight_code": {
                        "description": "the flight code",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FlightCode2ID(Flight_code) -> Flight_ID"
            },
            {
                "name": "DateConversion",
                "Description": "This API is to convert date string to date format.",
                "input_params": {
                    "date": {
                        "description": "the date string",
                        "type": "String"
                    }
                },
                "output_params": {
                    "date": {
                        "description": "the converted date",
                        "type": "Date"
                    }
                },
                "format": "DateConversion(date) -> date"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "Flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(Flight_ID, date) -> booking status"
            }
        ],
        "Query": "Can you book a flight for AA 5678 on April 10th?",
        "Label": "BookFlight(Flight_ID=FlightCode2ID(Flight_code='AA 5678'), date=DateConversion(date='April 10th'))",
        "Index": 581
    },
    {
        "APIs": [
            {
                "name": "FlightCode2ID",
                "Description": "This API is to convert flight code to flight ID.",
                "input_params": {
                    "Flight_code": {
                        "description": "the flight code",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FlightCode2ID(Flight_code) -> Flight_ID"
            },
            {
                "name": "DateConversion",
                "Description": "This API is to convert date string to date format.",
                "input_params": {
                    "date": {
                        "description": "the date string",
                        "type": "String"
                    }
                },
                "output_params": {
                    "date": {
                        "description": "the converted date",
                        "type": "Date"
                    }
                },
                "format": "DateConversion(date) -> date"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "Flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(Flight_ID, date) -> booking status"
            }
        ],
        "Query": "Can you book a flight for LH 1112 on July 15th?",
        "Label": "BookFlight(Flight_ID=FlightCode2ID(Flight_code='LH 1112'), date=DateConversion(date='July 15th'))",
        "Index": 582
    },
    {
        "APIs": [
            {
                "name": "FlightCode2ID",
                "Description": "This API is to convert flight code to flight ID.",
                "input_params": {
                    "Flight_code": {
                        "description": "the code of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FlightCode2ID(Flight_code) -> Flight_ID"
            },
            {
                "name": "DateConversion",
                "Description": "This API is to convert date string to date format.",
                "input_params": {
                    "date": {
                        "description": "the date string",
                        "type": "String"
                    }
                },
                "output_params": {
                    "date": {
                        "description": "the converted date",
                        "type": "Date"
                    }
                },
                "format": "DateConversion(date) -> date"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "Flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(Flight_ID, date) -> booking status"
            }
        ],
        "Query": "Can you book a flight for LH 1112 on July 15th?",
        "Label": "BookFlight(Flight_ID=FlightCode2ID(Flight_code='LH 1112'), date=DateConversion(date='July 15th'))",
        "Index": 583
    },
    {
        "APIs": [
            {
                "name": "FlightCode2ID",
                "Description": "This API is to convert flight code to flight ID.",
                "input_params": {
                    "Flight_code": {
                        "description": "the flight code",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FlightCode2ID(Flight_code) -> Flight_ID"
            },
            {
                "name": "DateConversion",
                "Description": "This API is to convert date string to date format.",
                "input_params": {
                    "date": {
                        "description": "the date string",
                        "type": "String"
                    }
                },
                "output_params": {
                    "date": {
                        "description": "the converted date",
                        "type": "Date"
                    }
                },
                "format": "DateConversion(date) -> date"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "Flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(Flight_ID, date) -> booking status"
            }
        ],
        "Query": "Can you book a flight for DL 4545 on November 1st?",
        "Label": "BookFlight(Flight_ID=FlightCode2ID(Flight_code='DL 4545'), date=DateConversion(date='November 1st'))",
        "Index": 584
    },
    {
        "APIs": [
            {
                "name": "HotelName2ID",
                "Description": "This API is to convert hotel name to hotel ID.",
                "input_params": {
                    "Hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    }
                },
                "format": "HotelName2ID(Hotel_name) -> Hotel_ID"
            },
            {
                "name": "RoomType2ID",
                "Description": "This API is to convert room type to room ID.",
                "input_params": {
                    "Room_type": {
                        "description": "the type of the room",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Room_ID": {
                        "description": "the ID of the room",
                        "type": "Integer"
                    }
                },
                "format": "RoomType2ID(Room_type) -> Room_ID"
            },
            {
                "name": "CheckAvailability",
                "Description": "This API is to check the availability of a room.",
                "input_params": {
                    "Hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    },
                    "Room_ID": {
                        "description": "the ID of the room",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date to check availability",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "availability_status": {
                        "description": "the availability status of the room",
                        "type": "String"
                    }
                },
                "format": "CheckAvailability(Hotel_ID, Room_ID, date) -> availability_status"
            }
        ],
        "Query": "Can you verify if a Suite is available at Marriott Hotel on 1st July?",
        "Label": "CheckAvailability(Hotel_ID=HotelName2ID(Hotel_name='Marriott Hotel'), Room_ID=RoomType2ID(Room_type='Suite'), date='1st July')",
        "Index": 585
    },
    {
        "APIs": [
            {
                "name": "HotelName2ID",
                "Description": "This API is to convert hotel name to hotel ID.",
                "input_params": {
                    "Hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    }
                },
                "format": "HotelName2ID(Hotel_name) -> Hotel_ID"
            },
            {
                "name": "RoomType2ID",
                "Description": "This API is to convert room type to room ID.",
                "input_params": {
                    "Room_type": {
                        "description": "the type of the room",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Room_ID": {
                        "description": "the ID of the room",
                        "type": "Integer"
                    }
                },
                "format": "RoomType2ID(Room_type) -> Room_ID"
            },
            {
                "name": "CheckAvailability",
                "Description": "This API is to check room availability.",
                "input_params": {
                    "Hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    },
                    "Room_ID": {
                        "description": "the ID of the room",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date to check availability",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "availability_status": {
                        "description": "the availability status of the room",
                        "type": "String"
                    }
                },
                "format": "CheckAvailability(Hotel_ID, Room_ID, date) -> availability_status"
            }
        ],
        "Query": "Could you check if a Single Room is available in the Hyatt Hotel on 25th December?",
        "Label": "CheckAvailability(Hotel_ID=HotelName2ID(Hotel_name='Hyatt Hotel'), Room_ID=RoomType2ID(Room_type='Single Room'), date='25th December')",
        "Index": 586
    },
    {
        "APIs": [
            {
                "name": "HotelName2ID",
                "Description": "This API is to convert hotel name to hotel ID.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    }
                },
                "format": "HotelName2ID(hotel_name) -> hotel_ID"
            },
            {
                "name": "RoomType2ID",
                "Description": "This API is to convert room type to room ID.",
                "input_params": {
                    "room_type": {
                        "description": "the type of the room",
                        "type": "String"
                    }
                },
                "output_params": {
                    "room_ID": {
                        "description": "the ID of the room",
                        "type": "Integer"
                    }
                },
                "format": "RoomType2ID(room_type) -> room_ID"
            },
            {
                "name": "CheckAvailability",
                "Description": "This API is to check the availability of a room.",
                "input_params": {
                    "Hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    },
                    "Room_ID": {
                        "description": "the ID of the room",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date to check availability",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "availability_status": {
                        "description": "the availability status of the room",
                        "type": "String"
                    }
                },
                "format": "CheckAvailability(Hotel_ID, Room_ID, date) -> availability_status"
            }
        ],
        "Query": "Can I find out if a Double Room is free at Four Seasons Hotel on 30th November?",
        "Label": "CheckAvailability(Hotel_ID=HotelName2ID(Hotel_name='Four Seasons Hotel'), Room_ID=RoomType2ID(Room_type='Double Room'), date='30th November')",
        "Index": 587
    },
    {
        "APIs": [
            {
                "name": "HotelName2ID",
                "Description": "This API is to convert hotel name to hotel ID.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    }
                },
                "format": "HotelName2ID(hotel_name) -> hotel_ID"
            },
            {
                "name": "RoomType2ID",
                "Description": "This API is to convert room type to room ID.",
                "input_params": {
                    "room_type": {
                        "description": "the type of the room",
                        "type": "String"
                    }
                },
                "output_params": {
                    "room_ID": {
                        "description": "the ID of the room",
                        "type": "Integer"
                    }
                },
                "format": "RoomType2ID(room_type) -> room_ID"
            },
            {
                "name": "CheckAvailability",
                "Description": "This API is to check the availability of a room at a hotel on a specific date.",
                "input_params": {
                    "Hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    },
                    "Room_ID": {
                        "description": "the ID of the room",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date to check availability",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "availability_status": {
                        "description": "the availability status of the room",
                        "type": "String"
                    }
                },
                "format": "CheckAvailability(Hotel_ID, Room_ID, date) -> availability_status"
            }
        ],
        "Query": "Can I find out if a Double Room is free at Four Seasons Hotel on 30th November?",
        "Label": "CheckAvailability(Hotel_ID=HotelName2ID(Hotel_name='Four Seasons Hotel'), Room_ID=RoomType2ID(Room_type='Double Room'), date='30th November')",
        "Index": 588
    },
    {
        "APIs": [
            {
                "name": "RecipeName2ID",
                "Description": "This API is to convert recipe name to recipe ID.",
                "input_params": {
                    "recipe_name": {
                        "description": "the name of the recipe",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recipe_ID": {
                        "description": "the ID of the recipe",
                        "type": "Integer"
                    }
                },
                "format": "RecipeName2ID(recipe_name) -> recipe_ID"
            },
            {
                "name": "IngredientName2ID",
                "Description": "This API is to convert ingredient name to ingredient ID.",
                "input_params": {
                    "ingredient_name": {
                        "description": "the name of the ingredient",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ingredient_ID": {
                        "description": "the ID of the ingredient",
                        "type": "Integer"
                    }
                },
                "format": "IngredientName2ID(ingredient_name) -> ingredient_ID"
            },
            {
                "name": "GetRecipe",
                "Description": "This API is to get a recipe.",
                "input_params": {
                    "recipe_ID": {
                        "description": "the ID of the recipe",
                        "type": "Integer"
                    },
                    "ingredient_ID": {
                        "description": "the ID of the ingredient",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "recipe": {
                        "description": "the recipe details",
                        "type": "String"
                    }
                },
                "format": "GetRecipe(Recipe_ID, Ingredient_ID) -> recipe"
            }
        ],
        "Query": "Can you provide me with a recipe for 'Spaghetti Bolognese' using 'Ground Beef'?",
        "Label": "GetRecipe(Recipe_ID=RecipeName2ID(Recipe_name='Spaghetti Bolognese'), Ingredient_ID=IngredientName2ID(Ingredient_name='Ground Beef'))",
        "Index": 589
    },
    {
        "APIs": [
            {
                "name": "RecipeName2ID",
                "Description": "This API is to convert recipe name to recipe ID.",
                "input_params": {
                    "recipe_name": {
                        "description": "the name of the recipe",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recipe_ID": {
                        "description": "the ID of the recipe",
                        "type": "Integer"
                    }
                },
                "format": "RecipeName2ID(recipe_name) -> recipe_ID"
            },
            {
                "name": "IngredientName2ID",
                "Description": "This API is to convert ingredient name to ingredient ID.",
                "input_params": {
                    "ingredient_name": {
                        "description": "the name of the ingredient",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ingredient_ID": {
                        "description": "the ID of the ingredient",
                        "type": "Integer"
                    }
                },
                "format": "IngredientName2ID(ingredient_name) -> ingredient_ID"
            },
            {
                "name": "GetRecipe",
                "Description": "This API is to get a recipe.",
                "input_params": {
                    "recipe_ID": {
                        "description": "the ID of the recipe",
                        "type": "Integer"
                    },
                    "ingredient_ID": {
                        "description": "the ID of the ingredient",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "recipe": {
                        "description": "the recipe details",
                        "type": "String"
                    }
                },
                "format": "GetRecipe(Recipe_ID, Ingredient_ID) -> recipe"
            }
        ],
        "Query": "May I have a recipe for 'Chocolate Cake' using 'Cocoa Powder'?",
        "Label": "GetRecipe(Recipe_ID=RecipeName2ID(Recipe_name='Chocolate Cake'), Ingredient_ID=IngredientName2ID(Ingredient_name='Cocoa Powder'))",
        "Index": 590
    },
    {
        "APIs": [
            {
                "name": "RecipeName2ID",
                "Description": "This API is to convert recipe name to recipe ID.",
                "input_params": {
                    "recipe_name": {
                        "description": "the name of the recipe",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recipe_ID": {
                        "description": "the ID of the recipe",
                        "type": "Integer"
                    }
                },
                "format": "RecipeName2ID(recipe_name) -> recipe_ID"
            },
            {
                "name": "IngredientName2ID",
                "Description": "This API is to convert ingredient name to ingredient ID.",
                "input_params": {
                    "ingredient_name": {
                        "description": "the name of the ingredient",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ingredient_ID": {
                        "description": "the ID of the ingredient",
                        "type": "Integer"
                    }
                },
                "format": "IngredientName2ID(ingredient_name) -> ingredient_ID"
            },
            {
                "name": "GetRecipe",
                "Description": "This API is to get a recipe.",
                "input_params": {
                    "recipe_ID": {
                        "description": "the ID of the recipe",
                        "type": "Integer"
                    },
                    "ingredient_ID": {
                        "description": "the ID of the ingredient",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "recipe": {
                        "description": "the recipe details",
                        "type": "String"
                    }
                },
                "format": "GetRecipe(Recipe_ID, Ingredient_ID) -> recipe"
            }
        ],
        "Query": "May I have a recipe for 'Chocolate Cake' using 'Cocoa Powder'?",
        "Label": "GetRecipe(Recipe_ID=RecipeName2ID(Recipe_name='Chocolate Cake'), Ingredient_ID=IngredientName2ID(Ingredient_name='Cocoa Powder'))",
        "Index": 591
    },
    {
        "APIs": [
            {
                "name": "RecipeName2ID",
                "Description": "This API is to convert recipe name to recipe ID.",
                "input_params": {
                    "recipe_name": {
                        "description": "the name of the recipe",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recipe_ID": {
                        "description": "the ID of the recipe",
                        "type": "Integer"
                    }
                },
                "format": "RecipeName2ID(recipe_name) -> recipe_ID"
            },
            {
                "name": "IngredientName2ID",
                "Description": "This API is to convert ingredient name to ingredient ID.",
                "input_params": {
                    "ingredient_name": {
                        "description": "the name of the ingredient",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ingredient_ID": {
                        "description": "the ID of the ingredient",
                        "type": "Integer"
                    }
                },
                "format": "IngredientName2ID(ingredient_name) -> ingredient_ID"
            },
            {
                "name": "GetRecipe",
                "Description": "This API is to get a recipe.",
                "input_params": {
                    "recipe_ID": {
                        "description": "the ID of the recipe",
                        "type": "Integer"
                    },
                    "ingredient_ID": {
                        "description": "the ID of the ingredient",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "recipe": {
                        "description": "the details of the recipe",
                        "type": "String"
                    }
                },
                "format": "GetRecipe(Recipe_ID, Ingredient_ID) -> recipe"
            }
        ],
        "Query": "I'm looking for a 'Caesar Salad' recipe that uses 'Romaine Lettuce'.",
        "Label": "GetRecipe(Recipe_ID=RecipeName2ID(Recipe_name='Caesar Salad'), Ingredient_ID=IngredientName2ID(Ingredient_name='Romaine Lettuce'))",
        "Index": 592
    },
    {
        "APIs": [
            {
                "name": "BookName2ID",
                "Description": "This API is to convert book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookName2ID(book_name) -> book_ID"
            },
            {
                "name": "AuthorName2ID",
                "Description": "This API is to convert author name to author ID.",
                "input_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "format": "AuthorName2ID(author_name) -> author_ID"
            },
            {
                "name": "LocateBook",
                "Description": "This API is to locate a book in the library.",
                "input_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    },
                    "author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location of the book in the library",
                        "type": "String"
                    }
                },
                "format": "LocateBook(Book_ID, Author_ID) -> location"
            }
        ],
        "Query": "Could you find where 'The Great Gatsby' by 'F. Scott Fitzgerald' is in the library?",
        "Label": "LocateBook(Book_ID=BookName2ID(Book_name='The Great Gatsby'), Author_ID=AuthorName2ID(Author_name='F. Scott Fitzgerald'))",
        "Index": 593
    },
    {
        "APIs": [
            {
                "name": "BookName2ID",
                "Description": "This API is to convert book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookName2ID(book_name) -> book_ID"
            },
            {
                "name": "AuthorName2ID",
                "Description": "This API is to convert author name to author ID.",
                "input_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "format": "AuthorName2ID(author_name) -> author_ID"
            },
            {
                "name": "LocateBook",
                "Description": "This API is to locate a book in the library.",
                "input_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    },
                    "author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location of the book in the library",
                        "type": "String"
                    }
                },
                "format": "LocateBook(book_ID, author_ID) -> location"
            }
        ],
        "Query": "Please find the location of 'Pride and Prejudice' by 'Jane Austen' in the library.",
        "Label": "LocateBook(Book_ID=BookName2ID(Book_name='Pride and Prejudice'), Author_ID=AuthorName2ID(Author_name='Jane Austen'))",
        "Index": 594
    },
    {
        "APIs": [
            {
                "name": "BookName2ID",
                "Description": "This API is to convert book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookName2ID(book_name) -> Book_ID"
            },
            {
                "name": "AuthorName2ID",
                "Description": "This API is to convert author name to author ID.",
                "input_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "format": "AuthorName2ID(author_name) -> Author_ID"
            },
            {
                "name": "LocateBook",
                "Description": "This API is to locate a book in the library.",
                "input_params": {
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    },
                    "Author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location of the book in the library",
                        "type": "String"
                    }
                },
                "format": "LocateBook(Book_ID, Author_ID) -> location"
            }
        ],
        "Query": "Can you help me locate '1984' by 'George Orwell' in the library?",
        "Label": "LocateBook(Book_ID=BookName2ID(Book_name='1984'), Author_ID=AuthorName2ID(Author_name='George Orwell'))",
        "Index": 595
    },
    {
        "APIs": [
            {
                "name": "BookName2ID",
                "Description": "This API is to convert book name to book ID.",
                "input_params": {
                    "Book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookName2ID(Book_name) -> Book_ID"
            },
            {
                "name": "AuthorName2ID",
                "Description": "This API is to convert author name to author ID.",
                "input_params": {
                    "Author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "format": "AuthorName2ID(Author_name) -> Author_ID"
            },
            {
                "name": "LocateBook",
                "Description": "This API is to locate a book in the library.",
                "input_params": {
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    },
                    "Author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "Location": {
                        "description": "the location of the book in the library",
                        "type": "String"
                    }
                },
                "format": "LocateBook(Book_ID, Author_ID) -> Location"
            }
        ],
        "Query": "Can you help me locate '1984' by 'George Orwell' in the library?",
        "Label": "LocateBook(Book_ID=BookName2ID(Book_name='1984'), Author_ID=AuthorName2ID(Author_name='George Orwell'))",
        "Index": 596
    },
    {
        "APIs": [
            {
                "name": "BookName2ID",
                "Description": "This API is to convert book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookName2ID(book_name) -> book_ID"
            },
            {
                "name": "AuthorName2ID",
                "Description": "This API is to convert author name to author ID.",
                "input_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "format": "AuthorName2ID(author_name) -> author_ID"
            },
            {
                "name": "LocateBook",
                "Description": "This API is to locate a book in the library.",
                "input_params": {
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    },
                    "Author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location of the book in the library",
                        "type": "String"
                    }
                },
                "format": "LocateBook(Book_ID, Author_ID) -> location"
            }
        ],
        "Query": "Please locate 'The Catcher in the Rye' by 'J.D. Salinger' in the library.",
        "Label": "LocateBook(Book_ID=BookName2ID(Book_name='The Catcher in the Rye'), Author_ID=AuthorName2ID(Author_name='J.D. Salinger'))",
        "Index": 597
    },
    {
        "APIs": [
            {
                "name": "RestaurantName2ID",
                "Description": "This API is to convert restaurant name to restaurant ID.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantName2ID(restaurant_name) -> Restaurant_ID"
            },
            {
                "name": "CuisineType2ID",
                "Description": "This API is to convert cuisine type to cuisine ID.",
                "input_params": {
                    "cuisine_type": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Cuisine_ID": {
                        "description": "the ID of the cuisine",
                        "type": "Integer"
                    }
                },
                "format": "CuisineType2ID(cuisine_type) -> Cuisine_ID"
            },
            {
                "name": "ReserveTable",
                "Description": "This API is to reserve a table at a restaurant.",
                "input_params": {
                    "Restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    },
                    "Cuisine_ID": {
                        "description": "the ID of the cuisine",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the reservation",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveTable(Restaurant_ID, Cuisine_ID, date, time) -> reservation_status"
            }
        ],
        "Query": "Can I book a table for six at 'The Sushi Place' for 'Sashimi' on 22nd October at 8 pm?",
        "Label": "ReserveTable(Restaurant_ID=RestaurantName2ID(restaurant_name='The Sushi Place'), Cuisine_ID=CuisineType2ID(cuisine_type='Sashimi'), date='22nd October', time='8 pm')",
        "Index": 598
    },
    {
        "APIs": [
            {
                "name": "BookName2ID",
                "Description": "This API is to convert book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookName2ID(book_name) -> Book_ID"
            },
            {
                "name": "AuthorName2ID",
                "Description": "This API is to convert author name to author ID.",
                "input_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "format": "AuthorName2ID(author_name) -> Author_ID"
            },
            {
                "name": "ReserveBook",
                "Description": "This API is to reserve a book.",
                "input_params": {
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    },
                    "Author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of reservation",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveBook(Book_ID, Author_ID, date) -> reservation_status"
            }
        ],
        "Query": "Can you assist me in reserving 'The Alchemist' by 'Paulo Coelho' for 14th June?",
        "Label": "ReserveBook(Book_ID=BookName2ID(book_name='The Alchemist'), Author_ID=AuthorName2ID(author_name='Paulo Coelho'), date='14th June')",
        "Index": 599
    },
    {
        "APIs": [
            {
                "name": "BookName2ID",
                "Description": "This API is to convert book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookName2ID(book_name) -> Book_ID"
            },
            {
                "name": "AuthorName2ID",
                "Description": "This API is to convert author name to author ID.",
                "input_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "format": "AuthorName2ID(author_name) -> Author_ID"
            },
            {
                "name": "ReserveBook",
                "Description": "This API is to reserve a book.",
                "input_params": {
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    },
                    "Author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of reservation",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveBook(Book_ID, Author_ID, date) -> reservation_status"
            }
        ],
        "Query": "Could you book 'The Da Vinci Code' by 'Dan Brown' for me on 30th September?",
        "Label": "ReserveBook(Book_ID=BookName2ID(book_name='The Da Vinci Code'), Author_ID=AuthorName2ID(author_name='Dan Brown'), date='30th September')",
        "Index": 600
    },
    {
        "APIs": [
            {
                "name": "BookName2ID",
                "Description": "This API is to convert book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookName2ID(book_name) -> Book_ID"
            },
            {
                "name": "AuthorName2ID",
                "Description": "This API is to convert author name to author ID.",
                "input_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "format": "AuthorName2ID(author_name) -> Author_ID"
            },
            {
                "name": "ReserveBook",
                "Description": "This API is to reserve a book.",
                "input_params": {
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    },
                    "Author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of reservation",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveBook(Book_ID, Author_ID, date) -> reservation_status"
            }
        ],
        "Query": "I need your help to reserve 'To Kill a Mockingbird' by 'Harper Lee' on 2nd November.",
        "Label": "ReserveBook(Book_ID=BookName2ID(book_name='To Kill a Mockingbird'), Author_ID=AuthorName2ID(author_name='Harper Lee'), date='2nd November')",
        "Index": 601
    },
    {
        "APIs": [
            {
                "name": "BookName2ID",
                "Description": "This API is to convert book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookName2ID(book_name) -> Book_ID"
            },
            {
                "name": "AuthorName2ID",
                "Description": "This API is to convert author name to author ID.",
                "input_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "format": "AuthorName2ID(author_name) -> Author_ID"
            },
            {
                "name": "ReserveBook",
                "Description": "This API is to reserve a book.",
                "input_params": {
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    },
                    "Author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of reservation",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveBook(Book_ID, Author_ID, date) -> reservation_status"
            }
        ],
        "Query": "I need your help to reserve 'To Kill a Mockingbird' by 'Harper Lee' on 2nd November.",
        "Label": "ReserveBook(Book_ID=BookName2ID(book_name='To Kill a Mockingbird'), Author_ID=AuthorName2ID(author_name='Harper Lee'), date='2nd November')",
        "Index": 602
    },
    {
        "APIs": [
            {
                "name": "BookName2ID",
                "Description": "This API is to convert book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookName2ID(book_name) -> Book_ID"
            },
            {
                "name": "AuthorName2ID",
                "Description": "This API is to convert author name to author ID.",
                "input_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "format": "AuthorName2ID(author_name) -> Author_ID"
            },
            {
                "name": "ReserveBook",
                "Description": "This API is to reserve a book.",
                "input_params": {
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    },
                    "Author_ID": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of reservation",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveBook(Book_ID, Author_ID, date) -> reservation_status"
            }
        ],
        "Query": "Could you assist me in reserving 'Animal Farm' by 'George Orwell' for 22nd January?",
        "Label": "ReserveBook(Book_ID=BookName2ID(book_name='Animal Farm'), Author_ID=AuthorName2ID(author_name='George Orwell'), date='22nd January')",
        "Index": 603
    },
    {
        "APIs": [
            {
                "name": "Email2UserID",
                "Description": "This API is to convert email address to user ID.",
                "input_params": {
                    "email": {
                        "description": "the email address of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "User_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "Email2UserID(email) -> User_ID"
            },
            {
                "name": "BookTitle2BookID",
                "Description": "This API is to convert book title to book ID.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookTitle2BookID(book_title) -> Book_ID"
            },
            {
                "name": "BorrowBook",
                "Description": "This API is to borrow a book.",
                "input_params": {
                    "User_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "borrowing status": {
                        "description": "the status of the borrowing",
                        "type": "String"
                    }
                },
                "format": "BorrowBook(User_ID, Book_ID) -> borrowing status"
            }
        ],
        "Query": "Can I borrow 'To Kill a Mockingbird' using my email address sarah@yahoo.com?",
        "Label": "BorrowBook(User_ID=Email2UserID(email='sarah@yahoo.com'), Book_ID=BookTitle2BookID(book_title='To Kill a Mockingbird'))",
        "Index": 604
    },
    {
        "APIs": [
            {
                "name": "Email2UserID",
                "Description": "This API is to convert email to user ID.",
                "input_params": {
                    "email": {
                        "description": "the email address of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "User_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "Email2UserID(email) -> User_ID"
            },
            {
                "name": "BookTitle2BookID",
                "Description": "This API is to convert book title to book ID.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookTitle2BookID(book_title) -> Book_ID"
            },
            {
                "name": "BorrowBook",
                "Description": "This API is to borrow a book.",
                "input_params": {
                    "User_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "borrow_status": {
                        "description": "the status of the borrowing",
                        "type": "String"
                    }
                },
                "format": "BorrowBook(User_ID, Book_ID) -> borrow_status"
            }
        ],
        "Query": "Can I take 'The Catcher in the Rye' with my email id mike@gmail.com?",
        "Label": "BorrowBook(User_ID=Email2UserID(email='mike@gmail.com'), Book_ID=BookTitle2BookID(book_title='The Catcher in the Rye'))",
        "Index": 605
    },
    {
        "APIs": [
            {
                "name": "Email2UserID",
                "Description": "This API is to convert email to user ID.",
                "input_params": {
                    "email": {
                        "description": "the email address of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "User_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "Email2UserID(email) -> User_ID"
            },
            {
                "name": "BookTitle2BookID",
                "Description": "This API is to convert book title to book ID.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookTitle2BookID(book_title) -> Book_ID"
            },
            {
                "name": "BorrowBook",
                "Description": "This API is to borrow a book.",
                "input_params": {
                    "User_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "borrowing status": {
                        "description": "the status of the borrowing",
                        "type": "String"
                    }
                },
                "format": "BorrowBook(User_ID, Book_ID) -> borrowing status"
            }
        ],
        "Query": "Can I take 'The Catcher in the Rye' with my email id mike@gmail.com?",
        "Label": "BorrowBook(User_ID=Email2UserID(email='mike@gmail.com'), Book_ID=BookTitle2BookID(book_title='The Catcher in the Rye'))",
        "Index": 606
    },
    {
        "APIs": [
            {
                "name": "Email2UserID",
                "Description": "This API is to convert email to user ID.",
                "input_params": {
                    "email": {
                        "description": "the email address of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "User_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "Email2UserID(email) -> User_ID"
            },
            {
                "name": "BookTitle2BookID",
                "Description": "This API is to convert book title to book ID.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookTitle2BookID(book_title) -> Book_ID"
            },
            {
                "name": "BorrowBook",
                "Description": "This API is to borrow a book.",
                "input_params": {
                    "User_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "Book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "borrowing status": {
                        "description": "the status of the borrowing",
                        "type": "String"
                    }
                },
                "format": "BorrowBook(User_ID, Book_ID) -> borrowing status"
            }
        ],
        "Query": "Can I borrow 'Moby Dick' with my email id robert@gmail.com?",
        "Label": "BorrowBook(User_ID=Email2UserID(email='robert@gmail.com'), Book_ID=BookTitle2BookID(book_title='Moby Dick'))",
        "Index": 607
    },
    {
        "APIs": [
            {
                "name": "CityName2Weather",
                "Description": "This API is to convert city name to weather information.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather information of the city",
                        "type": "String"
                    }
                },
                "format": "CityName2Weather(city_name) -> weather"
            },
            {
                "name": "CityName2Timezone",
                "Description": "This API is to convert city name to timezone information.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "timezone": {
                        "description": "the timezone information of the city",
                        "type": "String"
                    }
                },
                "format": "CityName2Timezone(city_name) -> timezone"
            },
            {
                "name": "WeatherAndTimezone2ClothingAdvice",
                "Description": "This API is to provide clothing advice based on weather and timezone.",
                "input_params": {
                    "weather": {
                        "description": "the weather information",
                        "type": "String"
                    },
                    "timezone": {
                        "description": "the timezone information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_advice": {
                        "description": "the clothing advice based on weather and timezone",
                        "type": "String"
                    }
                },
                "format": "WeatherAndTimezone2ClothingAdvice(weather, timezone) -> clothing_advice"
            }
        ],
        "Query": "What should I wear in Paris today?",
        "Label": "WeatherAndTimezone2ClothingAdvice(weather=CityName2Weather(city_name='Paris'), timezone=CityName2Timezone(city_name='Paris'))",
        "Index": 608
    },
    {
        "APIs": [
            {
                "name": "CityName2Weather",
                "Description": "This API is to convert city name to weather information.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather information of the city",
                        "type": "String"
                    }
                },
                "format": "CityName2Weather(city_name) -> weather"
            },
            {
                "name": "CityName2Timezone",
                "Description": "This API is to convert city name to timezone information.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "timezone": {
                        "description": "the timezone information of the city",
                        "type": "String"
                    }
                },
                "format": "CityName2Timezone(city_name) -> timezone"
            },
            {
                "name": "WeatherAndTimezone2ClothingAdvice",
                "Description": "This API is to provide clothing advice based on weather and timezone.",
                "input_params": {
                    "weather": {
                        "description": "the weather information of the city",
                        "type": "String"
                    },
                    "timezone": {
                        "description": "the timezone information of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_advice": {
                        "description": "the clothing advice based on weather and timezone",
                        "type": "String"
                    }
                },
                "format": "WeatherAndTimezone2ClothingAdvice(weather, timezone) -> clothing_advice"
            }
        ],
        "Query": "What should I wear in Paris today?",
        "Label": "WeatherAndTimezone2ClothingAdvice(weather=CityName2Weather(city_name='Paris'), timezone=CityName2Timezone(city_name='Paris'))",
        "Index": 609
    },
    {
        "APIs": [
            {
                "name": "CityName2Weather",
                "Description": "This API is to convert city name to weather information.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather information of the city",
                        "type": "String"
                    }
                },
                "format": "CityName2Weather(city_name) -> weather"
            },
            {
                "name": "CityName2Timezone",
                "Description": "This API is to convert city name to timezone information.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "timezone": {
                        "description": "the timezone information of the city",
                        "type": "String"
                    }
                },
                "format": "CityName2Timezone(city_name) -> timezone"
            },
            {
                "name": "WeatherAndTimezone2ClothingAdvice",
                "Description": "This API is to provide clothing advice based on weather and timezone.",
                "input_params": {
                    "weather": {
                        "description": "the weather information of the city",
                        "type": "String"
                    },
                    "timezone": {
                        "description": "the timezone information of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_advice": {
                        "description": "the clothing advice for the city",
                        "type": "String"
                    }
                },
                "format": "WeatherAndTimezone2ClothingAdvice(weather, timezone) -> clothing_advice"
            }
        ],
        "Query": "What should I wear in Tokyo today?",
        "Label": "WeatherAndTimezone2ClothingAdvice(weather=CityName2Weather(city_name='Tokyo'), timezone=CityName2Timezone(city_name='Tokyo'))",
        "Index": 610
    },
    {
        "APIs": [
            {
                "name": "UserName2UserId",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2UserId(user_name) -> user_id"
            },
            {
                "name": "GetBookIdByTitle",
                "Description": "This API is to get the book ID by its title.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "GetBookIdByTitle(book_title) -> book_id"
            },
            {
                "name": "PurchaseBook",
                "Description": "This API is to purchase a book for a user.",
                "input_params": {
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "PurchaseBook(user_id, book_id) -> purchase_status"
            }
        ],
        "Query": "I want to purchase the novel \"The Great Gatsby\" for the user named Alice.",
        "Label": "PurchaseBook(user_id=UserName2UserId(user_name='Alice'), book_id=GetBookIdByTitle(book_title='The Great Gatsby'))",
        "Index": 611
    },
    {
        "APIs": [
            {
                "name": "UserName2UserId",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2UserId(user_name) -> user_id"
            },
            {
                "name": "GetBookIdByTitle",
                "Description": "This API is to get the book ID by book title.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "GetBookIdByTitle(book_title) -> book_id"
            },
            {
                "name": "PurchaseBook",
                "Description": "This API is to purchase a book for a user.",
                "input_params": {
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "PurchaseBook(user_id, book_id) -> purchase_status"
            }
        ],
        "Query": "I'm looking to buy \"Introduction to Algorithms\" for the user named Bob.",
        "Label": "PurchaseBook(user_id=UserName2UserId(user_name='Bob'), book_id=GetBookIdByTitle(book_title='Introduction to Algorithms'))",
        "Index": 612
    },
    {
        "APIs": [
            {
                "name": "UserName2UserId",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2UserId(user_name) -> user_id"
            },
            {
                "name": "GetBookIdByTitle",
                "Description": "This API is to get the book ID by book title.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "GetBookIdByTitle(book_title) -> book_id"
            },
            {
                "name": "PurchaseBook",
                "Description": "This API is to purchase a book for a user.",
                "input_params": {
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "PurchaseBook(user_id, book_id) -> purchase_status"
            }
        ],
        "Query": "I'd like to get the book 'Pride and Prejudice' for the user called Carol.",
        "Label": "PurchaseBook(user_id=UserName2UserId(user_name='Carol'), book_id=GetBookIdByTitle(book_title='Pride and Prejudice'))",
        "Index": 613
    },
    {
        "APIs": [
            {
                "name": "UserName2UserId",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2UserId(user_name) -> user_id"
            },
            {
                "name": "GetBookIdByTitle",
                "Description": "This API is to get the book ID by book title.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "GetBookIdByTitle(book_title) -> book_id"
            },
            {
                "name": "PurchaseBook",
                "Description": "This API is to purchase a book for a user.",
                "input_params": {
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "PurchaseBook(user_id, book_id) -> purchase_status"
            }
        ],
        "Query": "I'd like to get the book 'Pride and Prejudice' for the user called Carol.",
        "Label": "PurchaseBook(user_id=UserName2UserId(user_name='Carol'), book_id=GetBookIdByTitle(book_title='Pride and Prejudice'))",
        "Index": 614
    },
    {
        "APIs": [
            {
                "name": "UserEmail2UserId",
                "Description": "This API is to convert user email to user ID.",
                "input_params": {
                    "user_email": {
                        "description": "the email of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmail2UserId(user_email) -> user_id"
            },
            {
                "name": "MovieTitle2MovieId",
                "Description": "This API is to convert movie title to movie ID.",
                "input_params": {
                    "movie_title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieTitle2MovieId(movie_title) -> movie_id"
            },
            {
                "name": "BookTicket",
                "Description": "This API is to book a ticket for a movie.",
                "input_params": {
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    },
                    "show_time": {
                        "description": "the show time of the movie",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the ticket booking",
                        "type": "String"
                    }
                },
                "format": "BookTicket(user_id, movie_id, show_time) -> booking_status"
            }
        ],
        "Query": "I'd like to get a ticket for the movie 'The Dark Knight' at 9:00 pm for the user with the email caroldavis@hotmail.com.",
        "Label": "BookTicket(user_id=UserEmail2UserId(user_email='caroldavis@hotmail.com'), movie_id=MovieTitle2MovieId(movie_title='The Dark Knight'), show_time='9:00 pm')",
        "Index": 615
    },
    {
        "APIs": [
            {
                "name": "UserId2CartId",
                "Description": "This API is to convert user ID to cart ID.",
                "input_params": {
                    "user_id": {
                        "description": "the identification of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cart_id": {
                        "description": "the identification of the cart",
                        "type": "String"
                    }
                },
                "format": "UserId2CartId(user_id) -> cart_id"
            },
            {
                "name": "CartId2TotalCost",
                "Description": "This API is to calculate the total cost of all the products in a shopping cart.",
                "input_params": {
                    "cart_id": {
                        "description": "the identification of the cart",
                        "type": "String"
                    }
                },
                "output_params": {
                    "total_cost": {
                        "description": "the total cost of all the products in the cart",
                        "type": "Float"
                    }
                },
                "format": "CartId2TotalCost(cart_id) -> total_cost"
            }
        ],
        "Query": "I want to know the total cost of all the products in my shopping cart. My user identification is U67890.",
        "Label": "CartId2TotalCost(cart_id=UserId2CartId(user_id='U67890'))",
        "Index": 616
    },
    {
        "APIs": [
            {
                "name": "UserId2CartId",
                "Description": "This API is to convert user ID to cart ID.",
                "input_params": {
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cart_id": {
                        "description": "the ID of the cart",
                        "type": "String"
                    }
                },
                "format": "UserId2CartId(user_id) -> cart_id"
            },
            {
                "name": "CartId2TotalCost",
                "Description": "This API is to calculate the total cost of a cart.",
                "input_params": {
                    "cart_id": {
                        "description": "the ID of the cart",
                        "type": "String"
                    }
                },
                "output_params": {
                    "total_cost": {
                        "description": "the total cost of the cart",
                        "type": "Float"
                    }
                },
                "format": "CartId2TotalCost(cart_id) -> total_cost"
            }
        ],
        "Query": "Can you tell me the total amount I have to pay for my shopping? My user id is U11111.",
        "Label": "CartId2TotalCost(cart_id=UserId2CartId(user_id='U11111'))",
        "Index": 617
    },
    {
        "APIs": [
            {
                "name": "UserId2CartId",
                "Description": "This API is to convert user ID to cart ID.",
                "input_params": {
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cart_id": {
                        "description": "the ID of the cart",
                        "type": "String"
                    }
                },
                "format": "UserId2CartId(user_id) -> cart_id"
            },
            {
                "name": "CartId2TotalCost",
                "Description": "This API is to calculate the total expense of the items in the cart.",
                "input_params": {
                    "cart_id": {
                        "description": "the ID of the cart",
                        "type": "String"
                    }
                },
                "output_params": {
                    "total_cost": {
                        "description": "the total expense of the items in the cart",
                        "type": "Float"
                    }
                },
                "format": "CartId2TotalCost(cart_id) -> total_cost"
            }
        ],
        "Query": "I would like to know the total expense of the items in my cart. My user code is U22222.",
        "Label": "CartId2TotalCost(cart_id=UserId2CartId(user_id='U22222'))",
        "Index": 618
    },
    {
        "APIs": [
            {
                "name": "UserId2CartId",
                "Description": "This API is to convert user ID to cart ID.",
                "input_params": {
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cart_id": {
                        "description": "the ID of the cart",
                        "type": "String"
                    }
                },
                "format": "UserId2CartId(user_id) -> cart_id"
            },
            {
                "name": "CartId2TotalCost",
                "Description": "This API is to calculate the total cost of the items in a cart.",
                "input_params": {
                    "cart_id": {
                        "description": "the ID of the cart",
                        "type": "String"
                    }
                },
                "output_params": {
                    "total_cost": {
                        "description": "the total cost of the items in the cart",
                        "type": "Float"
                    }
                },
                "format": "CartId2TotalCost(cart_id) -> total_cost"
            }
        ],
        "Query": "I would like to know the total expense of the items in my cart. My user code is U22222.",
        "Label": "CartId2TotalCost(cart_id=UserId2CartId(user_id='U22222'))",
        "Index": 619
    },
    {
        "APIs": [
            {
                "name": "UserId2CartId",
                "Description": "This API is to convert user ID to cart ID.",
                "input_params": {
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cart_id": {
                        "description": "the ID of the cart",
                        "type": "String"
                    }
                },
                "format": "UserId2CartId(user_id) -> cart_id"
            },
            {
                "name": "CartId2TotalCost",
                "Description": "This API is to calculate the total cost of items in a cart.",
                "input_params": {
                    "cart_id": {
                        "description": "the ID of the cart",
                        "type": "String"
                    }
                },
                "output_params": {
                    "total_cost": {
                        "description": "the total cost of items in the cart",
                        "type": "Float"
                    }
                },
                "format": "CartId2TotalCost(cart_id) -> total_cost"
            }
        ],
        "Query": "Can I know the sum I need to clear for the items in my cart? The user id is U44444.",
        "Label": "CartId2TotalCost(cart_id=UserId2CartId(user_id='U44444'))",
        "Index": 620
    },
    {
        "APIs": [
            {
                "name": "ProductName2ProductID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ProductID(product_name) -> product_id"
            },
            {
                "name": "AddToCart",
                "Description": "This API is to add a product to the user's cart.",
                "input_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cart_status": {
                        "description": "the status of the cart",
                        "type": "String"
                    }
                },
                "format": "AddToCart(product_id, user_id) -> cart_status"
            }
        ],
        "Query": "I would like to add the product 'MacBook Pro' to my cart. My user id is '98765'.",
        "Label": "AddToCart(product_id=ProductName2ProductID(product_name='MacBook Pro'), user_id='98765')",
        "Index": 621
    },
    {
        "APIs": [
            {
                "name": "ProductName2ProductID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ProductID(product_name) -> product_id"
            },
            {
                "name": "AddToCart",
                "Description": "This API is to add a product to the user's cart.",
                "input_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cart_status": {
                        "description": "the status of the cart",
                        "type": "String"
                    }
                },
                "format": "AddToCart(product_id, user_id) -> cart_status"
            }
        ],
        "Query": "Can I add the product 'iPad Pro' to my cart? My user id is '45678'.",
        "Label": "AddToCart(product_id=ProductName2ProductID(product_name='iPad Pro'), user_id='45678')",
        "Index": 622
    },
    {
        "APIs": [
            {
                "name": "ProductName2ProductID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ProductID(product_name) -> product_id"
            },
            {
                "name": "AddToCart",
                "Description": "This API is to add a product to the user's cart.",
                "input_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cart_status": {
                        "description": "the status of the cart",
                        "type": "String"
                    }
                },
                "format": "AddToCart(product_id, user_id) -> cart_status"
            }
        ],
        "Query": "Can I add the product 'iPad Pro' to my cart? My user id is '45678'.",
        "Label": "AddToCart(product_id=ProductName2ProductID(product_name='iPad Pro'), user_id='45678')",
        "Index": 623
    },
    {
        "APIs": [
            {
                "name": "Location2Coordinates",
                "Description": "This API is to convert location name to coordinates.",
                "input_params": {
                    "location_name": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "coordinates": {
                        "description": "the coordinates of the location",
                        "type": "String"
                    }
                },
                "format": "Location2Coordinates(location_name) -> coordinates"
            },
            {
                "name": "WeatherInfo",
                "Description": "This API is to retrieve weather information.",
                "input_params": {
                    "coordinates": {
                        "description": "the coordinates of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_data": {
                        "description": "the weather data for the location",
                        "type": "Object"
                    }
                },
                "format": "WeatherInfo(coordinates) -> weather_data"
            },
            {
                "name": "GenerateWeatherReport",
                "Description": "This API is to generate a comprehensive weather report.",
                "input_params": {
                    "weather_data": {
                        "description": "the weather data for the location",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "report": {
                        "description": "the comprehensive weather report",
                        "type": "String"
                    }
                },
                "format": "GenerateWeatherReport(weather_data) -> report"
            }
        ],
        "Query": "Can you produce a comprehensive weather report for Tokyo?",
        "Label": "GenerateWeatherReport(weather_data=WeatherInfo(coordinates=Location2Coordinates(location_name='Tokyo')))",
        "Index": 624
    },
    {
        "APIs": [
            {
                "name": "Location2Coordinates",
                "Description": "This API is to convert location name to coordinates.",
                "input_params": {
                    "location_name": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "coordinates": {
                        "description": "the coordinates of the location",
                        "type": "String"
                    }
                },
                "format": "Location2Coordinates(location_name) -> coordinates"
            },
            {
                "name": "WeatherInfo",
                "Description": "This API is to generate weather information.",
                "input_params": {
                    "coordinates": {
                        "description": "the coordinates of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_data": {
                        "description": "the weather data for the location",
                        "type": "Object"
                    }
                },
                "format": "WeatherInfo(coordinates) -> weather_data"
            },
            {
                "name": "GenerateWeatherReport",
                "Description": "This API is to generate a complete weather report.",
                "input_params": {
                    "weather_data": {
                        "description": "the weather data for the location",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "report": {
                        "description": "the complete weather report",
                        "type": "String"
                    }
                },
                "format": "GenerateWeatherReport(weather_data) -> report"
            }
        ],
        "Query": "I want a complete weather report for Paris. Can you do it?",
        "Label": "GenerateWeatherReport(weather_data=WeatherInfo(coordinates=Location2Coordinates(location_name='Paris')))",
        "Index": 625
    },
    {
        "APIs": [
            {
                "name": "Location2Coordinates",
                "Description": "This API is to convert location name to coordinates.",
                "input_params": {
                    "location_name": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "coordinates": {
                        "description": "the coordinates of the location",
                        "type": "String"
                    }
                },
                "format": "Location2Coordinates(location_name) -> coordinates"
            },
            {
                "name": "WeatherInfo",
                "Description": "This API is to get weather information based on coordinates.",
                "input_params": {
                    "coordinates": {
                        "description": "the coordinates of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_data": {
                        "description": "the weather information",
                        "type": "Object"
                    }
                },
                "format": "WeatherInfo(coordinates) -> weather_data"
            },
            {
                "name": "GenerateWeatherReport",
                "Description": "This API is to generate a detailed weather forecast.",
                "input_params": {
                    "weather_data": {
                        "description": "the weather information",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "report": {
                        "description": "the detailed weather forecast",
                        "type": "String"
                    }
                },
                "format": "GenerateWeatherReport(weather_data) -> report"
            }
        ],
        "Query": "Could you generate a detailed weather forecast for London?",
        "Label": "GenerateWeatherReport(weather_data=WeatherInfo(coordinates=Location2Coordinates(location_name='London')))",
        "Index": 626
    },
    {
        "APIs": [
            {
                "name": "Location2Coordinates",
                "Description": "This API is to convert location name to coordinates.",
                "input_params": {
                    "location_name": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "coordinates": {
                        "description": "the coordinates of the location",
                        "type": "String"
                    }
                },
                "format": "Location2Coordinates(location_name) -> coordinates"
            },
            {
                "name": "WeatherInfo",
                "Description": "This API is to retrieve weather information.",
                "input_params": {
                    "coordinates": {
                        "description": "the coordinates of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_data": {
                        "description": "the weather data for the location",
                        "type": "Object"
                    }
                },
                "format": "WeatherInfo(coordinates) -> weather_data"
            },
            {
                "name": "GenerateWeatherReport",
                "Description": "This API is to generate a complete weather report.",
                "input_params": {
                    "weather_data": {
                        "description": "the weather data for the location",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "report": {
                        "description": "the complete weather report",
                        "type": "String"
                    }
                },
                "format": "GenerateWeatherReport(weather_data) -> report"
            }
        ],
        "Query": "I need a complete weather report for Sydney. Can you generate it?",
        "Label": "GenerateWeatherReport(weather_data=WeatherInfo(coordinates=Location2Coordinates(location_name='Sydney')))",
        "Index": 627
    },
    {
        "APIs": [
            {
                "name": "FindHotel",
                "Description": "This API is to find hotels in a specific city for a given check-in and check-out date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotel_details": {
                        "description": "the details of the hotel",
                        "type": "Object"
                    }
                },
                "format": "FindHotel(city, check_in_date, check_out_date) -> hotel_details"
            },
            {
                "name": "GetUserBudget",
                "Description": "This API is to get the budget of a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "budget": {
                        "description": "the budget of the user",
                        "type": "Float"
                    }
                },
                "format": "GetUserBudget(user_ID) -> budget"
            },
            {
                "name": "BookHotel",
                "Description": "This API is to book a hotel that fits the user's budget.",
                "input_params": {
                    "hotel_details": {
                        "description": "the details of the hotel",
                        "type": "Object"
                    },
                    "budget": {
                        "description": "the budget of the user",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(hotel_details, budget) -> booking_status"
            }
        ],
        "Query": "Can you reserve a hotel in New York from 10th May to 15th May that fits my budget?",
        "Label": "BookHotel(hotel_details=FindHotel(city='New York', check_in_date='10th May', check_out_date='15th May'), budget=GetUserBudget(user_ID))",
        "Index": 628
    },
    {
        "APIs": [
            {
                "name": "FindHotel",
                "Description": "This API is to find hotels in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotel_details": {
                        "description": "the details of the hotel",
                        "type": "Object"
                    }
                },
                "format": "FindHotel(city, check_in_date, check_out_date) -> hotel_details"
            },
            {
                "name": "GetUserBudget",
                "Description": "This API is to get the budget of a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "budget": {
                        "description": "the budget of the user",
                        "type": "Float"
                    }
                },
                "format": "GetUserBudget(user_ID) -> budget"
            },
            {
                "name": "BookHotel",
                "Description": "This API is to book a hotel.",
                "input_params": {
                    "hotel_details": {
                        "description": "the details of the hotel",
                        "type": "Object"
                    },
                    "budget": {
                        "description": "the budget of the user",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(hotel_details, budget) -> booking_status"
            }
        ],
        "Query": "I need a hotel reservation in Tokyo from 15th April to 20th April, can you make sure it's within my budget?",
        "Label": "BookHotel(hotel_details=FindHotel(city='Tokyo', check_in_date='15th April', check_out_date='20th April'), budget=GetUserBudget(user_ID))",
        "Index": 629
    },
    {
        "APIs": [
            {
                "name": "GetUserIDByUser",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_Name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserIDByUser(user_Name) -> user_ID"
            },
            {
                "name": "GetBookIDByTitle",
                "Description": "This API is to convert book title to book ID.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "GetBookIDByTitle(book_title) -> book_ID"
            },
            {
                "name": "GetBookGenre",
                "Description": "This API is to get the genre of a book.",
                "input_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "genre": {
                        "description": "the genre of the book",
                        "type": "String"
                    }
                },
                "format": "GetBookGenre(book_ID) -> genre"
            },
            {
                "name": "RecommendBookByGenre",
                "Description": "This API is to recommend a book based on genre.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "genre": {
                        "description": "the genre of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recommended_book": {
                        "description": "the recommended book",
                        "type": "String"
                    }
                },
                "format": "RecommendBookByGenre(user_ID, genre) -> recommended_book"
            }
        ],
        "Query": "My name is Bob, I just finished reading 'The Great Gatsby' and loved it. Can you recommend me a similar book?",
        "Label": "RecommendBookByGenre(user_ID=GetUserIDByUser(user_Name='Bob'), genre=GetBookGenre(book_ID=GetBookIDByTitle(book_title='The Great Gatsby')))",
        "Index": 630
    },
    {
        "APIs": [
            {
                "name": "GetUserIDByUser",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_Name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserIDByUser(user_Name) -> user_ID"
            },
            {
                "name": "GetBookIDByTitle",
                "Description": "This API is to convert book title to book ID.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "GetBookIDByTitle(book_title) -> book_ID"
            },
            {
                "name": "GetBookGenre",
                "Description": "This API is to get the genre of a book.",
                "input_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "genre": {
                        "description": "the genre of the book",
                        "type": "String"
                    }
                },
                "format": "GetBookGenre(book_ID) -> genre"
            },
            {
                "name": "RecommendBookByGenre",
                "Description": "This API is to recommend a book based on genre.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "genre": {
                        "description": "the genre of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recommended_book": {
                        "description": "the recommended book",
                        "type": "String"
                    }
                },
                "format": "RecommendBookByGenre(user_ID, genre) -> recommended_book"
            }
        ],
        "Query": "Hi, This is Edward. I just finished 'Moby Dick' and looking for a similar book. Can you suggest me one?",
        "Label": "RecommendBookByGenre(user_ID=GetUserIDByUser(user_Name='Edward'), genre=GetBookGenre(book_ID=GetBookIDByTitle(book_title='Moby Dick')))",
        "Index": 631
    },
    {
        "APIs": [
            {
                "name": "GetUserID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            },
            {
                "name": "GetUserFavouriteGenre",
                "Description": "This API is to get the favourite genre of a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "genre": {
                        "description": "the favourite genre of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserFavouriteGenre(user_ID) -> genre"
            },
            {
                "name": "FindMovieByGenre",
                "Description": "This API is to find a movie by genre.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "FindMovieByGenre(genre) -> movie_ID"
            },
            {
                "name": "BookMovieTicket",
                "Description": "This API is to book a movie ticket.",
                "input_params": {
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the movie",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookMovieTicket(movie_ID, date) -> booking_status"
            }
        ],
        "Query": "I'm Alex, Can you book a movie ticket for my favourite genre this Sunday?",
        "Label": "BookMovieTicket(movie_ID=FindMovieByGenre(genre=GetUserFavouriteGenre(user_ID=GetUserID(userName='Alex'))), date='this Sunday')",
        "Index": 632
    },
    {
        "APIs": [
            {
                "name": "GetUserID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            },
            {
                "name": "GetUserFavoriteGenre",
                "Description": "This API is to get the favorite genre of a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "genre": {
                        "description": "the favorite genre of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserFavoriteGenre(user_ID) -> genre"
            },
            {
                "name": "SearchMovieByGenre",
                "Description": "This API is to search movies by genre.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "SearchMovieByGenre(genre) -> movie_ID"
            },
            {
                "name": "ReserveMovieTicket",
                "Description": "This API is to reserve a movie ticket.",
                "input_params": {
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the movie",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveMovieTicket(movie_ID, date) -> reservation_status"
            }
        ],
        "Query": "Hello, I am Sarah. Could you please reserve a movie ticket for me according to my favorite genre for this Sunday?",
        "Label": "ReserveMovieTicket(movie_ID=SearchMovieByGenre(genre=GetUserFavoriteGenre(user_ID=GetUserID(userName='Sarah'))), date='this Sunday')",
        "Index": 633
    },
    {
        "APIs": [
            {
                "name": "GetUserID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            },
            {
                "name": "GetUserFavoriteGenre",
                "Description": "This API is to get the favorite genre of a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "genre": {
                        "description": "the favorite genre of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserFavoriteGenre(user_ID) -> genre"
            },
            {
                "name": "SearchMovieByGenre",
                "Description": "This API is to search for movies based on genre.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "SearchMovieByGenre(genre) -> movie_ID"
            },
            {
                "name": "ReserveMovieTicket",
                "Description": "This API is to reserve a movie ticket.",
                "input_params": {
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the movie",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveMovieTicket(movie_ID, date) -> reservation_status"
            }
        ],
        "Query": "I'm Emily, can you book a movie ticket for my favorite genre on coming Wednesday?",
        "Label": "ReserveMovieTicket(movie_ID=SearchMovieByGenre(genre=GetUserFavoriteGenre(user_ID=GetUserID(userName='Emily'))), date='coming Wednesday')",
        "Index": 634
    },
    {
        "APIs": [
            {
                "name": "GetUserID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            },
            {
                "name": "GetUserFavoriteCuisine",
                "Description": "This API is to get the favorite cuisine of a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "cuisine": {
                        "description": "the favorite cuisine of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserFavoriteCuisine(user_ID) -> cuisine"
            },
            {
                "name": "FindRestaurantByCuisine",
                "Description": "This API is to find a restaurant by cuisine.",
                "input_params": {
                    "cuisine": {
                        "description": "the cuisine type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "FindRestaurantByCuisine(cuisine) -> restaurant_ID"
            },
            {
                "name": "BookRestaurantTable",
                "Description": "This API is to book a table at a restaurant.",
                "input_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date for the table booking",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the table booking",
                        "type": "String"
                    }
                },
                "format": "BookRestaurantTable(restaurant_ID, date) -> booking_status"
            }
        ],
        "Query": "Hello, my name is Robert. Could you make a table booking for my favourite food type for coming Sunday?",
        "Label": "BookRestaurantTable(restaurant_ID=FindRestaurantByCuisine(cuisine=GetUserFavoriteCuisine(user_ID=GetUserID(userName='Robert'))), date='coming Sunday')",
        "Index": 635
    },
    {
        "APIs": [
            {
                "name": "GetUserID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            },
            {
                "name": "GetUserFavoriteCuisine",
                "Description": "This API is to get the favorite cuisine of a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "cuisine": {
                        "description": "the favorite cuisine of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserFavoriteCuisine(user_ID) -> cuisine"
            },
            {
                "name": "FindRestaurantByCuisine",
                "Description": "This API is to find a restaurant by cuisine.",
                "input_params": {
                    "cuisine": {
                        "description": "the cuisine to search for",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "FindRestaurantByCuisine(cuisine) -> restaurant_ID"
            },
            {
                "name": "BookRestaurantTable",
                "Description": "This API is to book a table at a restaurant.",
                "input_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date for the table booking",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the table booking",
                        "type": "String"
                    }
                },
                "format": "BookRestaurantTable(restaurant_ID, date) -> booking_status"
            }
        ],
        "Query": "I'm Michelle. Can you book a table for me for my favourite cuisine next Wednesday?",
        "Label": "BookRestaurantTable(restaurant_ID=FindRestaurantByCuisine(cuisine=GetUserFavoriteCuisine(user_ID=GetUserID(userName='Michelle'))), date='next Wednesday')",
        "Index": 636
    },
    {
        "APIs": [
            {
                "name": "GetUserID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            },
            {
                "name": "GetUserFavoriteCuisine",
                "Description": "This API is to get the favorite cuisine of a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "cuisine": {
                        "description": "the favorite cuisine of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserFavoriteCuisine(user_ID) -> cuisine"
            },
            {
                "name": "FindRestaurantByCuisine",
                "Description": "This API is to find a restaurant by cuisine.",
                "input_params": {
                    "cuisine": {
                        "description": "the cuisine type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "FindRestaurantByCuisine(cuisine) -> restaurant_ID"
            },
            {
                "name": "BookRestaurantTable",
                "Description": "This API is to book a table at a restaurant.",
                "input_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the reservation",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookRestaurantTable(restaurant_ID, date) -> booking_status"
            }
        ],
        "Query": "I'm Michelle. Can you book a table for me for my favourite cuisine next Wednesday?",
        "Label": "BookRestaurantTable(restaurant_ID=FindRestaurantByCuisine(cuisine=GetUserFavoriteCuisine(user_ID=GetUserID(userName='Michelle'))), date='next Wednesday')",
        "Index": 637
    },
    {
        "APIs": [
            {
                "name": "GetUserID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            },
            {
                "name": "GetUserFavoriteCuisine",
                "Description": "This API is to get the favorite cuisine of a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "cuisine": {
                        "description": "the favorite cuisine of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserFavoriteCuisine(user_ID) -> cuisine"
            },
            {
                "name": "FindRestaurantByCuisine",
                "Description": "This API is to find a restaurant by cuisine.",
                "input_params": {
                    "cuisine": {
                        "description": "the cuisine to search for",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "FindRestaurantByCuisine(cuisine) -> restaurant_ID"
            },
            {
                "name": "BookRestaurantTable",
                "Description": "This API is to book a table at a restaurant.",
                "input_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date for the table booking",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the table booking",
                        "type": "String"
                    }
                },
                "format": "BookRestaurantTable(restaurant_ID, date) -> booking_status"
            }
        ],
        "Query": "Hello, this is Sophia. Can you book a table for my favourite cuisine next Monday?",
        "Label": "BookRestaurantTable(restaurant_ID=FindRestaurantByCuisine(cuisine=GetUserFavoriteCuisine(user_ID=GetUserID(userName='Sophia'))), date='next Monday')",
        "Index": 638
    },
    {
        "APIs": [
            {
                "name": "GetUserID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            },
            {
                "name": "GetUserPreferredCuisine",
                "Description": "This API is to get the preferred cuisine of a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "cuisine": {
                        "description": "the preferred cuisine of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserPreferredCuisine(user_ID) -> cuisine"
            },
            {
                "name": "FindRestaurantByCuisine",
                "Description": "This API is to find a restaurant by cuisine.",
                "input_params": {
                    "cuisine": {
                        "description": "the cuisine to search for",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "FindRestaurantByCuisine(cuisine) -> restaurant_ID"
            },
            {
                "name": "ReserveTable",
                "Description": "This API is to reserve a table at a restaurant.",
                "input_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the reservation",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveTable(restaurant_ID, date, time) -> reservation_status"
            }
        ],
        "Query": "Hello there! This is Jane, could you kindly book a place for lunch at my favorite seafood restaurant next Friday at 1pm?",
        "Label": "ReserveTable(restaurant_ID=FindRestaurantByCuisine(cuisine=GetUserPreferredCuisine(user_ID=GetUserID(userName='Jane'))), date='next Friday', time='1pm')",
        "Index": 639
    },
    {
        "APIs": [
            {
                "name": "GetUserID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            },
            {
                "name": "GetUserPreferredCuisine",
                "Description": "This API is to get the preferred cuisine of a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "cuisine": {
                        "description": "the preferred cuisine of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserPreferredCuisine(user_ID) -> cuisine"
            },
            {
                "name": "FindRestaurantByCuisine",
                "Description": "This API is to find a restaurant by cuisine.",
                "input_params": {
                    "cuisine": {
                        "description": "the cuisine to search for",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "FindRestaurantByCuisine(cuisine) -> restaurant_ID"
            },
            {
                "name": "ReserveTable",
                "Description": "This API is to reserve a table at a restaurant.",
                "input_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the reservation",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveTable(restaurant_ID, date, time) -> reservation_status"
            }
        ],
        "Query": "Hey, it's Sara here. Could you reserve a table for lunch at my preferred salad bar this coming Monday at 12:30pm?",
        "Label": "ReserveTable(restaurant_ID=FindRestaurantByCuisine(cuisine=GetUserPreferredCuisine(user_ID=GetUserID(userName='Sara'))), date='this coming Monday', time='12:30pm')",
        "Index": 640
    },
    {
        "APIs": [
            {
                "name": "Username2City",
                "Description": "This API is to convert user name to user's city.",
                "input_params": {
                    "username": {
                        "description": "the username of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "the city of the person",
                        "type": "String"
                    }
                },
                "format": "Username2City(username) -> city"
            },
            {
                "name": "City2Weather",
                "Description": "This API is to get the current weather conditions of a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather conditions of the city",
                        "type": "String"
                    }
                },
                "format": "City2Weather(city) -> weather"
            },
            {
                "name": "Weather2Advice",
                "Description": "This API is to provide guidance based on the current weather conditions.",
                "input_params": {
                    "weather": {
                        "description": "the weather conditions",
                        "type": "String"
                    }
                },
                "output_params": {
                    "advice": {
                        "description": "the guidance based on the weather conditions",
                        "type": "String"
                    }
                },
                "format": "Weather2Advice(weather) -> advice"
            }
        ],
        "Query": "I'm known as 'Jack_Sparrow' in the system. Can you give me guidance according to the current climatic conditions of my locality?",
        "Label": "Weather2Advice(weather=City2Weather(city=Username2City(username='Jack_Sparrow')))",
        "Index": 641
    },
    {
        "APIs": [
            {
                "name": "Username2City",
                "Description": "This API is to convert user name to user city.",
                "input_params": {
                    "username": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "the city of the user",
                        "type": "String"
                    }
                },
                "format": "Username2City(username) -> city"
            },
            {
                "name": "City2Weather",
                "Description": "This API is to get the weather of a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather of the city",
                        "type": "String"
                    }
                },
                "format": "City2Weather(city) -> weather"
            },
            {
                "name": "Weather2Advice",
                "Description": "This API is to provide advice based on the weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "advice": {
                        "description": "the advice based on the weather",
                        "type": "String"
                    }
                },
                "format": "Weather2Advice(weather) -> advice"
            }
        ],
        "Query": "My profile name is 'Sarah1987'. Can you offer me some tips considering the weather of my town currently?",
        "Label": "Weather2Advice(weather=City2Weather(city=Username2City(username='Sarah1987')))",
        "Index": 642
    },
    {
        "APIs": [
            {
                "name": "Username2City",
                "Description": "This API is to convert user name to city name.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "format": "Username2City(username) -> city"
            },
            {
                "name": "City2Weather",
                "Description": "This API is to get the weather of a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather of the city",
                        "type": "String"
                    }
                },
                "format": "City2Weather(city) -> weather"
            },
            {
                "name": "Weather2Advice",
                "Description": "This API is to provide advice based on the weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "advice": {
                        "description": "the advice based on the weather",
                        "type": "String"
                    }
                },
                "format": "Weather2Advice(weather) -> advice"
            }
        ],
        "Query": "My profile name is 'Sarah1987'. Can you offer me some tips considering the weather of my town currently?",
        "Label": "Weather2Advice(weather=City2Weather(city=Username2City(username='Sarah1987')))",
        "Index": 643
    },
    {
        "APIs": [
            {
                "name": "GetUserCar",
                "Description": "This API is to get the car ID of a user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "car_id": {
                        "description": "the ID of the user's car",
                        "type": "Integer"
                    }
                },
                "format": "GetUserCar(user_name) -> car_id"
            },
            {
                "name": "GetUserLocation",
                "Description": "This API is to get the location of a user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_location": {
                        "description": "the location of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserLocation(user_name) -> user_location"
            },
            {
                "name": "GetServiceStationNearMe",
                "Description": "This API is to get the nearest service station based on user location.",
                "input_params": {
                    "user_location": {
                        "description": "the location of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "service_station_id": {
                        "description": "the ID of the nearest service station",
                        "type": "Integer"
                    }
                },
                "format": "GetServiceStationNearMe(user_location) -> service_station_id"
            },
            {
                "name": "BookCarService",
                "Description": "This API is to book a car service at a service station.",
                "input_params": {
                    "car_id": {
                        "description": "the ID of the car",
                        "type": "Integer"
                    },
                    "service_station_id": {
                        "description": "the ID of the service station",
                        "type": "Integer"
                    },
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookCarService(car_id, service_station_id, user_name) -> booking_status"
            }
        ],
        "Query": "I am 'JohnSmith'. Could you arrange a service for my vehicle at the closest service station?",
        "Label": "BookCarService(car_id=GetUserCar(user_name='JohnSmith'), service_station_id=GetServiceStationNearMe(user_location=GetUserLocation(user_name='JohnSmith')), user_name='JohnSmith')",
        "Index": 644
    },
    {
        "APIs": [
            {
                "name": "GetUserCar",
                "Description": "This API is to get the car ID of a user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "car_id": {
                        "description": "the ID of the user's car",
                        "type": "Integer"
                    }
                },
                "format": "GetUserCar(user_name) -> car_id"
            },
            {
                "name": "GetUserLocation",
                "Description": "This API is to get the location of a user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_location": {
                        "description": "the location of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserLocation(user_name) -> user_location"
            },
            {
                "name": "GetServiceStationNearMe",
                "Description": "This API is to get the nearest service station based on user location.",
                "input_params": {
                    "user_location": {
                        "description": "the location of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "service_station_id": {
                        "description": "the ID of the nearest service station",
                        "type": "Integer"
                    }
                },
                "format": "GetServiceStationNearMe(user_location) -> service_station_id"
            },
            {
                "name": "BookCarService",
                "Description": "This API is to book a car service.",
                "input_params": {
                    "car_id": {
                        "description": "the ID of the car",
                        "type": "Integer"
                    },
                    "service_station_id": {
                        "description": "the ID of the service station",
                        "type": "Integer"
                    },
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookCarService(car_id, service_station_id, user_name) -> booking_status"
            }
        ],
        "Query": "This is 'RobertBrown'. Could you schedule a service for my auto at the nearest service center?",
        "Label": "BookCarService(car_id=GetUserCar(user_name='RobertBrown'), service_station_id=GetServiceStationNearMe(user_location=GetUserLocation(user_name='RobertBrown')), user_name='RobertBrown')",
        "Index": 645
    },
    {
        "APIs": [
            {
                "name": "GetUserCar",
                "Description": "This API is to get the car ID of a user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "car_id": {
                        "description": "the ID of the user's car",
                        "type": "Integer"
                    }
                },
                "format": "GetUserCar(user_name) -> car_id"
            },
            {
                "name": "GetUserLocation",
                "Description": "This API is to get the location of a user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_location": {
                        "description": "the location of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserLocation(user_name) -> user_location"
            },
            {
                "name": "GetServiceStationNearMe",
                "Description": "This API is to get the nearest service station based on user location.",
                "input_params": {
                    "user_location": {
                        "description": "the location of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "service_station_id": {
                        "description": "the ID of the nearest service station",
                        "type": "Integer"
                    }
                },
                "format": "GetServiceStationNearMe(user_location) -> service_station_id"
            },
            {
                "name": "BookCarService",
                "Description": "This API is to book a service for a car at a service hub.",
                "input_params": {
                    "car_id": {
                        "description": "the ID of the car",
                        "type": "Integer"
                    },
                    "service_station_id": {
                        "description": "the ID of the service station",
                        "type": "Integer"
                    },
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookCarService(car_id, service_station_id, user_name) -> booking_status"
            }
        ],
        "Query": "I'm 'SusanGreen'. Can you please book a service for my car at the closest service hub?",
        "Label": "BookCarService(car_id=GetUserCar(user_name='SusanGreen'), service_station_id=GetServiceStationNearMe(user_location=GetUserLocation(user_name='SusanGreen')), user_name='SusanGreen')",
        "Index": 646
    },
    {
        "APIs": [
            {
                "name": "GetUserCar",
                "Description": "This API is to get the car ID of a user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "car_id": {
                        "description": "the ID of the user's car",
                        "type": "Integer"
                    }
                },
                "format": "GetUserCar(user_name) -> car_id"
            },
            {
                "name": "GetUserLocation",
                "Description": "This API is to get the location of a user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_location": {
                        "description": "the location of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserLocation(user_name) -> user_location"
            },
            {
                "name": "GetServiceStationNearMe",
                "Description": "This API is to get the nearest service station to a user's location.",
                "input_params": {
                    "user_location": {
                        "description": "the location of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "service_station_id": {
                        "description": "the ID of the nearest service station",
                        "type": "Integer"
                    }
                },
                "format": "GetServiceStationNearMe(user_location) -> service_station_id"
            },
            {
                "name": "BookCarService",
                "Description": "This API is to book a car service at a service garage.",
                "input_params": {
                    "car_id": {
                        "description": "the ID of the car",
                        "type": "Integer"
                    },
                    "service_station_id": {
                        "description": "the ID of the service station",
                        "type": "Integer"
                    },
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookCarService(car_id, service_station_id, user_name) -> booking_status"
            }
        ],
        "Query": "I'm 'JamesBlack'. Can you arrange a service for my auto at the closest service garage?",
        "Label": "BookCarService(car_id=GetUserCar(user_name='JamesBlack'), service_station_id=GetServiceStationNearMe(user_location=GetUserLocation(user_name='JamesBlack')), user_name='JamesBlack')",
        "Index": 647
    },
    {
        "APIs": [
            {
                "name": "GetUserLocation",
                "Description": "This API is to get the location of the user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserLocation(user_name) -> location"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast for a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location for which weather forecast is needed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the weather status for the location",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(location) -> weather_status"
            },
            {
                "name": "SuggestApparel",
                "Description": "This API is to suggest an outfit based on the weather status.",
                "input_params": {
                    "weather_status": {
                        "description": "the weather status",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the suggested outfit",
                        "type": "String"
                    }
                },
                "format": "SuggestApparel(weather_status) -> outfit"
            }
        ],
        "Query": "Hello, my name is Sarah. Can you suggest what outfit should I put on today?",
        "Label": "SuggestApparel(weather_status=WeatherForecast(location=GetUserLocation(user_name='Sarah')))",
        "Index": 648
    },
    {
        "APIs": [
            {
                "name": "GetUserLocation",
                "Description": "This API is to get the location of the user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserLocation(user_name) -> location"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast for a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location for which weather forecast is needed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the weather status for the location",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(location) -> weather_status"
            },
            {
                "name": "SuggestApparel",
                "Description": "This API is to suggest apparel based on weather status.",
                "input_params": {
                    "weather_status": {
                        "description": "the weather status for which apparel suggestion is needed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "apparel_suggestion": {
                        "description": "the suggested apparel based on weather status",
                        "type": "String"
                    }
                },
                "format": "SuggestApparel(weather_status) -> apparel_suggestion"
            }
        ],
        "Query": "Hey, I'm Kevin. Can you guide me on what to wear today?",
        "Label": "SuggestApparel(weather_status=WeatherForecast(location=GetUserLocation(user_name='Kevin')))",
        "Index": 649
    },
    {
        "APIs": [
            {
                "name": "GetUserLocation",
                "Description": "This API is to get the location of the user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserLocation(user_name) -> location"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast for a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location for which weather forecast is required",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the weather status for the location",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(location) -> weather_status"
            },
            {
                "name": "SuggestApparel",
                "Description": "This API is to suggest apparel based on weather status.",
                "input_params": {
                    "weather_status": {
                        "description": "the weather status for which apparel suggestion is required",
                        "type": "String"
                    }
                },
                "output_params": {
                    "apparel_suggestion": {
                        "description": "the suggested apparel based on weather status",
                        "type": "String"
                    }
                },
                "format": "SuggestApparel(weather_status) -> apparel_suggestion"
            }
        ],
        "Query": "Hi, I'm Amanda. What should I dress today?",
        "Label": "SuggestApparel(weather_status=WeatherForecast(location=GetUserLocation(user_name='Amanda')))",
        "Index": 650
    },
    {
        "APIs": [
            {
                "name": "GetUserLocation",
                "Description": "This API is to get the location of the user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserLocation(user_name) -> location"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast for a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location for which weather forecast is required",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the weather status for the given location",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(location) -> weather_status"
            },
            {
                "name": "SuggestApparel",
                "Description": "This API is to suggest apparel based on weather status.",
                "input_params": {
                    "weather_status": {
                        "description": "the weather status for which apparel suggestion is required",
                        "type": "String"
                    }
                },
                "output_params": {
                    "apparel_suggestion": {
                        "description": "the suggested apparel based on weather status",
                        "type": "String"
                    }
                },
                "format": "SuggestApparel(weather_status) -> apparel_suggestion"
            }
        ],
        "Query": "Hi, I'm Amanda. What should I dress today?",
        "Label": "SuggestApparel(weather_status=WeatherForecast(location=GetUserLocation(user_name='Amanda')))",
        "Index": 651
    },
    {
        "APIs": [
            {
                "name": "GetUserLocation",
                "Description": "This API is to get the location of the user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserLocation(user_name) -> location"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast for a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location for which weather forecast is required",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the weather status for the location",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(location) -> weather_status"
            },
            {
                "name": "SuggestApparel",
                "Description": "This API is to suggest an outfit based on the weather status.",
                "input_params": {
                    "weather_status": {
                        "description": "the weather status",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the suggested outfit",
                        "type": "String"
                    }
                },
                "format": "SuggestApparel(weather_status) -> outfit"
            }
        ],
        "Query": "Hey, my name is Emily. What outfit should I wear today?",
        "Label": "SuggestApparel(weather_status=WeatherForecast(location=GetUserLocation(user_name='Emily')))",
        "Index": 652
    },
    {
        "APIs": [
            {
                "name": "GetUserFavoriteFood",
                "Description": "This API is to get the favorite food of a user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "favorite_food": {
                        "description": "the favorite food of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserFavoriteFood(user_name) -> favorite_food"
            },
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on the favorite food.",
                "input_params": {
                    "favorite_food": {
                        "description": "the favorite food of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(favorite_food) -> restaurant"
            },
            {
                "name": "GetRestaurantRating",
                "Description": "This API is to get the rating of a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "rating": {
                        "description": "the rating of the restaurant",
                        "type": "Float"
                    }
                },
                "format": "GetRestaurantRating(restaurant) -> rating"
            }
        ],
        "Query": "Hi, I am Jack. Can you help me find a top-rated restaurant that serves my favorite cuisine?",
        "Label": "GetRestaurantRating(restaurant=FindRestaurant(favorite_food=GetUserFavoriteFood(user_name='Jack')))",
        "Index": 653
    },
    {
        "APIs": [
            {
                "name": "GetUserFavoriteFood",
                "Description": "This API is to get the favorite food of a user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "favorite_food": {
                        "description": "the favorite food of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserFavoriteFood(user_name) -> favorite_food"
            },
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on the favorite food.",
                "input_params": {
                    "favorite_food": {
                        "description": "the favorite food to search for",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(favorite_food) -> restaurant"
            },
            {
                "name": "GetRestaurantRating",
                "Description": "This API is to get the rating of a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "rating": {
                        "description": "the rating of the restaurant",
                        "type": "Float"
                    }
                },
                "format": "GetRestaurantRating(restaurant) -> rating"
            }
        ],
        "Query": "Hey, this is John. Can you search a well-rated restaurant that serves the food I like the most?",
        "Label": "GetRestaurantRating(restaurant=FindRestaurant(favorite_food=GetUserFavoriteFood(user_name='John')))",
        "Index": 654
    },
    {
        "APIs": [
            {
                "name": "GetUserFavoriteFood",
                "Description": "This API is to get the favorite food of a user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "favorite_food": {
                        "description": "the favorite food of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserFavoriteFood(user_name) -> favorite_food"
            },
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on the favorite food.",
                "input_params": {
                    "favorite_food": {
                        "description": "the favorite food of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(favorite_food) -> restaurant"
            },
            {
                "name": "GetRestaurantRating",
                "Description": "This API is to get the rating of a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "rating": {
                        "description": "the rating of the restaurant",
                        "type": "Float"
                    }
                },
                "format": "GetRestaurantRating(restaurant) -> rating"
            }
        ],
        "Query": "Hey, this is John. Can you search a well-rated restaurant that serves the food I like the most?",
        "Label": "GetRestaurantRating(restaurant=FindRestaurant(favorite_food=GetUserFavoriteFood(user_name='John')))",
        "Index": 655
    },
    {
        "APIs": [
            {
                "name": "GetUserLocation",
                "Description": "This API is to get the location of the user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "format": "GetUserLocation(user_name) -> city_name"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast of a city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city_name) -> weather"
            },
            {
                "name": "SuggestOutfit",
                "Description": "This API is to suggest an outfit based on the weather forecast.",
                "input_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the suggested outfit",
                        "type": "String"
                    }
                },
                "format": "SuggestOutfit(weather) -> outfit"
            }
        ],
        "Query": "I am Emily, what should I wear today?",
        "Label": "SuggestOutfit(weather=WeatherForecast(city_name=GetUserLocation(user_name='Emily')))",
        "Index": 656
    },
    {
        "APIs": [
            {
                "name": "GetUserLocation",
                "Description": "This API is to get the location of the user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_name": {
                        "description": "the name of the city where the user is located",
                        "type": "String"
                    }
                },
                "format": "GetUserLocation(user_name) -> city_name"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast for a specific city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast for the city",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city_name) -> weather"
            },
            {
                "name": "SuggestOutfit",
                "Description": "This API is to suggest an outfit based on the weather forecast.",
                "input_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the suggested outfit",
                        "type": "String"
                    }
                },
                "format": "SuggestOutfit(weather) -> outfit"
            }
        ],
        "Query": "I am Mike, what should I wear today?",
        "Label": "SuggestOutfit(weather=WeatherForecast(city_name=GetUserLocation(user_name='Mike')))",
        "Index": 657
    },
    {
        "APIs": [
            {
                "name": "GetUserLocation",
                "Description": "This API is to get the location of the user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "format": "GetUserLocation(user_name) -> city_name"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast of a city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city_name) -> weather"
            },
            {
                "name": "SuggestOutfit",
                "Description": "This API is to suggest an outfit based on the weather forecast.",
                "input_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the suggested outfit",
                        "type": "String"
                    }
                },
                "format": "SuggestOutfit(weather) -> outfit"
            }
        ],
        "Query": "I am Lisa, what should I wear today?",
        "Label": "SuggestOutfit(weather=WeatherForecast(city_name=GetUserLocation(user_name='Lisa')))",
        "Index": 658
    },
    {
        "APIs": [
            {
                "name": "GetUserBirthday",
                "Description": "This API is to get the birthday of the user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "birthday": {
                        "description": "the birthday of the user",
                        "type": "Date"
                    }
                },
                "format": "GetUserBirthday(user_name) -> birthday"
            },
            {
                "name": "Birthday2ZodiacSign",
                "Description": "This API is to convert user's birthday to zodiac sign.",
                "input_params": {
                    "birthday": {
                        "description": "the birthday of the user",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "zodiac_sign": {
                        "description": "the zodiac sign of the user",
                        "type": "String"
                    }
                },
                "format": "Birthday2ZodiacSign(birthday) -> zodiac_sign"
            },
            {
                "name": "ZodiacSignHoroscope",
                "Description": "This API is to get the horoscope for a specific zodiac sign.",
                "input_params": {
                    "zodiac_sign": {
                        "description": "the zodiac sign of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "horoscope": {
                        "description": "the horoscope for the zodiac sign",
                        "type": "String"
                    }
                },
                "format": "ZodiacSignHoroscope(zodiac_sign) -> horoscope"
            }
        ],
        "Query": "Hi, My name is John. Could you please give me my horoscope for today?",
        "Label": "ZodiacSignHoroscope(zodiac_sign=Birthday2ZodiacSign(birthday=GetUserBirthday(user_name='John')))",
        "Index": 659
    },
    {
        "APIs": [
            {
                "name": "GetUserBirthday",
                "Description": "This API is to get the birthday of the user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "birthday": {
                        "description": "the birthday of the user",
                        "type": "Date"
                    }
                },
                "format": "GetUserBirthday(user_name) -> birthday"
            },
            {
                "name": "Birthday2ZodiacSign",
                "Description": "This API is to convert birthday to zodiac sign.",
                "input_params": {
                    "birthday": {
                        "description": "the birthday of the user",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "zodiac_sign": {
                        "description": "the zodiac sign of the user",
                        "type": "String"
                    }
                },
                "format": "Birthday2ZodiacSign(birthday) -> zodiac_sign"
            },
            {
                "name": "ZodiacSignHoroscope",
                "Description": "This API is to get the horoscope for a zodiac sign.",
                "input_params": {
                    "zodiac_sign": {
                        "description": "the zodiac sign of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "horoscope": {
                        "description": "the horoscope for the zodiac sign",
                        "type": "String"
                    }
                },
                "format": "ZodiacSignHoroscope(zodiac_sign) -> horoscope"
            }
        ],
        "Query": "My name is Emily. Can I know what's my horoscope for the day?",
        "Label": "ZodiacSignHoroscope(zodiac_sign=Birthday2ZodiacSign(birthday=GetUserBirthday(user_name='Emily')))",
        "Index": 660
    },
    {
        "APIs": [
            {
                "name": "GetUserCurrentWeather",
                "Description": "This API is to get the current weather in the user's area.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the current weather in the user's area",
                        "type": "String"
                    }
                },
                "format": "GetUserCurrentWeather(user_name) -> weather"
            },
            {
                "name": "GetUserPreference",
                "Description": "This API is to get the user's outfit preference.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "style": {
                        "description": "the outfit preference of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserPreference(user_name) -> style"
            },
            {
                "name": "RecommendOutfit",
                "Description": "This API is to recommend an outfit based on the user's preference and the current weather.",
                "input_params": {
                    "weather": {
                        "description": "the current weather",
                        "type": "String"
                    },
                    "style": {
                        "description": "the outfit preference",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "RecommendOutfit(weather, style) -> outfit"
            }
        ],
        "Query": "Hi, I'm Jack. Can you suggest me an outfit based on my preference and the current weather in my area?",
        "Label": "RecommendOutfit(weather=GetUserCurrentWeather(user_name='Jack'), style=GetUserPreference(user_name='Jack'))",
        "Index": 661
    },
    {
        "APIs": [
            {
                "name": "GetUserCurrentWeather",
                "Description": "This API is to get the current weather for a user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the current weather",
                        "type": "String"
                    }
                },
                "format": "GetUserCurrentWeather(user_name) -> weather"
            },
            {
                "name": "GetUserPreference",
                "Description": "This API is to get the fashion preference of a user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "style": {
                        "description": "the fashion style preference",
                        "type": "String"
                    }
                },
                "format": "GetUserPreference(user_name) -> style"
            },
            {
                "name": "RecommendOutfit",
                "Description": "This API is to recommend an outfit based on weather and fashion taste.",
                "input_params": {
                    "weather": {
                        "description": "the current weather",
                        "type": "String"
                    },
                    "style": {
                        "description": "the fashion style preference",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "RecommendOutfit(weather, style) -> outfit"
            }
        ],
        "Query": "Hello, I'm Sara. What outfit would you recommend today considering the weather and my fashion taste?",
        "Label": "RecommendOutfit(weather=GetUserCurrentWeather(user_name='Sara'), style=GetUserPreference(user_name='Sara'))",
        "Index": 662
    },
    {
        "APIs": [
            {
                "name": "GetUserCurrentWeather",
                "Description": "This API is to get the current weather of the user's location.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the current weather",
                        "type": "String"
                    }
                },
                "format": "GetUserCurrentWeather(user_name) -> weather"
            },
            {
                "name": "GetUserPreference",
                "Description": "This API is to get the style preference of the user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "style": {
                        "description": "the style preference of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserPreference(user_name) -> style"
            },
            {
                "name": "RecommendOutfit",
                "Description": "This API is to recommend an outfit based on the user's style preference and the current weather.",
                "input_params": {
                    "weather": {
                        "description": "the current weather",
                        "type": "String"
                    },
                    "style": {
                        "description": "the style preference of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "RecommendOutfit(weather, style) -> outfit"
            }
        ],
        "Query": "I'm Robert. What should I dress up today considering my style and the current weather where I'm located?",
        "Label": "RecommendOutfit(weather=GetUserCurrentWeather(user_name='Robert'), style=GetUserPreference(user_name='Robert'))",
        "Index": 663
    },
    {
        "APIs": [
            {
                "name": "GetUserCurrentWeather",
                "Description": "This API is to get the current weather of the user's location.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the current weather",
                        "type": "String"
                    }
                },
                "format": "GetUserCurrentWeather(user_name) -> weather"
            },
            {
                "name": "GetUserPreference",
                "Description": "This API is to get the fashion sense or style preference of the user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "style": {
                        "description": "the fashion sense or style preference",
                        "type": "String"
                    }
                },
                "format": "GetUserPreference(user_name) -> style"
            },
            {
                "name": "RecommendOutfit",
                "Description": "This API is to recommend an outfit based on the user's fashion sense and the current weather.",
                "input_params": {
                    "weather": {
                        "description": "the current weather",
                        "type": "String"
                    },
                    "style": {
                        "description": "the fashion sense or style preference",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "RecommendOutfit(weather, style) -> outfit"
            }
        ],
        "Query": "My name is Emily. Could you recommend me a dress based on my fashion sense and the weather here?",
        "Label": "RecommendOutfit(weather=GetUserCurrentWeather(user_name='Emily'), style=GetUserPreference(user_name='Emily'))",
        "Index": 664
    },
    {
        "APIs": [
            {
                "name": "GetUserCurrentWeather",
                "Description": "This API is to get the current weather conditions in the user's area.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the current weather conditions",
                        "type": "String"
                    }
                },
                "format": "GetUserCurrentWeather(user_name) -> weather"
            },
            {
                "name": "GetUserPreference",
                "Description": "This API is to get the dressing style preference of the user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "style": {
                        "description": "the dressing style preference of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserPreference(user_name) -> style"
            },
            {
                "name": "RecommendOutfit",
                "Description": "This API is to recommend an outfit based on the user's dressing style and current weather conditions.",
                "input_params": {
                    "weather": {
                        "description": "the current weather conditions",
                        "type": "String"
                    },
                    "style": {
                        "description": "the dressing style preference of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "RecommendOutfit(weather, style) -> outfit"
            }
        ],
        "Query": "I am John. What should be my attire today based on my dressing style and current weather conditions in my area?",
        "Label": "RecommendOutfit(weather=GetUserCurrentWeather(user_name='John'), style=GetUserPreference(user_name='John'))",
        "Index": 665
    },
    {
        "APIs": [
            {
                "name": "GetCinema",
                "Description": "This API is to get the cinema name based on the city and movie.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cinema_name": {
                        "description": "the name of the cinema",
                        "type": "String"
                    }
                },
                "format": "GetCinema(city, movie) -> cinema_name"
            },
            {
                "name": "CheckTime",
                "Description": "This API is to check the show time of a movie in a cinema.",
                "input_params": {
                    "cinema_name": {
                        "description": "the name of the cinema",
                        "type": "String"
                    },
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "show_time": {
                        "description": "the show time of the movie",
                        "type": "Time"
                    }
                },
                "format": "CheckTime(cinema_name, movie) -> show_time"
            },
            {
                "name": "BookTicket",
                "Description": "This API is to book a ticket for a movie in a cinema.",
                "input_params": {
                    "cinema_name": {
                        "description": "the name of the cinema",
                        "type": "String"
                    },
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "show_time": {
                        "description": "the show time of the movie",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the ticket booking",
                        "type": "String"
                    }
                },
                "format": "BookTicket(cinema_name, movie, show_time) -> booking_status"
            }
        ],
        "Query": "I'm currently in Los Angeles and I'm interested in seeing the movie 'Avatar'. Can you assist me in reserving a seat?",
        "Label": "BookTicket(cinema_name=GetCinema(city='Los Angeles', movie='Avatar'), movie='Avatar', show_time=CheckTime(cinema_name=GetCinema(city='Los Angeles', movie='Avatar'), movie='Avatar'))",
        "Index": 666
    },
    {
        "APIs": [
            {
                "name": "GetCinema",
                "Description": "This API is to get the cinema name based on the city and movie name.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cinema_name": {
                        "description": "the name of the cinema",
                        "type": "String"
                    }
                },
                "format": "GetCinema(city, movie) -> cinema_name"
            },
            {
                "name": "CheckTime",
                "Description": "This API is to check the show time of a movie in a cinema.",
                "input_params": {
                    "cinema_name": {
                        "description": "the name of the cinema",
                        "type": "String"
                    },
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "show_time": {
                        "description": "the show time of the movie",
                        "type": "Time"
                    }
                },
                "format": "CheckTime(cinema_name, movie) -> show_time"
            },
            {
                "name": "BookTicket",
                "Description": "This API is to book a ticket for a movie in a cinema.",
                "input_params": {
                    "cinema_name": {
                        "description": "the name of the cinema",
                        "type": "String"
                    },
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "show_time": {
                        "description": "the show time of the movie",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the ticket booking",
                        "type": "String"
                    }
                },
                "format": "BookTicket(cinema_name, movie, show_time) -> booking_status"
            }
        ],
        "Query": "I am in London and I want to see the movie 'Titanic'. Can you help me in booking a ticket?",
        "Label": "BookTicket(cinema_name=GetCinema(city='London', movie='Titanic'), movie='Titanic', show_time=CheckTime(cinema_name=GetCinema(city='London', movie='Titanic'), movie='Titanic'))",
        "Index": 667
    },
    {
        "APIs": [
            {
                "name": "GetCinema",
                "Description": "This API is to get the cinema name based on the city and movie name.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cinema_name": {
                        "description": "the name of the cinema",
                        "type": "String"
                    }
                },
                "format": "GetCinema(city, movie) -> cinema_name"
            },
            {
                "name": "CheckTime",
                "Description": "This API is to check the show time of a movie in a specific cinema.",
                "input_params": {
                    "cinema_name": {
                        "description": "the name of the cinema",
                        "type": "String"
                    },
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "show_time": {
                        "description": "the show time of the movie",
                        "type": "Time"
                    }
                },
                "format": "CheckTime(cinema_name, movie) -> show_time"
            },
            {
                "name": "BookTicket",
                "Description": "This API is to book a ticket for a movie in a specific cinema.",
                "input_params": {
                    "cinema_name": {
                        "description": "the name of the cinema",
                        "type": "String"
                    },
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "show_time": {
                        "description": "the show time of the movie",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the ticket booking",
                        "type": "String"
                    }
                },
                "format": "BookTicket(cinema_name, movie, show_time) -> booking_status"
            }
        ],
        "Query": "I'm in Berlin and I'd like to watch the movie 'Parasite'. Could you help me book a ticket?",
        "Label": "BookTicket(cinema_name=GetCinema(city='Berlin', movie='Parasite'), movie='Parasite', show_time=CheckTime(cinema_name=GetCinema(city='Berlin', movie='Parasite'), movie='Parasite'))",
        "Index": 668
    },
    {
        "APIs": [
            {
                "name": "GetCinema",
                "Description": "This API is to get the cinema name based on the city and movie name.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cinema_name": {
                        "description": "the name of the cinema",
                        "type": "String"
                    }
                },
                "format": "GetCinema(city, movie) -> cinema_name"
            },
            {
                "name": "CheckTime",
                "Description": "This API is to check the show time of a movie in a cinema.",
                "input_params": {
                    "cinema_name": {
                        "description": "the name of the cinema",
                        "type": "String"
                    },
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "show_time": {
                        "description": "the show time of the movie",
                        "type": "Time"
                    }
                },
                "format": "CheckTime(cinema_name, movie) -> show_time"
            },
            {
                "name": "BookTicket",
                "Description": "This API is to book a ticket for a movie in a cinema.",
                "input_params": {
                    "cinema_name": {
                        "description": "the name of the cinema",
                        "type": "String"
                    },
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "show_time": {
                        "description": "the show time of the movie",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the ticket booking",
                        "type": "String"
                    }
                },
                "format": "BookTicket(cinema_name, movie, show_time) -> booking_status"
            }
        ],
        "Query": "I'm in Berlin and I'd like to watch the movie 'Parasite'. Could you help me book a ticket?",
        "Label": "BookTicket(cinema_name=GetCinema(city='Berlin', movie='Parasite'), movie='Parasite', show_time=CheckTime(cinema_name=GetCinema(city='Berlin', movie='Parasite'), movie='Parasite'))",
        "Index": 669
    },
    {
        "APIs": [
            {
                "name": "GetCinema",
                "Description": "This API is to get the cinema name based on the city and movie.",
                "input_params": {
                    "city": {
                        "description": "the city where the cinema is located",
                        "type": "String"
                    },
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cinema_name": {
                        "description": "the name of the cinema",
                        "type": "String"
                    }
                },
                "format": "GetCinema(city, movie) -> cinema_name"
            },
            {
                "name": "CheckTime",
                "Description": "This API is to check the show time of a movie in a specific cinema.",
                "input_params": {
                    "cinema_name": {
                        "description": "the name of the cinema",
                        "type": "String"
                    },
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "show_time": {
                        "description": "the show time of the movie in the cinema",
                        "type": "Time"
                    }
                },
                "format": "CheckTime(cinema_name, movie) -> show_time"
            },
            {
                "name": "BookTicket",
                "Description": "This API is to book a ticket for a movie in a specific cinema.",
                "input_params": {
                    "cinema_name": {
                        "description": "the name of the cinema",
                        "type": "String"
                    },
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "show_time": {
                        "description": "the show time of the movie",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the ticket booking",
                        "type": "String"
                    }
                },
                "format": "BookTicket(cinema_name, movie, show_time) -> booking_status"
            }
        ],
        "Query": "I am in Tokyo and I am interested in seeing the movie 'Spirited Away'. Can you assist me in reserving a ticket?",
        "Label": "BookTicket(cinema_name=GetCinema(city='Tokyo', movie='Spirited Away'), movie='Spirited Away', show_time=CheckTime(cinema_name=GetCinema(city='Tokyo', movie='Spirited Away'), movie='Spirited Away'))",
        "Index": 670
    },
    {
        "APIs": [
            {
                "name": "FindHotel",
                "Description": "This API is to find a hotel based on city and star rating.",
                "input_params": {
                    "city": {
                        "description": "the city where the hotel is located",
                        "type": "String"
                    },
                    "star_rating": {
                        "description": "the star rating of the hotel",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "FindHotel(city, star_rating) -> hotel_name"
            },
            {
                "name": "BookRoom",
                "Description": "This API is to book a room in a hotel.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookRoom(hotel_name, check_in_date, check_out_date) -> booking_status"
            }
        ],
        "Query": "I need to book a room in a 4-star hotel in New York from June 10 to June 15. Could you arrange that for me?",
        "Label": "BookRoom(hotel_name=FindHotel(city=\"New York\", star_rating=\"4\"), check_in_date=\"June 10\", check_out_date=\"June 15\")",
        "Index": 671
    },
    {
        "APIs": [
            {
                "name": "FindHotel",
                "Description": "This API is to find a hotel based on city and star rating.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "star_rating": {
                        "description": "the star rating of the hotel",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "FindHotel(city, star_rating) -> hotel_name"
            },
            {
                "name": "BookRoom",
                "Description": "This API is to book a room in a hotel.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "BookRoom(hotel_name, check_in_date, check_out_date) -> reservation_status"
            }
        ],
        "Query": "Can you help me make a reservation in a 3-star hotel in Chicago from July 20 to July 25?",
        "Label": "BookRoom(hotel_name=FindHotel(city=\"Chicago\", star_rating=\"3\"), check_in_date=\"July 20\", check_out_date=\"July 25\")",
        "Index": 672
    },
    {
        "APIs": [
            {
                "name": "FindHotel",
                "Description": "This API is to find a hotel based on city and quality.",
                "input_params": {
                    "city": {
                        "description": "the city where the hotel is located",
                        "type": "String"
                    },
                    "quality": {
                        "description": "the quality of the hotel (e.g. budget, luxury)",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotelName": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "FindHotel(city, quality) -> hotelName"
            },
            {
                "name": "BookRoom",
                "Description": "This API is to book a hotel room.",
                "input_params": {
                    "hotelName": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the reservation",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookRoom(hotelName, date) -> booking status"
            }
        ],
        "Query": "I need to reserve a budget hotel in New York for 12th October",
        "Label": "BookRoom(hotelName=FindHotel(city='New York', quality='budget'), date='12th October')",
        "Index": 673
    },
    {
        "APIs": [
            {
                "name": "FindHotel",
                "Description": "This API is to find a hotel in a specific city with a specific quality.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "quality": {
                        "description": "the quality of the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotelName": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "FindHotel(city, quality) -> hotelName"
            },
            {
                "name": "BookRoom",
                "Description": "This API is to book a room in a hotel.",
                "input_params": {
                    "hotelName": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookRoom(hotelName, date) -> booking status"
            }
        ],
        "Query": "I want to book an economical hotel in Berlin for 5th September",
        "Label": "BookRoom(hotelName=FindHotel(city='Berlin', quality='economical'), date='5th September')",
        "Index": 674
    },
    {
        "APIs": [
            {
                "name": "UserNameToID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserNameToID(user_name) -> user_ID"
            },
            {
                "name": "BookNameToID",
                "Description": "This API is to convert book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookNameToID(book_name) -> book_ID"
            },
            {
                "name": "BorrowBook",
                "Description": "This API is to borrow a book.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    },
                    "return_date": {
                        "description": "the date when the book should be returned",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "borrow_status": {
                        "description": "the status of the borrowing",
                        "type": "String"
                    }
                },
                "format": "BorrowBook(user_ID, book_ID, return_date) -> borrow_status"
            }
        ],
        "Query": "Is it possible for Mark to borrow 'To Kill a Mockingbird' until next Monday?",
        "Label": "BorrowBook(user_ID=UserNameToID(user_name='Mark'), book_ID=BookNameToID(book_name='To Kill a Mockingbird'), return_date='next Monday')",
        "Index": 675
    },
    {
        "APIs": [
            {
                "name": "UserNameToID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserNameToID(user_name) -> user_ID"
            },
            {
                "name": "BookNameToID",
                "Description": "This API is to convert book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookNameToID(book_name) -> book_ID"
            },
            {
                "name": "BorrowBook",
                "Description": "This API is to borrow a book.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    },
                    "return_date": {
                        "description": "the date when the book should be returned",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "borrow_status": {
                        "description": "the status of the borrowing",
                        "type": "String"
                    }
                },
                "format": "BorrowBook(user_ID, book_ID, return_date) -> borrow_status"
            }
        ],
        "Query": "Can Jessica borrow \"1984\" until the end of this year?",
        "Label": "BorrowBook(user_ID=UserNameToID(user_name='Jessica'), book_ID=BookNameToID(book_name='1984'), return_date='end of this year')",
        "Index": 676
    },
    {
        "APIs": [
            {
                "name": "ProductNameToID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductNameToID(product_name) -> product_ID"
            },
            {
                "name": "CustomerNameToID",
                "Description": "This API is to convert customer name to customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerNameToID(customer_name) -> customer_ID"
            },
            {
                "name": "AddProductToCart",
                "Description": "This API is to add a product to the customer's cart.",
                "input_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the product to add",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "cart_status": {
                        "description": "the status of the cart after adding the product",
                        "type": "String"
                    }
                },
                "format": "AddProductToCart(product_ID, customer_ID, quantity) -> cart_status"
            }
        ],
        "Query": "Can you add 2 Samsung Galaxy S21 to Sarah's cart?",
        "Label": "AddProductToCart(product_ID=ProductNameToID(product_name='Samsung Galaxy S21'), customer_ID=CustomerNameToID(customer_name='Sarah'), quantity=2)",
        "Index": 677
    },
    {
        "APIs": [
            {
                "name": "UsernameToID",
                "Description": "This API is to convert username to user ID.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UsernameToID(username) -> user_ID"
            },
            {
                "name": "MovieNameToID",
                "Description": "This API is to convert movie name to movie ID.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieNameToID(movie_name) -> movie_ID"
            },
            {
                "name": "RentMovie",
                "Description": "This API is to rent a movie for a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of rental",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "rental_status": {
                        "description": "the status of the rental",
                        "type": "String"
                    }
                },
                "format": "RentMovie(user_ID, movie_ID, date) -> rental_status"
            }
        ],
        "Query": "Can you rent the movie 'The Dark Knight' for the user 'BruceWayne' on June 10, 2022?",
        "Label": "RentMovie(user_ID=UsernameToID(username='BruceWayne'), movie_ID=MovieNameToID(movie_name='The Dark Knight'), date='June 10, 2022')",
        "Index": 678
    },
    {
        "APIs": [
            {
                "name": "UsernameToID",
                "Description": "This API is to convert username to user ID.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UsernameToID(username) -> user_ID"
            },
            {
                "name": "MovieNameToID",
                "Description": "This API is to convert movie name to movie ID.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieNameToID(movie_name) -> movie_ID"
            },
            {
                "name": "RentMovie",
                "Description": "This API is to rent a movie for a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of rental",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "rental_status": {
                        "description": "the status of the rental",
                        "type": "String"
                    }
                },
                "format": "RentMovie(user_ID, movie_ID, date) -> rental_status"
            }
        ],
        "Query": "Can you rent the movie 'The Prestige' for the user 'ClarkKent' on July 15, 2022?",
        "Label": "RentMovie(user_ID=UsernameToID(username='ClarkKent'), movie_ID=MovieNameToID(movie_name='The Prestige'), date='July 15, 2022')",
        "Index": 679
    },
    {
        "APIs": [
            {
                "name": "UsernameToID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UsernameToID(username) -> user_ID"
            },
            {
                "name": "MovieNameToID",
                "Description": "This API is to convert movie name to movie ID.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieNameToID(movie_name) -> movie_ID"
            },
            {
                "name": "RentMovie",
                "Description": "This API is to rent a movie for a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of rental",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "rental_status": {
                        "description": "the status of the rental",
                        "type": "String"
                    }
                },
                "format": "RentMovie(user_ID, movie_ID, date) -> rental_status"
            }
        ],
        "Query": "Can you rent the movie 'The Prestige' for the user 'ClarkKent' on July 15, 2022?",
        "Label": "RentMovie(user_ID=UsernameToID(username='ClarkKent'), movie_ID=MovieNameToID(movie_name='The Prestige'), date='July 15, 2022')",
        "Index": 680
    },
    {
        "APIs": [
            {
                "name": "CustomerNameToID",
                "Description": "This API is to convert customer name to customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerNameToID(customer_name) -> customer_ID"
            },
            {
                "name": "ProductNameToID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductNameToID(product_name) -> product_ID"
            },
            {
                "name": "PurchaseProduct",
                "Description": "This API is to purchase a product.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the product to purchase",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "PurchaseProduct(customer_ID, product_ID, quantity) -> purchase_status"
            }
        ],
        "Query": "Can you help Jane Smith buy 5 units of 'Product Y'?",
        "Label": "PurchaseProduct(customer_ID=CustomerNameToID(customer_name='Jane Smith'), product_ID=ProductNameToID(product_name='Product Y'), quantity=5)",
        "Index": 681
    },
    {
        "APIs": [
            {
                "name": "CustomerNameToID",
                "Description": "This API is to convert customer name to customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerNameToID(customer_name) -> customer_ID"
            },
            {
                "name": "ProductNameToID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductNameToID(product_name) -> product_ID"
            },
            {
                "name": "PurchaseProduct",
                "Description": "This API is to purchase a product.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the product to purchase",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "PurchaseProduct(customer_ID, product_ID, quantity) -> purchase_status"
            }
        ],
        "Query": "Can you assist Michael Johnson in purchasing 2 units of 'Product Z'?",
        "Label": "PurchaseProduct(customer_ID=CustomerNameToID(customer_name='Michael Johnson'), product_ID=ProductNameToID(product_name='Product Z'), quantity=2)",
        "Index": 682
    },
    {
        "APIs": [
            {
                "name": "CustomerNameToID",
                "Description": "This API is to convert customer name to customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerNameToID(customer_name) -> customer_ID"
            },
            {
                "name": "ProductNameToID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductNameToID(product_name) -> product_ID"
            },
            {
                "name": "PurchaseProduct",
                "Description": "This API is to purchase a product.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the product to purchase",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "PurchaseProduct(customer_ID, product_ID, quantity) -> purchase_status"
            }
        ],
        "Query": "Would you aid Mark Lee to buy 7 units of 'Product A'?",
        "Label": "PurchaseProduct(customer_ID=CustomerNameToID(customer_name='Mark Lee'), product_ID=ProductNameToID(product_name='Product A'), quantity=7)",
        "Index": 683
    },
    {
        "APIs": [
            {
                "name": "CustomerNameToID",
                "Description": "This API is to convert customer name to customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerNameToID(customer_name) -> customer_ID"
            },
            {
                "name": "ProductNameToID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductNameToID(product_name) -> product_ID"
            },
            {
                "name": "PurchaseProduct",
                "Description": "This API is to purchase a product.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the product to purchase",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "PurchaseProduct(customer_ID, product_ID, quantity) -> purchase_status"
            }
        ],
        "Query": "Would you aid Mark Lee to buy 7 units of 'Product A'?",
        "Label": "PurchaseProduct(customer_ID=CustomerNameToID(customer_name='Mark Lee'), product_ID=ProductNameToID(product_name='Product A'), quantity=7)",
        "Index": 684
    },
    {
        "APIs": [
            {
                "name": "CustomerNameToID",
                "Description": "This API is to convert customer name to customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerNameToID(customer_name) -> customer_ID"
            },
            {
                "name": "ProductNameToID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductNameToID(product_name) -> product_ID"
            },
            {
                "name": "PurchaseProduct",
                "Description": "This API is to purchase a product.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the product to purchase",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "PurchaseProduct(customer_ID, product_ID, quantity) -> purchase_status"
            }
        ],
        "Query": "Can you help Sophia Thompson purchase 6 units of 'Product C'?",
        "Label": "PurchaseProduct(customer_ID=CustomerNameToID(customer_name='Sophia Thompson'), product_ID=ProductNameToID(product_name='Product C'), quantity=6)",
        "Index": 685
    },
    {
        "APIs": [
            {
                "name": "CityNameToID",
                "Description": "This API is to convert city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityNameToID(city_name) -> city_ID"
            },
            {
                "name": "HotelNameToID",
                "Description": "This API is to convert hotel name to hotel ID.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    }
                },
                "format": "HotelNameToID(hotel_name) -> hotel_ID"
            },
            {
                "name": "BookHotel",
                "Description": "This API is to book a hotel room.",
                "input_params": {
                    "city_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(city_ID, hotel_ID, check_in_date, check_out_date) -> booking status"
            }
        ],
        "Query": "Can you book a room at 'Ocean Breeze Hotel' in 'San Diego' from September 1 to September 10?",
        "Label": "BookHotel(city_ID=CityNameToID(city_name='San Diego'), hotel_ID=HotelNameToID(hotel_name='Ocean Breeze Hotel'), check_in_date='September 1', check_out_date='September 10')",
        "Index": 686
    },
    {
        "APIs": [
            {
                "name": "CityNameToID",
                "Description": "This API is to convert city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityNameToID(city_name) -> city_ID"
            },
            {
                "name": "HotelNameToID",
                "Description": "This API is to convert hotel name to hotel ID.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    }
                },
                "format": "HotelNameToID(hotel_name) -> hotel_ID"
            },
            {
                "name": "BookHotel",
                "Description": "This API is to book a hotel room.",
                "input_params": {
                    "city_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(city_ID, hotel_ID, check_in_date, check_out_date) -> booking status"
            }
        ],
        "Query": "Can you book a room at 'Ocean Breeze Hotel' in 'San Diego' from September 1 to September 10?",
        "Label": "BookHotel(city_ID=CityNameToID(city_name='San Diego'), hotel_ID=HotelNameToID(hotel_name='Ocean Breeze Hotel'), check_in_date='September 1', check_out_date='September 10')",
        "Index": 687
    },
    {
        "APIs": [
            {
                "name": "CityNameToID",
                "Description": "This API is to convert city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityNameToID(city_name) -> city_ID"
            },
            {
                "name": "HotelNameToID",
                "Description": "This API is to convert hotel name to hotel ID.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    }
                },
                "format": "HotelNameToID(hotel_name) -> hotel_ID"
            },
            {
                "name": "BookHotel",
                "Description": "This API is to book a hotel room.",
                "input_params": {
                    "city_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(city_ID, hotel_ID, check_in_date, check_out_date) -> booking status"
            }
        ],
        "Query": "Can you book a room at 'Tropical Paradise Resort' in 'Honolulu' from December 1 to December 10?",
        "Label": "BookHotel(city_ID=CityNameToID(city_name='Honolulu'), hotel_ID=HotelNameToID(hotel_name='Tropical Paradise Resort'), check_in_date='December 1', check_out_date='December 10')",
        "Index": 688
    },
    {
        "APIs": [
            {
                "name": "CustomerNameToID",
                "Description": "This API is to convert customer name to customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerNameToID(customer_name) -> customer_ID"
            },
            {
                "name": "AddToCart",
                "Description": "This API is to add a product to the shopping cart.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity of the product to add",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "cart_status": {
                        "description": "the status of the shopping cart",
                        "type": "String"
                    }
                },
                "format": "AddToCart(customer_ID, product_ID, quantity) -> cart_status"
            }
        ],
        "Query": "Can you add 1 of product 789 to Sarah Smith's shopping cart?",
        "Label": "AddToCart(customer_ID=CustomerNameToID(customer_name='Sarah Smith'), product_ID='789', quantity='1')",
        "Index": 689
    },
    {
        "APIs": [
            {
                "name": "CustomerNameToID",
                "Description": "This API is to convert customer name to customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerNameToID(customer_name) -> customer_ID"
            },
            {
                "name": "AddToCart",
                "Description": "This API is to add a product to the shopping cart.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity of the product to add",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "cart_status": {
                        "description": "the status of the shopping cart",
                        "type": "String"
                    }
                },
                "format": "AddToCart(customer_ID, product_ID, quantity) -> cart_status"
            }
        ],
        "Query": "Can you add 5 of product 321 to Michael Johnson's shopping cart?",
        "Label": "AddToCart(customer_ID=CustomerNameToID(customer_name='Michael Johnson'), product_ID='321', quantity='5')",
        "Index": 690
    },
    {
        "APIs": [
            {
                "name": "CustomerNameToID",
                "Description": "This API is to convert customer name to customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerNameToID(customer_name) -> customer_ID"
            },
            {
                "name": "AddToCart",
                "Description": "This API is to add products to a customer's shopping cart.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity of the product to add",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "cart_status": {
                        "description": "the status of the shopping cart",
                        "type": "String"
                    }
                },
                "format": "AddToCart(customer_ID, product_ID, quantity) -> cart_status"
            }
        ],
        "Query": "Can you add 2 of product 654 to Emily Thompson's shopping cart?",
        "Label": "AddToCart(customer_ID=CustomerNameToID(customer_name='Emily Thompson'), product_ID='654', quantity='2')",
        "Index": 691
    },
    {
        "APIs": [
            {
                "name": "CustomerNameToID",
                "Description": "This API is to convert customer name to customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerNameToID(customer_name) -> customer_ID"
            },
            {
                "name": "AddToCart",
                "Description": "This API is to add products to a customer's shopping cart.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity of the product to add",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of the operation",
                        "type": "String"
                    }
                },
                "format": "AddToCart(customer_ID, product_ID, quantity) -> status"
            }
        ],
        "Query": "Can you add 2 of product 654 to Emily Thompson's shopping cart?",
        "Label": "AddToCart(customer_ID=CustomerNameToID(customer_name='Emily Thompson'), product_ID='654', quantity='2')",
        "Index": 692
    },
    {
        "APIs": [
            {
                "name": "CustomerNameToID",
                "Description": "This API is to convert customer name to customer ID.",
                "input_params": {
                    "customer_name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    }
                },
                "format": "CustomerNameToID(customer_name) -> customer_ID"
            },
            {
                "name": "AddToCart",
                "Description": "This API is to add products to a customer's shopping cart.",
                "input_params": {
                    "customer_ID": {
                        "description": "the ID of the customer",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity of the product to add",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of adding the product to the cart",
                        "type": "String"
                    }
                },
                "format": "AddToCart(customer_ID, product_ID, quantity) -> status"
            }
        ],
        "Query": "Can you add 6 of product 123 to Jessica Taylor's shopping cart?",
        "Label": "AddToCart(customer_ID=CustomerNameToID(customer_name='Jessica Taylor'), product_ID='123', quantity='6')",
        "Index": 693
    },
    {
        "APIs": [
            {
                "name": "CityNameToID",
                "Description": "This API is to convert city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityNameToID(city_name) -> city_ID"
            },
            {
                "name": "HotelNameToID",
                "Description": "This API is to convert hotel name to hotel ID.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    }
                },
                "format": "HotelNameToID(hotel_name) -> hotel_ID"
            },
            {
                "name": "BookRoom",
                "Description": "This API is to book a room in a hotel.",
                "input_params": {
                    "city_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookRoom(city_ID, hotel_ID, check_in_date, check_out_date) -> booking_status"
            }
        ],
        "Query": "Could you reserve a room in 'Hilton' hotel in 'Los Angeles' from 20th April to 25th April?",
        "Label": "BookRoom(city_ID=CityNameToID(city_name='Los Angeles'), hotel_ID=HotelNameToID(hotel_name='Hilton'), check_in_date='20th April', check_out_date='25th April')",
        "Index": 694
    },
    {
        "APIs": [
            {
                "name": "CityNameToID",
                "Description": "This API is to convert city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityNameToID(city_name) -> city_ID"
            },
            {
                "name": "HotelNameToID",
                "Description": "This API is to convert hotel name to hotel ID.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    }
                },
                "format": "HotelNameToID(hotel_name) -> hotel_ID"
            },
            {
                "name": "BookRoom",
                "Description": "This API is to book a room in a hotel.",
                "input_params": {
                    "city_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookRoom(city_ID, hotel_ID, check_in_date, check_out_date) -> booking_status"
            }
        ],
        "Query": "Can I book a room in 'Ritz-Carlton' hotel in 'Atlanta' from 15th July to 20th July?",
        "Label": "BookRoom(city_ID=CityNameToID(city_name='Atlanta'), hotel_ID=HotelNameToID(hotel_name='Ritz-Carlton'), check_in_date='15th July', check_out_date='20th July')",
        "Index": 695
    },
    {
        "APIs": [
            {
                "name": "CityNameToID",
                "Description": "This API is to convert city name to city ID.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityNameToID(city_name) -> city_ID"
            },
            {
                "name": "HotelNameToID",
                "Description": "This API is to convert hotel name to hotel ID.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    }
                },
                "format": "HotelNameToID(hotel_name) -> hotel_ID"
            },
            {
                "name": "BookRoom",
                "Description": "This API is to book a room in a hotel.",
                "input_params": {
                    "city_ID": {
                        "description": "the ID of the city",
                        "type": "Integer"
                    },
                    "hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookRoom(city_ID, hotel_ID, check_in_date, check_out_date) -> booking status"
            }
        ],
        "Query": "Can you reserve a room in 'Sheraton' hotel in 'Boston' from 10th October to 15th October?",
        "Label": "BookRoom(city_ID=CityNameToID(city_name='Boston'), hotel_ID=HotelNameToID(hotel_name='Sheraton'), check_in_date='10th October', check_out_date='15th October')",
        "Index": 696
    },
    {
        "APIs": [
            {
                "name": "SupplierNameToID",
                "Description": "This API is to convert supplier name to supplier ID.",
                "input_params": {
                    "supplier_name": {
                        "description": "the name of the supplier",
                        "type": "String"
                    }
                },
                "output_params": {
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    }
                },
                "format": "SupplierNameToID(supplier_name) -> supplier_ID"
            },
            {
                "name": "ProductNameToID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductNameToID(product_name) -> product_ID"
            },
            {
                "name": "OrderProduct",
                "Description": "This API is to order a product from a supplier.",
                "input_params": {
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderProduct(supplier_ID, product_ID) -> order_status"
            }
        ],
        "Query": "Can you order the 'Samsung Galaxy S21' from supplier 'TechStore'?",
        "Label": "OrderProduct(supplier_ID=SupplierNameToID(supplier_name='TechStore'), product_ID=ProductNameToID(product_name='Samsung Galaxy S21'))",
        "Index": 697
    },
    {
        "APIs": [
            {
                "name": "SupplierNameToID",
                "Description": "This API is to convert supplier name to supplier ID.",
                "input_params": {
                    "supplier_name": {
                        "description": "the name of the supplier",
                        "type": "String"
                    }
                },
                "output_params": {
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    }
                },
                "format": "SupplierNameToID(supplier_name) -> supplier_ID"
            },
            {
                "name": "ProductNameToID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductNameToID(product_name) -> product_ID"
            },
            {
                "name": "OrderProduct",
                "Description": "This API is to order a product from a supplier.",
                "input_params": {
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderProduct(supplier_ID, product_ID) -> order_status"
            }
        ],
        "Query": "Can you order the 'Apple iPad Pro' from supplier 'GadgetWorld'?",
        "Label": "OrderProduct(supplier_ID=SupplierNameToID(supplier_name='GadgetWorld'), product_ID=ProductNameToID(product_name='Apple iPad Pro'))",
        "Index": 698
    },
    {
        "APIs": [
            {
                "name": "SupplierNameToID",
                "Description": "This API is to convert supplier name to supplier ID.",
                "input_params": {
                    "supplier_name": {
                        "description": "the name of the supplier",
                        "type": "String"
                    }
                },
                "output_params": {
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    }
                },
                "format": "SupplierNameToID(supplier_name) -> supplier_ID"
            },
            {
                "name": "ProductNameToID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductNameToID(product_name) -> product_ID"
            },
            {
                "name": "OrderProduct",
                "Description": "This API is to order a product from a supplier.",
                "input_params": {
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderProduct(supplier_ID, product_ID) -> order_status"
            }
        ],
        "Query": "Can you order the 'Dell XPS 13' from supplier 'LaptopDepot'?",
        "Label": "OrderProduct(supplier_ID=SupplierNameToID(supplier_name='LaptopDepot'), product_ID=ProductNameToID(product_name='Dell XPS 13'))",
        "Index": 699
    },
    {
        "APIs": [
            {
                "name": "SupplierNameToID",
                "Description": "This API is to convert supplier name to supplier ID.",
                "input_params": {
                    "supplier_name": {
                        "description": "the name of the supplier",
                        "type": "String"
                    }
                },
                "output_params": {
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    }
                },
                "format": "SupplierNameToID(supplier_name) -> supplier_ID"
            },
            {
                "name": "ProductNameToID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductNameToID(product_name) -> product_ID"
            },
            {
                "name": "OrderProduct",
                "Description": "This API is to order a product from a supplier.",
                "input_params": {
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderProduct(supplier_ID, product_ID) -> order_status"
            }
        ],
        "Query": "Can you order the 'Dell XPS 13' from supplier 'LaptopDepot'?",
        "Label": "OrderProduct(supplier_ID=SupplierNameToID(supplier_name='LaptopDepot'), product_ID=ProductNameToID(product_name='Dell XPS 13'))",
        "Index": 700
    },
    {
        "APIs": [
            {
                "name": "SupplierNameToID",
                "Description": "This API is to convert supplier name to supplier ID.",
                "input_params": {
                    "supplier_name": {
                        "description": "the name of the supplier",
                        "type": "String"
                    }
                },
                "output_params": {
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    }
                },
                "format": "SupplierNameToID(supplier_name) -> supplier_ID"
            },
            {
                "name": "ProductNameToID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductNameToID(product_name) -> product_ID"
            },
            {
                "name": "OrderProduct",
                "Description": "This API is to order a product from a supplier.",
                "input_params": {
                    "supplier_ID": {
                        "description": "the ID of the supplier",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderProduct(supplier_ID, product_ID) -> order_status"
            }
        ],
        "Query": "Can you order the 'Bose Soundlink' from supplier 'AudioExpress'?",
        "Label": "OrderProduct(supplier_ID=SupplierNameToID(supplier_name='AudioExpress'), product_ID=ProductNameToID(product_name='Bose Soundlink'))",
        "Index": 701
    },
    {
        "APIs": [
            {
                "name": "PassengerNameToID",
                "Description": "This API is to convert passenger name to passenger ID.",
                "input_params": {
                    "passenger_name": {
                        "description": "the name of the passenger",
                        "type": "String"
                    }
                },
                "output_params": {
                    "passenger_ID": {
                        "description": "the ID of the passenger",
                        "type": "Integer"
                    }
                },
                "format": "PassengerNameToID(passenger_name) -> passenger_ID"
            },
            {
                "name": "FlightNumberToID",
                "Description": "This API is to convert flight number to flight ID.",
                "input_params": {
                    "flight_number": {
                        "description": "the number of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FlightNumberToID(flight_number) -> flight_ID"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "passenger_ID": {
                        "description": "the ID of the passenger",
                        "type": "Integer"
                    },
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(passenger_ID, flight_ID) -> booking_status"
            }
        ],
        "Query": "Can you book flight 'UA789' for passenger 'Susan Smith'?",
        "Label": "BookFlight(passenger_ID=PassengerNameToID(passenger_name='Susan Smith'), flight_ID=FlightNumberToID(flight_number='UA789'))",
        "Index": 702
    },
    {
        "APIs": [
            {
                "name": "PassengerNameToID",
                "Description": "This API is to convert passenger name to passenger ID.",
                "input_params": {
                    "passenger_name": {
                        "description": "the name of the passenger",
                        "type": "String"
                    }
                },
                "output_params": {
                    "passenger_ID": {
                        "description": "the ID of the passenger",
                        "type": "Integer"
                    }
                },
                "format": "PassengerNameToID(passenger_name) -> passenger_ID"
            },
            {
                "name": "FlightNumberToID",
                "Description": "This API is to convert flight number to flight ID.",
                "input_params": {
                    "flight_number": {
                        "description": "the number of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FlightNumberToID(flight_number) -> flight_ID"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "passenger_ID": {
                        "description": "the ID of the passenger",
                        "type": "Integer"
                    },
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(passenger_ID, flight_ID) -> booking status"
            }
        ],
        "Query": "Can you book flight 'DL456' for passenger 'Michael Johnson'?",
        "Label": "BookFlight(passenger_ID=PassengerNameToID(passenger_name='Michael Johnson'), flight_ID=FlightNumberToID(flight_number='DL456'))",
        "Index": 703
    },
    {
        "APIs": [
            {
                "name": "PassengerNameToID",
                "Description": "This API is to convert passenger name to passenger ID.",
                "input_params": {
                    "passenger_name": {
                        "description": "the name of the passenger",
                        "type": "String"
                    }
                },
                "output_params": {
                    "passenger_ID": {
                        "description": "the ID of the passenger",
                        "type": "Integer"
                    }
                },
                "format": "PassengerNameToID(passenger_name) -> passenger_ID"
            },
            {
                "name": "FlightNumberToID",
                "Description": "This API is to convert flight number to flight ID.",
                "input_params": {
                    "flight_number": {
                        "description": "the number of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FlightNumberToID(flight_number) -> flight_ID"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "passenger_ID": {
                        "description": "the ID of the passenger",
                        "type": "Integer"
                    },
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(passenger_ID, flight_ID) -> booking_status"
            }
        ],
        "Query": "Can you book flight 'BA321' for passenger 'Emily Davis'?",
        "Label": "BookFlight(passenger_ID=PassengerNameToID(passenger_name='Emily Davis'), flight_ID=FlightNumberToID(flight_number='BA321'))",
        "Index": 704
    },
    {
        "APIs": [
            {
                "name": "PassengerNameToID",
                "Description": "This API is to convert passenger name to passenger ID.",
                "input_params": {
                    "passenger_name": {
                        "description": "the name of the passenger",
                        "type": "String"
                    }
                },
                "output_params": {
                    "passenger_ID": {
                        "description": "the ID of the passenger",
                        "type": "Integer"
                    }
                },
                "format": "PassengerNameToID(passenger_name) -> passenger_ID"
            },
            {
                "name": "FlightNumberToID",
                "Description": "This API is to convert flight number to flight ID.",
                "input_params": {
                    "flight_number": {
                        "description": "the number of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FlightNumberToID(flight_number) -> flight_ID"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "passenger_ID": {
                        "description": "the ID of the passenger",
                        "type": "Integer"
                    },
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(passenger_ID, flight_ID) -> booking status"
            }
        ],
        "Query": "Can you book flight 'BA321' for passenger 'Emily Davis'?",
        "Label": "BookFlight(passenger_ID=PassengerNameToID(passenger_name='Emily Davis'), flight_ID=FlightNumberToID(flight_number='BA321'))",
        "Index": 705
    },
    {
        "APIs": [
            {
                "name": "PassengerNameToID",
                "Description": "This API is to convert passenger name to passenger ID.",
                "input_params": {
                    "passenger_name": {
                        "description": "the name of the passenger",
                        "type": "String"
                    }
                },
                "output_params": {
                    "passenger_ID": {
                        "description": "the ID of the passenger",
                        "type": "Integer"
                    }
                },
                "format": "PassengerNameToID(passenger_name) -> passenger_ID"
            },
            {
                "name": "FlightNumberToID",
                "Description": "This API is to convert flight number to flight ID.",
                "input_params": {
                    "flight_number": {
                        "description": "the number of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FlightNumberToID(flight_number) -> flight_ID"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "passenger_ID": {
                        "description": "the ID of the passenger",
                        "type": "Integer"
                    },
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(passenger_ID, flight_ID) -> booking status"
            }
        ],
        "Query": "Can you book flight 'LH654' for passenger 'Sarah Williams'?",
        "Label": "BookFlight(passenger_ID=PassengerNameToID(passenger_name='Sarah Williams'), flight_ID=FlightNumberToID(flight_number='LH654'))",
        "Index": 706
    },
    {
        "APIs": [
            {
                "name": "UserNameToID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserNameToID(user_name) -> user_ID"
            },
            {
                "name": "SongNameToID",
                "Description": "This API is to convert song name to song ID.",
                "input_params": {
                    "song_name": {
                        "description": "the name of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song_ID": {
                        "description": "the ID of the song",
                        "type": "Integer"
                    }
                },
                "format": "SongNameToID(song_name) -> song_ID"
            },
            {
                "name": "PlaySong",
                "Description": "This API is to play a song for a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "song_ID": {
                        "description": "the ID of the song",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "play_status": {
                        "description": "the status of the song playback",
                        "type": "String"
                    }
                },
                "format": "PlaySong(user_ID, song_ID) -> play_status"
            }
        ],
        "Query": "Can you play the song 'Bohemian Rhapsody' for user FreddieMercury?",
        "Label": "PlaySong(user_ID=UserNameToID(user_name='FreddieMercury'), song_ID=SongNameToID(song_name='Bohemian Rhapsody'))",
        "Index": 707
    },
    {
        "APIs": [
            {
                "name": "UserNameToID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserNameToID(user_name) -> user_ID"
            },
            {
                "name": "SongNameToID",
                "Description": "This API is to convert song name to song ID.",
                "input_params": {
                    "song_name": {
                        "description": "the name of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song_ID": {
                        "description": "the ID of the song",
                        "type": "Integer"
                    }
                },
                "format": "SongNameToID(song_name) -> song_ID"
            },
            {
                "name": "PlaySong",
                "Description": "This API is to play a song for a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "song_ID": {
                        "description": "the ID of the song",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "play_status": {
                        "description": "the status of the song playback",
                        "type": "String"
                    }
                },
                "format": "PlaySong(user_ID, song_ID) -> play_status"
            }
        ],
        "Query": "Can you play the song 'Stairway to Heaven' for user RobertPlant?",
        "Label": "PlaySong(user_ID=UserNameToID(user_name='RobertPlant'), song_ID=SongNameToID(song_name='Stairway to Heaven'))",
        "Index": 708
    },
    {
        "APIs": [
            {
                "name": "UserNameToID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserNameToID(user_name) -> user_ID"
            },
            {
                "name": "SongNameToID",
                "Description": "This API is to convert song name to song ID.",
                "input_params": {
                    "song_name": {
                        "description": "the name of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song_ID": {
                        "description": "the ID of the song",
                        "type": "Integer"
                    }
                },
                "format": "SongNameToID(song_name) -> song_ID"
            },
            {
                "name": "PlaySong",
                "Description": "This API is to play a song for a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "song_ID": {
                        "description": "the ID of the song",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "play_status": {
                        "description": "the status of the song playback",
                        "type": "String"
                    }
                },
                "format": "PlaySong(user_ID, song_ID) -> play_status"
            }
        ],
        "Query": "Can you play the song 'Hotel California' for user DonHenley?",
        "Label": "PlaySong(user_ID=UserNameToID(user_name='DonHenley'), song_ID=SongNameToID(song_name='Hotel California'))",
        "Index": 709
    },
    {
        "APIs": [
            {
                "name": "UserEmailToID",
                "Description": "This API is to convert user email address to user ID.",
                "input_params": {
                    "email_address": {
                        "description": "the email address of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmailToID(email_address) -> user_ID"
            },
            {
                "name": "ISBNToBookName",
                "Description": "This API is to convert ISBN to book name.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "format": "ISBNToBookName(ISBN) -> book_name"
            },
            {
                "name": "ReturnBook",
                "Description": "This API is to return a book for a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "return_status": {
                        "description": "the status of the book return",
                        "type": "String"
                    }
                },
                "format": "ReturnBook(user_ID, book_name) -> return_status"
            }
        ],
        "Query": "Can you return the book with ISBN 978-1-23-456789-0 for the user mike.smith@example.com?",
        "Label": "ReturnBook(user_ID=UserEmailToID(email_address='mike.smith@example.com'), book_name=ISBNToBookName(ISBN='978-1-23-456789-0'))",
        "Index": 710
    },
    {
        "APIs": [
            {
                "name": "UserEmailToID",
                "Description": "This API is to convert user email address to user ID.",
                "input_params": {
                    "email_address": {
                        "description": "the email address of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmailToID(email_address) -> user_ID"
            },
            {
                "name": "ISBNToBookName",
                "Description": "This API is to convert ISBN to book name.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "format": "ISBNToBookName(ISBN) -> book_name"
            },
            {
                "name": "ReturnBook",
                "Description": "This API is to return a book for a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "return_status": {
                        "description": "the status of the book return",
                        "type": "String"
                    }
                },
                "format": "ReturnBook(user_ID, book_name) -> return_status"
            }
        ],
        "Query": "Can you return the book with ISBN 978-2-34-567890-1 for the user lisa.brown@example.com?",
        "Label": "ReturnBook(user_ID=UserEmailToID(email_address='lisa.brown@example.com'), book_name=ISBNToBookName(ISBN='978-2-34-567890-1'))",
        "Index": 711
    },
    {
        "APIs": [
            {
                "name": "UserEmailToID",
                "Description": "This API is to convert user email address to user ID.",
                "input_params": {
                    "email_address": {
                        "description": "the email address of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmailToID(email_address) -> user_ID"
            },
            {
                "name": "ISBNToBookName",
                "Description": "This API is to convert ISBN to book name.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "format": "ISBNToBookName(ISBN) -> book_name"
            },
            {
                "name": "ReturnBook",
                "Description": "This API is to return a book for a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "return_status": {
                        "description": "the status of the book return",
                        "type": "String"
                    }
                },
                "format": "ReturnBook(user_ID, book_name) -> return_status"
            }
        ],
        "Query": "Can you return the book with ISBN 978-2-34-567890-1 for the user lisa.brown@example.com?",
        "Label": "ReturnBook(user_ID=UserEmailToID(email_address='lisa.brown@example.com'), book_name=ISBNToBookName(ISBN='978-2-34-567890-1'))",
        "Index": 712
    },
    {
        "APIs": [
            {
                "name": "UserEmailToID",
                "Description": "This API is to convert user email address to user ID.",
                "input_params": {
                    "email_address": {
                        "description": "the email address of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmailToID(email_address) -> user_ID"
            },
            {
                "name": "ISBNToBookName",
                "Description": "This API is to convert ISBN to book name.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "format": "ISBNToBookName(ISBN) -> book_name"
            },
            {
                "name": "ReturnBook",
                "Description": "This API is to return a book.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "return_status": {
                        "description": "the status of the return",
                        "type": "String"
                    }
                },
                "format": "ReturnBook(user_ID, book_name) -> return_status"
            }
        ],
        "Query": "Can you return the book with ISBN 978-4-56-789012-3 for the user sally.green@example.com?",
        "Label": "ReturnBook(user_ID=UserEmailToID(email_address='sally.green@example.com'), book_name=ISBNToBookName(ISBN='978-4-56-789012-3'))",
        "Index": 713
    },
    {
        "APIs": [
            {
                "name": "UserNameToID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserNameToID(user_name) -> user_ID"
            },
            {
                "name": "SongTitleToID",
                "Description": "This API is to convert song title to song ID.",
                "input_params": {
                    "song_title": {
                        "description": "the title of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song_ID": {
                        "description": "the ID of the song",
                        "type": "Integer"
                    }
                },
                "format": "SongTitleToID(song_title) -> song_ID"
            },
            {
                "name": "PlaySong",
                "Description": "This API is to play a song for a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "song_ID": {
                        "description": "the ID of the song",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "play_status": {
                        "description": "the status of the song playback",
                        "type": "String"
                    }
                },
                "format": "PlaySong(user_ID, song_ID) -> play_status"
            }
        ],
        "Query": "Can you play the song 'Imagine' for user John?",
        "Label": "PlaySong(user_ID=UserNameToID(user_name='John'), song_ID=SongTitleToID(song_title='Imagine'))",
        "Index": 714
    },
    {
        "APIs": [
            {
                "name": "UserNameToID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserNameToID(user_name) -> user_ID"
            },
            {
                "name": "SongTitleToID",
                "Description": "This API is to convert song title to song ID.",
                "input_params": {
                    "song_title": {
                        "description": "the title of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song_ID": {
                        "description": "the ID of the song",
                        "type": "Integer"
                    }
                },
                "format": "SongTitleToID(song_title) -> song_ID"
            },
            {
                "name": "PlaySong",
                "Description": "This API is to play a song for a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "song_ID": {
                        "description": "the ID of the song",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "play_status": {
                        "description": "the status of the song playback",
                        "type": "String"
                    }
                },
                "format": "PlaySong(user_ID, song_ID) -> play_status"
            }
        ],
        "Query": "Can you play 'Rolling in the Deep' for user named Adele?",
        "Label": "PlaySong(user_ID=UserNameToID(user_name='Adele'), song_ID=SongTitleToID(song_title='Rolling in the Deep'))",
        "Index": 715
    },
    {
        "APIs": [
            {
                "name": "UserNameToID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserNameToID(user_name) -> user_ID"
            },
            {
                "name": "SongTitleToID",
                "Description": "This API is to convert song title to song ID.",
                "input_params": {
                    "song_title": {
                        "description": "the title of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song_ID": {
                        "description": "the ID of the song",
                        "type": "Integer"
                    }
                },
                "format": "SongTitleToID(song_title) -> song_ID"
            },
            {
                "name": "PlaySong",
                "Description": "This API is to play a song for a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "song_ID": {
                        "description": "the ID of the song",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "play_status": {
                        "description": "the status of the song playback",
                        "type": "String"
                    }
                },
                "format": "PlaySong(user_ID, song_ID) -> play_status"
            }
        ],
        "Query": "I'd like to hear 'Sweet Child O' Mine' for user GunsNRosesFan.",
        "Label": "PlaySong(user_ID=UserNameToID(user_name='GunsNRosesFan'), song_ID=SongTitleToID(song_title='Sweet Child O' Mine'))",
        "Index": 716
    },
    {
        "APIs": [
            {
                "name": "UserEmailToID",
                "Description": "This API is to convert user email address to user ID.",
                "input_params": {
                    "email_address": {
                        "description": "the email address of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmailToID(email_address) -> user_ID"
            },
            {
                "name": "ProductToID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductToID(product_name) -> product_ID"
            },
            {
                "name": "PurchaseProduct",
                "Description": "This API is to purchase a product for a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "PurchaseProduct(user_ID, product_ID) -> purchase_status"
            }
        ],
        "Query": "Can you purchase the product 'Playstation 5' for the user with email peter@example.com?",
        "Label": "PurchaseProduct(user_ID=UserEmailToID(email_address='peter@example.com'), product_ID=ProductToID(product_name='Playstation 5'))",
        "Index": 717
    },
    {
        "APIs": [
            {
                "name": "UserEmailToID",
                "Description": "This API is to convert user email address to user ID.",
                "input_params": {
                    "email_address": {
                        "description": "the email address of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmailToID(email_address) -> user_ID"
            },
            {
                "name": "ProductToID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductToID(product_name) -> product_ID"
            },
            {
                "name": "PurchaseProduct",
                "Description": "This API is to purchase a product for a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "PurchaseProduct(user_ID, product_ID) -> purchase_status"
            }
        ],
        "Query": "Can you purchase the product 'Playstation 5' for the user with email peter@example.com?",
        "Label": "PurchaseProduct(user_ID=UserEmailToID(email_address='peter@example.com'), product_ID=ProductToID(product_name='Playstation 5'))",
        "Index": 718
    },
    {
        "APIs": [
            {
                "name": "UserEmailToID",
                "Description": "This API is to convert user email address to user ID.",
                "input_params": {
                    "email_address": {
                        "description": "the email address of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmailToID(email_address) -> user_ID"
            },
            {
                "name": "ProductToID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductToID(product_name) -> product_ID"
            },
            {
                "name": "PurchaseProduct",
                "Description": "This API is to purchase a product for a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "PurchaseProduct(user_ID, product_ID) -> purchase_status"
            }
        ],
        "Query": "Can you purchase the product 'Google Pixel 6' for the user with email mike@example.com?",
        "Label": "PurchaseProduct(user_ID=UserEmailToID(email_address='mike@example.com'), product_ID=ProductToID(product_name='Google Pixel 6'))",
        "Index": 719
    },
    {
        "APIs": [
            {
                "name": "CartName2ID",
                "Description": "This API is to convert cart name to cart ID.",
                "input_params": {
                    "cart_name": {
                        "description": "the name of the cart",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cart_ID": {
                        "description": "the ID of the cart",
                        "type": "Integer"
                    }
                },
                "format": "CartName2ID(cart_name) -> cart_ID"
            },
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "AddProductToCart",
                "Description": "This API is to add a product to a cart.",
                "input_params": {
                    "cart_ID": {
                        "description": "the ID of the cart",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of adding the product to the cart",
                        "type": "String"
                    }
                },
                "format": "AddProductToCart(cart_ID, product_ID) -> status"
            }
        ],
        "Query": "Please add the product 'Galaxy S20' to John's cart 'Electronic Items' with his username john_electronics.",
        "Label": "AddProductToCart(cart_ID=CartName2ID(cart_name='Electronic Items'), product_ID=ProductName2ID(product_name='Galaxy S20'))",
        "Index": 720
    },
    {
        "APIs": [
            {
                "name": "CartName2ID",
                "Description": "This API is to convert cart name to cart ID.",
                "input_params": {
                    "cart_name": {
                        "description": "the name of the cart",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cart_ID": {
                        "description": "the ID of the cart",
                        "type": "Integer"
                    }
                },
                "format": "CartName2ID(cart_name) -> cart_ID"
            },
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "AddProductToCart",
                "Description": "This API is to add a product to a cart.",
                "input_params": {
                    "cart_ID": {
                        "description": "the ID of the cart",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of adding the product to the cart",
                        "type": "String"
                    }
                },
                "format": "AddProductToCart(cart_ID, product_ID) -> status"
            }
        ],
        "Query": "Can you add the item 'MacBook Pro' to Lisa's cart 'Laptop Cart' with her username lisa_laptop.",
        "Label": "AddProductToCart(cart_ID=CartName2ID(cart_name='Laptop Cart'), product_ID=ProductName2ID(product_name='MacBook Pro'))",
        "Index": 721
    },
    {
        "APIs": [
            {
                "name": "CartName2ID",
                "Description": "This API is to convert cart name to cart ID.",
                "input_params": {
                    "cart_name": {
                        "description": "the name of the cart",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cart_ID": {
                        "description": "the ID of the cart",
                        "type": "Integer"
                    }
                },
                "format": "CartName2ID(cart_name) -> cart_ID"
            },
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "AddProductToCart",
                "Description": "This API is to add a product to a cart.",
                "input_params": {
                    "cart_ID": {
                        "description": "the ID of the cart",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of adding the product to the cart",
                        "type": "String"
                    }
                },
                "format": "AddProductToCart(cart_ID, product_ID) -> status"
            }
        ],
        "Query": "I want to add the product 'Canon EOS R6' to David's cart 'Photography Gear' with his username david_photos.",
        "Label": "AddProductToCart(cart_ID=CartName2ID(cart_name='Photography Gear'), product_ID=ProductName2ID(product_name='Canon EOS R6'))",
        "Index": 722
    },
    {
        "APIs": [
            {
                "name": "CartName2ID",
                "Description": "This API is to convert cart name to cart ID.",
                "input_params": {
                    "cart_name": {
                        "description": "the name of the cart",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cart_ID": {
                        "description": "the ID of the cart",
                        "type": "Integer"
                    }
                },
                "format": "CartName2ID(cart_name) -> cart_ID"
            },
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "AddProductToCart",
                "Description": "This API is to add a product to a cart.",
                "input_params": {
                    "cart_ID": {
                        "description": "the ID of the cart",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of adding the product to the cart",
                        "type": "String"
                    }
                },
                "format": "AddProductToCart(cart_ID, product_ID) -> status"
            }
        ],
        "Query": "Please add the \"Dell XPS 13\" to Amy's cart \"PC Hardware\" with her username amy_pc.",
        "Label": "AddProductToCart(cart_ID=CartName2ID(cart_name='PC Hardware'), product_ID=ProductName2ID(product_name='Dell XPS 13'))",
        "Index": 723
    },
    {
        "APIs": [
            {
                "name": "CartName2ID",
                "Description": "This API is to convert cart name to cart ID.",
                "input_params": {
                    "cart_name": {
                        "description": "the name of the cart",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cart_ID": {
                        "description": "the ID of the cart",
                        "type": "Integer"
                    }
                },
                "format": "CartName2ID(cart_name) -> cart_ID"
            },
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "AddProductToCart",
                "Description": "This API is to add a product to a cart.",
                "input_params": {
                    "cart_ID": {
                        "description": "the ID of the cart",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of adding the product to the cart",
                        "type": "String"
                    }
                },
                "format": "AddProductToCart(cart_ID, product_ID) -> status"
            }
        ],
        "Query": "Could you add the product 'Sony WH-1000XM4' to Jack's cart 'Audio Equipment' with his username jack_audio.",
        "Label": "AddProductToCart(cart_ID=CartName2ID(cart_name='Audio Equipment'), product_ID=ProductName2ID(product_name='Sony WH-1000XM4'))",
        "Index": 724
    },
    {
        "APIs": [
            {
                "name": "FavoriteName2ID",
                "Description": "This API is to convert favorite name to favorite ID.",
                "input_params": {
                    "favorite_name": {
                        "description": "the name of the favorite list",
                        "type": "String"
                    }
                },
                "output_params": {
                    "favorite_ID": {
                        "description": "the ID of the favorite list",
                        "type": "Integer"
                    }
                },
                "format": "FavoriteName2ID(favorite_name) -> favorite_ID"
            },
            {
                "name": "MovieName2ID",
                "Description": "This API is to convert movie name to movie ID.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieName2ID(movie_name) -> movie_ID"
            },
            {
                "name": "AddMovieToFavorites",
                "Description": "This API is to add a movie to a favorite list.",
                "input_params": {
                    "favorite_ID": {
                        "description": "the ID of the favorite list",
                        "type": "Integer"
                    },
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of adding the movie to the favorite list",
                        "type": "String"
                    }
                },
                "format": "AddMovieToFavorites(favorite_ID, movie_ID) -> status"
            }
        ],
        "Query": "Can you add the movie 'Star Wars' to Mary's favorite list 'Adventure Movies' using username mary_adventure.",
        "Label": "AddMovieToFavorites(favorite_ID=FavoriteName2ID(favorite_name='Adventure Movies'), movie_ID=MovieName2ID(movie_name='Star Wars'))",
        "Index": 725
    },
    {
        "APIs": [
            {
                "name": "FavoriteName2ID",
                "Description": "This API is to convert favorite name to favorite ID.",
                "input_params": {
                    "favorite_name": {
                        "description": "the name of the favorite list",
                        "type": "String"
                    }
                },
                "output_params": {
                    "favorite_ID": {
                        "description": "the ID of the favorite list",
                        "type": "Integer"
                    }
                },
                "format": "FavoriteName2ID(favorite_name) -> favorite_ID"
            },
            {
                "name": "MovieName2ID",
                "Description": "This API is to convert movie name to movie ID.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieName2ID(movie_name) -> movie_ID"
            },
            {
                "name": "AddMovieToFavorites",
                "Description": "This API is to add a movie to a favorite list.",
                "input_params": {
                    "favorite_ID": {
                        "description": "the ID of the favorite list",
                        "type": "Integer"
                    },
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of adding the movie to the favorite list",
                        "type": "String"
                    }
                },
                "format": "AddMovieToFavorites(favorite_ID, movie_ID) -> status"
            }
        ],
        "Query": "I would like to add the movie 'Casablanca' to Alex's favorite list 'All time best' with alex_best as the username.",
        "Label": "AddMovieToFavorites(favorite_ID=FavoriteName2ID(favorite_name='All time best'), movie_ID=MovieName2ID(movie_name='Casablanca'))",
        "Index": 726
    },
    {
        "APIs": [
            {
                "name": "WatchlistName2ID",
                "Description": "This API is to convert watchlist name to watchlist ID.",
                "input_params": {
                    "watchlist_name": {
                        "description": "the name of the watchlist",
                        "type": "String"
                    }
                },
                "output_params": {
                    "watchlist_ID": {
                        "description": "the ID of the watchlist",
                        "type": "Integer"
                    }
                },
                "format": "WatchlistName2ID(watchlist_name) -> watchlist_ID"
            },
            {
                "name": "MovieName2ID",
                "Description": "This API is to convert movie name to movie ID.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieName2ID(movie_name) -> movie_ID"
            },
            {
                "name": "AddMovieToWatchlist",
                "Description": "This API is to add a movie to a watchlist.",
                "input_params": {
                    "watchlist_ID": {
                        "description": "the ID of the watchlist",
                        "type": "Integer"
                    },
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "add_status": {
                        "description": "the status of adding the movie to the watchlist",
                        "type": "String"
                    }
                },
                "format": "AddMovieToWatchlist(watchlist_ID, movie_ID) -> add_status"
            }
        ],
        "Query": "Can you add the movie 'Interstellar' to Sarah's watchlist 'Sci-fi Movies' with her username sarah_sci?",
        "Label": "AddMovieToWatchlist(watchlist_ID=WatchlistName2ID(watchlist_name='Sci-fi Movies'), movie_ID=MovieName2ID(movie_name='Interstellar'))",
        "Index": 727
    },
    {
        "APIs": [
            {
                "name": "WatchlistName2ID",
                "Description": "This API is to convert watchlist name to watchlist ID.",
                "input_params": {
                    "watchlist_name": {
                        "description": "the name of the watchlist",
                        "type": "String"
                    }
                },
                "output_params": {
                    "watchlist_ID": {
                        "description": "the ID of the watchlist",
                        "type": "Integer"
                    }
                },
                "format": "WatchlistName2ID(watchlist_name) -> watchlist_ID"
            },
            {
                "name": "MovieName2ID",
                "Description": "This API is to convert movie name to movie ID.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieName2ID(movie_name) -> movie_ID"
            },
            {
                "name": "AddMovieToWatchlist",
                "Description": "This API is to add a movie to a watchlist.",
                "input_params": {
                    "watchlist_ID": {
                        "description": "the ID of the watchlist",
                        "type": "Integer"
                    },
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of adding the movie to the watchlist",
                        "type": "String"
                    }
                },
                "format": "AddMovieToWatchlist(watchlist_ID, movie_ID) -> status"
            }
        ],
        "Query": "Can you please put the movie 'Titanic' on Mike's watchlist 'Romantic Movies' with his username mike_romantic?",
        "Label": "AddMovieToWatchlist(watchlist_ID=WatchlistName2ID(watchlist_name='Romantic Movies'), movie_ID=MovieName2ID(movie_name='Titanic'))",
        "Index": 728
    },
    {
        "APIs": [
            {
                "name": "WatchlistName2ID",
                "Description": "This API is to convert watchlist name to watchlist ID.",
                "input_params": {
                    "watchlist_name": {
                        "description": "the name of the watchlist",
                        "type": "String"
                    }
                },
                "output_params": {
                    "watchlist_ID": {
                        "description": "the ID of the watchlist",
                        "type": "Integer"
                    }
                },
                "format": "WatchlistName2ID(watchlist_name) -> watchlist_ID"
            },
            {
                "name": "MovieName2ID",
                "Description": "This API is to convert movie name to movie ID.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieName2ID(movie_name) -> movie_ID"
            },
            {
                "name": "AddMovieToWatchlist",
                "Description": "This API is to add a movie to a watchlist.",
                "input_params": {
                    "watchlist_ID": {
                        "description": "the ID of the watchlist",
                        "type": "Integer"
                    },
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of adding the movie to the watchlist",
                        "type": "String"
                    }
                },
                "format": "AddMovieToWatchlist(watchlist_ID, movie_ID) -> status"
            }
        ],
        "Query": "Can you please include the movie 'The Dark Knight' in Mark's watchlist 'Action Movies' with his username mark_action?",
        "Label": "AddMovieToWatchlist(watchlist_ID=WatchlistName2ID(watchlist_name='Action Movies'), movie_ID=MovieName2ID(movie_name='The Dark Knight'))",
        "Index": 729
    },
    {
        "APIs": [
            {
                "name": "WatchlistName2ID",
                "Description": "This API is to convert watchlist name to watchlist ID.",
                "input_params": {
                    "watchlist_name": {
                        "description": "the name of the watchlist",
                        "type": "String"
                    }
                },
                "output_params": {
                    "watchlist_ID": {
                        "description": "the ID of the watchlist",
                        "type": "Integer"
                    }
                },
                "format": "WatchlistName2ID(watchlist_name) -> watchlist_ID"
            },
            {
                "name": "MovieName2ID",
                "Description": "This API is to convert movie name to movie ID.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieName2ID(movie_name) -> movie_ID"
            },
            {
                "name": "AddMovieToWatchlist",
                "Description": "This API is to add a movie to a watchlist.",
                "input_params": {
                    "watchlist_ID": {
                        "description": "the ID of the watchlist",
                        "type": "Integer"
                    },
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of adding the movie to the watchlist",
                        "type": "String"
                    }
                },
                "format": "AddMovieToWatchlist(watchlist_ID, movie_ID) -> status"
            }
        ],
        "Query": "Can you please add the movie 'The Lion King' to Emma's watchlist 'Animated Movies' with her username emma_animated?",
        "Label": "AddMovieToWatchlist(watchlist_ID=WatchlistName2ID(watchlist_name='Animated Movies'), movie_ID=MovieName2ID(movie_name='The Lion King'))",
        "Index": 730
    },
    {
        "APIs": [
            {
                "name": "ReadingListName2ID",
                "Description": "This API is to convert reading list name to reading list ID.",
                "input_params": {
                    "readinglist_name": {
                        "description": "the name of the reading list",
                        "type": "String"
                    }
                },
                "output_params": {
                    "readinglist_ID": {
                        "description": "the ID of the reading list",
                        "type": "Integer"
                    }
                },
                "format": "ReadingListName2ID(readinglist_name) -> readinglist_ID"
            },
            {
                "name": "BookTitle2ID",
                "Description": "This API is to convert book title to book ID.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookTitle2ID(book_title) -> book_ID"
            },
            {
                "name": "AddBookToReadingList",
                "Description": "This API is to add a book to a reading list.",
                "input_params": {
                    "readinglist_ID": {
                        "description": "the ID of the reading list",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of adding the book to the reading list",
                        "type": "String"
                    }
                },
                "format": "AddBookToReadingList(readinglist_ID, book_ID) -> status"
            }
        ],
        "Query": "Can you add the book 'Pride and Prejudice' to Jack's reading list 'Romance' with his username jack_lovebooks ?",
        "Label": "AddBookToReadingList(readinglist_ID=ReadingListName2ID(readinglist_name='Romance'), book_ID=BookTitle2ID(book_title='Pride and Prejudice'))",
        "Index": 731
    },
    {
        "APIs": [
            {
                "name": "ReadingListName2ID",
                "Description": "This API is to convert reading list name to reading list ID.",
                "input_params": {
                    "readinglist_name": {
                        "description": "the name of the reading list",
                        "type": "String"
                    }
                },
                "output_params": {
                    "readinglist_ID": {
                        "description": "the ID of the reading list",
                        "type": "Integer"
                    }
                },
                "format": "ReadingListName2ID(readinglist_name) -> readinglist_ID"
            },
            {
                "name": "BookTitle2ID",
                "Description": "This API is to convert book title to book ID.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookTitle2ID(book_title) -> book_ID"
            },
            {
                "name": "AddBookToReadingList",
                "Description": "This API is to add a book to a reading list.",
                "input_params": {
                    "readinglist_ID": {
                        "description": "the ID of the reading list",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of adding the book to the reading list",
                        "type": "String"
                    }
                },
                "format": "AddBookToReadingList(readinglist_ID, book_ID) -> status"
            }
        ],
        "Query": "Could you add the book 'To Kill a Mockingbird' to Emily's reading list 'American Literature' with her username emily_bookslover ?",
        "Label": "AddBookToReadingList(readinglist_ID=ReadingListName2ID(readinglist_name='American Literature'), book_ID=BookTitle2ID(book_title='To Kill a Mockingbird'))",
        "Index": 732
    },
    {
        "APIs": [
            {
                "name": "ReadingListName2ID",
                "Description": "This API is to convert reading list name to reading list ID.",
                "input_params": {
                    "readinglist_name": {
                        "description": "the name of the reading list",
                        "type": "String"
                    }
                },
                "output_params": {
                    "readinglist_ID": {
                        "description": "the ID of the reading list",
                        "type": "Integer"
                    }
                },
                "format": "ReadingListName2ID(readinglist_name) -> readinglist_ID"
            },
            {
                "name": "BookTitle2ID",
                "Description": "This API is to convert book title to book ID.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookTitle2ID(book_title) -> book_ID"
            },
            {
                "name": "AddBookToReadingList",
                "Description": "This API is to add a book to a reading list.",
                "input_params": {
                    "readinglist_ID": {
                        "description": "the ID of the reading list",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of adding the book to the reading list",
                        "type": "String"
                    }
                },
                "format": "AddBookToReadingList(readinglist_ID, book_ID) -> status"
            }
        ],
        "Query": "Could you add the book 'The Great Gatsby' to John's reading list 'Modern Classics' with his username john_reads ?",
        "Label": "AddBookToReadingList(readinglist_ID=ReadingListName2ID(readinglist_name='Modern Classics'), book_ID=BookTitle2ID(book_title='The Great Gatsby'))",
        "Index": 733
    },
    {
        "APIs": [
            {
                "name": "ReadingListName2ID",
                "Description": "This API is to convert reading list name to reading list ID.",
                "input_params": {
                    "readinglist_name": {
                        "description": "the name of the reading list",
                        "type": "String"
                    }
                },
                "output_params": {
                    "readinglist_ID": {
                        "description": "the ID of the reading list",
                        "type": "Integer"
                    }
                },
                "format": "ReadingListName2ID(readinglist_name) -> readinglist_ID"
            },
            {
                "name": "BookTitle2ID",
                "Description": "This API is to convert book title to book ID.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookTitle2ID(book_title) -> book_ID"
            },
            {
                "name": "AddBookToReadingList",
                "Description": "This API is to add a book to a reading list.",
                "input_params": {
                    "readinglist_ID": {
                        "description": "the ID of the reading list",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of adding the book to the reading list",
                        "type": "String"
                    }
                },
                "format": "AddBookToReadingList(readinglist_ID, book_ID) -> status"
            }
        ],
        "Query": "Could you add the book 'The Great Gatsby' to John's reading list 'Modern Classics' with his username john_reads ?",
        "Label": "AddBookToReadingList(readinglist_ID=ReadingListName2ID(readinglist_name='Modern Classics'), book_ID=BookTitle2ID(book_title='The Great Gatsby'))",
        "Index": 734
    },
    {
        "APIs": [
            {
                "name": "Username2ID",
                "Description": "This API is to convert username to user ID.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "Username2ID(username) -> user_ID"
            },
            {
                "name": "BookName2ID",
                "Description": "This API is to convert book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookName2ID(book_name) -> book_ID"
            },
            {
                "name": "GetDueDate",
                "Description": "This API is to get the due date of a book.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "due_date": {
                        "description": "the due date of the book",
                        "type": "Date"
                    }
                },
                "format": "GetDueDate(user_ID, book_ID) -> due_date"
            }
        ],
        "Query": "Emily wants to borrow the book 'Pride and Prejudice'. When will it be due?",
        "Label": "GetDueDate(user_ID=Username2ID(username='Emily'), book_ID=BookName2ID(book_name='Pride and Prejudice'))",
        "Index": 735
    },
    {
        "APIs": [
            {
                "name": "Username2ID",
                "Description": "This API is to convert username to user ID.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "Username2ID(username) -> user_ID"
            },
            {
                "name": "BookName2ID",
                "Description": "This API is to convert book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookName2ID(book_name) -> book_ID"
            },
            {
                "name": "GetDueDate",
                "Description": "This API is to get the due date of a book.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "due_date": {
                        "description": "the due date of the book",
                        "type": "Date"
                    }
                },
                "format": "GetDueDate(user_ID, book_ID) -> due_date"
            }
        ],
        "Query": "Robert wishes to take out the book 'Moby Dick'. What's the due date?",
        "Label": "GetDueDate(user_ID=Username2ID(username='Robert'), book_ID=BookName2ID(book_name='Moby Dick'))",
        "Index": 736
    },
    {
        "APIs": [
            {
                "name": "Username2ID",
                "Description": "This API is to convert username to user ID.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "Username2ID(username) -> user_ID"
            },
            {
                "name": "BookName2ID",
                "Description": "This API is to convert book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookName2ID(book_name) -> book_ID"
            },
            {
                "name": "GetDueDate",
                "Description": "This API is to get the return date of a book.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "return_date": {
                        "description": "the return date of the book",
                        "type": "Date"
                    }
                },
                "format": "GetDueDate(user_ID, book_ID) -> return_date"
            }
        ],
        "Query": "Alice is planning to borrow the book 'To Kill a Mockingbird'. When is the return date?",
        "Label": "GetDueDate(user_ID=Username2ID(username='Alice'), book_ID=BookName2ID(book_name='To Kill a Mockingbird'))",
        "Index": 737
    },
    {
        "APIs": [
            {
                "name": "Username2ID",
                "Description": "This API is to convert username to user ID.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "Username2ID(username) -> user_ID"
            },
            {
                "name": "BookName2ID",
                "Description": "This API is to convert book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookName2ID(book_name) -> book_ID"
            },
            {
                "name": "GetDueDate",
                "Description": "This API is to get the due date of a book.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "due_date": {
                        "description": "the due date of the book",
                        "type": "Date"
                    }
                },
                "format": "GetDueDate(user_ID, book_ID) -> due_date"
            }
        ],
        "Query": "Alice is planning to borrow the book 'To Kill a Mockingbird'. When is the return date?",
        "Label": "GetDueDate(user_ID=Username2ID(username='Alice'), book_ID=BookName2ID(book_name='To Kill a Mockingbird'))",
        "Index": 738
    },
    {
        "APIs": [
            {
                "name": "Username2ID",
                "Description": "This API is to convert username to user ID.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "Username2ID(username) -> user_ID"
            },
            {
                "name": "BookName2ID",
                "Description": "This API is to convert book name to book ID.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookName2ID(book_name) -> book_ID"
            },
            {
                "name": "GetDueDate",
                "Description": "This API is to get the due date of a book.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "due_date": {
                        "description": "the due date of the book",
                        "type": "Date"
                    }
                },
                "format": "GetDueDate(user_ID, book_ID) -> due_date"
            }
        ],
        "Query": "Megan hopes to borrow the book 'The Great Gatsby'. When does it have to be returned?",
        "Label": "GetDueDate(user_ID=Username2ID(username='Megan'), book_ID=BookName2ID(book_name='The Great Gatsby'))",
        "Index": 739
    },
    {
        "APIs": [
            {
                "name": "UserIdToName",
                "Description": "This API is to convert user ID to user name.",
                "input_params": {
                    "userId": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "format": "UserIdToName(userId) -> user_name"
            },
            {
                "name": "RouteToLocation",
                "Description": "This API is to convert route name to location coordinates.",
                "input_params": {
                    "route": {
                        "description": "the name of the bus route",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location_coordinates": {
                        "description": "the coordinates of the bus route location",
                        "type": "String"
                    }
                },
                "format": "RouteToLocation(route) -> location_coordinates"
            },
            {
                "name": "CheckBusSchedule",
                "Description": "This API is to check the bus schedule.",
                "input_params": {
                    "location_coordinates": {
                        "description": "the coordinates of the bus route location",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the bus schedule",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the bus schedule",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "bus_schedule_info": {
                        "description": "the information of the bus schedule",
                        "type": "String"
                    }
                },
                "format": "CheckBusSchedule(location_coordinates, date, time) -> bus_schedule_info"
            },
            {
                "name": "BookBusSeat",
                "Description": "This API is to book a bus seat.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    },
                    "bus_schedule_info": {
                        "description": "the information of the bus schedule",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookBusSeat(user_name, bus_schedule_info) -> booking_status"
            }
        ],
        "Query": "Can you arrange a seat on the bus route '22C' for user with id '11122' on May 10th at 1 PM?",
        "Label": "BookBusSeat(user_name=UserIdToName(userId='11122'), bus_schedule_info=CheckBusSchedule(location_coordinates=RouteToLocation(route='22C'), date='May 10th', time='1 PM'))",
        "Index": 740
    },
    {
        "APIs": [
            {
                "name": "UserIdToName",
                "Description": "This API is to convert user ID to user name.",
                "input_params": {
                    "userId": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "format": "UserIdToName(userId) -> user_name"
            },
            {
                "name": "RouteToLocation",
                "Description": "This API is to convert route name to location coordinates.",
                "input_params": {
                    "route": {
                        "description": "the name of the bus route",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location_coordinates": {
                        "description": "the coordinates of the bus route location",
                        "type": "String"
                    }
                },
                "format": "RouteToLocation(route) -> location_coordinates"
            },
            {
                "name": "CheckBusSchedule",
                "Description": "This API is to check the bus schedule.",
                "input_params": {
                    "location_coordinates": {
                        "description": "the coordinates of the bus route location",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the bus schedule",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the bus schedule",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "bus_schedule_info": {
                        "description": "the information of the bus schedule",
                        "type": "String"
                    }
                },
                "format": "CheckBusSchedule(location_coordinates, date, time) -> bus_schedule_info"
            },
            {
                "name": "BookBusSeat",
                "Description": "This API is to book a bus seat.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    },
                    "bus_schedule_info": {
                        "description": "the information of the bus schedule",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookBusSeat(user_name, bus_schedule_info) -> booking_status"
            }
        ],
        "Query": "Can you reserve a seat on the bus route '99Z' for user with id '33344' on June 30th at 5 PM?",
        "Label": "BookBusSeat(user_name=UserIdToName(userId='33344'), bus_schedule_info=CheckBusSchedule(location_coordinates=RouteToLocation(route='99Z'), date='June 30th', time='5 PM'))",
        "Index": 741
    },
    {
        "APIs": [
            {
                "name": "UserIdToName",
                "Description": "This API is to convert user ID to user name.",
                "input_params": {
                    "userId": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "format": "UserIdToName(userId) -> user_name"
            },
            {
                "name": "RouteToLocation",
                "Description": "This API is to convert route name to location coordinates.",
                "input_params": {
                    "route": {
                        "description": "the name of the bus route",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location_coordinates": {
                        "description": "the coordinates of the bus route location",
                        "type": "String"
                    }
                },
                "format": "RouteToLocation(route) -> location_coordinates"
            },
            {
                "name": "CheckBusSchedule",
                "Description": "This API is to check the bus schedule.",
                "input_params": {
                    "location_coordinates": {
                        "description": "the coordinates of the bus route location",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the bus schedule",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the bus schedule",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "bus_schedule_info": {
                        "description": "the information of the bus schedule",
                        "type": "String"
                    }
                },
                "format": "CheckBusSchedule(location_coordinates, date, time) -> bus_schedule_info"
            },
            {
                "name": "BookBusSeat",
                "Description": "This API is to book a bus seat.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    },
                    "bus_schedule_info": {
                        "description": "the information of the bus schedule",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookBusSeat(user_name, bus_schedule_info) -> booking_status"
            }
        ],
        "Query": "Can you reserve a seat on the bus route '99Z' for user with id '33344' on June 30th at 5 PM?",
        "Label": "BookBusSeat(user_name=UserIdToName(userId='33344'), bus_schedule_info=CheckBusSchedule(location_coordinates=RouteToLocation(route='99Z'), date='June 30th', time='5 PM'))",
        "Index": 742
    },
    {
        "APIs": [
            {
                "name": "UserIdToName",
                "Description": "This API is to convert user ID to user name.",
                "input_params": {
                    "userId": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "format": "UserIdToName(userId) -> user_name"
            },
            {
                "name": "RouteToLocation",
                "Description": "This API is to convert route name to location coordinates.",
                "input_params": {
                    "route": {
                        "description": "the name of the bus route",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location_coordinates": {
                        "description": "the coordinates of the bus route location",
                        "type": "String"
                    }
                },
                "format": "RouteToLocation(route) -> location_coordinates"
            },
            {
                "name": "CheckBusSchedule",
                "Description": "This API is to check the bus schedule.",
                "input_params": {
                    "location_coordinates": {
                        "description": "the coordinates of the bus route location",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the bus schedule",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the bus schedule",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "bus_schedule_info": {
                        "description": "the information of the bus schedule",
                        "type": "String"
                    }
                },
                "format": "CheckBusSchedule(location_coordinates, date, time) -> bus_schedule_info"
            },
            {
                "name": "BookBusSeat",
                "Description": "This API is to book a bus seat.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    },
                    "bus_schedule_info": {
                        "description": "the information of the bus schedule",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookBusSeat(user_name, bus_schedule_info) -> booking_status"
            }
        ],
        "Query": "Can you ensure a seat on the bus route '77X' for user with id '22233' on August 25th at 4 PM?",
        "Label": "BookBusSeat(user_name=UserIdToName(userId='22233'), bus_schedule_info=CheckBusSchedule(location_coordinates=RouteToLocation(route='77X'), date='August 25th', time='4 PM'))",
        "Index": 743
    },
    {
        "APIs": [
            {
                "name": "ProductIDToName",
                "Description": "This API is to convert product ID to product name.",
                "input_params": {
                    "productId": {
                        "description": "the ID of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "format": "ProductIDToName(productId) -> product_name"
            },
            {
                "name": "StoreIDToAddress",
                "Description": "This API is to convert store ID to store address.",
                "input_params": {
                    "storeId": {
                        "description": "the ID of the store",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_address": {
                        "description": "the address of the store",
                        "type": "String"
                    }
                },
                "format": "StoreIDToAddress(storeId) -> store_address"
            },
            {
                "name": "PlaceOrder",
                "Description": "This API is to place an order.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    },
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    },
                    "store_address": {
                        "description": "the address of the store",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(user_name, product_name, store_address, quantity) -> order_status"
            }
        ],
        "Query": "Can you order 3 units of product with id '12345' for user 'mary_jane' from store with id '56'?",
        "Label": "PlaceOrder(user_name='mary_jane', product_name=ProductIDToName(productId='12345'), store_address=StoreIDToAddress(storeId='56'), quantity='3')",
        "Index": 744
    },
    {
        "APIs": [
            {
                "name": "ProductIDToName",
                "Description": "This API is to convert product ID to product name.",
                "input_params": {
                    "productId": {
                        "description": "the ID of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "format": "ProductIDToName(productId) -> product_name"
            },
            {
                "name": "StoreIDToAddress",
                "Description": "This API is to convert store ID to store address.",
                "input_params": {
                    "storeId": {
                        "description": "the ID of the store",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_address": {
                        "description": "the address of the store",
                        "type": "String"
                    }
                },
                "format": "StoreIDToAddress(storeId) -> store_address"
            },
            {
                "name": "PlaceOrder",
                "Description": "This API is to place an order.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    },
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    },
                    "store_address": {
                        "description": "the address of the store",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(user_name, product_name, store_address, quantity) -> order_status"
            }
        ],
        "Query": "Can you order 1 unit of product with id '67890' for user 'peter_parker' from store with id '78'?",
        "Label": "PlaceOrder(user_name='peter_parker', product_name=ProductIDToName(productId='67890'), store_address=StoreIDToAddress(storeId='78'), quantity='1')",
        "Index": 745
    },
    {
        "APIs": [
            {
                "name": "ProductIDToName",
                "Description": "This API is to convert product ID to product name.",
                "input_params": {
                    "productId": {
                        "description": "the ID of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "format": "ProductIDToName(productId) -> product_name"
            },
            {
                "name": "StoreIDToAddress",
                "Description": "This API is to convert store ID to store address.",
                "input_params": {
                    "storeId": {
                        "description": "the ID of the store",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_address": {
                        "description": "the address of the store",
                        "type": "String"
                    }
                },
                "format": "StoreIDToAddress(storeId) -> store_address"
            },
            {
                "name": "PlaceOrder",
                "Description": "This API is to place an order.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    },
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    },
                    "store_address": {
                        "description": "the address of the store",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(user_name, product_name, store_address, quantity) -> order_status"
            }
        ],
        "Query": "Can you order 6 units of product with id '34567' for user 'steve_rogers' from store with id '21'?",
        "Label": "PlaceOrder(user_name='steve_rogers', product_name=ProductIDToName(productId='34567'), store_address=StoreIDToAddress(storeId='21'), quantity='6')",
        "Index": 746
    },
    {
        "APIs": [
            {
                "name": "Address2Coordinates",
                "Description": "This API is to convert address to coordinates.",
                "input_params": {
                    "address": {
                        "description": "the address of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "coordinates": {
                        "description": "the coordinates of the location",
                        "type": "String"
                    }
                },
                "format": "Address2Coordinates(address) -> coordinates"
            },
            {
                "name": "RestaurantName2ID",
                "Description": "This API is to convert restaurant name to restaurant ID.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantName2ID(restaurant_name) -> restaurant_id"
            },
            {
                "name": "BookTable",
                "Description": "This API is to make a reservation for a table.",
                "input_params": {
                    "coordinates": {
                        "description": "the coordinates of the location",
                        "type": "String"
                    },
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the reservation",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "BookTable(coordinates, restaurant_id, date, time) -> reservation_status"
            }
        ],
        "Query": "Can you make a reservation for me at 'Olive Garden' in 'Downtown, Los Angeles' for April 15th at 8 pm?",
        "Label": "BookTable(coordinates=Address2Coordinates(address='Downtown, Los Angeles'), restaurant_id=RestaurantName2ID(restaurant_name='Olive Garden'), date='April 15th', time='8 pm')",
        "Index": 747
    },
    {
        "APIs": [
            {
                "name": "Address2Coordinates",
                "Description": "This API is to convert address to coordinates.",
                "input_params": {
                    "address": {
                        "description": "the address of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "coordinates": {
                        "description": "the coordinates of the location",
                        "type": "String"
                    }
                },
                "format": "Address2Coordinates(address) -> coordinates"
            },
            {
                "name": "RestaurantName2ID",
                "Description": "This API is to convert restaurant name to restaurant ID.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantName2ID(restaurant_name) -> restaurant_id"
            },
            {
                "name": "BookTable",
                "Description": "This API is to book a table at a restaurant.",
                "input_params": {
                    "coordinates": {
                        "description": "the coordinates of the location",
                        "type": "String"
                    },
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the booking",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookTable(coordinates, restaurant_id, date, time) -> booking_status"
            }
        ],
        "Query": "Can you book a table for me at 'Red Lobster' in 'Las Vegas Strip, Nevada' on May 5th at 6 pm?",
        "Label": "BookTable(coordinates=Address2Coordinates(address='Las Vegas Strip, Nevada'), restaurant_id=RestaurantName2ID(restaurant_name='Red Lobster'), date='May 5th', time='6 pm')",
        "Index": 748
    },
    {
        "APIs": [
            {
                "name": "Address2Coordinates",
                "Description": "This API is to convert an address to coordinates.",
                "input_params": {
                    "address": {
                        "description": "the address of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "coordinates": {
                        "description": "the coordinates of the location",
                        "type": "String"
                    }
                },
                "format": "Address2Coordinates(address) -> coordinates"
            },
            {
                "name": "RestaurantName2ID",
                "Description": "This API is to convert a restaurant name to restaurant ID.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantName2ID(restaurant_name) -> restaurant_id"
            },
            {
                "name": "BookTable",
                "Description": "This API is to book a table at a restaurant.",
                "input_params": {
                    "coordinates": {
                        "description": "the coordinates of the location",
                        "type": "String"
                    },
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the reservation",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookTable(coordinates, restaurant_id, date, time) -> booking_status"
            }
        ],
        "Query": "Can you reserve a table at the restaurant 'Starbucks' for the location 'Central Park, New York' on June 1st at 9 am?",
        "Label": "BookTable(coordinates=Address2Coordinates(address='Central Park, New York'), restaurant_id=RestaurantName2ID(restaurant_name='Starbucks'), date='June 1st', time='9 am')",
        "Index": 749
    },
    {
        "APIs": [
            {
                "name": "Address2Coordinates",
                "Description": "This API is to convert an address to its coordinates.",
                "input_params": {
                    "address": {
                        "description": "the address of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "coordinates": {
                        "description": "the coordinates of the location",
                        "type": "String"
                    }
                },
                "format": "Address2Coordinates(address) -> coordinates"
            },
            {
                "name": "RestaurantName2ID",
                "Description": "This API is to convert a restaurant name to its ID.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantName2ID(restaurant_name) -> restaurant_id"
            },
            {
                "name": "BookTable",
                "Description": "This API is to make a reservation at a restaurant.",
                "input_params": {
                    "coordinates": {
                        "description": "the coordinates of the location",
                        "type": "String"
                    },
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the reservation",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "BookTable(coordinates, restaurant_id, date, time) -> reservation_status"
            }
        ],
        "Query": "Can you make a reservation for me at 'Chipotle' in 'South Beach, Miami' for August 12th at 7 pm?",
        "Label": "BookTable(coordinates=Address2Coordinates(address='South Beach, Miami'), restaurant_id=RestaurantName2ID(restaurant_name='Chipotle'), date='August 12th', time='7 pm')",
        "Index": 750
    },
    {
        "APIs": [
            {
                "name": "ISBN2Book",
                "Description": "This API is to convert ISBN to book title.",
                "input_params": {
                    "isbn": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "format": "ISBN2Book(isbn) -> book_title"
            },
            {
                "name": "Book2Author",
                "Description": "This API is to convert book title to author name.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "format": "Book2Author(book_title) -> author_name"
            },
            {
                "name": "ScheduleDiscussion",
                "Description": "This API is to schedule a book discussion.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "String"
                    },
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    },
                    "date_time": {
                        "description": "the date and time of the discussion",
                        "type": "String"
                    }
                },
                "output_params": {
                    "scheduling_status": {
                        "description": "the status of the scheduling",
                        "type": "String"
                    }
                },
                "format": "ScheduleDiscussion(user_ID, author_name, date_time) -> scheduling_status"
            }
        ],
        "Query": "I, user123, would like to have a book discussion with the author of the book with ISBN 978-0-575-09245-5 on 15th of August at 10am.",
        "Label": "ScheduleDiscussion(user_ID='user123', author_name=Book2Author(book_title=ISBN2Book(isbn='978-0-575-09245-5')), date_time='15th of August at 10am')",
        "Index": 751
    },
    {
        "APIs": [
            {
                "name": "ISBN2Book",
                "Description": "This API is to convert ISBN to book title.",
                "input_params": {
                    "isbn": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "format": "ISBN2Book(isbn) -> book_title"
            },
            {
                "name": "Book2Author",
                "Description": "This API is to convert book title to author name.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "format": "Book2Author(book_title) -> author_name"
            },
            {
                "name": "ScheduleDiscussion",
                "Description": "This API is to schedule a book discussion.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "String"
                    },
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    },
                    "date_time": {
                        "description": "the date and time of the discussion",
                        "type": "String"
                    }
                },
                "output_params": {
                    "scheduling_status": {
                        "description": "the status of the scheduling",
                        "type": "String"
                    }
                },
                "format": "ScheduleDiscussion(user_ID, author_name, date_time) -> scheduling_status"
            }
        ],
        "Query": "I, user456, would like to have a book discussion with the author of the book with ISBN 978-1-4025-7776-9 on 20th of September at 2pm.",
        "Label": "ScheduleDiscussion(user_ID='user456', author_name=Book2Author(book_title=ISBN2Book(isbn='978-1-4025-7776-9')), date_time='20th of September at 2pm')",
        "Index": 752
    },
    {
        "APIs": [
            {
                "name": "ISBN2Book",
                "Description": "This API is to convert ISBN to book title.",
                "input_params": {
                    "isbn": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "format": "ISBN2Book(isbn) -> book_title"
            },
            {
                "name": "Book2Author",
                "Description": "This API is to convert book title to author name.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "format": "Book2Author(book_title) -> author_name"
            },
            {
                "name": "ScheduleDiscussion",
                "Description": "This API is to schedule a book discussion.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "String"
                    },
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    },
                    "date_time": {
                        "description": "the date and time of the discussion",
                        "type": "String"
                    }
                },
                "output_params": {
                    "scheduling_status": {
                        "description": "the status of the scheduling",
                        "type": "String"
                    }
                },
                "format": "ScheduleDiscussion(user_ID, author_name, date_time) -> scheduling_status"
            }
        ],
        "Query": "I, user789, would like to have a book discussion with the author of the book with ISBN 978-3-16-148410-0 on 25th of October at 6pm.",
        "Label": "ScheduleDiscussion(user_ID='user789', author_name=Book2Author(book_title=ISBN2Book(isbn='978-3-16-148410-0')), date_time='25th of October at 6pm')",
        "Index": 753
    },
    {
        "APIs": [
            {
                "name": "Book2Author",
                "Description": "This API is to convert book title to author name.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "format": "Book2Author(book_title) -> author_name"
            },
            {
                "name": "ISBN2Book",
                "Description": "This API is to convert ISBN to book title.",
                "input_params": {
                    "isbn": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "format": "ISBN2Book(isbn) -> book_title"
            },
            {
                "name": "ScheduleDiscussion",
                "Description": "This API is to schedule a book discussion.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "String"
                    },
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    },
                    "date_time": {
                        "description": "the date and time of the discussion",
                        "type": "String"
                    }
                },
                "output_params": {
                    "schedule_status": {
                        "description": "the status of the scheduling",
                        "type": "String"
                    }
                },
                "format": "ScheduleDiscussion(user_ID, author_name, date_time) -> schedule_status"
            }
        ],
        "Query": "I, user789, would like to have a book discussion with the author of the book with ISBN 978-3-16-148410-0 on 25th of October at 6pm.",
        "Label": "ScheduleDiscussion(user_ID='user789', author_name=Book2Author(book_title=ISBN2Book(isbn='978-3-16-148410-0')), date_time='25th of October at 6pm')",
        "Index": 754
    },
    {
        "APIs": [
            {
                "name": "ISBN2Book",
                "Description": "This API is to convert ISBN to book title.",
                "input_params": {
                    "isbn": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "format": "ISBN2Book(isbn) -> book_title"
            },
            {
                "name": "Book2Author",
                "Description": "This API is to convert book title to author name.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "format": "Book2Author(book_title) -> author_name"
            },
            {
                "name": "ScheduleDiscussion",
                "Description": "This API is to schedule a book discussion.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "String"
                    },
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    },
                    "date_time": {
                        "description": "the date and time of the discussion",
                        "type": "String"
                    }
                },
                "output_params": {
                    "schedule_status": {
                        "description": "the status of the scheduling",
                        "type": "String"
                    }
                },
                "format": "ScheduleDiscussion(user_ID, author_name, date_time) -> schedule_status"
            }
        ],
        "Query": "I, user345, would like to have a book discussion with the author of the book with ISBN 978-0-345-39180-3 on 5th of December at 5pm.",
        "Label": "ScheduleDiscussion(user_ID='user345', author_name=Book2Author(book_title=ISBN2Book(isbn='978-0-345-39180-3')), date_time='5th of December at 5pm')",
        "Index": 755
    },
    {
        "APIs": [
            {
                "name": "LocateCity",
                "Description": "This API is to locate the coordinates of a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "coordinates": {
                        "description": "the coordinates of the city",
                        "type": "String"
                    }
                },
                "format": "LocateCity(city)"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast based on coordinates.",
                "input_params": {
                    "coordinates": {
                        "description": "the coordinates of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(coordinates)"
            },
            {
                "name": "GetClothingAdvice",
                "Description": "This API is to get clothing advice based on weather forecast.",
                "input_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_advice": {
                        "description": "the clothing advice",
                        "type": "String"
                    }
                },
                "format": "GetClothingAdvice(weather)"
            }
        ],
        "Query": "What should I wear in London day after tomorrow?",
        "Label": "GetClothingAdvice(weather=WeatherForecast(coordinates=LocateCity(city='London')))",
        "Index": 756
    },
    {
        "APIs": [
            {
                "name": "LocateCity",
                "Description": "This API is to locate the coordinates of a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "coordinates": {
                        "description": "the coordinates of the city",
                        "type": "String"
                    }
                },
                "format": "LocateCity(city)"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast based on coordinates.",
                "input_params": {
                    "coordinates": {
                        "description": "the coordinates of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(coordinates)"
            },
            {
                "name": "GetClothingAdvice",
                "Description": "This API is to get clothing advice based on weather forecast.",
                "input_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_advice": {
                        "description": "the clothing advice",
                        "type": "String"
                    }
                },
                "format": "GetClothingAdvice(weather)"
            }
        ],
        "Query": "What should I wear in Tokyo next Monday?",
        "Label": "GetClothingAdvice(weather=WeatherForecast(coordinates=LocateCity(city='Tokyo')))",
        "Index": 757
    },
    {
        "APIs": [
            {
                "name": "LocateCity",
                "Description": "This API is to locate the coordinates of a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "coordinates": {
                        "description": "the coordinates of the city",
                        "type": "String"
                    }
                },
                "format": "LocateCity(city)"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast based on coordinates.",
                "input_params": {
                    "coordinates": {
                        "description": "the coordinates of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(coordinates)"
            },
            {
                "name": "GetClothingAdvice",
                "Description": "This API is to get clothing advice based on weather forecast.",
                "input_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_advice": {
                        "description": "the clothing advice",
                        "type": "String"
                    }
                },
                "format": "GetClothingAdvice(weather)"
            }
        ],
        "Query": "What should I wear in New York this weekend?",
        "Label": "GetClothingAdvice(weather=WeatherForecast(coordinates=LocateCity(city='New York')))",
        "Index": 758
    },
    {
        "APIs": [
            {
                "name": "LocateCity",
                "Description": "This API is to locate the coordinates of a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "coordinates": {
                        "description": "the coordinates of the city",
                        "type": "String"
                    }
                },
                "format": "LocateCity(city) -> coordinates"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast based on coordinates.",
                "input_params": {
                    "coordinates": {
                        "description": "the coordinates of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(coordinates) -> weather"
            },
            {
                "name": "GetClothingAdvice",
                "Description": "This API is to get clothing advice based on weather forecast.",
                "input_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_advice": {
                        "description": "the clothing advice",
                        "type": "String"
                    }
                },
                "format": "GetClothingAdvice(weather) -> clothing_advice"
            }
        ],
        "Query": "What should I wear in New York this weekend?",
        "Label": "GetClothingAdvice(weather=WeatherForecast(coordinates=LocateCity(city='New York')))",
        "Index": 759
    },
    {
        "APIs": [
            {
                "name": "LocateCity",
                "Description": "This API is to locate the coordinates of a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "coordinates": {
                        "description": "the coordinates of the city",
                        "type": "String"
                    }
                },
                "format": "LocateCity(city) -> coordinates"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast based on coordinates.",
                "input_params": {
                    "coordinates": {
                        "description": "the coordinates of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(coordinates) -> weather"
            },
            {
                "name": "GetClothingAdvice",
                "Description": "This API is to get clothing advice based on weather forecast.",
                "input_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_advice": {
                        "description": "the clothing advice",
                        "type": "String"
                    }
                },
                "format": "GetClothingAdvice(weather) -> clothing_advice"
            }
        ],
        "Query": "What should I wear in Rome next week?",
        "Label": "GetClothingAdvice(weather=WeatherForecast(coordinates=LocateCity(city='Rome')))",
        "Index": 760
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "FindRestaurant(city, cuisine) -> restaurant_ID"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a restaurant.",
                "input_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    }
                },
                "format": "GetMenu(restaurant_ID) -> menu"
            },
            {
                "name": "RecommendDish",
                "Description": "This API is to recommend a dish from a menu.",
                "input_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    }
                },
                "output_params": {
                    "recommended_dish": {
                        "description": "the recommended dish",
                        "type": "String"
                    }
                },
                "format": "RecommendDish(menu) -> recommended_dish"
            }
        ],
        "Query": "Can you suggest a good dish to try from a Chinese restaurant in New York?",
        "Label": "RecommendDish(menu=GetMenu(restaurant_ID=FindRestaurant(city='New York', cuisine='Chinese')))",
        "Index": 761
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine type of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "FindRestaurant(city, cuisine) -> restaurant_ID"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a restaurant.",
                "input_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    }
                },
                "format": "GetMenu(restaurant_ID) -> menu"
            },
            {
                "name": "RecommendDish",
                "Description": "This API is to recommend a dish from a restaurant's menu.",
                "input_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    }
                },
                "output_params": {
                    "recommended_dish": {
                        "description": "the recommended dish from the menu",
                        "type": "String"
                    }
                },
                "format": "RecommendDish(menu) -> recommended_dish"
            }
        ],
        "Query": "What's a recommended dish from a Mexican restaurant in Los Angeles?",
        "Label": "RecommendDish(menu=GetMenu(restaurant_ID=FindRestaurant(city='Los Angeles', cuisine='Mexican')))",
        "Index": 762
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine type of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "FindRestaurant(city, cuisine) -> restaurant_ID"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a restaurant.",
                "input_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    }
                },
                "format": "GetMenu(restaurant_ID) -> menu"
            },
            {
                "name": "RecommendDish",
                "Description": "This API is to recommend a tasty dish from a restaurant's menu.",
                "input_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    }
                },
                "output_params": {
                    "recommended_dish": {
                        "description": "the recommended tasty dish",
                        "type": "String"
                    }
                },
                "format": "RecommendDish(menu) -> recommended_dish"
            }
        ],
        "Query": "Can you recommend a tasty dish from an Italian restaurant in San Francisco?",
        "Label": "RecommendDish(menu=GetMenu(restaurant_ID=FindRestaurant(city='San Francisco', cuisine='Italian')))",
        "Index": 763
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine type of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "FindRestaurant(city, cuisine) -> restaurant_ID"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a restaurant based on restaurant ID.",
                "input_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List of dishes"
                    }
                },
                "format": "GetMenu(restaurant_ID) -> menu"
            },
            {
                "name": "RecommendDish",
                "Description": "This API is to recommend a tasty dish from a menu.",
                "input_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List of dishes"
                    }
                },
                "output_params": {
                    "recommended_dish": {
                        "description": "the recommended tasty dish",
                        "type": "String"
                    }
                },
                "format": "RecommendDish(menu) -> recommended_dish"
            }
        ],
        "Query": "Can you recommend a tasty dish from an Italian restaurant in San Francisco?",
        "Label": "RecommendDish(menu=GetMenu(restaurant_ID=FindRestaurant(city='San Francisco', cuisine='Italian')))",
        "Index": 764
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on the city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine type of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "FindRestaurant(city, cuisine) -> restaurant_ID"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a restaurant based on the restaurant ID.",
                "input_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List of dishes"
                    }
                },
                "format": "GetMenu(restaurant_ID) -> menu"
            },
            {
                "name": "RecommendDish",
                "Description": "This API is to recommend a must-try dish from a restaurant's menu.",
                "input_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List of dishes"
                    }
                },
                "output_params": {
                    "recommended_dish": {
                        "description": "the recommended must-try dish",
                        "type": "String"
                    }
                },
                "format": "RecommendDish(menu) -> recommended_dish"
            }
        ],
        "Query": "Can you suggest a must-try dish from a French restaurant in Paris?",
        "Label": "RecommendDish(menu=GetMenu(restaurant_ID=FindRestaurant(city='Paris', cuisine='French')))",
        "Index": 765
    },
    {
        "APIs": [
            {
                "name": "LibraryName2ID",
                "Description": "This API is to convert library name to library ID.",
                "input_params": {
                    "library_name": {
                        "description": "the name of the library",
                        "type": "String"
                    }
                },
                "output_params": {
                    "library_ID": {
                        "description": "the ID of the library",
                        "type": "Integer"
                    }
                },
                "format": "LibraryName2ID(library_name) -> library_ID"
            },
            {
                "name": "BookTitle2ID",
                "Description": "This API is to convert book title to book ID.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookTitle2ID(book_title) -> book_ID"
            },
            {
                "name": "ReserveBook",
                "Description": "This API is to reserve a book at a library.",
                "input_params": {
                    "library_ID": {
                        "description": "the ID of the library",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveBook(library_ID, book_ID) -> reservation_status"
            }
        ],
        "Query": "Can you assist me in booking \"The Great Gatsby\" at the \"Downtown Library\"?",
        "Label": "ReserveBook(library_ID=LibraryName2ID(library_name='Downtown Library'), book_ID=BookTitle2ID(book_title='The Great Gatsby'))",
        "Index": 766
    },
    {
        "APIs": [
            {
                "name": "LibraryName2ID",
                "Description": "This API is to convert library name to library ID.",
                "input_params": {
                    "library_name": {
                        "description": "the name of the library",
                        "type": "String"
                    }
                },
                "output_params": {
                    "library_ID": {
                        "description": "the ID of the library",
                        "type": "Integer"
                    }
                },
                "format": "LibraryName2ID(library_name) -> library_ID"
            },
            {
                "name": "BookTitle2ID",
                "Description": "This API is to convert book title to book ID.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookTitle2ID(book_title) -> book_ID"
            },
            {
                "name": "ReserveBook",
                "Description": "This API is to reserve a book.",
                "input_params": {
                    "library_ID": {
                        "description": "the ID of the library",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveBook(library_ID, book_ID) -> reservation_status"
            }
        ],
        "Query": "Could you help me reserve 'War and Peace' at the 'West End Library'?",
        "Label": "ReserveBook(library_ID=LibraryName2ID(library_name='West End Library'), book_ID=BookTitle2ID(book_title='War and Peace'))",
        "Index": 767
    },
    {
        "APIs": [
            {
                "name": "LibraryName2ID",
                "Description": "This API is to convert library name to library ID.",
                "input_params": {
                    "library_name": {
                        "description": "the name of the library",
                        "type": "String"
                    }
                },
                "output_params": {
                    "library_ID": {
                        "description": "the ID of the library",
                        "type": "Integer"
                    }
                },
                "format": "LibraryName2ID(library_name) -> library_ID"
            },
            {
                "name": "BookTitle2ID",
                "Description": "This API is to convert book title to book ID.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookTitle2ID(book_title) -> book_ID"
            },
            {
                "name": "ReserveBook",
                "Description": "This API is to reserve a book at a library.",
                "input_params": {
                    "library_ID": {
                        "description": "the ID of the library",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveBook(library_ID, book_ID) -> reservation_status"
            }
        ],
        "Query": "I need your assistance in reserving \"Moby Dick\" at the \"East Side Library\"?",
        "Label": "ReserveBook(library_ID=LibraryName2ID(library_name='East Side Library'), book_ID=BookTitle2ID(book_title='Moby Dick'))",
        "Index": 768
    },
    {
        "APIs": [
            {
                "name": "LibraryName2ID",
                "Description": "This API is to convert library name to library ID.",
                "input_params": {
                    "library_name": {
                        "description": "the name of the library",
                        "type": "String"
                    }
                },
                "output_params": {
                    "library_ID": {
                        "description": "the ID of the library",
                        "type": "Integer"
                    }
                },
                "format": "LibraryName2ID(library_name) -> library_ID"
            },
            {
                "name": "BookTitle2ID",
                "Description": "This API is to convert book title to book ID.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookTitle2ID(book_title) -> book_ID"
            },
            {
                "name": "ReserveBook",
                "Description": "This API is to reserve a book at a library.",
                "input_params": {
                    "library_ID": {
                        "description": "the ID of the library",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveBook(library_ID, book_ID) -> reservation_status"
            }
        ],
        "Query": "I need your assistance in reserving \"Moby Dick\" at the \"East Side Library\"?",
        "Label": "ReserveBook(library_ID=LibraryName2ID(library_name='East Side Library'), book_ID=BookTitle2ID(book_title='Moby Dick'))",
        "Index": 769
    },
    {
        "APIs": [
            {
                "name": "LibraryName2ID",
                "Description": "This API is to convert library name to library ID.",
                "input_params": {
                    "library_name": {
                        "description": "the name of the library",
                        "type": "String"
                    }
                },
                "output_params": {
                    "library_ID": {
                        "description": "the ID of the library",
                        "type": "Integer"
                    }
                },
                "format": "LibraryName2ID(library_name) -> library_ID"
            },
            {
                "name": "BookTitle2ID",
                "Description": "This API is to convert book title to book ID.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookTitle2ID(book_title) -> book_ID"
            },
            {
                "name": "ReserveBook",
                "Description": "This API is to reserve a book.",
                "input_params": {
                    "library_ID": {
                        "description": "the ID of the library",
                        "type": "Integer"
                    },
                    "book_ID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveBook(library_ID, book_ID) -> reservation_status"
            }
        ],
        "Query": "Can you assist me in reserving \"Wuthering Heights\" at the \"South Point Library\"?",
        "Label": "ReserveBook(library_ID=LibraryName2ID(library_name='South Point Library'), book_ID=BookTitle2ID(book_title='Wuthering Heights'))",
        "Index": 770
    },
    {
        "APIs": [
            {
                "name": "CityName2WeatherCode",
                "Description": "This API is to convert city name to weather code.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_code": {
                        "description": "the weather code of the city",
                        "type": "String"
                    }
                },
                "format": "CityName2WeatherCode(city_name) -> weather_code"
            },
            {
                "name": "WeatherCode2Forecast",
                "Description": "This API is to convert weather code to weather forecast.",
                "input_params": {
                    "weather_code": {
                        "description": "the weather code of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the weather forecast for the given date and weather code",
                        "type": "String"
                    }
                },
                "format": "WeatherCode2Forecast(weather_code, date) -> weather_forecast"
            },
            {
                "name": "PlanTrip",
                "Description": "This API is to plan a trip.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the trip",
                        "type": "Date"
                    },
                    "weather_forecast": {
                        "description": "the weather forecast for the given date and city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "trip_plan": {
                        "description": "the plan for the trip to the given city on the given date",
                        "type": "String"
                    }
                },
                "format": "PlanTrip(city_name, date, weather_forecast) -> trip_plan"
            }
        ],
        "Query": "Can you plan a trip for me to New York on July 20?",
        "Label": "PlanTrip(city_name='New York', date='July 20', weather_forecast=WeatherCode2Forecast(weather_code=CityName2WeatherCode(city_name='New York'), date='July 20'))",
        "Index": 771
    },
    {
        "APIs": [
            {
                "name": "CityName2WeatherCode",
                "Description": "This API is to convert city name to weather code.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_code": {
                        "description": "the weather code of the city",
                        "type": "String"
                    }
                },
                "format": "CityName2WeatherCode(city_name) -> weather_code"
            },
            {
                "name": "WeatherCode2Forecast",
                "Description": "This API is to convert weather code to weather forecast.",
                "input_params": {
                    "weather_code": {
                        "description": "the weather code of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the weather forecast for the given date and weather code",
                        "type": "String"
                    }
                },
                "format": "WeatherCode2Forecast(weather_code, date) -> weather_forecast"
            },
            {
                "name": "PlanTrip",
                "Description": "This API is to plan a trip.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the trip",
                        "type": "Date"
                    },
                    "weather_forecast": {
                        "description": "the weather forecast for the given date and city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "trip_plan": {
                        "description": "the plan for the trip to the given city on the given date",
                        "type": "String"
                    }
                },
                "format": "PlanTrip(city_name, date, weather_forecast) -> trip_plan"
            }
        ],
        "Query": "Can you plan a trip for me to London on August 1?",
        "Label": "PlanTrip(city_name='London', date='August 1', weather_forecast=WeatherCode2Forecast(weather_code=CityName2WeatherCode(city_name='London'), date='August 1'))",
        "Index": 772
    },
    {
        "APIs": [
            {
                "name": "CityName2WeatherCode",
                "Description": "This API is to convert city name to weather code.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_code": {
                        "description": "the weather code of the city",
                        "type": "String"
                    }
                },
                "format": "CityName2WeatherCode(city_name) -> weather_code"
            },
            {
                "name": "WeatherCode2Forecast",
                "Description": "This API is to get the weather forecast based on weather code and date.",
                "input_params": {
                    "weather_code": {
                        "description": "the weather code of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the weather forecast for the given date and weather code",
                        "type": "String"
                    }
                },
                "format": "WeatherCode2Forecast(weather_code, date) -> weather_forecast"
            },
            {
                "name": "PlanTrip",
                "Description": "This API is to plan a trip to a specific city on a given date.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the trip",
                        "type": "String"
                    },
                    "weather_forecast": {
                        "description": "the weather forecast for the trip",
                        "type": "String"
                    }
                },
                "output_params": {
                    "trip_plan": {
                        "description": "the plan for the trip to the specified city on the given date",
                        "type": "String"
                    }
                },
                "format": "PlanTrip(city_name, date, weather_forecast) -> trip_plan"
            }
        ],
        "Query": "Can you plan a trip for me to Tokyo on September 15?",
        "Label": "PlanTrip(city_name='Tokyo', date='September 15', weather_forecast=WeatherCode2Forecast(weather_code=CityName2WeatherCode(city_name='Tokyo'), date='September 15'))",
        "Index": 773
    },
    {
        "APIs": [
            {
                "name": "CityName2WeatherCode",
                "Description": "This API is to convert city name to weather code.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_code": {
                        "description": "the weather code of the city",
                        "type": "String"
                    }
                },
                "format": "CityName2WeatherCode(city_name) -> weather_code"
            },
            {
                "name": "WeatherCode2Forecast",
                "Description": "This API is to get weather forecast based on weather code and date.",
                "input_params": {
                    "weather_code": {
                        "description": "the weather code of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the weather forecast for the given date and weather code",
                        "type": "String"
                    }
                },
                "format": "WeatherCode2Forecast(weather_code, date) -> weather_forecast"
            },
            {
                "name": "PlanTrip",
                "Description": "This API is to plan a trip to a specific city on a specific date.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the trip",
                        "type": "Date"
                    },
                    "weather_forecast": {
                        "description": "the weather forecast for the trip",
                        "type": "String"
                    }
                },
                "output_params": {
                    "trip_plan": {
                        "description": "the plan for the trip to the given city on the given date",
                        "type": "String"
                    }
                },
                "format": "PlanTrip(city_name, date, weather_forecast) -> trip_plan"
            }
        ],
        "Query": "Can you plan a trip for me to Tokyo on September 15?",
        "Label": "PlanTrip(city_name='Tokyo', date='September 15', weather_forecast=WeatherCode2Forecast(weather_code=CityName2WeatherCode(city_name='Tokyo'), date='September 15'))",
        "Index": 774
    },
    {
        "APIs": [
            {
                "name": "CityName2WeatherCode",
                "Description": "This API is to convert city name to weather code.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_code": {
                        "description": "the weather code of the city",
                        "type": "String"
                    }
                },
                "format": "CityName2WeatherCode(city_name) -> weather_code"
            },
            {
                "name": "WeatherCode2Forecast",
                "Description": "This API is to get the weather forecast based on weather code and date.",
                "input_params": {
                    "weather_code": {
                        "description": "the weather code of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the weather forecast for the given date",
                        "type": "String"
                    }
                },
                "format": "WeatherCode2Forecast(weather_code, date) -> weather_forecast"
            },
            {
                "name": "PlanTrip",
                "Description": "This API is to plan a trip to a city on a specific date.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the trip",
                        "type": "Date"
                    },
                    "weather_forecast": {
                        "description": "the weather forecast for the trip",
                        "type": "String"
                    }
                },
                "output_params": {
                    "trip_plan": {
                        "description": "the plan for the trip",
                        "type": "String"
                    }
                },
                "format": "PlanTrip(city_name, date, weather_forecast) -> trip_plan"
            }
        ],
        "Query": "Can you plan a trip for me to Rome on April 30?",
        "Label": "PlanTrip(city_name='Rome', date='April 30', weather_forecast=WeatherCode2Forecast(weather_code=CityName2WeatherCode(city_name='Rome'), date='April 30'))",
        "Index": 775
    },
    {
        "APIs": [
            {
                "name": "EventName2ID",
                "Description": "This API is to convert event name to event ID.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    }
                },
                "format": "EventName2ID(event_name) -> event_ID"
            },
            {
                "name": "VenueName2ID",
                "Description": "This API is to convert venue name to venue ID.",
                "input_params": {
                    "venue_name": {
                        "description": "the name of the venue",
                        "type": "String"
                    }
                },
                "output_params": {
                    "venue_ID": {
                        "description": "the ID of the venue",
                        "type": "Integer"
                    }
                },
                "format": "VenueName2ID(venue_name) -> venue_ID"
            },
            {
                "name": "StringToDatetime",
                "Description": "This API is to convert a string to a datetime object.",
                "input_params": {
                    "date_string": {
                        "description": "the string representation of the date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "date": {
                        "description": "the datetime object",
                        "type": "Datetime"
                    }
                },
                "format": "StringToDatetime(date_string) -> date"
            },
            {
                "name": "BookEventTicket",
                "Description": "This API is to book a ticket for an event.",
                "input_params": {
                    "event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    },
                    "venue_ID": {
                        "description": "the ID of the venue",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Datetime"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the ticket booking",
                        "type": "String"
                    }
                },
                "format": "BookEventTicket(event_ID, venue_ID, date) -> booking_status"
            }
        ],
        "Query": "Can you book a ticket for the 'Beyonce concert' at the 'O2 Arena' on 'March 13, 2023'?",
        "Label": "BookEventTicket(event_ID=EventName2ID(event_name='Beyonce concert'), venue_ID=VenueName2ID(venue_name='O2 Arena'), date=StringToDatetime(date_string='March 13, 2023'))",
        "Index": 776
    },
    {
        "APIs": [
            {
                "name": "EventName2ID",
                "Description": "This API is to convert event name to event ID.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    }
                },
                "format": "EventName2ID(event_name) -> event_ID"
            },
            {
                "name": "VenueName2ID",
                "Description": "This API is to convert venue name to venue ID.",
                "input_params": {
                    "venue_name": {
                        "description": "the name of the venue",
                        "type": "String"
                    }
                },
                "output_params": {
                    "venue_ID": {
                        "description": "the ID of the venue",
                        "type": "Integer"
                    }
                },
                "format": "VenueName2ID(venue_name) -> venue_ID"
            },
            {
                "name": "StringToDatetime",
                "Description": "This API is to convert a string to a datetime object.",
                "input_params": {
                    "date_string": {
                        "description": "the string representation of the date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "date": {
                        "description": "the datetime object",
                        "type": "Datetime"
                    }
                },
                "format": "StringToDatetime(date_string) -> date"
            },
            {
                "name": "BookEventTicket",
                "Description": "This API is to book a ticket for an event.",
                "input_params": {
                    "event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    },
                    "venue_ID": {
                        "description": "the ID of the venue",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Datetime"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the ticket booking",
                        "type": "String"
                    }
                },
                "format": "BookEventTicket(event_ID, venue_ID, date) -> booking_status"
            }
        ],
        "Query": "Can you book a ticket for the 'Taylor Swift concert' at the 'Staples Center' on 'July 20, 2022'?",
        "Label": "BookEventTicket(event_ID=EventName2ID(event_name='Taylor Swift concert'), venue_ID=VenueName2ID(venue_name='Staples Center'), date=StringToDatetime(date_string='July 20, 2022'))",
        "Index": 777
    },
    {
        "APIs": [
            {
                "name": "EventName2ID",
                "Description": "This API is to convert event name to event ID.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    }
                },
                "format": "EventName2ID(event_name) -> event_ID"
            },
            {
                "name": "VenueName2ID",
                "Description": "This API is to convert venue name to venue ID.",
                "input_params": {
                    "venue_name": {
                        "description": "the name of the venue",
                        "type": "String"
                    }
                },
                "output_params": {
                    "venue_ID": {
                        "description": "the ID of the venue",
                        "type": "Integer"
                    }
                },
                "format": "VenueName2ID(venue_name) -> venue_ID"
            },
            {
                "name": "StringToDatetime",
                "Description": "This API is to convert a string to a datetime object.",
                "input_params": {
                    "date_string": {
                        "description": "the string representation of the date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "date": {
                        "description": "the datetime object",
                        "type": "Datetime"
                    }
                },
                "format": "StringToDatetime(date_string) -> date"
            },
            {
                "name": "BookEventTicket",
                "Description": "This API is to book a ticket for an event.",
                "input_params": {
                    "event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    },
                    "venue_ID": {
                        "description": "the ID of the venue",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Datetime"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookEventTicket(event_ID, venue_ID, date) -> booking status"
            }
        ],
        "Query": "Can you book a ticket for the 'Eminem concert' at the 'Wembley Stadium' on 'November 25, 2022'?",
        "Label": "BookEventTicket(event_ID=EventName2ID(event_name='Eminem concert'), venue_ID=VenueName2ID(venue_name='Wembley Stadium'), date=StringToDatetime(date_string='November 25, 2022'))",
        "Index": 778
    },
    {
        "APIs": [
            {
                "name": "EventName2ID",
                "Description": "This API is to convert event name to event ID.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    }
                },
                "format": "EventName2ID(event_name) -> event_ID"
            },
            {
                "name": "VenueName2ID",
                "Description": "This API is to convert venue name to venue ID.",
                "input_params": {
                    "venue_name": {
                        "description": "the name of the venue",
                        "type": "String"
                    }
                },
                "output_params": {
                    "venue_ID": {
                        "description": "the ID of the venue",
                        "type": "Integer"
                    }
                },
                "format": "VenueName2ID(venue_name) -> venue_ID"
            },
            {
                "name": "StringToDatetime",
                "Description": "This API is to convert a string to a datetime object.",
                "input_params": {
                    "date_string": {
                        "description": "the date string",
                        "type": "String"
                    }
                },
                "output_params": {
                    "date": {
                        "description": "the datetime object",
                        "type": "Datetime"
                    }
                },
                "format": "StringToDatetime(date_string) -> date"
            },
            {
                "name": "BookEventTicket",
                "Description": "This API is to book a ticket for an event.",
                "input_params": {
                    "event_ID": {
                        "description": "the ID of the event",
                        "type": "Integer"
                    },
                    "venue_ID": {
                        "description": "the ID of the venue",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Datetime"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the ticket booking",
                        "type": "String"
                    }
                },
                "format": "BookEventTicket(event_ID, venue_ID, date) -> booking status"
            }
        ],
        "Query": "Can you book a ticket for the 'Justin Bieber concert' at the 'Madison Square Garden' on 'May 15, 2023'?",
        "Label": "BookEventTicket(event_ID=EventName2ID(event_name='Justin Bieber concert'), venue_ID=VenueName2ID(venue_name='Madison Square Garden'), date=StringToDatetime(date_string='May 15, 2023'))",
        "Index": 779
    },
    {
        "APIs": [
            {
                "name": "CourseName2ID",
                "Description": "This API is to convert course name to course ID.",
                "input_params": {
                    "course_name": {
                        "description": "the name of the course",
                        "type": "String"
                    }
                },
                "output_params": {
                    "course_ID": {
                        "description": "the ID of the course",
                        "type": "Integer"
                    }
                },
                "format": "CourseName2ID(course_name) -> course_ID"
            },
            {
                "name": "StudentName2ID",
                "Description": "This API is to convert student name to student ID.",
                "input_params": {
                    "student_name": {
                        "description": "the name of the student",
                        "type": "String"
                    }
                },
                "output_params": {
                    "student_ID": {
                        "description": "the ID of the student",
                        "type": "Integer"
                    }
                },
                "format": "StudentName2ID(student_name) -> student_ID"
            },
            {
                "name": "InstructorName2ID",
                "Description": "This API is to convert instructor name to instructor ID.",
                "input_params": {
                    "instructor_name": {
                        "description": "the name of the instructor",
                        "type": "String"
                    }
                },
                "output_params": {
                    "instructor_ID": {
                        "description": "the ID of the instructor",
                        "type": "Integer"
                    }
                },
                "format": "InstructorName2ID(instructor_name) -> instructor_ID"
            },
            {
                "name": "EnrollCourse",
                "Description": "This API is to enroll a student in a course.",
                "input_params": {
                    "course_ID": {
                        "description": "the ID of the course",
                        "type": "Integer"
                    },
                    "student_ID": {
                        "description": "the ID of the student",
                        "type": "Integer"
                    },
                    "instructor_ID": {
                        "description": "the ID of the instructor",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "enrollment_status": {
                        "description": "the status of the enrollment",
                        "type": "String"
                    }
                },
                "format": "EnrollCourse(course_ID, student_ID, instructor_ID) -> enrollment_status"
            }
        ],
        "Query": "Can you enroll 'Alice' in the 'Chemistry' course taught by 'Prof. Cooper'?",
        "Label": "EnrollCourse(course_ID=CourseName2ID(course_name='Chemistry'), student_ID=StudentName2ID(student_name='Alice'), instructor_ID=InstructorName2ID(instructor_name='Prof. Cooper'))",
        "Index": 780
    },
    {
        "APIs": [
            {
                "name": "FindIndoorActivities",
                "Description": "This API is to find indoor activities in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity_name": {
                        "description": "the name of the activity",
                        "type": "String"
                    }
                },
                "format": "FindIndoorActivities(city) -> activity_name"
            },
            {
                "name": "BookActivity",
                "Description": "This API is to book an indoor activity.",
                "input_params": {
                    "activity_name": {
                        "description": "the name of the activity",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookActivity(activity_name, city) -> booking_status"
            }
        ],
        "Query": "I heard it's going to snow in Chicago today. I don't want to be stuck at home. Can you recommend and reserve an indoor activity for me?",
        "Label": "BookActivity(activity_name=FindIndoorActivities(city='Chicago'), city='Chicago')",
        "Index": 781
    },
    {
        "APIs": [
            {
                "name": "FindIndoorActivities",
                "Description": "This API is to find indoor activities in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity_name": {
                        "description": "the name of the activity",
                        "type": "String"
                    }
                },
                "format": "FindIndoorActivities(city) -> activity_name"
            },
            {
                "name": "BookActivity",
                "Description": "This API is to book an indoor activity.",
                "input_params": {
                    "activity_name": {
                        "description": "the name of the activity",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookActivity(activity_name, city) -> booking status"
            }
        ],
        "Query": "It seems like there's going to be a storm in New York today. I don't want to stay in all day. Could you propose and book an indoor event for me?",
        "Label": "BookActivity(activity_name=FindIndoorActivities(city='New York'), city='New York')",
        "Index": 782
    },
    {
        "APIs": [
            {
                "name": "FindIndoorActivities",
                "Description": "This API is to find indoor activities in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity_name": {
                        "description": "the name of the activity",
                        "type": "String"
                    }
                },
                "format": "FindIndoorActivities(city) -> activity_name"
            },
            {
                "name": "BookActivity",
                "Description": "This API is to book an indoor activity.",
                "input_params": {
                    "activity_name": {
                        "description": "the name of the activity",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookActivity(activity_name, city) -> booking_status"
            }
        ],
        "Query": "I was told there will be heavy rain in London today. I don't want my day to be boring. Can you suggest and secure an indoor activity for me?",
        "Label": "BookActivity(activity_name=FindIndoorActivities(city='London'), city='London')",
        "Index": 783
    },
    {
        "APIs": [
            {
                "name": "FindIndoorActivities",
                "Description": "This API is to find indoor activities in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity_name": {
                        "description": "the name of the activity",
                        "type": "String"
                    }
                },
                "format": "FindIndoorActivities(city) -> activity_name"
            },
            {
                "name": "BookActivity",
                "Description": "This API is to book an indoor activity.",
                "input_params": {
                    "activity_name": {
                        "description": "the name of the activity",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookActivity(activity_name, city) -> booking_status"
            }
        ],
        "Query": "I was told there will be heavy rain in London today. I don't want my day to be boring. Can you suggest and secure an indoor activity for me?",
        "Label": "BookActivity(activity_name=FindIndoorActivities(city='London'), city='London')",
        "Index": 784
    },
    {
        "APIs": [
            {
                "name": "FindIndoorActivities",
                "Description": "This API is to find indoor activities in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity_name": {
                        "description": "the name of the activity",
                        "type": "String"
                    }
                },
                "format": "FindIndoorActivities(city) -> activity_name"
            },
            {
                "name": "BookActivity",
                "Description": "This API is to book an indoor activity.",
                "input_params": {
                    "activity_name": {
                        "description": "the name of the activity",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookActivity(activity_name, city) -> booking_status"
            }
        ],
        "Query": "It looks like it's going to be really hot in Dubai today. I can't stand the heat. Can you suggest and book an indoor activity for me?",
        "Label": "BookActivity(activity_name=FindIndoorActivities(city='Dubai'), city='Dubai')",
        "Index": 785
    },
    {
        "APIs": [
            {
                "name": "FindNearbyHotels",
                "Description": "This API is to find nearby hotels in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "FindNearbyHotels(city='Boston') -> hotel_name"
            },
            {
                "name": "BookHotel",
                "Description": "This API is to book a hotel.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(hotel_name=FindNearbyHotels(city='Boston'), city='Boston') -> booking status"
            }
        ],
        "Query": "My train to Boston has been cancelled. Can you find and reserve a local hotel for me?",
        "Label": "BookHotel(hotel_name=FindNearbyHotels(city='Boston'), city='Boston')",
        "Index": 786
    },
    {
        "APIs": [
            {
                "name": "FindNearbyHotels",
                "Description": "This API is to find nearby hotels in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "FindNearbyHotels(city) -> hotel_name"
            },
            {
                "name": "BookHotel",
                "Description": "This API is to book a hotel.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(hotel_name, city) -> booking status"
            }
        ],
        "Query": "My bus to Chicago is running late. Could you search and book a close hotel for me?",
        "Label": "BookHotel(hotel_name=FindNearbyHotels(city='Chicago'), city='Chicago')",
        "Index": 787
    },
    {
        "APIs": [
            {
                "name": "FindNearbyHotels",
                "Description": "This API is to find nearby hotels in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "FindNearbyHotels(city) -> hotel_name"
            },
            {
                "name": "BookHotel",
                "Description": "This API is to book a hotel.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(hotel_name, city) -> booking status"
            }
        ],
        "Query": "My drive to Los Angeles has been postponed. Can you locate and secure a hotel in the vicinity for me?",
        "Label": "BookHotel(hotel_name=FindNearbyHotels(city='Los Angeles'), city='Los Angeles')",
        "Index": 788
    },
    {
        "APIs": [
            {
                "name": "FindNearbyHotels",
                "Description": "This API is to find nearby hotels in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "FindNearbyHotels(city) -> hotel_name"
            },
            {
                "name": "BookHotel",
                "Description": "This API is to book a hotel.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(hotel_name, city) -> booking status"
            }
        ],
        "Query": "My drive to Los Angeles has been postponed. Can you locate and secure a hotel in the vicinity for me?",
        "Label": "BookHotel(hotel_name=FindNearbyHotels(city='Los Angeles'), city='Los Angeles')",
        "Index": 789
    },
    {
        "APIs": [
            {
                "name": "FindNearbyHotels",
                "Description": "This API is to find nearby hotels in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "FindNearbyHotels(city) -> hotel_name"
            },
            {
                "name": "BookHotel",
                "Description": "This API is to book a hotel.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(hotel_name, city) -> booking status"
            }
        ],
        "Query": "My cruise to Miami has been rescheduled. Can you find and reserve a hotel nearby for me?",
        "Label": "BookHotel(hotel_name=FindNearbyHotels(city='Miami'), city='Miami')",
        "Index": 790
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the weather information of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather information of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "RecommendAttire",
                "Description": "This API is to recommend attire based on the weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "attire": {
                        "description": "the recommended attire",
                        "type": "String"
                    }
                },
                "format": "RecommendAttire(weather) -> attire"
            },
            {
                "name": "BuyClothing",
                "Description": "This API is to buy clothing based on the recommended attire.",
                "input_params": {
                    "attire": {
                        "description": "the recommended attire",
                        "type": "String"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "BuyClothing(attire) -> purchase_status"
            }
        ],
        "Query": "Can you suggest what to wear in Los Angeles today and help me to buy it?",
        "Label": "BuyClothing(attire=RecommendAttire(weather=GetWeather(city='Los Angeles')))",
        "Index": 791
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the weather information of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather information of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "RecommendAttire",
                "Description": "This API is to recommend the appropriate attire based on the weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "attire": {
                        "description": "the recommended attire",
                        "type": "String"
                    }
                },
                "format": "RecommendAttire(weather) -> attire"
            },
            {
                "name": "BuyClothing",
                "Description": "This API is to help buy the recommended attire.",
                "input_params": {
                    "attire": {
                        "description": "the recommended attire",
                        "type": "String"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "BuyClothing(attire) -> purchase_status"
            }
        ],
        "Query": "What's the best outfit to wear in Chicago today and could you help me buy it?",
        "Label": "BuyClothing(attire=RecommendAttire(weather=GetWeather(city='Chicago')))",
        "Index": 792
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the weather information of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather information of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "RecommendAttire",
                "Description": "This API is to recommend the appropriate attire based on the weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "attire": {
                        "description": "the recommended attire",
                        "type": "String"
                    }
                },
                "format": "RecommendAttire(weather) -> attire"
            },
            {
                "name": "BuyClothing",
                "Description": "This API is to assist in buying the recommended attire.",
                "input_params": {
                    "attire": {
                        "description": "the recommended attire",
                        "type": "String"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "BuyClothing(attire) -> purchase_status"
            }
        ],
        "Query": "What's the best outfit to wear in Chicago today and could you help me buy it?",
        "Label": "BuyClothing(attire=RecommendAttire(weather=GetWeather(city='Chicago')))",
        "Index": 793
    },
    {
        "APIs": [
            {
                "name": "GetLocationCoordinates",
                "Description": "This API is to get the coordinates of a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "coordinates": {
                        "description": "the coordinates of the city",
                        "type": "String"
                    }
                },
                "format": "GetLocationCoordinates(city) -> coordinates"
            },
            {
                "name": "PredictWeather",
                "Description": "This API is to predict the weather based on coordinates and date.",
                "input_params": {
                    "coordinates": {
                        "description": "the coordinates of the location",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for weather prediction",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the predicted weather",
                        "type": "String"
                    }
                },
                "format": "PredictWeather(coordinates, date) -> weather"
            },
            {
                "name": "SuggestActivity",
                "Description": "This API is to suggest activities based on weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity": {
                        "description": "the suggested activity",
                        "type": "String"
                    }
                },
                "format": "SuggestActivity(weather) -> activity"
            }
        ],
        "Query": "What can I do in Tokyo on April 15th?",
        "Label": "SuggestActivity(weather=PredictWeather(coordinates=GetLocationCoordinates(city='Tokyo'), date='April 15th'))",
        "Index": 794
    },
    {
        "APIs": [
            {
                "name": "GetLocationCoordinates",
                "Description": "This API is to get the coordinates of a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "coordinates": {
                        "description": "the coordinates of the city",
                        "type": "String"
                    }
                },
                "format": "GetLocationCoordinates(city) -> coordinates"
            },
            {
                "name": "PredictWeather",
                "Description": "This API is to predict the weather based on coordinates and date.",
                "input_params": {
                    "coordinates": {
                        "description": "the coordinates of the location",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for weather prediction",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the predicted weather",
                        "type": "String"
                    }
                },
                "format": "PredictWeather(coordinates, date) -> weather"
            },
            {
                "name": "SuggestActivity",
                "Description": "This API is to suggest fun activities based on weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity": {
                        "description": "the suggested activity",
                        "type": "String"
                    }
                },
                "format": "SuggestActivity(weather) -> activity"
            }
        ],
        "Query": "What fun things can I do in Berlin on December 25th?",
        "Label": "SuggestActivity(weather=PredictWeather(coordinates=GetLocationCoordinates(city='Berlin'), date='December 25th'))",
        "Index": 795
    },
    {
        "APIs": [
            {
                "name": "GetLocationCoordinates",
                "Description": "This API is to get the coordinates of a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "coordinates": {
                        "description": "the coordinates of the city",
                        "type": "String"
                    }
                },
                "format": "GetLocationCoordinates(city) -> coordinates"
            },
            {
                "name": "PredictWeather",
                "Description": "This API is to predict the weather based on coordinates and date.",
                "input_params": {
                    "coordinates": {
                        "description": "the coordinates of the location",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for weather prediction",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the predicted weather",
                        "type": "String"
                    }
                },
                "format": "PredictWeather(coordinates, date) -> weather"
            },
            {
                "name": "SuggestActivity",
                "Description": "This API is to suggest fun activities based on weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity": {
                        "description": "the suggested activity",
                        "type": "String"
                    }
                },
                "format": "SuggestActivity(weather) -> activity"
            }
        ],
        "Query": "What fun things can I do in Berlin on December 25th?",
        "Label": "SuggestActivity(weather=PredictWeather(coordinates=GetLocationCoordinates(city='Berlin'), date='December 25th'))",
        "Index": 796
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on cuisine.",
                "input_params": {
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(cuisine) -> restaurant_name"
            },
            {
                "name": "OrderFood",
                "Description": "This API is to order food from a restaurant's menu.",
                "input_params": {
                    "menu_item": {
                        "description": "the item to be ordered from the menu",
                        "type": "String"
                    },
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "delivery_address": {
                        "description": "the address where the food should be delivered",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the food order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(menu_item, restaurant_name, delivery_address) -> order_status"
            }
        ],
        "Query": "Can you find me a Mexican restaurant and order tacos from its menu to my office?",
        "Label": "OrderFood(menu_item='tacos', restaurant_name=FindRestaurant(cuisine='Mexican'), delivery_address='office')",
        "Index": 797
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on cuisine.",
                "input_params": {
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(cuisine) -> restaurant_name"
            },
            {
                "name": "OrderFood",
                "Description": "This API is to order a menu item from a restaurant to a delivery address.",
                "input_params": {
                    "menu_item": {
                        "description": "the name of the menu item",
                        "type": "String"
                    },
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "delivery_address": {
                        "description": "the delivery address",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(menu_item, restaurant_name, delivery_address) -> order_status"
            }
        ],
        "Query": "Can you find me a Chinese restaurant and order Kung Pao Chicken from its menu to my home?",
        "Label": "OrderFood(menu_item='Kung Pao Chicken', restaurant_name=FindRestaurant(cuisine='Chinese'), delivery_address='home')",
        "Index": 798
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on cuisine.",
                "input_params": {
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(cuisine) -> restaurant_name"
            },
            {
                "name": "OrderFood",
                "Description": "This API is to order food from a restaurant.",
                "input_params": {
                    "menu_item": {
                        "description": "the item from the menu to order",
                        "type": "String"
                    },
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "delivery_address": {
                        "description": "the delivery address",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(menu_item, restaurant_name, delivery_address) -> order_status"
            }
        ],
        "Query": "Can you find me a Japanese restaurant and order sushi from its menu to my friend's place?",
        "Label": "OrderFood(menu_item='sushi', restaurant_name=FindRestaurant(cuisine='Japanese'), delivery_address='friend's place')",
        "Index": 799
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on cuisine.",
                "input_params": {
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(cuisine) -> restaurant_name"
            },
            {
                "name": "OrderFood",
                "Description": "This API is to order a menu item from a restaurant for delivery.",
                "input_params": {
                    "menu_item": {
                        "description": "the item to be ordered from the menu",
                        "type": "String"
                    },
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "delivery_address": {
                        "description": "the address for delivery",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(menu_item, restaurant_name, delivery_address) -> order_status"
            }
        ],
        "Query": "Can you find me a Greek restaurant and order Moussaka from its menu to my dorm room?",
        "Label": "OrderFood(menu_item='Moussaka', restaurant_name=FindRestaurant(cuisine='Greek'), delivery_address='dorm room')",
        "Index": 800
    },
    {
        "APIs": [
            {
                "name": "SearchBook",
                "Description": "This API is to search for a book by its title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "SearchBook(title) -> book_id"
            },
            {
                "name": "GetBookReview",
                "Description": "This API is to get the review of a book by its ID.",
                "input_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "review": {
                        "description": "the review of the book",
                        "type": "String"
                    }
                },
                "format": "GetBookReview(book_id) -> review"
            },
            {
                "name": "ShareReview",
                "Description": "This API is to share a review on a social media platform.",
                "input_params": {
                    "review": {
                        "description": "the review of the book",
                        "type": "String"
                    },
                    "social_media_platform": {
                        "description": "the social media platform to share the review",
                        "type": "String"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of sharing the review",
                        "type": "String"
                    }
                },
                "format": "ShareReview(review, social_media_platform) -> status"
            }
        ],
        "Query": "Can you find the book 'The Great Gatsby' and post its review on my Instagram account?",
        "Label": "ShareReview(review=GetBookReview(book_id=SearchBook(title='The Great Gatsby')), social_media_platform='Instagram')",
        "Index": 801
    },
    {
        "APIs": [
            {
                "name": "SearchBook",
                "Description": "This API is to search for a book by its title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "SearchBook(title) -> book_id"
            },
            {
                "name": "GetBookReview",
                "Description": "This API is to get the review of a book by its ID.",
                "input_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "review": {
                        "description": "the review of the book",
                        "type": "String"
                    }
                },
                "format": "GetBookReview(book_id) -> review"
            },
            {
                "name": "ShareReview",
                "Description": "This API is to share a review on a social media platform.",
                "input_params": {
                    "review": {
                        "description": "the review to be shared",
                        "type": "String"
                    },
                    "social_media_platform": {
                        "description": "the social media platform to share the review on",
                        "type": "String"
                    }
                },
                "output_params": {
                    "share_status": {
                        "description": "the status of the review sharing",
                        "type": "String"
                    }
                },
                "format": "ShareReview(review, social_media_platform) -> share_status"
            }
        ],
        "Query": "Can you locate the book 'Pride and Prejudice' and share its review on my LinkedIn profile?",
        "Label": "ShareReview(review=GetBookReview(book_id=SearchBook(title='Pride and Prejudice')), social_media_platform='LinkedIn')",
        "Index": 802
    },
    {
        "APIs": [
            {
                "name": "SearchBook",
                "Description": "This API is to search for a book by its title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "SearchBook(title) -> book_id"
            },
            {
                "name": "GetBookReview",
                "Description": "This API is to get the review of a book by its ID.",
                "input_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "review": {
                        "description": "the review of the book",
                        "type": "String"
                    }
                },
                "format": "GetBookReview(book_id) -> review"
            },
            {
                "name": "ShareReview",
                "Description": "This API is to share a review on a social media platform.",
                "input_params": {
                    "review": {
                        "description": "the review of the book",
                        "type": "String"
                    },
                    "social_media_platform": {
                        "description": "the social media platform to share the review",
                        "type": "String"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of sharing the review",
                        "type": "String"
                    }
                },
                "format": "ShareReview(review, social_media_platform) -> status"
            }
        ],
        "Query": "Can you locate the book 'To Kill a Mockingbird' and post its review on my Instagram account?",
        "Label": "ShareReview(review=GetBookReview(book_id=SearchBook(title='To Kill a Mockingbird')), social_media_platform='Instagram')",
        "Index": 803
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API is to find a movie based on genre.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovie(genre) -> movie_title"
            },
            {
                "name": "GetShowtimes",
                "Description": "This API is to get the showtimes of a movie in a specific city.",
                "input_params": {
                    "movie_title": {
                        "description": "the title of the movie",
                        "type": "String"
                    },
                    "city": {
                        "description": "the city where the movie is being shown",
                        "type": "String"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "Time"
                    }
                },
                "format": "GetShowtimes(movie_title, city) -> showtime"
            },
            {
                "name": "ReserveTickets",
                "Description": "This API is to reserve tickets for a movie showtime.",
                "input_params": {
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "Time"
                    },
                    "number_of_tickets": {
                        "description": "the number of tickets to reserve",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the ticket reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveTickets(showtime, number_of_tickets) -> reservation_status"
            }
        ],
        "Query": "Can you find me a horror movie and reserve three tickets for its earliest showtime in Boston?",
        "Label": "ReserveTickets(showtime=GetShowtimes(movie_title=FindMovie(genre='horror'), city='Boston'), number_of_tickets=3)",
        "Index": 804
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API is to find a movie based on genre.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovie(genre) -> movie_title"
            },
            {
                "name": "GetShowtimes",
                "Description": "This API is to get the showtimes of a movie in a specific city.",
                "input_params": {
                    "movie_title": {
                        "description": "the title of the movie",
                        "type": "String"
                    },
                    "city": {
                        "description": "the city where the showtimes are searched",
                        "type": "String"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "the showtime of the movie in the city",
                        "type": "Time"
                    }
                },
                "format": "GetShowtimes(movie_title, city) -> showtime"
            },
            {
                "name": "ReserveTickets",
                "Description": "This API is to reserve tickets for a showtime.",
                "input_params": {
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "Time"
                    },
                    "number_of_tickets": {
                        "description": "the number of tickets to be reserved",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the ticket reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveTickets(showtime, number_of_tickets) -> reservation_status"
            }
        ],
        "Query": "Can you find me a romance movie and reserve four tickets for its earliest showtime in San Francisco?",
        "Label": "ReserveTickets(showtime=GetShowtimes(movie_title=FindMovie(genre='romance'), city='San Francisco'), number_of_tickets=4)",
        "Index": 805
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API is to find a movie based on genre.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovie(genre) -> movie_title"
            },
            {
                "name": "GetShowtimes",
                "Description": "This API is to get the showtimes of a movie in a specific city.",
                "input_params": {
                    "movie_title": {
                        "description": "the title of the movie",
                        "type": "String"
                    },
                    "city": {
                        "description": "the city where the movie is playing",
                        "type": "String"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "Time"
                    }
                },
                "format": "GetShowtimes(movie_title, city) -> showtime"
            },
            {
                "name": "ReserveTickets",
                "Description": "This API is to reserve tickets for a movie showtime.",
                "input_params": {
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "Time"
                    },
                    "number_of_tickets": {
                        "description": "the number of tickets to reserve",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the ticket reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveTickets(showtime, number_of_tickets) -> reservation_status"
            }
        ],
        "Query": "Can you find me an action movie and reserve five tickets for its earliest showtime in Chicago?",
        "Label": "ReserveTickets(showtime=GetShowtimes(movie_title=FindMovie(genre='action'), city='Chicago'), number_of_tickets=5)",
        "Index": 806
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API is to find a movie based on genre.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovie(genre) -> movie_title"
            },
            {
                "name": "GetShowtimes",
                "Description": "This API is to get the showtimes of a movie in a specific city.",
                "input_params": {
                    "movie_title": {
                        "description": "the title of the movie",
                        "type": "String"
                    },
                    "city": {
                        "description": "the city where the movie is playing",
                        "type": "String"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "Time"
                    }
                },
                "format": "GetShowtimes(movie_title, city) -> showtime"
            },
            {
                "name": "ReserveTickets",
                "Description": "This API is to reserve tickets for a movie showtime.",
                "input_params": {
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "Time"
                    },
                    "number_of_tickets": {
                        "description": "the number of tickets to reserve",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the ticket reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveTickets(showtime, number_of_tickets) -> reservation_status"
            }
        ],
        "Query": "Can you find me an action movie and reserve five tickets for its earliest showtime in Chicago?",
        "Label": "ReserveTickets(showtime=GetShowtimes(movie_title=FindMovie(genre='action'), city='Chicago'), number_of_tickets=5)",
        "Index": 807
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API is to find a movie based on genre.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovie(genre) -> movie_title"
            },
            {
                "name": "GetShowtimes",
                "Description": "This API is to get the showtimes of a movie in a specific city.",
                "input_params": {
                    "movie_title": {
                        "description": "the title of the movie",
                        "type": "String"
                    },
                    "city": {
                        "description": "the city where the showtimes are searched",
                        "type": "String"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "the showtime of the movie in the city",
                        "type": "Time"
                    }
                },
                "format": "GetShowtimes(movie_title, city) -> showtime"
            },
            {
                "name": "ReserveTickets",
                "Description": "This API is to reserve tickets for a showtime.",
                "input_params": {
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "Time"
                    },
                    "number_of_tickets": {
                        "description": "the number of tickets to be reserved",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the ticket reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveTickets(showtime, number_of_tickets) -> reservation_status"
            }
        ],
        "Query": "Can you find me a thriller movie and reserve two tickets for its earliest showtime in San Diego?",
        "Label": "ReserveTickets(showtime=GetShowtimes(movie_title=FindMovie(genre='thriller'), city='San Diego'), number_of_tickets=2)",
        "Index": 808
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on cuisine type.",
                "input_params": {
                    "cuisine_type": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(cuisine_type) -> restaurant_name"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "list_of_dishes": {
                        "description": "a list of dishes available in the restaurant",
                        "type": "List"
                    }
                },
                "format": "GetMenu(restaurant_name) -> list_of_dishes"
            },
            {
                "name": "OrderFood",
                "Description": "This API is to order food from a restaurant.",
                "input_params": {
                    "list_of_dishes": {
                        "description": "a list of dishes to be ordered",
                        "type": "List"
                    },
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(list_of_dishes, restaurant_name) -> order_status"
            }
        ],
        "Query": "Can you locate a Japanese restaurant for me and order all the sushi they have?",
        "Label": "OrderFood(list_of_dishes=GetMenu(restaurant_name=FindRestaurant(cuisine_type='Japanese')), restaurant_name=FindRestaurant(cuisine_type='Japanese'))",
        "Index": 809
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on cuisine type.",
                "input_params": {
                    "cuisine_type": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(cuisine_type) -> restaurant_name"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "list_of_dishes": {
                        "description": "a list of dishes on the menu",
                        "type": "List"
                    }
                },
                "format": "GetMenu(restaurant_name) -> list_of_dishes"
            },
            {
                "name": "OrderFood",
                "Description": "This API is to order food from a restaurant.",
                "input_params": {
                    "list_of_dishes": {
                        "description": "a list of dishes to order",
                        "type": "List"
                    },
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(list_of_dishes, restaurant_name) -> order_status"
            }
        ],
        "Query": "I'm craving for Mexican food. Can you find a Mexican place and order everything on their menu?",
        "Label": "OrderFood(list_of_dishes=GetMenu(restaurant_name=FindRestaurant(cuisine_type='Mexican')), restaurant_name=FindRestaurant(cuisine_type='Mexican'))",
        "Index": 810
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on cuisine type.",
                "input_params": {
                    "cuisine_type": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(cuisine_type) -> restaurant_name"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "list_of_dishes": {
                        "description": "a list of dishes offered by the restaurant",
                        "type": "List"
                    }
                },
                "format": "GetMenu(restaurant_name) -> list_of_dishes"
            },
            {
                "name": "OrderFood",
                "Description": "This API is to order food from a restaurant.",
                "input_params": {
                    "list_of_dishes": {
                        "description": "a list of dishes to be ordered",
                        "type": "List"
                    },
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(list_of_dishes, restaurant_name) -> order_status"
            }
        ],
        "Query": "Can you find me a Chinese restaurant and order all the dimsum they offer?",
        "Label": "OrderFood(list_of_dishes=GetMenu(restaurant_name=FindRestaurant(cuisine_type='Chinese')), restaurant_name=FindRestaurant(cuisine_type='Chinese'))",
        "Index": 811
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on the cuisine type.",
                "input_params": {
                    "cuisine_type": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(cuisine_type) -> restaurant_name"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "list_of_dishes": {
                        "description": "a list of dishes offered by the restaurant",
                        "type": "List"
                    }
                },
                "format": "GetMenu(restaurant_name) -> list_of_dishes"
            },
            {
                "name": "OrderFood",
                "Description": "This API is to order food from a restaurant.",
                "input_params": {
                    "list_of_dishes": {
                        "description": "a list of dishes to be ordered",
                        "type": "List"
                    },
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(list_of_dishes, restaurant_name) -> order_status"
            }
        ],
        "Query": "Can you find me a Chinese restaurant and order all the dimsum they offer?",
        "Label": "OrderFood(list_of_dishes=GetMenu(restaurant_name=FindRestaurant(cuisine_type='Chinese')), restaurant_name=FindRestaurant(cuisine_type='Chinese'))",
        "Index": 812
    },
    {
        "APIs": [
            {
                "name": "RestaurantLocator",
                "Description": "This API is to locate a restaurant based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the details of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "RestaurantLocator(city, cuisine) -> restaurant"
            },
            {
                "name": "DishFinder",
                "Description": "This API is to find a specific dish in a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the details of the restaurant",
                        "type": "Object"
                    },
                    "dish": {
                        "description": "the name of the dish",
                        "type": "String"
                    }
                },
                "output_params": {
                    "dish_details": {
                        "description": "the details of the dish",
                        "type": "Object"
                    }
                },
                "format": "DishFinder(restaurant, dish) -> dish_details"
            },
            {
                "name": "FoodReview",
                "Description": "This API is to provide reviews of a dish.",
                "input_params": {
                    "dish_details": {
                        "description": "the details of the dish",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "reviews": {
                        "description": "the reviews of the dish",
                        "type": "List"
                    }
                },
                "format": "FoodReview(dish_details) -> reviews"
            }
        ],
        "Query": "I am seeking reviews of a Paella dish from a Spanish restaurant in Miami.",
        "Label": "FoodReview(dish_details=DishFinder(restaurant=RestaurantLocator(city='Miami', cuisine='Spanish'), dish='Paella'))",
        "Index": 813
    },
    {
        "APIs": [
            {
                "name": "RestaurantLocator",
                "Description": "This API is to locate restaurants based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the details of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "RestaurantLocator(city, cuisine) -> restaurant"
            },
            {
                "name": "DishFinder",
                "Description": "This API is to find a specific dish in a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the details of the restaurant",
                        "type": "Object"
                    },
                    "dish": {
                        "description": "the name of the dish",
                        "type": "String"
                    }
                },
                "output_params": {
                    "dish_details": {
                        "description": "the details of the dish",
                        "type": "Object"
                    }
                },
                "format": "DishFinder(restaurant, dish) -> dish_details"
            },
            {
                "name": "FoodReview",
                "Description": "This API is to find reviews for a specific dish.",
                "input_params": {
                    "dish_details": {
                        "description": "the details of the dish",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "reviews": {
                        "description": "the reviews for the dish",
                        "type": "List"
                    }
                },
                "format": "FoodReview(dish_details) -> reviews"
            }
        ],
        "Query": "I want to find reviews for a Sushi dish from a Japanese restaurant in San Francisco.",
        "Label": "FoodReview(dish_details=DishFinder(restaurant=RestaurantLocator(city='San Francisco', cuisine='Japanese'), dish='Sushi'))",
        "Index": 814
    },
    {
        "APIs": [
            {
                "name": "ActorExtractor",
                "Description": "This API is to extract the actor name from the movie ID.",
                "input_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "actor_name": {
                        "description": "the name of the actor",
                        "type": "String"
                    }
                },
                "format": "ActorExtractor(movie_id) -> actor_name"
            },
            {
                "name": "MovieDatabase",
                "Description": "This API is to retrieve the movie information based on the title and year.",
                "input_params": {
                    "title": {
                        "description": "the title of the movie",
                        "type": "String"
                    },
                    "year": {
                        "description": "the year of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "String"
                    }
                },
                "format": "MovieDatabase(title, year) -> movie_id"
            },
            {
                "name": "MovieRatingChecker",
                "Description": "This API is to check the rating of a movie.",
                "input_params": {
                    "actor_name": {
                        "description": "the name of the actor",
                        "type": "String"
                    },
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "rating": {
                        "description": "the rating of the movie",
                        "type": "Float"
                    }
                },
                "format": "MovieRatingChecker(actor_name, movie_id) -> rating"
            }
        ],
        "Query": "I am curious to know the rating of the film \"The Dark Knight\" that was launched in 2008.",
        "Label": "MovieRatingChecker(actor_name=ActorExtractor(movie_id=MovieDatabase(title='The Dark Knight', year='2008')), movie_id=MovieDatabase(title='The Dark Knight', year='2008'))",
        "Index": 815
    },
    {
        "APIs": [
            {
                "name": "FoodIngredients",
                "Description": "This API is to get the ingredients of a dish from a specific restaurant.",
                "input_params": {
                    "dish_name": {
                        "description": "the name of the dish",
                        "type": "String"
                    },
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ingredients": {
                        "description": "the list of ingredients in the dish",
                        "type": "List"
                    }
                },
                "format": "FoodIngredients(dish_name, restaurant_name) -> ingredients"
            },
            {
                "name": "FoodFinder",
                "Description": "This API is to find a restaurant based on cuisine and location.",
                "input_params": {
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FoodFinder(cuisine, location) -> restaurant_name"
            }
        ],
        "Query": "I want to know the ingredients of the 'Tandoori Chicken' from an Indian restaurant in Los Angeles.",
        "Label": "FoodIngredients(dish_name='Tandoori Chicken', restaurant_name=FoodFinder(cuisine='Indian', location='Los Angeles'))",
        "Index": 816
    },
    {
        "APIs": [
            {
                "name": "FoodIngredients",
                "Description": "This API is to get the ingredients of a dish from a specific restaurant.",
                "input_params": {
                    "dish_name": {
                        "description": "the name of the dish",
                        "type": "String"
                    },
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ingredients": {
                        "description": "the ingredients of the dish",
                        "type": "List"
                    }
                },
                "format": "FoodIngredients(dish_name, restaurant_name) -> ingredients"
            },
            {
                "name": "FoodFinder",
                "Description": "This API is to find a restaurant based on cuisine and location.",
                "input_params": {
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FoodFinder(cuisine, location) -> restaurant_name"
            }
        ],
        "Query": "Can you tell me what's in the 'Beef Ramen' from a Japanese restaurant in San Francisco?",
        "Label": "FoodIngredients(dish_name='Beef Ramen', restaurant_name=FoodFinder(cuisine='Japanese', location='San Francisco'))",
        "Index": 817
    },
    {
        "APIs": [
            {
                "name": "FoodIngredients",
                "Description": "This API is to get the components of a dish from a specific restaurant.",
                "input_params": {
                    "dish_name": {
                        "description": "the name of the dish",
                        "type": "String"
                    },
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ingredients": {
                        "description": "the components of the dish",
                        "type": "List"
                    }
                },
                "format": "FoodIngredients(dish_name, restaurant_name) -> ingredients"
            },
            {
                "name": "FoodFinder",
                "Description": "This API is to find a restaurant based on cuisine and location.",
                "input_params": {
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FoodFinder(cuisine, location) -> restaurant_name"
            }
        ],
        "Query": "I'm interested in the components of the 'Fish Tacos' from a Mexican restaurant in San Diego.",
        "Label": "FoodIngredients(dish_name='Fish Tacos', restaurant_name=FoodFinder(cuisine='Mexican', location='San Diego'))",
        "Index": 818
    },
    {
        "APIs": [
            {
                "name": "FoodIngredients",
                "Description": "This API is to get the ingredients of a dish from a specific restaurant.",
                "input_params": {
                    "dish_name": {
                        "description": "the name of the dish",
                        "type": "String"
                    },
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ingredients": {
                        "description": "the list of ingredients of the dish",
                        "type": "List"
                    }
                },
                "format": "FoodIngredients(dish_name, restaurant_name) -> ingredients"
            },
            {
                "name": "FoodFinder",
                "Description": "This API is to find a restaurant based on cuisine and location.",
                "input_params": {
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FoodFinder(cuisine, location) -> restaurant_name"
            }
        ],
        "Query": "I'm interested in the components of the 'Fish Tacos' from a Mexican restaurant in San Diego.",
        "Label": "FoodIngredients(dish_name='Fish Tacos', restaurant_name=FoodFinder(cuisine='Mexican', location='San Diego'))",
        "Index": 819
    },
    {
        "APIs": [
            {
                "name": "FoodIngredients",
                "Description": "This API is to get the ingredients of a dish from a specific restaurant.",
                "input_params": {
                    "dish_name": {
                        "description": "the name of the dish",
                        "type": "String"
                    },
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ingredients": {
                        "description": "the ingredients of the dish",
                        "type": "List"
                    }
                },
                "format": "FoodIngredients(dish_name, restaurant_name) -> ingredients"
            },
            {
                "name": "FoodFinder",
                "Description": "This API is to find restaurants based on cuisine and location.",
                "input_params": {
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FoodFinder(cuisine, location) -> restaurant_name"
            }
        ],
        "Query": "I would like to know what's in the 'Croissant' from a French restaurant in Miami.",
        "Label": "FoodIngredients(dish_name='Croissant', restaurant_name=FoodFinder(cuisine='French', location='Miami'))",
        "Index": 820
    },
    {
        "APIs": [
            {
                "name": "FindNearestBookStore",
                "Description": "This API is to find the nearest bookstore in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_name": {
                        "description": "the name of the bookstore",
                        "type": "String"
                    }
                },
                "format": "FindNearestBookStore(city) -> store_name"
            },
            {
                "name": "SearchBook",
                "Description": "This API is to search for a book in a specific bookstore.",
                "input_params": {
                    "store_name": {
                        "description": "the name of the bookstore",
                        "type": "String"
                    },
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "SearchBook(store_name, book_title) -> book_id"
            },
            {
                "name": "CheckAvailability",
                "Description": "This API is to check the availability of a book in stock.",
                "input_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "availability_status": {
                        "description": "the availability status of the book",
                        "type": "String"
                    }
                },
                "format": "CheckAvailability(book_id) -> availability_status"
            }
        ],
        "Query": "Can you assist me in verifying if 'The Catcher in the Rye' is in stock at the closest bookstore in Boston?",
        "Label": "CheckAvailability(book_id=SearchBook(store_name=FindNearestBookStore(city='Boston'), book_title='The Catcher in the Rye'))",
        "Index": 821
    },
    {
        "APIs": [
            {
                "name": "FindNearestBookStore",
                "Description": "This API is to find the nearest bookstore in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_name": {
                        "description": "the name of the bookstore",
                        "type": "String"
                    }
                },
                "format": "FindNearestBookStore(city) -> store_name"
            },
            {
                "name": "SearchBook",
                "Description": "This API is to search for a book in a specific bookstore.",
                "input_params": {
                    "store_name": {
                        "description": "the name of the bookstore",
                        "type": "String"
                    },
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "SearchBook(store_name, book_title) -> book_id"
            },
            {
                "name": "CheckAvailability",
                "Description": "This API is to check the availability of a book in a specific bookstore.",
                "input_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "availability_status": {
                        "description": "the availability status of the book",
                        "type": "String"
                    }
                },
                "format": "CheckAvailability(book_id) -> availability_status"
            }
        ],
        "Query": "Can you help me find out if 'The Great Gatsby' is available in the closest bookstore in San Francisco?",
        "Label": "CheckAvailability(book_id=SearchBook(store_name=FindNearestBookStore(city='San Francisco'), book_title='The Great Gatsby'))",
        "Index": 822
    },
    {
        "APIs": [
            {
                "name": "GetLocalTheater",
                "Description": "This API is to get the nearest theater in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "theater_name": {
                        "description": "the name of the theater",
                        "type": "String"
                    }
                },
                "format": "GetLocalTheater(city) -> theater_name"
            },
            {
                "name": "GetCurrentPlays",
                "Description": "This API is to get the currently performed plays at a specific theater.",
                "input_params": {
                    "theater_name": {
                        "description": "the name of the theater",
                        "type": "String"
                    }
                },
                "output_params": {
                    "play_name": {
                        "description": "the name of the play",
                        "type": "String"
                    }
                },
                "format": "GetCurrentPlays(theater_name) -> play_name"
            },
            {
                "name": "GetPlayReviews",
                "Description": "This API is to get the reviews for a specific play.",
                "input_params": {
                    "play_name": {
                        "description": "the name of the play",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reviews": {
                        "description": "the reviews for the play",
                        "type": "List"
                    }
                },
                "format": "GetPlayReviews(play_name) -> reviews"
            }
        ],
        "Query": "Can you find the reviews for the play currently being performed at the nearest theater in London?",
        "Label": "GetPlayReviews(play_name=GetCurrentPlays(theater_name=GetLocalTheater(city='London')))",
        "Index": 823
    },
    {
        "APIs": [
            {
                "name": "GetLocalMusicStore",
                "Description": "This API is to get the nearest music store in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_name": {
                        "description": "the name of the music store",
                        "type": "String"
                    }
                },
                "format": "GetLocalMusicStore(city) -> store_name"
            },
            {
                "name": "GetCurrentAlbums",
                "Description": "This API is to get the currently playing albums at a music store.",
                "input_params": {
                    "store_name": {
                        "description": "the name of the music store",
                        "type": "String"
                    }
                },
                "output_params": {
                    "album_name": {
                        "description": "the name of the album",
                        "type": "String"
                    }
                },
                "format": "GetCurrentAlbums(store_name) -> album_name"
            },
            {
                "name": "GetAlbumReviews",
                "Description": "This API is to get the reviews for a specific album.",
                "input_params": {
                    "album_name": {
                        "description": "the name of the album",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reviews": {
                        "description": "the reviews for the album",
                        "type": "List of Strings"
                    }
                },
                "format": "GetAlbumReviews(album_name) -> reviews"
            }
        ],
        "Query": "Can you find the reviews for the album currently being played at the nearest music store in Toronto?",
        "Label": "GetAlbumReviews(album_name=GetCurrentAlbums(store_name=GetLocalMusicStore(city='Toronto')))",
        "Index": 824
    },
    {
        "APIs": [
            {
                "name": "GetLocalMuseum",
                "Description": "This API is to get the local museum in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "museum_name": {
                        "description": "the name of the museum",
                        "type": "String"
                    }
                },
                "format": "GetLocalMuseum(city) -> museum_name"
            },
            {
                "name": "GetCurrentExhibitions",
                "Description": "This API is to get the current exhibitions being showcased at a museum.",
                "input_params": {
                    "museum_name": {
                        "description": "the name of the museum",
                        "type": "String"
                    }
                },
                "output_params": {
                    "exhibition_name": {
                        "description": "the name of the exhibition",
                        "type": "String"
                    }
                },
                "format": "GetCurrentExhibitions(museum_name) -> exhibition_name"
            },
            {
                "name": "GetExhibitionReviews",
                "Description": "This API is to get the reviews for a specific exhibition.",
                "input_params": {
                    "exhibition_name": {
                        "description": "the name of the exhibition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reviews": {
                        "description": "the reviews for the exhibition",
                        "type": "List of Strings"
                    }
                },
                "format": "GetExhibitionReviews(exhibition_name) -> reviews"
            }
        ],
        "Query": "Can you find the reviews for the exhibition currently being showcased at the nearest museum in Berlin?",
        "Label": "GetExhibitionReviews(exhibition_name=GetCurrentExhibitions(museum_name=GetLocalMuseum(city='Berlin')))",
        "Index": 825
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on city and cuisine type.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine_type": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "FindRestaurant(city, cuisine_type) -> restaurant_id"
            },
            {
                "name": "GetRestaurantMenu",
                "Description": "This API is to get the menu of a restaurant based on restaurant ID.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "menu_id": {
                        "description": "the ID of the menu",
                        "type": "Integer"
                    }
                },
                "format": "GetRestaurantMenu(restaurant_id) -> menu_id"
            },
            {
                "name": "OrderFood",
                "Description": "This API is to order food from a menu based on menu ID, dish name, and quantity.",
                "input_params": {
                    "menu_id": {
                        "description": "the ID of the menu",
                        "type": "Integer"
                    },
                    "dish_name": {
                        "description": "the name of the dish",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity of the dish",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(menu_id, dish_name, quantity) -> order_status"
            }
        ],
        "Query": "Can you get me 4 burgers from the top American diner in Los Angeles?",
        "Label": "OrderFood(menu_id=GetRestaurantMenu(restaurant_id=FindRestaurant(city='Los Angeles', cuisine_type='American')), dish_name='Burger', quantity=4)",
        "Index": 826
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on city and cuisine type.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine_type": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "FindRestaurant(city, cuisine_type) -> restaurant_id"
            },
            {
                "name": "GetRestaurantMenu",
                "Description": "This API is to get the menu of a restaurant based on restaurant ID.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "menu_id": {
                        "description": "the ID of the menu",
                        "type": "Integer"
                    }
                },
                "format": "GetRestaurantMenu(restaurant_id) -> menu_id"
            },
            {
                "name": "OrderFood",
                "Description": "This API is to order food from a menu based on menu ID, dish name, and quantity.",
                "input_params": {
                    "menu_id": {
                        "description": "the ID of the menu",
                        "type": "Integer"
                    },
                    "dish_name": {
                        "description": "the name of the dish",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity of the dish to order",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(menu_id, dish_name, quantity) -> order_status"
            }
        ],
        "Query": "Please order 3 sushi rolls from the highest rated Japanese restaurant in San Francisco.",
        "Label": "OrderFood(menu_id=GetRestaurantMenu(restaurant_id=FindRestaurant(city='San Francisco', cuisine_type='Japanese')), dish_name='Sushi Roll', quantity=3)",
        "Index": 827
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on city and cuisine type.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine_type": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "FindRestaurant(city, cuisine_type) -> restaurant_id"
            },
            {
                "name": "GetRestaurantMenu",
                "Description": "This API is to get the menu of a restaurant based on restaurant ID.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "menu_id": {
                        "description": "the ID of the menu",
                        "type": "Integer"
                    }
                },
                "format": "GetRestaurantMenu(restaurant_id) -> menu_id"
            },
            {
                "name": "OrderFood",
                "Description": "This API is to order food from a menu.",
                "input_params": {
                    "menu_id": {
                        "description": "the ID of the menu",
                        "type": "Integer"
                    },
                    "dish_name": {
                        "description": "the name of the dish",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity of the dish",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(menu_id, dish_name, quantity) -> order_status"
            }
        ],
        "Query": "I would like 5 tacos from the best Mexican place in Austin, please.",
        "Label": "OrderFood(menu_id=GetRestaurantMenu(restaurant_id=FindRestaurant(city='Austin', cuisine_type='Mexican')), dish_name='Taco', quantity=5)",
        "Index": 828
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on city and cuisine type.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine_type": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "FindRestaurant(city, cuisine_type) -> restaurant_id"
            },
            {
                "name": "GetRestaurantMenu",
                "Description": "This API is to get the menu of a restaurant based on restaurant ID.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "menu_id": {
                        "description": "the ID of the menu",
                        "type": "Integer"
                    }
                },
                "format": "GetRestaurantMenu(restaurant_id) -> menu_id"
            },
            {
                "name": "OrderFood",
                "Description": "This API is to order food from a restaurant based on menu ID, dish name, and quantity.",
                "input_params": {
                    "menu_id": {
                        "description": "the ID of the menu",
                        "type": "Integer"
                    },
                    "dish_name": {
                        "description": "the name of the dish",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity of the dish to be ordered",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(menu_id, dish_name, quantity) -> order_status"
            }
        ],
        "Query": "Can you order 1 paella from the top-rated Spanish restaurant in Miami?",
        "Label": "OrderFood(menu_id=GetRestaurantMenu(restaurant_id=FindRestaurant(city='Miami', cuisine_type='Spanish')), dish_name='Paella', quantity=1)",
        "Index": 829
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on the city and cuisine type.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine_type": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "FindRestaurant(city, cuisine_type) -> restaurant_id"
            },
            {
                "name": "GetRestaurantMenu",
                "Description": "This API is to get the menu of a restaurant based on the restaurant ID.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "menu_id": {
                        "description": "the ID of the menu",
                        "type": "Integer"
                    }
                },
                "format": "GetRestaurantMenu(restaurant_id) -> menu_id"
            },
            {
                "name": "OrderFood",
                "Description": "This API is to order food from a menu based on the menu ID, dish name, and quantity.",
                "input_params": {
                    "menu_id": {
                        "description": "the ID of the menu",
                        "type": "Integer"
                    },
                    "dish_name": {
                        "description": "the name of the dish",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity of the dish",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(menu_id, dish_name, quantity) -> order_status"
            }
        ],
        "Query": "Please get me 6 dumplings from the best Chinese restaurant in Seattle.",
        "Label": "OrderFood(menu_id=GetRestaurantMenu(restaurant_id=FindRestaurant(city='Seattle', cuisine_type='Chinese')), dish_name='Dumpling', quantity=6)",
        "Index": 830
    },
    {
        "APIs": [
            {
                "name": "GetMovieDetails",
                "Description": "This API is to get the details of a movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_info": {
                        "description": "the information of the movie",
                        "type": "Object"
                    }
                },
                "format": "GetMovieDetails(movie_name) -> movie_info"
            },
            {
                "name": "GetActorDetails",
                "Description": "This API is to get the details of an actor.",
                "input_params": {
                    "movie_info": {
                        "description": "the information of the movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "actor_info": {
                        "description": "the information of the actor",
                        "type": "Object"
                    }
                },
                "format": "GetActorDetails(movie_info) -> actor_info"
            },
            {
                "name": "GetMovieRecommendation",
                "Description": "This API is to get a movie recommendation based on actor information.",
                "input_params": {
                    "actor_info": {
                        "description": "the information of the actor",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "recommendation": {
                        "description": "the recommended movie",
                        "type": "String"
                    }
                },
                "format": "GetMovieRecommendation(actor_info) -> recommendation"
            }
        ],
        "Query": "I loved the movie 'The Dark Knight'. Can you suggest another movie with similar actors?",
        "Label": "GetMovieRecommendation(actor_info=GetActorDetails(movie_info=GetMovieDetails(movie_name='The Dark Knight')))",
        "Index": 831
    },
    {
        "APIs": [
            {
                "name": "GetMovieDetails",
                "Description": "This API is to get the details of a movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_info": {
                        "description": "the information of the movie",
                        "type": "Object"
                    }
                },
                "format": "GetMovieDetails(movie_name) -> movie_info"
            },
            {
                "name": "GetActorDetails",
                "Description": "This API is to get the details of an actor.",
                "input_params": {
                    "movie_info": {
                        "description": "the information of the movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "actor_info": {
                        "description": "the information of the actor",
                        "type": "Object"
                    }
                },
                "format": "GetActorDetails(movie_info) -> actor_info"
            },
            {
                "name": "GetMovieRecommendation",
                "Description": "This API is to recommend another movie with the same cast.",
                "input_params": {
                    "actor_info": {
                        "description": "the information of the actor",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "recommendation": {
                        "description": "the recommended movie",
                        "type": "String"
                    }
                },
                "format": "GetMovieRecommendation(actor_info) -> recommendation"
            }
        ],
        "Query": "The movie 'Interstellar' was amazing. Can you recommend another movie with the same cast?",
        "Label": "GetMovieRecommendation(actor_info=GetActorDetails(movie_info=GetMovieDetails(movie_name='Interstellar')))",
        "Index": 832
    },
    {
        "APIs": [
            {
                "name": "GetMovieDetails",
                "Description": "This API is to get the details of a movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_info": {
                        "description": "the information of the movie",
                        "type": "Object"
                    }
                },
                "format": "GetMovieDetails(movie_name) -> movie_info"
            },
            {
                "name": "GetActorDetails",
                "Description": "This API is to get the details of an actor.",
                "input_params": {
                    "movie_info": {
                        "description": "the information of the movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "actor_info": {
                        "description": "the information of the actor",
                        "type": "Object"
                    }
                },
                "format": "GetActorDetails(movie_info) -> actor_info"
            },
            {
                "name": "GetMovieRecommendation",
                "Description": "This API is to recommend another movie with similar actors.",
                "input_params": {
                    "actor_info": {
                        "description": "the information of the actor",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "recommendation": {
                        "description": "the recommended movie",
                        "type": "String"
                    }
                },
                "format": "GetMovieRecommendation(actor_info) -> recommendation"
            }
        ],
        "Query": "I was impressed by the actors in 'The Godfather'. Can you suggest another movie with similar actors?",
        "Label": "GetMovieRecommendation(actor_info=GetActorDetails(movie_info=GetMovieDetails(movie_name='The Godfather')))",
        "Index": 833
    },
    {
        "APIs": [
            {
                "name": "GetMovieDetails",
                "Description": "This API is to get the details of a movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_info": {
                        "description": "the information of the movie",
                        "type": "Object"
                    }
                },
                "format": "GetMovieDetails(movie_name) -> movie_info"
            },
            {
                "name": "GetActorDetails",
                "Description": "This API is to get the details of an actor.",
                "input_params": {
                    "movie_info": {
                        "description": "the information of the movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "actor_info": {
                        "description": "the information of the actor",
                        "type": "Object"
                    }
                },
                "format": "GetActorDetails(movie_info) -> actor_info"
            },
            {
                "name": "GetMovieRecommendation",
                "Description": "This API is to recommend another movie with the same actors.",
                "input_params": {
                    "actor_info": {
                        "description": "the information of the actor",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "recommendation": {
                        "description": "the recommended movie",
                        "type": "String"
                    }
                },
                "format": "GetMovieRecommendation(actor_info) -> recommendation"
            }
        ],
        "Query": "I really liked the movie 'Fight Club'. Can you recommend another movie with the same actors?",
        "Label": "GetMovieRecommendation(actor_info=GetActorDetails(movie_info=GetMovieDetails(movie_name='Fight Club')))",
        "Index": 834
    },
    {
        "APIs": [
            {
                "name": "SearchRestaurant",
                "Description": "This API is to search for a restaurant based on the city and type of cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "type_of_cuisine": {
                        "description": "the type of cuisine the restaurant serves",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_info": {
                        "description": "information about the restaurant",
                        "type": "Object"
                    }
                },
                "format": "SearchRestaurant(city, type_of_cuisine) -> restaurant_info"
            },
            {
                "name": "FindOpenHours",
                "Description": "This API is to find the open hours of a restaurant.",
                "input_params": {
                    "restaurant_info": {
                        "description": "information about the restaurant",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "open_hours": {
                        "description": "the open hours of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindOpenHours(restaurant_info) -> open_hours"
            },
            {
                "name": "MakeReservation",
                "Description": "This API is to make a reservation at a restaurant.",
                "input_params": {
                    "open_hours": {
                        "description": "the open hours of the restaurant",
                        "type": "String"
                    },
                    "number_of_people": {
                        "description": "the number of people for the reservation",
                        "type": "Integer"
                    },
                    "date_time": {
                        "description": "the date and time for the reservation",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "MakeReservation(open_hours, number_of_people, date_time) -> reservation_status"
            }
        ],
        "Query": "I want to book a table for 2 at a Mexican restaurant in Los Angeles on 5th October at 9 pm.",
        "Label": "MakeReservation(open_hours=FindOpenHours(restaurant_info=SearchRestaurant(city='Los Angeles', type_of_cuisine='Mexican')), number_of_people=2, date_time='5th October at 9 pm')",
        "Index": 835
    },
    {
        "APIs": [
            {
                "name": "SearchRestaurant",
                "Description": "This API is to search for a restaurant based on the city and type of cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "type_of_cuisine": {
                        "description": "the type of cuisine the user is looking for",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_info": {
                        "description": "information about the restaurant",
                        "type": "Object"
                    }
                },
                "format": "SearchRestaurant(city, type_of_cuisine) -> restaurant_info"
            },
            {
                "name": "FindOpenHours",
                "Description": "This API is to find the open hours of a restaurant.",
                "input_params": {
                    "restaurant_info": {
                        "description": "information about the restaurant",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "open_hours": {
                        "description": "the open hours of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "FindOpenHours(restaurant_info) -> open_hours"
            },
            {
                "name": "MakeReservation",
                "Description": "This API is to make a reservation at a restaurant.",
                "input_params": {
                    "open_hours": {
                        "description": "the open hours of the restaurant",
                        "type": "Object"
                    },
                    "number_of_people": {
                        "description": "the number of people for the reservation",
                        "type": "Integer"
                    },
                    "date_time": {
                        "description": "the date and time for the reservation",
                        "type": "DateTime"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "MakeReservation(open_hours, number_of_people, date_time) -> reservation_status"
            }
        ],
        "Query": "I'd like to reserve for 6 at an Indian restaurant in Chicago on 20th December at 6 pm.",
        "Label": "MakeReservation(open_hours=FindOpenHours(restaurant_info=SearchRestaurant(city='Chicago', type_of_cuisine='Indian')), number_of_people=6, date_time='20th December at 6 pm')",
        "Index": 836
    },
    {
        "APIs": [
            {
                "name": "SearchRestaurant",
                "Description": "This API is to search for a restaurant based on the city and type of cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "type_of_cuisine": {
                        "description": "the type of cuisine the restaurant serves",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_info": {
                        "description": "the information of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "SearchRestaurant(city, type_of_cuisine) -> restaurant_info"
            },
            {
                "name": "FindOpenHours",
                "Description": "This API is to find the open hours of a restaurant.",
                "input_params": {
                    "restaurant_info": {
                        "description": "the information of the restaurant",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "open_hours": {
                        "description": "the open hours of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "FindOpenHours(restaurant_info) -> open_hours"
            },
            {
                "name": "MakeReservation",
                "Description": "This API is to make a reservation at a restaurant.",
                "input_params": {
                    "open_hours": {
                        "description": "the open hours of the restaurant",
                        "type": "Object"
                    },
                    "number_of_people": {
                        "description": "the number of people for the reservation",
                        "type": "Integer"
                    },
                    "date_time": {
                        "description": "the date and time for the reservation",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "MakeReservation(open_hours, number_of_people, date_time) -> reservation_status"
            }
        ],
        "Query": "I'd like to reserve for 6 at an Indian restaurant in Chicago on 20th December at 6 pm.",
        "Label": "MakeReservation(open_hours=FindOpenHours(restaurant_info=SearchRestaurant(city='Chicago', type_of_cuisine='Indian')), number_of_people=6, date_time='20th December at 6 pm')",
        "Index": 837
    },
    {
        "APIs": [
            {
                "name": "SearchRestaurant",
                "Description": "This API is to search for a restaurant based on the city and type of cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "type_of_cuisine": {
                        "description": "the type of cuisine of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_info": {
                        "description": "the information of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "SearchRestaurant(city, type_of_cuisine) -> restaurant_info"
            },
            {
                "name": "FindOpenHours",
                "Description": "This API is to find the open hours of a restaurant.",
                "input_params": {
                    "restaurant_info": {
                        "description": "the information of the restaurant",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "open_hours": {
                        "description": "the open hours of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "FindOpenHours(restaurant_info) -> open_hours"
            },
            {
                "name": "MakeReservation",
                "Description": "This API is to make a reservation at a restaurant.",
                "input_params": {
                    "open_hours": {
                        "description": "the open hours of the restaurant",
                        "type": "Object"
                    },
                    "number_of_people": {
                        "description": "the number of people for the reservation",
                        "type": "Integer"
                    },
                    "date_time": {
                        "description": "the date and time for the reservation",
                        "type": "DateTime"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "MakeReservation(open_hours, number_of_people, date_time) -> reservation_status"
            }
        ],
        "Query": "I need to book a table for 7 at a Greek restaurant in Seattle on 2nd February at 8:45 pm.",
        "Label": "MakeReservation(open_hours=FindOpenHours(restaurant_info=SearchRestaurant(city='Seattle', type_of_cuisine='Greek')), number_of_people=7, date_time='2nd February at 8:45 pm')",
        "Index": 838
    },
    {
        "APIs": [
            {
                "name": "CheckTraffic",
                "Description": "This API is to check the traffic condition.",
                "input_params": {
                    "destination": {
                        "description": "the destination address",
                        "type": "String"
                    }
                },
                "output_params": {
                    "traffic_condition": {
                        "description": "the current traffic condition",
                        "type": "String"
                    }
                },
                "format": "CheckTraffic(destination)"
            },
            {
                "name": "FindAddress",
                "Description": "This API is to find the address of a contact.",
                "input_params": {
                    "contact": {
                        "description": "the name of the contact",
                        "type": "String"
                    }
                },
                "output_params": {
                    "address": {
                        "description": "the address of the contact",
                        "type": "String"
                    }
                },
                "format": "FindAddress(contact)"
            },
            {
                "name": "EstimateTravelTime",
                "Description": "This API is to estimate the travel time.",
                "input_params": {
                    "traffic_condition": {
                        "description": "the current traffic condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "travel_time": {
                        "description": "the estimated travel time",
                        "type": "Time"
                    }
                },
                "format": "EstimateTravelTime(traffic_condition)"
            }
        ],
        "Query": "When should I start to make it to Laura's house?",
        "Label": "EstimateTravelTime(traffic_condition=CheckTraffic(destination=FindAddress(contact='Laura')))",
        "Index": 839
    },
    {
        "APIs": [
            {
                "name": "CheckTraffic",
                "Description": "This API is to check the traffic condition.",
                "input_params": {
                    "destination": {
                        "description": "the destination address",
                        "type": "String"
                    }
                },
                "output_params": {
                    "traffic_condition": {
                        "description": "the traffic condition",
                        "type": "String"
                    }
                },
                "format": "CheckTraffic(destination)"
            },
            {
                "name": "FindAddress",
                "Description": "This API is to find the address of a contact.",
                "input_params": {
                    "contact": {
                        "description": "the name of the contact",
                        "type": "String"
                    }
                },
                "output_params": {
                    "address": {
                        "description": "the address of the contact",
                        "type": "String"
                    }
                },
                "format": "FindAddress(contact)"
            },
            {
                "name": "EstimateTravelTime",
                "Description": "This API is to estimate the travel time.",
                "input_params": {
                    "traffic_condition": {
                        "description": "the traffic condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "travel_time": {
                        "description": "the estimated travel time",
                        "type": "Time"
                    }
                },
                "format": "EstimateTravelTime(traffic_condition)"
            }
        ],
        "Query": "What is the best time to leave for Mark's apartment?",
        "Label": "EstimateTravelTime(traffic_condition=CheckTraffic(destination=FindAddress(contact='Mark')))",
        "Index": 840
    },
    {
        "APIs": [
            {
                "name": "CheckTraffic",
                "Description": "This API is to check the traffic condition.",
                "input_params": {
                    "destination": {
                        "description": "the destination address",
                        "type": "String"
                    }
                },
                "output_params": {
                    "traffic_condition": {
                        "description": "the current traffic condition",
                        "type": "String"
                    }
                },
                "format": "CheckTraffic(destination)"
            },
            {
                "name": "FindAddress",
                "Description": "This API is to find the address of a contact.",
                "input_params": {
                    "contact": {
                        "description": "the name of the contact",
                        "type": "String"
                    }
                },
                "output_params": {
                    "address": {
                        "description": "the address of the contact",
                        "type": "String"
                    }
                },
                "format": "FindAddress(contact)"
            },
            {
                "name": "EstimateTravelTime",
                "Description": "This API is to estimate the travel time.",
                "input_params": {
                    "traffic_condition": {
                        "description": "the current traffic condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "departure_time": {
                        "description": "the recommended departure time",
                        "type": "Time"
                    }
                },
                "format": "EstimateTravelTime(traffic_condition)"
            }
        ],
        "Query": "When should I depart to reach Steve's office?",
        "Label": "EstimateTravelTime(traffic_condition=CheckTraffic(destination=FindAddress(contact='Steve')))",
        "Index": 841
    },
    {
        "APIs": [
            {
                "name": "CheckTraffic",
                "Description": "This API is to check the traffic condition.",
                "input_params": {
                    "destination": {
                        "description": "the destination address",
                        "type": "String"
                    }
                },
                "output_params": {
                    "traffic_condition": {
                        "description": "the traffic condition",
                        "type": "String"
                    }
                },
                "format": "CheckTraffic(destination)"
            },
            {
                "name": "FindAddress",
                "Description": "This API is to find the address of a contact.",
                "input_params": {
                    "contact": {
                        "description": "the name of the contact",
                        "type": "String"
                    }
                },
                "output_params": {
                    "address": {
                        "description": "the address of the contact",
                        "type": "String"
                    }
                },
                "format": "FindAddress(contact)"
            },
            {
                "name": "EstimateTravelTime",
                "Description": "This API is to estimate the travel time.",
                "input_params": {
                    "traffic_condition": {
                        "description": "the traffic condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "travel_time": {
                        "description": "the estimated travel time",
                        "type": "String"
                    }
                },
                "format": "EstimateTravelTime(traffic_condition)"
            }
        ],
        "Query": "When should I depart to reach Steve's office?",
        "Label": "EstimateTravelTime(traffic_condition=CheckTraffic(destination=FindAddress(contact='Steve')))",
        "Index": 842
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast for a specific city and date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which the weather forecast is required",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast for the specified city and date",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather"
            },
            {
                "name": "GetLocalEvents",
                "Description": "This API is to get the local events happening in a specific city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which the local events are required",
                        "type": "String"
                    }
                },
                "output_params": {
                    "events": {
                        "description": "the local events happening in the specified city on the specified date",
                        "type": "List of Strings"
                    }
                },
                "format": "GetLocalEvents(city, date) -> events"
            },
            {
                "name": "PlanOutdoorActivities",
                "Description": "This API is to plan outdoor activities based on weather forecast and local events.",
                "input_params": {
                    "weather": {
                        "description": "the weather forecast for a specific city and date",
                        "type": "String"
                    },
                    "events": {
                        "description": "the local events happening in a specific city on a specific date",
                        "type": "List of Strings"
                    }
                },
                "output_params": {
                    "activity_plan": {
                        "description": "the planned outdoor activities based on weather forecast and local events",
                        "type": "String"
                    }
                },
                "format": "PlanOutdoorActivities(weather, events) -> activity_plan"
            }
        ],
        "Query": "Can you aid me in planning some outdoor activities in Austin for the coming Tuesday?",
        "Label": "PlanOutdoorActivities(weather=GetWeatherForecast(city='Austin', date='coming Tuesday'), events=GetLocalEvents(city='Austin', date='coming Tuesday'))",
        "Index": 843
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast for a specific city and date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which the weather forecast is required",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast for the specified city and date",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather"
            },
            {
                "name": "GetLocalEvents",
                "Description": "This API is to get the local events happening in a specific city and date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which the local events are required",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "events": {
                        "description": "the local events happening in the specified city and date",
                        "type": "List"
                    }
                },
                "format": "GetLocalEvents(city, date) -> events"
            },
            {
                "name": "PlanOutdoorActivities",
                "Description": "This API is to plan outdoor activities based on weather forecast and local events.",
                "input_params": {
                    "weather": {
                        "description": "the weather forecast for the specified city and date",
                        "type": "String"
                    },
                    "events": {
                        "description": "the local events happening in the specified city and date",
                        "type": "List"
                    }
                },
                "output_params": {
                    "plan": {
                        "description": "the plan for outdoor activities based on weather forecast and local events",
                        "type": "String"
                    }
                },
                "format": "PlanOutdoorActivities(weather, events) -> plan"
            }
        ],
        "Query": "I need help in organizing some outdoor activities in Chicago next Wednesday, can you help?",
        "Label": "PlanOutdoorActivities(weather=GetWeatherForecast(city='Chicago', date='next Wednesday'), events=GetLocalEvents(city='Chicago', date='next Wednesday'))",
        "Index": 844
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on location and cuisine.",
                "input_params": {
                    "location": {
                        "description": "the location where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine the restaurant serves",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(location, cuisine) -> restaurantName"
            },
            {
                "name": "BookReservation",
                "Description": "This API is to make a reservation at a restaurant.",
                "input_params": {
                    "restaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "partySize": {
                        "description": "the number of people in the party",
                        "type": "Integer"
                    },
                    "time": {
                        "description": "the time of the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservationStatus": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "BookReservation(restaurantName, partySize, time) -> reservationStatus"
            }
        ],
        "Query": "I am currently in Boston and I have a huge craving for Mexican food. Based on the current weather, can I make a reservation for 6 people at a Mexican restaurant tonight at 7 pm?",
        "Label": "BookReservation(restaurantName=FindRestaurant(location='Boston', cuisine='Mexican'), partySize=6, time='7 pm')",
        "Index": 845
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on location and cuisine.",
                "input_params": {
                    "location": {
                        "description": "the location where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine the user is looking for",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(location, cuisine) -> restaurantName"
            },
            {
                "name": "BookReservation",
                "Description": "This API is to book a reservation at a restaurant.",
                "input_params": {
                    "restaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "partySize": {
                        "description": "the number of people in the party",
                        "type": "Integer"
                    },
                    "time": {
                        "description": "the time of the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservationStatus": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "BookReservation(restaurantName, partySize, time) -> reservationStatus"
            }
        ],
        "Query": "I am in San Francisco and I am in the mood for Thai food. Considering the weather, can I book a reservation for 2 people at a Thai restaurant tonight at 9 pm?",
        "Label": "BookReservation(restaurantName=FindRestaurant(location='San Francisco', cuisine='Thai'), partySize=2, time='9 pm')",
        "Index": 846
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on location and cuisine.",
                "input_params": {
                    "location": {
                        "description": "the location where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine the restaurant serves",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(location, cuisine) -> restaurantName"
            },
            {
                "name": "BookReservation",
                "Description": "This API is to book a reservation at a restaurant.",
                "input_params": {
                    "restaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "partySize": {
                        "description": "the number of people in the party",
                        "type": "Integer"
                    },
                    "time": {
                        "description": "the time of the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservationStatus": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "BookReservation(restaurantName, partySize, time) -> reservationStatus"
            }
        ],
        "Query": "I am in Miami and I am craving Chinese food. Based on the forecast, can I book a reservation for 3 people at a Chinese restaurant tonight at 6 pm?",
        "Label": "BookReservation(restaurantName=FindRestaurant(location='Miami', cuisine='Chinese'), partySize=3, time='6 pm')",
        "Index": 847
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on location and cuisine.",
                "input_params": {
                    "location": {
                        "description": "the location where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine the user is craving",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(location, cuisine) -> restaurantName"
            },
            {
                "name": "BookReservation",
                "Description": "This API is to book a reservation at a restaurant.",
                "input_params": {
                    "restaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "partySize": {
                        "description": "the number of people in the party",
                        "type": "Integer"
                    },
                    "time": {
                        "description": "the time of the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservationStatus": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "BookReservation(restaurantName, partySize, time) -> reservationStatus"
            }
        ],
        "Query": "I am in Miami and I am craving Chinese food. Based on the forecast, can I book a reservation for 3 people at a Chinese restaurant tonight at 6 pm?",
        "Label": "BookReservation(restaurantName=FindRestaurant(location='Miami', cuisine='Chinese'), partySize=3, time='6 pm')",
        "Index": 848
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on location and cuisine.",
                "input_params": {
                    "location": {
                        "description": "the location where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine the user is looking for",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(location, cuisine) -> restaurantName"
            },
            {
                "name": "BookReservation",
                "Description": "This API is to book a reservation at a restaurant.",
                "input_params": {
                    "restaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "partySize": {
                        "description": "the number of people in the party",
                        "type": "Integer"
                    },
                    "time": {
                        "description": "the time of the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservationStatus": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "BookReservation(restaurantName, partySize, time) -> reservationStatus"
            }
        ],
        "Query": "I am in Denver and I am in the mood for Greek food. Based on the weather, can I book a reservation for 7 people at a Greek restaurant tonight at 8:30 pm?",
        "Label": "BookReservation(restaurantName=FindRestaurant(location='Denver', cuisine='Greek'), partySize=7, time='8:30 pm')",
        "Index": 849
    },
    {
        "APIs": [
            {
                "name": "FindBook",
                "Description": "This API is to find book details.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bookDetails": {
                        "description": "the details of the book",
                        "type": "Object"
                    }
                },
                "format": "FindBook(title) -> bookDetails"
            },
            {
                "name": "CheckLibraryAvailability",
                "Description": "This API is to check the availability of a book in the library.",
                "input_params": {
                    "bookDetails": {
                        "description": "the details of the book",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "libraryStatus": {
                        "description": "the availability status of the book in the library",
                        "type": "String"
                    }
                },
                "format": "CheckLibraryAvailability(bookDetails) -> libraryStatus"
            },
            {
                "name": "ReserveBook",
                "Description": "This API is to reserve a book from the library.",
                "input_params": {
                    "libraryStatus": {
                        "description": "the availability status of the book in the library",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reservationStatus": {
                        "description": "the reservation status of the book",
                        "type": "String"
                    }
                },
                "format": "ReserveBook(libraryStatus) -> reservationStatus"
            }
        ],
        "Query": "I am interested in 'The Great Gatsby'. Can I reserve it from my local library?",
        "Label": "ReserveBook(libraryStatus=CheckLibraryAvailability(bookDetails=FindBook(title='The Great Gatsby')))",
        "Index": 850
    },
    {
        "APIs": [
            {
                "name": "FindBook",
                "Description": "This API is to find a book by its title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bookDetails": {
                        "description": "the details of the book",
                        "type": "Object"
                    }
                },
                "format": "FindBook(title) -> bookDetails"
            },
            {
                "name": "CheckLibraryAvailability",
                "Description": "This API is to check the availability of a book in the library.",
                "input_params": {
                    "bookDetails": {
                        "description": "the details of the book",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "libraryStatus": {
                        "description": "the availability status of the book in the library",
                        "type": "String"
                    }
                },
                "format": "CheckLibraryAvailability(bookDetails) -> libraryStatus"
            },
            {
                "name": "ReserveBook",
                "Description": "This API is to reserve a book from the library.",
                "input_params": {
                    "libraryStatus": {
                        "description": "the availability status of the book in the library",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reservationStatus": {
                        "description": "the reservation status of the book",
                        "type": "String"
                    }
                },
                "format": "ReserveBook(libraryStatus) -> reservationStatus"
            }
        ],
        "Query": "I wish to read '1984'. Can I reserve it from my local library?",
        "Label": "ReserveBook(libraryStatus=CheckLibraryAvailability(bookDetails=FindBook(title='1984')))",
        "Index": 851
    },
    {
        "APIs": [
            {
                "name": "FindBook",
                "Description": "This API is to find a book by its title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bookDetails": {
                        "description": "the details of the book",
                        "type": "Object"
                    }
                },
                "format": "FindBook(title) -> bookDetails"
            },
            {
                "name": "CheckLibraryAvailability",
                "Description": "This API is to check the availability of a book in the library.",
                "input_params": {
                    "bookDetails": {
                        "description": "the details of the book",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "libraryStatus": {
                        "description": "the availability status of the book in the library",
                        "type": "String"
                    }
                },
                "format": "CheckLibraryAvailability(bookDetails) -> libraryStatus"
            },
            {
                "name": "ReserveBook",
                "Description": "This API is to reserve a book from the library.",
                "input_params": {
                    "libraryStatus": {
                        "description": "the availability status of the book in the library",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reservationStatus": {
                        "description": "the reservation status of the book",
                        "type": "String"
                    }
                },
                "format": "ReserveBook(libraryStatus) -> reservationStatus"
            }
        ],
        "Query": "I'm looking to read 'Pride and Prejudice'. Can I reserve it from my local library?",
        "Label": "ReserveBook(libraryStatus=CheckLibraryAvailability(bookDetails=FindBook(title='Pride and Prejudice')))",
        "Index": 852
    },
    {
        "APIs": [
            {
                "name": "FindBook",
                "Description": "This API is to find a book by its title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bookDetails": {
                        "description": "the details of the book",
                        "type": "Object"
                    }
                },
                "format": "FindBook(title) -> bookDetails"
            },
            {
                "name": "CheckLibraryAvailability",
                "Description": "This API is to check the availability of a book in the library.",
                "input_params": {
                    "bookDetails": {
                        "description": "the details of the book",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "libraryStatus": {
                        "description": "the status of the book in the library",
                        "type": "String"
                    }
                },
                "format": "CheckLibraryAvailability(bookDetails) -> libraryStatus"
            },
            {
                "name": "ReserveBook",
                "Description": "This API is to reserve a book in the library.",
                "input_params": {
                    "libraryStatus": {
                        "description": "the status of the book in the library",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reservationStatus": {
                        "description": "the status of the book reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveBook(libraryStatus) -> reservationStatus"
            }
        ],
        "Query": "I'm looking to read 'Pride and Prejudice'. Can I reserve it from my local library?",
        "Label": "ReserveBook(libraryStatus=CheckLibraryAvailability(bookDetails=FindBook(title='Pride and Prejudice')))",
        "Index": 853
    },
    {
        "APIs": [
            {
                "name": "GetRestaurant",
                "Description": "This API is to get a list of restaurants based on the location.",
                "input_params": {
                    "location": {
                        "description": "the location where the user is currently located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantList": {
                        "description": "a list of restaurants in the specified location",
                        "type": "List"
                    }
                },
                "format": "GetRestaurant(location) -> restaurantList"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu items of a restaurant.",
                "input_params": {
                    "restaurantList": {
                        "description": "a list of restaurants",
                        "type": "List"
                    }
                },
                "output_params": {
                    "menuItems": {
                        "description": "a list of menu items from the specified restaurants",
                        "type": "List"
                    }
                },
                "format": "GetMenu(restaurantList) -> menuItems"
            },
            {
                "name": "PlaceOrder",
                "Description": "This API is to place an order for the specified menu items.",
                "input_params": {
                    "menuItems": {
                        "description": "a list of menu items to be ordered",
                        "type": "List"
                    },
                    "restaurantList": {
                        "description": "a list of restaurants",
                        "type": "List"
                    }
                },
                "output_params": {
                    "orderStatus": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(menuItems, restaurantList) -> orderStatus"
            }
        ],
        "Query": "I am currently in Los Angeles and feel like eating something. Can you help me order sushi?",
        "Label": "PlaceOrder(menuItems=GetMenu(restaurantList=GetRestaurant(location='Los Angeles')), restaurantList=GetRestaurant(location='Los Angeles'))",
        "Index": 854
    },
    {
        "APIs": [
            {
                "name": "GetRestaurant",
                "Description": "This API is to get a list of restaurants based on location.",
                "input_params": {
                    "location": {
                        "description": "the location where the user is",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantList": {
                        "description": "a list of restaurants in the specified location",
                        "type": "List"
                    }
                },
                "format": "GetRestaurant(location) -> restaurantList"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu items of a restaurant.",
                "input_params": {
                    "restaurantList": {
                        "description": "a list of restaurants",
                        "type": "List"
                    }
                },
                "output_params": {
                    "menuItems": {
                        "description": "a list of menu items from the specified restaurants",
                        "type": "List"
                    }
                },
                "format": "GetMenu(restaurantList) -> menuItems"
            },
            {
                "name": "PlaceOrder",
                "Description": "This API is to place an order for food items.",
                "input_params": {
                    "menuItems": {
                        "description": "a list of menu items",
                        "type": "List"
                    },
                    "restaurantList": {
                        "description": "a list of restaurants",
                        "type": "List"
                    }
                },
                "output_params": {
                    "orderStatus": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(menuItems, restaurantList) -> orderStatus"
            }
        ],
        "Query": "I am in London and want to try out some food. Can you help me order fish and chips?",
        "Label": "PlaceOrder(menuItems=GetMenu(restaurantList=GetRestaurant(location='London')), restaurantList=GetRestaurant(location='London'))",
        "Index": 855
    },
    {
        "APIs": [
            {
                "name": "GetRestaurant",
                "Description": "This API is to get a list of restaurants based on location.",
                "input_params": {
                    "location": {
                        "description": "the location where the user is",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantList": {
                        "description": "a list of restaurants",
                        "type": "List"
                    }
                },
                "format": "GetRestaurant(location) -> restaurantList"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu items of a restaurant.",
                "input_params": {
                    "restaurantList": {
                        "description": "a list of restaurants",
                        "type": "List"
                    }
                },
                "output_params": {
                    "menuItems": {
                        "description": "a list of menu items",
                        "type": "List"
                    }
                },
                "format": "GetMenu(restaurantList) -> menuItems"
            },
            {
                "name": "PlaceOrder",
                "Description": "This API is to place an order for food.",
                "input_params": {
                    "menuItems": {
                        "description": "a list of menu items",
                        "type": "List"
                    },
                    "restaurantList": {
                        "description": "a list of restaurants",
                        "type": "List"
                    }
                },
                "output_params": {
                    "orderStatus": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(menuItems, restaurantList) -> orderStatus"
            }
        ],
        "Query": "I am in Rome and craving for food. Can you help me order pasta?",
        "Label": "PlaceOrder(menuItems=GetMenu(restaurantList=GetRestaurant(location='Rome')), restaurantList=GetRestaurant(location='Rome'))",
        "Index": 856
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the weather forecast for a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location for which weather forecast is required",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weatherForecast": {
                        "description": "the weather forecast for the specified location",
                        "type": "String"
                    }
                },
                "format": "GetWeather(location) -> weatherForecast"
            },
            {
                "name": "GetClothingAdvice",
                "Description": "This API is to get clothing advice based on the weather forecast.",
                "input_params": {
                    "weatherForecast": {
                        "description": "the weather forecast for which clothing advice is required",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothingRecommendation": {
                        "description": "the clothing recommendation based on the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetClothingAdvice(weatherForecast) -> clothingRecommendation"
            },
            {
                "name": "PlanDay",
                "Description": "This API is to plan the day based on weather forecast and clothing recommendation.",
                "input_params": {
                    "weatherForecast": {
                        "description": "the weather forecast for planning the day",
                        "type": "String"
                    },
                    "clothingRecommendation": {
                        "description": "the clothing recommendation for planning the day",
                        "type": "String"
                    }
                },
                "output_params": {
                    "plan": {
                        "description": "the planned activities for the day",
                        "type": "String"
                    }
                },
                "format": "PlanDay(weatherForecast, clothingRecommendation) -> plan"
            }
        ],
        "Query": "I am in Chicago and uncertain about the weather condition. Could you aid me in organizing my day?",
        "Label": "PlanDay(weatherForecast=GetWeather(location='Chicago'), clothingRecommendation=GetClothingAdvice(weatherForecast=GetWeather(location='Chicago')))",
        "Index": 857
    },
    {
        "APIs": [
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "departure": {
                        "description": "the departure city",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_info": {
                        "description": "the information of the booked flight",
                        "type": "String"
                    }
                },
                "format": "BookFlight(departure, destination) -> flight_info"
            },
            {
                "name": "FindAccommodation",
                "Description": "This API is to find accommodation.",
                "input_params": {
                    "destination": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "budget": {
                        "description": "the budget for accommodation",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "accommodation_info": {
                        "description": "the information of the found accommodation",
                        "type": "String"
                    }
                },
                "format": "FindAccommodation(destination, budget) -> accommodation_info"
            },
            {
                "name": "CreateTravelPlan",
                "Description": "This API is to create a travel plan.",
                "input_params": {
                    "flight": {
                        "description": "the booked flight information",
                        "type": "String"
                    },
                    "accommodation": {
                        "description": "the found accommodation information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "travel_plan": {
                        "description": "the created travel plan",
                        "type": "String"
                    }
                },
                "format": "CreateTravelPlan(flight, accommodation) -> travel_plan"
            }
        ],
        "Query": "I am going from Toronto to Dubai and have 7000 CAD set aside for hotels. Can you assist in planning my journey?",
        "Label": "CreateTravelPlan(flight=BookFlight(departure='Toronto', destination='Dubai'), accommodation=FindAccommodation(destination='Dubai', budget=7000))",
        "Index": 858
    },
    {
        "APIs": [
            {
                "name": "GetCurrentTemperature",
                "Description": "This API is to get the current temperature of a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "temperature": {
                        "description": "the current temperature of the city",
                        "type": "Float"
                    }
                },
                "format": "GetCurrentTemperature(city) -> temperature"
            },
            {
                "name": "DetermineTemperatureType",
                "Description": "This API is to determine the temperature type based on the temperature value.",
                "input_params": {
                    "temperature": {
                        "description": "the temperature value",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "temperatureType": {
                        "description": "the type of temperature (e.g., hot, warm, cold)",
                        "type": "String"
                    }
                },
                "format": "DetermineTemperatureType(temperature) -> temperatureType"
            },
            {
                "name": "SuggestClothingOptions",
                "Description": "This API is to suggest clothing options based on the temperature type and gender.",
                "input_params": {
                    "temperatureType": {
                        "description": "the type of temperature",
                        "type": "String"
                    },
                    "gender": {
                        "description": "the gender of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothingOptions": {
                        "description": "the suggested clothing options",
                        "type": "List"
                    }
                },
                "format": "SuggestClothingOptions(temperatureType, gender) -> clothingOptions"
            }
        ],
        "Query": "I am a male and I am going to Paris the week after next. What type of clothing should I take with me?",
        "Label": "SuggestClothingOptions(temperatureType=DetermineTemperatureType(temperature=GetCurrentTemperature(city='Paris')),gender='Male')",
        "Index": 859
    },
    {
        "APIs": [
            {
                "name": "GetCurrentTemperature",
                "Description": "This API is to get the current temperature of a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "temperature": {
                        "description": "the current temperature of the city",
                        "type": "Float"
                    }
                },
                "format": "GetCurrentTemperature(city) -> temperature"
            },
            {
                "name": "DetermineTemperatureType",
                "Description": "This API is to determine the temperature type based on a given temperature.",
                "input_params": {
                    "temperature": {
                        "description": "the temperature value",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "temperatureType": {
                        "description": "the type of temperature (e.g., hot, warm, cold)",
                        "type": "String"
                    }
                },
                "format": "DetermineTemperatureType(temperature) -> temperatureType"
            },
            {
                "name": "SuggestClothingOptions",
                "Description": "This API is to suggest clothing options based on temperature type and gender.",
                "input_params": {
                    "temperatureType": {
                        "description": "the type of temperature",
                        "type": "String"
                    },
                    "gender": {
                        "description": "the gender of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "suggestedClothing": {
                        "description": "the suggested clothing options",
                        "type": "String"
                    }
                },
                "format": "SuggestClothingOptions(temperatureType, gender) -> suggestedClothing"
            }
        ],
        "Query": "I'm a woman visiting Moscow next month. Can you suggest what kind of clothing I should bring?",
        "Label": "SuggestClothingOptions(temperatureType=DetermineTemperatureType(temperature=GetCurrentTemperature(city='Moscow')),gender='Female')",
        "Index": 860
    },
    {
        "APIs": [
            {
                "name": "GetCurrentTemperature",
                "Description": "This API is to get the current temperature of a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "temperature": {
                        "description": "the current temperature of the city",
                        "type": "Float"
                    }
                },
                "format": "GetCurrentTemperature(city) -> temperature"
            },
            {
                "name": "DetermineTemperatureType",
                "Description": "This API is to determine the temperature type based on the temperature value.",
                "input_params": {
                    "temperature": {
                        "description": "the temperature value",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "temperatureType": {
                        "description": "the type of temperature (e.g., hot, warm, cold)",
                        "type": "String"
                    }
                },
                "format": "DetermineTemperatureType(temperature) -> temperatureType"
            },
            {
                "name": "SuggestClothingOptions",
                "Description": "This API is to suggest clothing options based on the temperature type and gender.",
                "input_params": {
                    "temperatureType": {
                        "description": "the type of temperature",
                        "type": "String"
                    },
                    "gender": {
                        "description": "the gender of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothingOptions": {
                        "description": "the suggested clothing options",
                        "type": "List"
                    }
                },
                "format": "SuggestClothingOptions(temperatureType, gender) -> clothingOptions"
            }
        ],
        "Query": "I'm a man intending to go to Tokyo this Friday. What kind of attire should I prepare?",
        "Label": "SuggestClothingOptions(temperatureType=DetermineTemperatureType(temperature=GetCurrentTemperature(city='Tokyo')),gender='Male')",
        "Index": 861
    },
    {
        "APIs": [
            {
                "name": "GetHealthInformation",
                "Description": "This API is to get health information based on age and gender.",
                "input_params": {
                    "age": {
                        "description": "the age of the person",
                        "type": "Integer"
                    },
                    "gender": {
                        "description": "the gender of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "health_info": {
                        "description": "the health information of the person",
                        "type": "String"
                    }
                },
                "format": "GetHealthInformation(age, gender) -> health_info"
            },
            {
                "name": "GetDietPlan",
                "Description": "This API is to get a diet plan based on health information.",
                "input_params": {
                    "HealthInformation": {
                        "description": "the health information of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "diet_plan": {
                        "description": "the diet plan for the person",
                        "type": "String"
                    }
                },
                "format": "GetDietPlan(HealthInformation) -> diet_plan"
            },
            {
                "name": "GetExerciseRoutine",
                "Description": "This API is to get an exercise routine based on health information.",
                "input_params": {
                    "HealthInformation": {
                        "description": "the health information of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "exercise_routine": {
                        "description": "the exercise routine for the person",
                        "type": "String"
                    }
                },
                "format": "GetExerciseRoutine(HealthInformation) -> exercise_routine"
            },
            {
                "name": "CreateWellnessPlan",
                "Description": "This API is to create a wellness plan based on a diet plan and an exercise routine.",
                "input_params": {
                    "DietPlan": {
                        "description": "the diet plan for the person",
                        "type": "String"
                    },
                    "ExerciseRoutine": {
                        "description": "the exercise routine for the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "wellness_plan": {
                        "description": "the wellness plan for the person",
                        "type": "String"
                    }
                },
                "format": "CreateWellnessPlan(DietPlan, ExerciseRoutine) -> wellness_plan"
            }
        ],
        "Query": "I'm a 26-year-old man and want to work on my wellness. Can you help?",
        "Label": "CreateWellnessPlan(DietPlan=GetDietPlan(HealthInformation=GetHealthInformation(age=26, gender='man')), ExerciseRoutine=GetExerciseRoutine(HealthInformation=GetHealthInformation(age=26, gender='man')))",
        "Index": 862
    },
    {
        "APIs": [
            {
                "name": "FetchMovieDetails",
                "Description": "This API is to fetch the details of a movie.",
                "input_params": {
                    "title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_details": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "format": "FetchMovieDetails(title) -> movie_details"
            },
            {
                "name": "SuggestSimilarMovies",
                "Description": "This API is to suggest similar movies based on a given movie.",
                "input_params": {
                    "MovieDetails": {
                        "description": "the details of a movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "similar_movies": {
                        "description": "a list of similar movies",
                        "type": "List"
                    }
                },
                "format": "SuggestSimilarMovies(MovieDetails) -> similar_movies"
            },
            {
                "name": "GetDirectorFilmography",
                "Description": "This API is to get the filmography of a director.",
                "input_params": {
                    "DirectorName": {
                        "description": "the name of the director",
                        "type": "String"
                    }
                },
                "output_params": {
                    "director_filmography": {
                        "description": "the filmography of the director",
                        "type": "List"
                    }
                },
                "format": "GetDirectorFilmography(DirectorName) -> director_filmography"
            },
            {
                "name": "BuildMoviePlaylist",
                "Description": "This API is to build a movie playlist.",
                "input_params": {
                    "MovieDetails": {
                        "description": "the details of a movie",
                        "type": "Object"
                    },
                    "SimilarMovies": {
                        "description": "a list of similar movies",
                        "type": "List"
                    },
                    "DirectorFilmography": {
                        "description": "the filmography of a director",
                        "type": "List"
                    }
                },
                "output_params": {
                    "movie_playlist": {
                        "description": "a playlist of movies",
                        "type": "List"
                    }
                },
                "format": "BuildMoviePlaylist(MovieDetails, SimilarMovies, DirectorFilmography) -> movie_playlist"
            }
        ],
        "Query": "I just finished watching \"The Dark Knight\". Can you build a movie playlist for me?",
        "Label": "BuildMoviePlaylist(MovieDetails=FetchMovieDetails(title='The Dark Knight'), SimilarMovies=SuggestSimilarMovies(MovieDetails=FetchMovieDetails(title='The Dark Knight')), DirectorFilmography=GetDirectorFilmography(DirectorName=FetchMovieDetails(title='The Dark Knight').director))",
        "Index": 863
    },
    {
        "APIs": [
            {
                "name": "FetchMovieDetails",
                "Description": "This API is to fetch the details of a movie.",
                "input_params": {
                    "title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_details": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "format": "FetchMovieDetails(title) -> movie_details"
            },
            {
                "name": "SuggestSimilarMovies",
                "Description": "This API is to suggest similar movies based on a given movie.",
                "input_params": {
                    "MovieDetails": {
                        "description": "the details of a movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "similar_movies": {
                        "description": "a list of similar movies",
                        "type": "List"
                    }
                },
                "format": "SuggestSimilarMovies(MovieDetails) -> similar_movies"
            },
            {
                "name": "GetDirectorFilmography",
                "Description": "This API is to get the filmography of a director.",
                "input_params": {
                    "DirectorName": {
                        "description": "the name of the director",
                        "type": "String"
                    }
                },
                "output_params": {
                    "director_filmography": {
                        "description": "the filmography of the director",
                        "type": "List"
                    }
                },
                "format": "GetDirectorFilmography(DirectorName) -> director_filmography"
            },
            {
                "name": "BuildMoviePlaylist",
                "Description": "This API is to build a movie playlist.",
                "input_params": {
                    "MovieDetails": {
                        "description": "the details of a movie",
                        "type": "Object"
                    },
                    "SimilarMovies": {
                        "description": "a list of similar movies",
                        "type": "List"
                    },
                    "DirectorFilmography": {
                        "description": "the filmography of a director",
                        "type": "List"
                    }
                },
                "output_params": {
                    "movie_playlist": {
                        "description": "the movie playlist",
                        "type": "List"
                    }
                },
                "format": "BuildMoviePlaylist(MovieDetails, SimilarMovies, DirectorFilmography) -> movie_playlist"
            }
        ],
        "Query": "I recently saw 'Interstellar'. Can you build a movie playlist for me?",
        "Label": "BuildMoviePlaylist(MovieDetails=FetchMovieDetails(title='Interstellar'), SimilarMovies=SuggestSimilarMovies(MovieDetails=FetchMovieDetails(title='Interstellar')), DirectorFilmography=GetDirectorFilmography(DirectorName=FetchMovieDetails(title='Interstellar').director))",
        "Index": 864
    },
    {
        "APIs": [
            {
                "name": "FetchMovieDetails",
                "Description": "This API is to fetch the details of a movie.",
                "input_params": {
                    "title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_details": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "format": "FetchMovieDetails(title) -> movie_details"
            },
            {
                "name": "SuggestSimilarMovies",
                "Description": "This API is to suggest similar movies based on a given movie.",
                "input_params": {
                    "MovieDetails": {
                        "description": "the details of a movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "similar_movies": {
                        "description": "a list of similar movies",
                        "type": "List"
                    }
                },
                "format": "SuggestSimilarMovies(MovieDetails) -> similar_movies"
            },
            {
                "name": "GetDirectorFilmography",
                "Description": "This API is to get the filmography of a director.",
                "input_params": {
                    "DirectorName": {
                        "description": "the name of the director",
                        "type": "String"
                    }
                },
                "output_params": {
                    "director_filmography": {
                        "description": "the filmography of the director",
                        "type": "List"
                    }
                },
                "format": "GetDirectorFilmography(DirectorName) -> director_filmography"
            },
            {
                "name": "BuildMoviePlaylist",
                "Description": "This API is to build a movie playlist.",
                "input_params": {
                    "MovieDetails": {
                        "description": "the details of a movie",
                        "type": "Object"
                    },
                    "SimilarMovies": {
                        "description": "a list of similar movies",
                        "type": "List"
                    },
                    "DirectorFilmography": {
                        "description": "the filmography of a director",
                        "type": "List"
                    }
                },
                "output_params": {
                    "movie_playlist": {
                        "description": "the movie playlist",
                        "type": "List"
                    }
                },
                "format": "BuildMoviePlaylist(MovieDetails, SimilarMovies, DirectorFilmography) -> movie_playlist"
            }
        ],
        "Query": "I just watched \"The Prestige\". Can you build a movie playlist for me?",
        "Label": "BuildMoviePlaylist(MovieDetails=FetchMovieDetails(title='The Prestige'), SimilarMovies=SuggestSimilarMovies(MovieDetails=FetchMovieDetails(title='The Prestige')), DirectorFilmography=GetDirectorFilmography(DirectorName=FetchMovieDetails(title='The Prestige').director))",
        "Index": 865
    },
    {
        "APIs": [
            {
                "name": "FetchMovieDetails",
                "Description": "This API is to fetch the details of a movie.",
                "input_params": {
                    "title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_details": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "format": "FetchMovieDetails(title) -> movie_details"
            },
            {
                "name": "SuggestSimilarMovies",
                "Description": "This API is to suggest similar movies based on a given movie.",
                "input_params": {
                    "MovieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "similar_movies": {
                        "description": "a list of similar movies",
                        "type": "List"
                    }
                },
                "format": "SuggestSimilarMovies(MovieDetails) -> similar_movies"
            },
            {
                "name": "GetDirectorFilmography",
                "Description": "This API is to get the filmography of a director.",
                "input_params": {
                    "DirectorName": {
                        "description": "the name of the director",
                        "type": "String"
                    }
                },
                "output_params": {
                    "director_filmography": {
                        "description": "the filmography of the director",
                        "type": "List"
                    }
                },
                "format": "GetDirectorFilmography(DirectorName) -> director_filmography"
            },
            {
                "name": "BuildMoviePlaylist",
                "Description": "This API is to build a movie playlist.",
                "input_params": {
                    "MovieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    },
                    "SimilarMovies": {
                        "description": "a list of similar movies",
                        "type": "List"
                    },
                    "DirectorFilmography": {
                        "description": "the filmography of the director",
                        "type": "List"
                    }
                },
                "output_params": {
                    "movie_playlist": {
                        "description": "the movie playlist",
                        "type": "List"
                    }
                },
                "format": "BuildMoviePlaylist(MovieDetails, SimilarMovies, DirectorFilmography) -> movie_playlist"
            }
        ],
        "Query": "I just watched \"The Prestige\". Can you build a movie playlist for me?",
        "Label": "BuildMoviePlaylist(MovieDetails=FetchMovieDetails(title='The Prestige'), SimilarMovies=SuggestSimilarMovies(MovieDetails=FetchMovieDetails(title='The Prestige')), DirectorFilmography=GetDirectorFilmography(DirectorName=FetchMovieDetails(title='The Prestige').director))",
        "Index": 866
    },
    {
        "APIs": [
            {
                "name": "FetchMovieDetails",
                "Description": "This API is to fetch the details of a movie.",
                "input_params": {
                    "title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_details": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "format": "FetchMovieDetails(title) -> movie_details"
            },
            {
                "name": "SuggestSimilarMovies",
                "Description": "This API is to suggest similar movies based on a given movie.",
                "input_params": {
                    "MovieDetails": {
                        "description": "the details of a movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "similar_movies": {
                        "description": "a list of similar movies",
                        "type": "List"
                    }
                },
                "format": "SuggestSimilarMovies(MovieDetails) -> similar_movies"
            },
            {
                "name": "GetDirectorFilmography",
                "Description": "This API is to get the filmography of a director.",
                "input_params": {
                    "DirectorName": {
                        "description": "the name of the director",
                        "type": "String"
                    }
                },
                "output_params": {
                    "director_filmography": {
                        "description": "the filmography of the director",
                        "type": "List"
                    }
                },
                "format": "GetDirectorFilmography(DirectorName) -> director_filmography"
            },
            {
                "name": "BuildMoviePlaylist",
                "Description": "This API is to build a movie playlist.",
                "input_params": {
                    "MovieDetails": {
                        "description": "the details of a movie",
                        "type": "Object"
                    },
                    "SimilarMovies": {
                        "description": "a list of similar movies",
                        "type": "List"
                    },
                    "DirectorFilmography": {
                        "description": "the filmography of a director",
                        "type": "List"
                    }
                },
                "output_params": {
                    "movie_playlist": {
                        "description": "a playlist of movies",
                        "type": "List"
                    }
                },
                "format": "BuildMoviePlaylist(MovieDetails, SimilarMovies, DirectorFilmography) -> movie_playlist"
            }
        ],
        "Query": "I recently watched 'Dunkirk'. Can you build a movie playlist for me?",
        "Label": "BuildMoviePlaylist(MovieDetails=FetchMovieDetails(title='Dunkirk'), SimilarMovies=SuggestSimilarMovies(MovieDetails=FetchMovieDetails(title='Dunkirk')), DirectorFilmography=GetDirectorFilmography(DirectorName=FetchMovieDetails(title='Dunkirk').director))",
        "Index": 867
    },
    {
        "APIs": [
            {
                "name": "GetBookGenre",
                "Description": "This API is to get the genre of a book.",
                "input_params": {
                    "bookTitle": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bookGenre": {
                        "description": "the genre of the book",
                        "type": "String"
                    }
                },
                "format": "GetBookGenre(bookTitle) -> bookGenre"
            },
            {
                "name": "GetAuthorDetails",
                "Description": "This API is to get the details of the author of a book.",
                "input_params": {
                    "bookTitle": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "authorDetails": {
                        "description": "the details of the author",
                        "type": "String"
                    }
                },
                "format": "GetAuthorDetails(bookTitle) -> authorDetails"
            },
            {
                "name": "GetSimilarBooks",
                "Description": "This API is to get similar books based on book genre and author details.",
                "input_params": {
                    "BookGenre": {
                        "description": "the genre of the book",
                        "type": "String"
                    },
                    "AuthorDetails": {
                        "description": "the details of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "similarBooks": {
                        "description": "a list of similar books",
                        "type": "List"
                    }
                },
                "format": "GetSimilarBooks(BookGenre, AuthorDetails) -> similarBooks"
            }
        ],
        "Query": "I just finished reading 'Harry Potter and the Order of the Phoenix', could you suggest some similar books for me to read?",
        "Label": "GetSimilarBooks(BookGenre=GetBookGenre(bookTitle='Harry Potter and the Order of the Phoenix'), AuthorDetails=GetAuthorDetails(bookTitle='Harry Potter and the Order of the Phoenix'))",
        "Index": 868
    },
    {
        "APIs": [
            {
                "name": "GetBookGenre",
                "Description": "This API is to get the genre of a book.",
                "input_params": {
                    "bookTitle": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bookGenre": {
                        "description": "the genre of the book",
                        "type": "String"
                    }
                },
                "format": "GetBookGenre(bookTitle) -> bookGenre"
            },
            {
                "name": "GetAuthorDetails",
                "Description": "This API is to get the details of the author of a book.",
                "input_params": {
                    "bookTitle": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "authorDetails": {
                        "description": "the details of the author",
                        "type": "String"
                    }
                },
                "format": "GetAuthorDetails(bookTitle) -> authorDetails"
            },
            {
                "name": "GetSimilarBooks",
                "Description": "This API is to get similar books based on book genre and author details.",
                "input_params": {
                    "BookGenre": {
                        "description": "the genre of the book",
                        "type": "String"
                    },
                    "AuthorDetails": {
                        "description": "the details of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "similarBooks": {
                        "description": "a list of similar books",
                        "type": "List"
                    }
                },
                "format": "GetSimilarBooks(BookGenre, AuthorDetails) -> similarBooks"
            }
        ],
        "Query": "I just finished reading 'To Kill a Mockingbird', could you suggest some similar books for me to read?",
        "Label": "GetSimilarBooks(BookGenre=GetBookGenre(bookTitle='To Kill a Mockingbird'), AuthorDetails=GetAuthorDetails(bookTitle='To Kill a Mockingbird'))",
        "Index": 869
    },
    {
        "APIs": [
            {
                "name": "GetBookGenre",
                "Description": "This API is to get the genre of a book.",
                "input_params": {
                    "bookTitle": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bookGenre": {
                        "description": "the genre of the book",
                        "type": "String"
                    }
                },
                "format": "GetBookGenre(bookTitle) -> bookGenre"
            },
            {
                "name": "GetAuthorDetails",
                "Description": "This API is to get the details of the author of a book.",
                "input_params": {
                    "bookTitle": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "authorDetails": {
                        "description": "the details of the author",
                        "type": "String"
                    }
                },
                "format": "GetAuthorDetails(bookTitle) -> authorDetails"
            },
            {
                "name": "GetSimilarBooks",
                "Description": "This API is to get similar books based on book genre and author details.",
                "input_params": {
                    "BookGenre": {
                        "description": "the genre of the book",
                        "type": "String"
                    },
                    "AuthorDetails": {
                        "description": "the details of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "similarBooks": {
                        "description": "a list of similar books",
                        "type": "List"
                    }
                },
                "format": "GetSimilarBooks(BookGenre, AuthorDetails) -> similarBooks"
            }
        ],
        "Query": "I just finished reading 'The Lord of the Rings', could you suggest some similar books for me to read?",
        "Label": "GetSimilarBooks(BookGenre=GetBookGenre(bookTitle='The Lord of the Rings'), AuthorDetails=GetAuthorDetails(bookTitle='The Lord of the Rings'))",
        "Index": 870
    },
    {
        "APIs": [
            {
                "name": "GetBookGenre",
                "Description": "This API is to get the genre of a book.",
                "input_params": {
                    "bookTitle": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bookGenre": {
                        "description": "the genre of the book",
                        "type": "String"
                    }
                },
                "format": "GetBookGenre(bookTitle) -> bookGenre"
            },
            {
                "name": "GetAuthorDetails",
                "Description": "This API is to get the details of the author of a book.",
                "input_params": {
                    "bookTitle": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "authorDetails": {
                        "description": "the details of the author",
                        "type": "String"
                    }
                },
                "format": "GetAuthorDetails(bookTitle) -> authorDetails"
            },
            {
                "name": "GetSimilarBooks",
                "Description": "This API is to get similar books based on book genre and author details.",
                "input_params": {
                    "BookGenre": {
                        "description": "the genre of the book",
                        "type": "String"
                    },
                    "AuthorDetails": {
                        "description": "the details of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "similarBooks": {
                        "description": "a list of similar books",
                        "type": "List"
                    }
                },
                "format": "GetSimilarBooks(BookGenre, AuthorDetails) -> similarBooks"
            }
        ],
        "Query": "I just finished reading 'The Lord of the Rings', could you suggest some similar books for me to read?",
        "Label": "GetSimilarBooks(BookGenre=GetBookGenre(bookTitle='The Lord of the Rings'), AuthorDetails=GetAuthorDetails(bookTitle='The Lord of the Rings'))",
        "Index": 871
    },
    {
        "APIs": [
            {
                "name": "CheckInventory",
                "Description": "This API is to check the inventory status of a product.",
                "input_params": {
                    "productID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "InventoryStatus": {
                        "description": "the inventory status of the product",
                        "type": "String"
                    }
                },
                "format": "CheckInventory(productID) -> InventoryStatus"
            },
            {
                "name": "EstimateDeliveryTime",
                "Description": "This API is to estimate the delivery time of a product to a specific location.",
                "input_params": {
                    "productID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "location": {
                        "description": "the location where the product will be delivered",
                        "type": "String"
                    }
                },
                "output_params": {
                    "DeliveryTime": {
                        "description": "the estimated delivery time of the product",
                        "type": "String"
                    }
                },
                "format": "EstimateDeliveryTime(productID, location) -> DeliveryTime"
            },
            {
                "name": "CalculateShippingCost",
                "Description": "This API is to calculate the shipping cost of a product to a specific location.",
                "input_params": {
                    "productID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "location": {
                        "description": "the location where the product will be delivered",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ShippingCost": {
                        "description": "the calculated shipping cost of the product",
                        "type": "Float"
                    }
                },
                "format": "CalculateShippingCost(productID, location) -> ShippingCost"
            },
            {
                "name": "PlaceOrder",
                "Description": "This API is to place an order for a product with the specified inventory status, delivery time, and shipping cost.",
                "input_params": {
                    "InventoryStatus": {
                        "description": "the inventory status of the product",
                        "type": "String"
                    },
                    "DeliveryTime": {
                        "description": "the estimated delivery time of the product",
                        "type": "String"
                    },
                    "ShippingCost": {
                        "description": "the calculated shipping cost of the product",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "OrderStatus": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(InventoryStatus, DeliveryTime, ShippingCost) -> OrderStatus"
            }
        ],
        "Query": "I would like to purchase a new laptop, product ID 6789, and have it shipped to my house in California. Can you assist me with this?",
        "Label": "PlaceOrder(InventoryStatus=CheckInventory(productID='6789'), DeliveryTime=EstimateDeliveryTime(productID='6789', location='California'), ShippingCost=CalculateShippingCost(productID='6789', location='California'))",
        "Index": 872
    },
    {
        "APIs": [
            {
                "name": "CheckInventory",
                "Description": "This API is to check the inventory status of a product.",
                "input_params": {
                    "productID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "InventoryStatus": {
                        "description": "the inventory status of the product",
                        "type": "String"
                    }
                },
                "format": "CheckInventory(productID) -> InventoryStatus"
            },
            {
                "name": "EstimateDeliveryTime",
                "Description": "This API is to estimate the delivery time of a product to a specific location.",
                "input_params": {
                    "productID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "location": {
                        "description": "the location for delivery",
                        "type": "String"
                    }
                },
                "output_params": {
                    "DeliveryTime": {
                        "description": "the estimated delivery time",
                        "type": "String"
                    }
                },
                "format": "EstimateDeliveryTime(productID, location) -> DeliveryTime"
            },
            {
                "name": "CalculateShippingCost",
                "Description": "This API is to calculate the shipping cost of a product to a specific location.",
                "input_params": {
                    "productID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "location": {
                        "description": "the location for delivery",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ShippingCost": {
                        "description": "the calculated shipping cost",
                        "type": "Float"
                    }
                },
                "format": "CalculateShippingCost(productID, location) -> ShippingCost"
            },
            {
                "name": "PlaceOrder",
                "Description": "This API is to place an order for a product.",
                "input_params": {
                    "InventoryStatus": {
                        "description": "the inventory status of the product",
                        "type": "String"
                    },
                    "DeliveryTime": {
                        "description": "the estimated delivery time",
                        "type": "String"
                    },
                    "ShippingCost": {
                        "description": "the calculated shipping cost",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "OrderStatus": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(InventoryStatus, DeliveryTime, ShippingCost) -> OrderStatus"
            }
        ],
        "Query": "I'm interested in ordering a new refrigerator, product ID 54321, to be delivered to my home in Texas. Can you help me with this?",
        "Label": "PlaceOrder(InventoryStatus=CheckInventory(productID='54321'), DeliveryTime=EstimateDeliveryTime(productID='54321', location='Texas'), ShippingCost=CalculateShippingCost(productID='54321', location='Texas'))",
        "Index": 873
    },
    {
        "APIs": [
            {
                "name": "CheckInventory",
                "Description": "This API is to check the inventory status of a product.",
                "input_params": {
                    "productID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "inventory_status": {
                        "description": "the status of the product inventory",
                        "type": "String"
                    }
                },
                "format": "CheckInventory(productID) -> inventory_status"
            },
            {
                "name": "EstimateDeliveryTime",
                "Description": "This API is to estimate the delivery time of a product to a specific location.",
                "input_params": {
                    "productID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "location": {
                        "description": "the location where the product will be delivered",
                        "type": "String"
                    }
                },
                "output_params": {
                    "delivery_time": {
                        "description": "the estimated delivery time",
                        "type": "Time"
                    }
                },
                "format": "EstimateDeliveryTime(productID, location) -> delivery_time"
            },
            {
                "name": "CalculateShippingCost",
                "Description": "This API is to calculate the shipping cost of a product to a specific location.",
                "input_params": {
                    "productID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "location": {
                        "description": "the location where the product will be delivered",
                        "type": "String"
                    }
                },
                "output_params": {
                    "shipping_cost": {
                        "description": "the calculated shipping cost",
                        "type": "Float"
                    }
                },
                "format": "CalculateShippingCost(productID, location) -> shipping_cost"
            },
            {
                "name": "PlaceOrder",
                "Description": "This API is to place an order for a product.",
                "input_params": {
                    "InventoryStatus": {
                        "description": "the inventory status of the product",
                        "type": "String"
                    },
                    "DeliveryTime": {
                        "description": "the estimated delivery time of the product",
                        "type": "Time"
                    },
                    "ShippingCost": {
                        "description": "the calculated shipping cost of the product",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(InventoryStatus, DeliveryTime, ShippingCost) -> order_status"
            }
        ],
        "Query": "Can you help me order a new gaming console, product ID 7890, to my apartment in Florida?",
        "Label": "PlaceOrder(InventoryStatus=CheckInventory(productID='7890'), DeliveryTime=EstimateDeliveryTime(productID='7890', location='Florida'), ShippingCost=CalculateShippingCost(productID='7890', location='Florida'))",
        "Index": 874
    },
    {
        "APIs": [
            {
                "name": "CheckInventory",
                "Description": "This API is to check the inventory status of a product.",
                "input_params": {
                    "productID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "InventoryStatus": {
                        "description": "the inventory status of the product",
                        "type": "String"
                    }
                },
                "format": "CheckInventory(productID) -> InventoryStatus"
            },
            {
                "name": "EstimateDeliveryTime",
                "Description": "This API is to estimate the delivery time of a product to a specific location.",
                "input_params": {
                    "productID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "location": {
                        "description": "the location where the product will be shipped",
                        "type": "String"
                    }
                },
                "output_params": {
                    "DeliveryTime": {
                        "description": "the estimated delivery time of the product",
                        "type": "String"
                    }
                },
                "format": "EstimateDeliveryTime(productID, location) -> DeliveryTime"
            },
            {
                "name": "CalculateShippingCost",
                "Description": "This API is to calculate the shipping cost of a product to a specific location.",
                "input_params": {
                    "productID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "location": {
                        "description": "the location where the product will be shipped",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ShippingCost": {
                        "description": "the calculated shipping cost of the product",
                        "type": "Float"
                    }
                },
                "format": "CalculateShippingCost(productID, location) -> ShippingCost"
            },
            {
                "name": "PlaceOrder",
                "Description": "This API is to place an order for a product with the specified inventory status, delivery time, and shipping cost.",
                "input_params": {
                    "InventoryStatus": {
                        "description": "the inventory status of the product",
                        "type": "String"
                    },
                    "DeliveryTime": {
                        "description": "the estimated delivery time of the product",
                        "type": "String"
                    },
                    "ShippingCost": {
                        "description": "the calculated shipping cost of the product",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "OrderStatus": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(InventoryStatus, DeliveryTime, ShippingCost) -> OrderStatus"
            }
        ],
        "Query": "I want to purchase a new dishwasher, product ID 9876, and ship it to my home in Pennsylvania. Can you assist me with this?",
        "Label": "PlaceOrder(InventoryStatus=CheckInventory(productID='9876'), DeliveryTime=EstimateDeliveryTime(productID='9876', location='Pennsylvania'), ShippingCost=CalculateShippingCost(productID='9876', location='Pennsylvania'))",
        "Index": 875
    },
    {
        "APIs": [
            {
                "name": "FindFlight",
                "Description": "This API is to find a flight from a start point to an end point.",
                "input_params": {
                    "startPoint": {
                        "description": "the starting point of the flight",
                        "type": "String"
                    },
                    "endPoint": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight": {
                        "description": "the flight details",
                        "type": "Object"
                    }
                },
                "format": "FindFlight(startPoint, endPoint) -> flight"
            },
            {
                "name": "CheckLuggageAllowance",
                "Description": "This API is to check the luggage allowance for a flight.",
                "input_params": {
                    "flight": {
                        "description": "the flight details",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "luggage": {
                        "description": "the luggage allowance for the flight",
                        "type": "Object"
                    }
                },
                "format": "CheckLuggageAllowance(flight) -> luggage"
            },
            {
                "name": "GetLuggageFee",
                "Description": "This API is to calculate the luggage fee based on the luggage allowance and weight.",
                "input_params": {
                    "luggage": {
                        "description": "the luggage allowance for the flight",
                        "type": "Object"
                    },
                    "weight": {
                        "description": "the weight of the luggage",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "fee": {
                        "description": "the luggage fee",
                        "type": "Float"
                    }
                },
                "format": "GetLuggageFee(luggage, weight) -> fee"
            }
        ],
        "Query": "I have a flight from Rome to Berlin and I am carrying 40kg of luggage. How much should I pay for it?",
        "Label": "GetLuggageFee(luggage=CheckLuggageAllowance(flight=FindFlight(startPoint='Rome', endPoint='Berlin')), weight=40)",
        "Index": 876
    },
    {
        "APIs": [
            {
                "name": "GetHotelRoomRate",
                "Description": "This API is to get the room rate for a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "roomRate": {
                        "description": "the cost of accommodation in the city",
                        "type": "Float"
                    }
                },
                "format": "GetHotelRoomRate(city) -> roomRate"
            },
            {
                "name": "GetMealCost",
                "Description": "This API is to get the cost of meals for a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "mealCost": {
                        "description": "the cost of meals in the city",
                        "type": "Float"
                    }
                },
                "format": "GetMealCost(city) -> mealCost"
            },
            {
                "name": "GetSightSeeingCost",
                "Description": "This API is to get the cost of sightseeing attractions for a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "sightSeeingCost": {
                        "description": "the cost of sightseeing attractions in the city",
                        "type": "Float"
                    }
                },
                "format": "GetSightSeeingCost(city) -> sightSeeingCost"
            },
            {
                "name": "CalculateVacationCost",
                "Description": "This API is to calculate the total cost of a vacation including accommodation, food, and tourist attractions.",
                "input_params": {
                    "roomRate": {
                        "description": "the cost of accommodation",
                        "type": "Float"
                    },
                    "mealCost": {
                        "description": "the cost of meals",
                        "type": "Float"
                    },
                    "sightSeeingCost": {
                        "description": "the cost of sightseeing attractions",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "totalCost": {
                        "description": "the total cost of the vacation",
                        "type": "Float"
                    }
                },
                "format": "CalculateVacationCost(roomRate, mealCost, sightSeeingCost) -> totalCost"
            }
        ],
        "Query": "I'm thinking of taking a trip to New York. How much will it cost for accommodation, food, and tourist attractions?",
        "Label": "CalculateVacationCost(roomRate=GetHotelRoomRate(city='New York'), mealCost=GetMealCost(city='New York'), sightSeeingCost=GetSightSeeingCost(city='New York'))",
        "Index": 877
    },
    {
        "APIs": [
            {
                "name": "GetHotelRoomRate",
                "Description": "This API is to get the room rate for a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "roomRate": {
                        "description": "the rate of hotel rooms in the city",
                        "type": "Float"
                    }
                },
                "format": "GetHotelRoomRate(city) -> roomRate"
            },
            {
                "name": "GetMealCost",
                "Description": "This API is to get the cost of meals in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "mealCost": {
                        "description": "the cost of meals in the city",
                        "type": "Float"
                    }
                },
                "format": "GetMealCost(city) -> mealCost"
            },
            {
                "name": "GetSightSeeingCost",
                "Description": "This API is to get the cost of sightseeing in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "sightSeeingCost": {
                        "description": "the cost of sightseeing in the city",
                        "type": "Float"
                    }
                },
                "format": "GetSightSeeingCost(city) -> sightSeeingCost"
            },
            {
                "name": "CalculateVacationCost",
                "Description": "This API is to calculate the total cost of a vacation.",
                "input_params": {
                    "roomRate": {
                        "description": "the rate of hotel rooms",
                        "type": "Float"
                    },
                    "mealCost": {
                        "description": "the cost of meals",
                        "type": "Float"
                    },
                    "sightSeeingCost": {
                        "description": "the cost of sightseeing",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "totalCost": {
                        "description": "the total cost of the vacation",
                        "type": "Float"
                    }
                },
                "format": "CalculateVacationCost(roomRate, mealCost, sightSeeingCost) -> totalCost"
            }
        ],
        "Query": "I plan to holiday in London. What are the charges for hotels, meals and tourist spots?",
        "Label": "CalculateVacationCost(roomRate=GetHotelRoomRate(city='London'), mealCost=GetMealCost(city='London'), sightSeeingCost=GetSightSeeingCost(city='London'))",
        "Index": 878
    },
    {
        "APIs": [
            {
                "name": "GetHotelRoomRate",
                "Description": "This API is to get the room rate for a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "roomRate": {
                        "description": "the rate of the hotel room",
                        "type": "Float"
                    }
                },
                "format": "GetHotelRoomRate(city) -> roomRate"
            },
            {
                "name": "GetMealCost",
                "Description": "This API is to get the cost of meals for a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "mealCost": {
                        "description": "the cost of meals",
                        "type": "Float"
                    }
                },
                "format": "GetMealCost(city) -> mealCost"
            },
            {
                "name": "GetSightSeeingCost",
                "Description": "This API is to get the cost of sightseeing for a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "sightSeeingCost": {
                        "description": "the cost of sightseeing",
                        "type": "Float"
                    }
                },
                "format": "GetSightSeeingCost(city) -> sightSeeingCost"
            },
            {
                "name": "CalculateVacationCost",
                "Description": "This API is to calculate the total cost of a vacation.",
                "input_params": {
                    "roomRate": {
                        "description": "the rate of the hotel room",
                        "type": "Float"
                    },
                    "mealCost": {
                        "description": "the cost of meals",
                        "type": "Float"
                    },
                    "sightSeeingCost": {
                        "description": "the cost of sightseeing",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "totalCost": {
                        "description": "the total cost of the vacation",
                        "type": "Float"
                    }
                },
                "format": "CalculateVacationCost(roomRate, mealCost, sightSeeingCost) -> totalCost"
            }
        ],
        "Query": "I'm planning a getaway to Rome. Can you tell me the costs for lodging, dinners, and sightseeing?",
        "Label": "CalculateVacationCost(roomRate=GetHotelRoomRate(city='Rome'), mealCost=GetMealCost(city='Rome'), sightSeeingCost=GetSightSeeingCost(city='Rome'))",
        "Index": 879
    },
    {
        "APIs": [
            {
                "name": "GetHotelRoomRate",
                "Description": "This API is to get the room rate for a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "roomRate": {
                        "description": "the rate of the hotel room",
                        "type": "Float"
                    }
                },
                "format": "GetHotelRoomRate(city) -> roomRate"
            },
            {
                "name": "GetMealCost",
                "Description": "This API is to get the cost of meals for a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "mealCost": {
                        "description": "the cost of meals",
                        "type": "Float"
                    }
                },
                "format": "GetMealCost(city) -> mealCost"
            },
            {
                "name": "GetSightSeeingCost",
                "Description": "This API is to get the cost of sightseeing for a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "sightSeeingCost": {
                        "description": "the cost of sightseeing",
                        "type": "Float"
                    }
                },
                "format": "GetSightSeeingCost(city) -> sightSeeingCost"
            },
            {
                "name": "CalculateVacationCost",
                "Description": "This API is to calculate the total cost of a vacation.",
                "input_params": {
                    "roomRate": {
                        "description": "the rate of the hotel room",
                        "type": "Float"
                    },
                    "mealCost": {
                        "description": "the cost of meals",
                        "type": "Float"
                    },
                    "sightSeeingCost": {
                        "description": "the cost of sightseeing",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "totalCost": {
                        "description": "the total cost of the vacation",
                        "type": "Float"
                    }
                },
                "format": "CalculateVacationCost(roomRate, mealCost, sightSeeingCost) -> totalCost"
            }
        ],
        "Query": "I'm planning a getaway to Rome. Can you tell me the costs for lodging, dinners, and sightseeing?",
        "Label": "CalculateVacationCost(roomRate=GetHotelRoomRate(city='Rome'), mealCost=GetMealCost(city='Rome'), sightSeeingCost=GetSightSeeingCost(city='Rome'))",
        "Index": 880
    },
    {
        "APIs": [
            {
                "name": "GetHotelRoomRate",
                "Description": "This API is to get the room rate of a hotel in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "roomRate": {
                        "description": "the rate of the hotel room",
                        "type": "Float"
                    }
                },
                "format": "GetHotelRoomRate(city) -> roomRate"
            },
            {
                "name": "GetMealCost",
                "Description": "This API is to get the cost of meals in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "mealCost": {
                        "description": "the cost of meals",
                        "type": "Float"
                    }
                },
                "format": "GetMealCost(city) -> mealCost"
            },
            {
                "name": "GetSightSeeingCost",
                "Description": "This API is to get the cost of sightseeing in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "sightSeeingCost": {
                        "description": "the cost of sightseeing",
                        "type": "Float"
                    }
                },
                "format": "GetSightSeeingCost(city) -> sightSeeingCost"
            },
            {
                "name": "CalculateVacationCost",
                "Description": "This API is to calculate the total cost of a vacation including room rate, meal cost, and sightseeing cost.",
                "input_params": {
                    "roomRate": {
                        "description": "the rate of the hotel room",
                        "type": "Float"
                    },
                    "mealCost": {
                        "description": "the cost of meals",
                        "type": "Float"
                    },
                    "sightSeeingCost": {
                        "description": "the cost of sightseeing",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "totalCost": {
                        "description": "the total cost of the vacation",
                        "type": "Float"
                    }
                },
                "format": "CalculateVacationCost(roomRate, mealCost, sightSeeingCost) -> totalCost"
            }
        ],
        "Query": "I'm intending to vacation in Sydney. How much will the stay, food, and tourism sites cost me?",
        "Label": "CalculateVacationCost(roomRate=GetHotelRoomRate(city='Sydney'), mealCost=GetMealCost(city='Sydney'), sightSeeingCost=GetSightSeeingCost(city='Sydney'))",
        "Index": 881
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast for a specific city and date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the weather forecast for the specified city and date",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather_forecast"
            },
            {
                "name": "GetSuitableClothing",
                "Description": "This API is to get suitable clothing based on the weather forecast.",
                "input_params": {
                    "weatherForecast": {
                        "description": "the weather forecast for determining suitable clothing",
                        "type": "String"
                    }
                },
                "output_params": {
                    "suitable_clothing": {
                        "description": "the suitable clothing based on the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetSuitableClothing(weatherForecast) -> suitable_clothing"
            },
            {
                "name": "GetPackingList",
                "Description": "This API is to get a packing list for a trip.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the trip",
                        "type": "String"
                    },
                    "clothing": {
                        "description": "the suitable clothing for the trip",
                        "type": "String"
                    },
                    "days": {
                        "description": "the number of days for the trip",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "packing_list": {
                        "description": "the packing list for the trip",
                        "type": "String"
                    }
                },
                "format": "GetPackingList(destination, clothing, days) -> packing_list"
            }
        ],
        "Query": "I am planning a 7-day trip to New York next month, what should I bring with me?",
        "Label": "GetPackingList(destination='New York', clothing=GetSuitableClothing(weatherForecast=GetWeatherForecast(city='New York', date='next month')), days=7)",
        "Index": 882
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast for a specific city and date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weatherForecast": {
                        "description": "the weather forecast for the specified city and date",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weatherForecast"
            },
            {
                "name": "GetSuitableClothing",
                "Description": "This API is to get suitable clothing based on the weather forecast.",
                "input_params": {
                    "weatherForecast": {
                        "description": "the weather forecast for determining suitable clothing",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing": {
                        "description": "the suitable clothing based on the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetSuitableClothing(weatherForecast) -> clothing"
            },
            {
                "name": "GetPackingList",
                "Description": "This API is to get a packing list for a vacation.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the vacation",
                        "type": "String"
                    },
                    "clothing": {
                        "description": "the suitable clothing for the vacation",
                        "type": "String"
                    },
                    "days": {
                        "description": "the number of days for the vacation",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "packingList": {
                        "description": "the packing list for the vacation",
                        "type": "String"
                    }
                },
                "format": "GetPackingList(destination, clothing, days) -> packingList"
            }
        ],
        "Query": "Tell me what to pack for my 10-day vacation in Los Angeles that is happening in two weeks.",
        "Label": "GetPackingList(destination='Los Angeles', clothing=GetSuitableClothing(weatherForecast=GetWeatherForecast(city='Los Angeles', date='in two weeks')), days=10)",
        "Index": 883
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast for a specific city and date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the weather forecast for the specified city and date",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather_forecast"
            },
            {
                "name": "GetSuitableClothing",
                "Description": "This API is to get suitable clothing based on the weather forecast.",
                "input_params": {
                    "weatherForecast": {
                        "description": "the weather forecast for determining suitable clothing",
                        "type": "String"
                    }
                },
                "output_params": {
                    "suitable_clothing": {
                        "description": "the suitable clothing based on the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetSuitableClothing(weatherForecast) -> suitable_clothing"
            },
            {
                "name": "GetPackingList",
                "Description": "This API is to get a packing list for a specific destination and duration.",
                "input_params": {
                    "destination": {
                        "description": "the name of the destination",
                        "type": "String"
                    },
                    "clothing": {
                        "description": "the suitable clothing for the destination",
                        "type": "String"
                    },
                    "days": {
                        "description": "the duration of the trip in days",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "packing_list": {
                        "description": "the packing list for the specified destination and duration",
                        "type": "List"
                    }
                },
                "format": "GetPackingList(destination, clothing, days) -> packing_list"
            }
        ],
        "Query": "I'm off to Chicago for a 3-day conference next weekend, what should I pack?",
        "Label": "GetPackingList(destination='Chicago', clothing=GetSuitableClothing(weatherForecast=GetWeatherForecast(city='Chicago', date='next weekend')), days=3)",
        "Index": 884
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast for a specific city and date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the weather forecast for the specified city and date",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather_forecast"
            },
            {
                "name": "GetSuitableClothing",
                "Description": "This API is to get suitable clothing based on the weather forecast.",
                "input_params": {
                    "weatherForecast": {
                        "description": "the weather forecast for determining suitable clothing",
                        "type": "String"
                    }
                },
                "output_params": {
                    "suitable_clothing": {
                        "description": "the suitable clothing based on the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetSuitableClothing(weatherForecast) -> suitable_clothing"
            },
            {
                "name": "GetPackingList",
                "Description": "This API is to get a packing list for a specific destination, clothing, and duration of the trip.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the trip",
                        "type": "String"
                    },
                    "clothing": {
                        "description": "the suitable clothing for the trip",
                        "type": "String"
                    },
                    "days": {
                        "description": "the duration of the trip in days",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "packing_list": {
                        "description": "the packing list for the specified destination, clothing, and duration of the trip",
                        "type": "String"
                    }
                },
                "format": "GetPackingList(destination, clothing, days) -> packing_list"
            }
        ],
        "Query": "I'm off to Chicago for a 3-day conference next weekend, what should I pack?",
        "Label": "GetPackingList(destination='Chicago', clothing=GetSuitableClothing(weatherForecast=GetWeatherForecast(city='Chicago', date='next weekend')), days=3)",
        "Index": 885
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast for a specific city and date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the weather forecast for the specified city and date",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather_forecast"
            },
            {
                "name": "GetSuitableClothing",
                "Description": "This API is to get suitable clothing based on the weather forecast.",
                "input_params": {
                    "weatherForecast": {
                        "description": "the weather forecast for determining suitable clothing",
                        "type": "String"
                    }
                },
                "output_params": {
                    "suitable_clothing": {
                        "description": "the suitable clothing based on the weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetSuitableClothing(weatherForecast) -> suitable_clothing"
            },
            {
                "name": "GetPackingList",
                "Description": "This API is to get a packing list for a trip.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the trip",
                        "type": "String"
                    },
                    "clothing": {
                        "description": "the suitable clothing for the trip",
                        "type": "String"
                    },
                    "days": {
                        "description": "the number of days for the trip",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "packing_list": {
                        "description": "the packing list for the trip",
                        "type": "String"
                    }
                },
                "format": "GetPackingList(destination, clothing, days) -> packing_list"
            }
        ],
        "Query": "What should I carry for my 2-week trip to Miami starting this weekend?",
        "Label": "GetPackingList(destination='Miami', clothing=GetSuitableClothing(weatherForecast=GetWeatherForecast(city='Miami', date='this weekend')), days=14)",
        "Index": 886
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast for a specific city and date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which the weather forecast is required",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weatherForecast": {
                        "description": "the weather forecast for the specified city and date",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weatherForecast"
            },
            {
                "name": "FindOutdoorActivities",
                "Description": "This API is to find outdoor activities in a specific city based on the weather forecast.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "weatherForecast": {
                        "description": "the weather forecast for the specified city and date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activities": {
                        "description": "a list of outdoor activities based on the weather forecast",
                        "type": "List"
                    }
                },
                "format": "FindOutdoorActivities(city, weatherForecast) -> activities"
            },
            {
                "name": "FindRestaurants",
                "Description": "This API is to find restaurants in a specific city based on the cuisine type.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "cuisineType": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurants": {
                        "description": "a list of restaurants based on the cuisine type",
                        "type": "List"
                    }
                },
                "format": "FindRestaurants(city, cuisineType) -> restaurants"
            },
            {
                "name": "PlanDayOut",
                "Description": "This API is to plan a day out in a specific city with outdoor activities and a restaurant.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "activities": {
                        "description": "a list of outdoor activities",
                        "type": "List"
                    },
                    "restaurants": {
                        "description": "a list of restaurants",
                        "type": "List"
                    }
                },
                "output_params": {
                    "plan": {
                        "description": "a plan for a day out with outdoor activities and a restaurant",
                        "type": "String"
                    }
                },
                "format": "PlanDayOut(city, activities, restaurants) -> plan"
            }
        ],
        "Query": "I plan to travel to London this Friday, could you recommend some outdoor activities and a Chinese restaurant for me based on the weather?",
        "Label": "PlanDayOut(city='London', activities=FindOutdoorActivities(city='London', weatherForecast=GetWeatherForecast(city='London', date='this Friday')), restaurants=FindRestaurants(city='London', cuisineType='Chinese'))",
        "Index": 887
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast for a specific city and date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which the weather forecast is required",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weatherForecast": {
                        "description": "the weather forecast for the specified city and date",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weatherForecast"
            },
            {
                "name": "FindOutdoorActivities",
                "Description": "This API is to find outdoor activities in a specific city based on the weather forecast.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "weatherForecast": {
                        "description": "the weather forecast for the specified city and date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activities": {
                        "description": "a list of outdoor activities based on the weather forecast",
                        "type": "List"
                    }
                },
                "format": "FindOutdoorActivities(city, weatherForecast) -> activities"
            },
            {
                "name": "FindRestaurants",
                "Description": "This API is to find restaurants in a specific city based on the cuisine type.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "cuisineType": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurants": {
                        "description": "a list of restaurants based on the cuisine type",
                        "type": "List"
                    }
                },
                "format": "FindRestaurants(city, cuisineType) -> restaurants"
            },
            {
                "name": "PlanDayOut",
                "Description": "This API is to plan a day out in a specific city with outdoor activities and a restaurant.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "activities": {
                        "description": "a list of outdoor activities",
                        "type": "List"
                    },
                    "restaurants": {
                        "description": "a list of restaurants",
                        "type": "List"
                    }
                },
                "output_params": {
                    "plan": {
                        "description": "a plan for the day out with outdoor activities and a restaurant",
                        "type": "String"
                    }
                },
                "format": "PlanDayOut(city, activities, restaurants) -> plan"
            }
        ],
        "Query": "I'm going to visit Toronto this Wednesday, can you suggest some outdoor activities and an Italian restaurant for me depending on the weather?",
        "Label": "PlanDayOut(city='Toronto', activities=FindOutdoorActivities(city='Toronto', weatherForecast=GetWeatherForecast(city='Toronto', date='this Wednesday')), restaurants=FindRestaurants(city='Toronto', cuisineType='Italian'))",
        "Index": 888
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast for a specific city and date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which the weather forecast is needed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weatherForecast": {
                        "description": "the weather forecast for the specified city and date",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weatherForecast"
            },
            {
                "name": "FindOutdoorActivities",
                "Description": "This API is to find outdoor activities in a specific city based on the weather forecast.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "weatherForecast": {
                        "description": "the weather forecast for the specified city and date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activities": {
                        "description": "a list of outdoor activities based on the weather forecast",
                        "type": "List"
                    }
                },
                "format": "FindOutdoorActivities(city, weatherForecast) -> activities"
            },
            {
                "name": "FindRestaurants",
                "Description": "This API is to find restaurants in a specific city based on the cuisine type.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "cuisineType": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurants": {
                        "description": "a list of restaurants based on the cuisine type",
                        "type": "List"
                    }
                },
                "format": "FindRestaurants(city, cuisineType) -> restaurants"
            },
            {
                "name": "PlanDayOut",
                "Description": "This API is to plan a day out in a specific city with outdoor activities and a restaurant.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "activities": {
                        "description": "a list of outdoor activities",
                        "type": "List"
                    },
                    "restaurants": {
                        "description": "a list of restaurants",
                        "type": "List"
                    }
                },
                "output_params": {
                    "plan": {
                        "description": "a plan for the day out with outdoor activities and a restaurant",
                        "type": "String"
                    }
                },
                "format": "PlanDayOut(city, activities, restaurants) -> plan"
            }
        ],
        "Query": "I'm going to visit Toronto this Wednesday, can you suggest some outdoor activities and an Italian restaurant for me depending on the weather?",
        "Label": "PlanDayOut(city='Toronto', activities=FindOutdoorActivities(city='Toronto', weatherForecast=GetWeatherForecast(city='Toronto', date='this Wednesday')), restaurants=FindRestaurants(city='Toronto', cuisineType='Italian'))",
        "Index": 889
    },
    {
        "APIs": [
            {
                "name": "GetPopulation",
                "Description": "This API is to get the population of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "population": {
                        "description": "the population of the location",
                        "type": "Integer"
                    }
                },
                "format": "GetPopulation(location) -> population"
            },
            {
                "name": "GetActiveCases",
                "Description": "This API is to get the number of active COVID-19 cases in a specific location.",
                "input_params": {
                    "location": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activeCases": {
                        "description": "the number of active COVID-19 cases in the location",
                        "type": "Integer"
                    }
                },
                "format": "GetActiveCases(location) -> activeCases"
            },
            {
                "name": "CalculateInfectionRate",
                "Description": "This API is to calculate the COVID-19 infection rate.",
                "input_params": {
                    "population": {
                        "description": "the population of the location",
                        "type": "Integer"
                    },
                    "activeCases": {
                        "description": "the number of active COVID-19 cases in the location",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "infectionRate": {
                        "description": "the current COVID-19 infection rate",
                        "type": "Float"
                    }
                },
                "format": "CalculateInfectionRate(population, activeCases) -> infectionRate"
            }
        ],
        "Query": "What is the current COVID-19 infection rate in Tokyo?",
        "Label": "CalculateInfectionRate(population=GetPopulation(location='Tokyo'), activeCases=GetActiveCases(location='Tokyo'))",
        "Index": 890
    },
    {
        "APIs": [
            {
                "name": "GetPopulation",
                "Description": "This API is to get the population of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "population": {
                        "description": "the population of the location",
                        "type": "Integer"
                    }
                },
                "format": "GetPopulation(location) -> population"
            },
            {
                "name": "GetActiveCases",
                "Description": "This API is to get the number of active COVID-19 cases in a specific location.",
                "input_params": {
                    "location": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activeCases": {
                        "description": "the number of active COVID-19 cases in the location",
                        "type": "Integer"
                    }
                },
                "format": "GetActiveCases(location) -> activeCases"
            },
            {
                "name": "CalculateInfectionRate",
                "Description": "This API is to calculate the COVID-19 infection rate.",
                "input_params": {
                    "population": {
                        "description": "the population of the location",
                        "type": "Integer"
                    },
                    "activeCases": {
                        "description": "the number of active COVID-19 cases in the location",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "infectionRate": {
                        "description": "the current COVID-19 infection rate",
                        "type": "Float"
                    }
                },
                "format": "CalculateInfectionRate(population, activeCases) -> infectionRate"
            }
        ],
        "Query": "What is the current COVID-19 infection rate in London?",
        "Label": "CalculateInfectionRate(population=GetPopulation(location='London'), activeCases=GetActiveCases(location='London'))",
        "Index": 891
    },
    {
        "APIs": [
            {
                "name": "GetPopulation",
                "Description": "This API is to get the population of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "population": {
                        "description": "the population of the location",
                        "type": "Integer"
                    }
                },
                "format": "GetPopulation(location) -> population"
            },
            {
                "name": "GetActiveCases",
                "Description": "This API is to get the number of active COVID-19 cases in a specific location.",
                "input_params": {
                    "location": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activeCases": {
                        "description": "the number of active COVID-19 cases in the location",
                        "type": "Integer"
                    }
                },
                "format": "GetActiveCases(location) -> activeCases"
            },
            {
                "name": "CalculateInfectionRate",
                "Description": "This API is to calculate the COVID-19 infection rate.",
                "input_params": {
                    "population": {
                        "description": "the population of the location",
                        "type": "Integer"
                    },
                    "activeCases": {
                        "description": "the number of active COVID-19 cases in the location",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "infectionRate": {
                        "description": "the current COVID-19 infection rate",
                        "type": "Float"
                    }
                },
                "format": "CalculateInfectionRate(population, activeCases) -> infectionRate"
            }
        ],
        "Query": "What is the current COVID-19 infection rate in London?",
        "Label": "CalculateInfectionRate(population=GetPopulation(location='London'), activeCases=GetActiveCases(location='London'))",
        "Index": 892
    },
    {
        "APIs": [
            {
                "name": "GetPopulation",
                "Description": "This API is to get the population of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "population": {
                        "description": "the population of the location",
                        "type": "Integer"
                    }
                },
                "format": "GetPopulation(location) -> population"
            },
            {
                "name": "GetActiveCases",
                "Description": "This API is to get the number of active COVID-19 cases in a specific location.",
                "input_params": {
                    "location": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activeCases": {
                        "description": "the number of active COVID-19 cases in the location",
                        "type": "Integer"
                    }
                },
                "format": "GetActiveCases(location) -> activeCases"
            },
            {
                "name": "CalculateInfectionRate",
                "Description": "This API is to calculate the COVID-19 infection rate.",
                "input_params": {
                    "population": {
                        "description": "the population of the location",
                        "type": "Integer"
                    },
                    "activeCases": {
                        "description": "the number of active COVID-19 cases in the location",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "infectionRate": {
                        "description": "the current COVID-19 infection rate",
                        "type": "Float"
                    }
                },
                "format": "CalculateInfectionRate(population, activeCases) -> infectionRate"
            }
        ],
        "Query": "What is the current COVID-19 infection rate in Paris?",
        "Label": "CalculateInfectionRate(population=GetPopulation(location='Paris'), activeCases=GetActiveCases(location='Paris'))",
        "Index": 893
    },
    {
        "APIs": [
            {
                "name": "GetStockPrice",
                "Description": "This API is to get the current market price of a stock.",
                "input_params": {
                    "stockId": {
                        "description": "the ID of the stock",
                        "type": "String"
                    }
                },
                "output_params": {
                    "currentPrice": {
                        "description": "the current market price of the stock",
                        "type": "Float"
                    }
                },
                "format": "GetStockPrice(stockId) -> currentPrice"
            },
            {
                "name": "PredictFutureStockPrice",
                "Description": "This API is to predict the future market price of a stock.",
                "input_params": {
                    "stockId": {
                        "description": "the ID of the stock",
                        "type": "String"
                    },
                    "currentPrice": {
                        "description": "the current market price of the stock",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "futurePrice": {
                        "description": "the predicted future market price of the stock",
                        "type": "Float"
                    }
                },
                "format": "PredictFutureStockPrice(stockId, currentPrice) -> futurePrice"
            },
            {
                "name": "SuggestStockAction",
                "Description": "This API is to suggest an action for a stock based on current and future market prices.",
                "input_params": {
                    "stockId": {
                        "description": "the ID of the stock",
                        "type": "String"
                    },
                    "currentPrice": {
                        "description": "the current market price of the stock",
                        "type": "Float"
                    },
                    "futurePrice": {
                        "description": "the predicted future market price of the stock",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "suggestedAction": {
                        "description": "the suggested action for the stock (invest more, sell off, or maintain position)",
                        "type": "String"
                    }
                },
                "format": "SuggestStockAction(stockId, currentPrice, futurePrice) -> suggestedAction"
            }
        ],
        "Query": "I have stocks in Apple. Considering the current market price, should I invest more, sell off, or maintain my position?",
        "Label": "SuggestStockAction(stockId='Apple', currentPrice=GetStockPrice(stockId='Apple'), futurePrice=PredictFutureStockPrice(stockId='Apple', currentPrice=GetStockPrice(stockId='Apple')))",
        "Index": 894
    },
    {
        "APIs": [
            {
                "name": "GetStockPrice",
                "Description": "This API is to get the current price of a stock.",
                "input_params": {
                    "stockId": {
                        "description": "the ID of the stock",
                        "type": "String"
                    }
                },
                "output_params": {
                    "currentPrice": {
                        "description": "the current price of the stock",
                        "type": "Float"
                    }
                },
                "format": "GetStockPrice(stockId) -> currentPrice"
            },
            {
                "name": "PredictFutureStockPrice",
                "Description": "This API is to predict the future price of a stock.",
                "input_params": {
                    "stockId": {
                        "description": "the ID of the stock",
                        "type": "String"
                    },
                    "currentPrice": {
                        "description": "the current price of the stock",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "futurePrice": {
                        "description": "the predicted future price of the stock",
                        "type": "Float"
                    }
                },
                "format": "PredictFutureStockPrice(stockId, currentPrice) -> futurePrice"
            },
            {
                "name": "SuggestStockAction",
                "Description": "This API is to suggest an action for a stock.",
                "input_params": {
                    "stockId": {
                        "description": "the ID of the stock",
                        "type": "String"
                    },
                    "currentPrice": {
                        "description": "the current price of the stock",
                        "type": "Float"
                    },
                    "futurePrice": {
                        "description": "the predicted future price of the stock",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "suggestedAction": {
                        "description": "the suggested action for the stock",
                        "type": "String"
                    }
                },
                "format": "SuggestStockAction(stockId, currentPrice, futurePrice) -> suggestedAction"
            }
        ],
        "Query": "I have some shares in Amazon. Based on its present rate, should I purchase additional, sell, or keep holding?",
        "Label": "SuggestStockAction(stockId='Amazon', currentPrice=GetStockPrice(stockId='Amazon'), futurePrice=PredictFutureStockPrice(stockId='Amazon', currentPrice=GetStockPrice(stockId='Amazon')))",
        "Index": 895
    },
    {
        "APIs": [
            {
                "name": "GetStockPrice",
                "Description": "This API is to get the current price of a stock.",
                "input_params": {
                    "stockId": {
                        "description": "the ID of the stock",
                        "type": "String"
                    }
                },
                "output_params": {
                    "currentPrice": {
                        "description": "the current price of the stock",
                        "type": "Float"
                    }
                },
                "format": "GetStockPrice(stockId) -> currentPrice"
            },
            {
                "name": "PredictFutureStockPrice",
                "Description": "This API is to predict the future price of a stock.",
                "input_params": {
                    "stockId": {
                        "description": "the ID of the stock",
                        "type": "String"
                    },
                    "currentPrice": {
                        "description": "the current price of the stock",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "futurePrice": {
                        "description": "the predicted future price of the stock",
                        "type": "Float"
                    }
                },
                "format": "PredictFutureStockPrice(stockId, currentPrice) -> futurePrice"
            },
            {
                "name": "SuggestStockAction",
                "Description": "This API is to suggest an action for a stock based on current and future prices.",
                "input_params": {
                    "stockId": {
                        "description": "the ID of the stock",
                        "type": "String"
                    },
                    "currentPrice": {
                        "description": "the current price of the stock",
                        "type": "Float"
                    },
                    "futurePrice": {
                        "description": "the predicted future price of the stock",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "suggestedAction": {
                        "description": "the suggested action for the stock (buy more, unload, or stay put)",
                        "type": "String"
                    }
                },
                "format": "SuggestStockAction(stockId, currentPrice, futurePrice) -> suggestedAction"
            }
        ],
        "Query": "I am holding shares in Alphabet. As per the ongoing price, should I buy more, unload, or stay put?",
        "Label": "SuggestStockAction(stockId='Alphabet', currentPrice=GetStockPrice(stockId='Alphabet'), futurePrice=PredictFutureStockPrice(stockId='Alphabet', currentPrice=GetStockPrice(stockId='Alphabet')))",
        "Index": 896
    },
    {
        "APIs": [
            {
                "name": "GetStockPrice",
                "Description": "This API is to get the current price of a stock.",
                "input_params": {
                    "stockId": {
                        "description": "the ID of the stock",
                        "type": "String"
                    }
                },
                "output_params": {
                    "currentPrice": {
                        "description": "the current price of the stock",
                        "type": "Float"
                    }
                },
                "format": "GetStockPrice(stockId) -> currentPrice"
            },
            {
                "name": "PredictFutureStockPrice",
                "Description": "This API is to predict the future price of a stock.",
                "input_params": {
                    "stockId": {
                        "description": "the ID of the stock",
                        "type": "String"
                    },
                    "currentPrice": {
                        "description": "the current price of the stock",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "futurePrice": {
                        "description": "the predicted future price of the stock",
                        "type": "Float"
                    }
                },
                "format": "PredictFutureStockPrice(stockId, currentPrice) -> futurePrice"
            },
            {
                "name": "SuggestStockAction",
                "Description": "This API is to suggest an action for a stock based on its current and future price.",
                "input_params": {
                    "stockId": {
                        "description": "the ID of the stock",
                        "type": "String"
                    },
                    "currentPrice": {
                        "description": "the current price of the stock",
                        "type": "Float"
                    },
                    "futurePrice": {
                        "description": "the predicted future price of the stock",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "suggestedAction": {
                        "description": "the suggested action for the stock (buy more, unload, or stay put)",
                        "type": "String"
                    }
                },
                "format": "SuggestStockAction(stockId, currentPrice, futurePrice) -> suggestedAction"
            }
        ],
        "Query": "I possess shares in Tesla. Given its current valuation, would it be wise to acquire more, dispose of, or retain?",
        "Label": "SuggestStockAction(stockId='Tesla', currentPrice=GetStockPrice(stockId='Tesla'), futurePrice=PredictFutureStockPrice(stockId='Tesla', currentPrice=GetStockPrice(stockId='Tesla')))",
        "Index": 897
    },
    {
        "APIs": [
            {
                "name": "GetStockPrice",
                "Description": "This API is to get the current market price of a stock.",
                "input_params": {
                    "stockId": {
                        "description": "the ID of the stock",
                        "type": "String"
                    }
                },
                "output_params": {
                    "currentPrice": {
                        "description": "the current market price of the stock",
                        "type": "Float"
                    }
                },
                "format": "GetStockPrice(stockId) -> currentPrice"
            },
            {
                "name": "PredictFutureStockPrice",
                "Description": "This API is to predict the future market price of a stock.",
                "input_params": {
                    "stockId": {
                        "description": "the ID of the stock",
                        "type": "String"
                    },
                    "currentPrice": {
                        "description": "the current market price of the stock",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "futurePrice": {
                        "description": "the predicted future market price of the stock",
                        "type": "Float"
                    }
                },
                "format": "PredictFutureStockPrice(stockId, currentPrice) -> futurePrice"
            },
            {
                "name": "SuggestStockAction",
                "Description": "This API is to suggest an action for a stock based on its current and predicted future market prices.",
                "input_params": {
                    "stockId": {
                        "description": "the ID of the stock",
                        "type": "String"
                    },
                    "currentPrice": {
                        "description": "the current market price of the stock",
                        "type": "Float"
                    },
                    "futurePrice": {
                        "description": "the predicted future market price of the stock",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "suggestedAction": {
                        "description": "the suggested action for the stock (augment holdings, relinquish, or hold steady)",
                        "type": "String"
                    }
                },
                "format": "SuggestStockAction(stockId, currentPrice, futurePrice) -> suggestedAction"
            }
        ],
        "Query": "I own shares in Netflix. Considering its current market value, should I augment my holdings, relinquish, or hold steady?",
        "Label": "SuggestStockAction(stockId='Netflix', currentPrice=GetStockPrice(stockId='Netflix'), futurePrice=PredictFutureStockPrice(stockId='Netflix', currentPrice=GetStockPrice(stockId='Netflix')))",
        "Index": 898
    },
    {
        "APIs": [
            {
                "name": "GetMovieByName",
                "Description": "This API is to get movie details by movie name.",
                "input_params": {
                    "movieName": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "format": "GetMovieByName(movieName) -> movieDetails"
            },
            {
                "name": "FindNearestCinema",
                "Description": "This API is to find the nearest cinema showing a specific movie.",
                "input_params": {
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "cinemaLocation": {
                        "description": "the location of the nearest cinema",
                        "type": "String"
                    }
                },
                "format": "FindNearestCinema(movieDetails) -> cinemaLocation"
            },
            {
                "name": "CalculateTravelTime",
                "Description": "This API is to calculate the travel time to a specific location.",
                "input_params": {
                    "cinemaLocation": {
                        "description": "the location of the cinema",
                        "type": "String"
                    }
                },
                "output_params": {
                    "travelTime": {
                        "description": "the estimated travel time to the cinema",
                        "type": "Time"
                    }
                },
                "format": "CalculateTravelTime(cinemaLocation) -> travelTime"
            }
        ],
        "Query": "I fancy seeing the movie 'Inception'. How long will it take for me to reach the closest cinema that's showing it?",
        "Label": "CalculateTravelTime(cinemaLocation=FindNearestCinema(movieDetails=GetMovieByName(movieName='Inception')))",
        "Index": 899
    },
    {
        "APIs": [
            {
                "name": "GetMovieByName",
                "Description": "This API is to get movie details by movie name.",
                "input_params": {
                    "movieName": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "format": "GetMovieByName(movieName) -> movieDetails"
            },
            {
                "name": "FindNearestCinema",
                "Description": "This API is to find the nearest cinema showing a specific movie.",
                "input_params": {
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "cinemaLocation": {
                        "description": "the location of the nearest cinema",
                        "type": "String"
                    }
                },
                "format": "FindNearestCinema(movieDetails) -> cinemaLocation"
            },
            {
                "name": "CalculateTravelTime",
                "Description": "This API is to calculate the travel time to a specific location.",
                "input_params": {
                    "cinemaLocation": {
                        "description": "the location of the cinema",
                        "type": "String"
                    }
                },
                "output_params": {
                    "travelTime": {
                        "description": "the estimated travel time to the cinema",
                        "type": "Time"
                    }
                },
                "format": "CalculateTravelTime(cinemaLocation) -> travelTime"
            }
        ],
        "Query": "I wish to see 'The Dark Knight Rises'. Can you find out how long it would take to get to the nearest theater showing this movie?",
        "Label": "CalculateTravelTime(cinemaLocation=FindNearestCinema(movieDetails=GetMovieByName(movieName='The Dark Knight Rises')))",
        "Index": 900
    },
    {
        "APIs": [
            {
                "name": "GetMovieByName",
                "Description": "This API is to get movie details by movie name.",
                "input_params": {
                    "movieName": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "format": "GetMovieByName(movieName) -> movieDetails"
            },
            {
                "name": "FindNearestCinema",
                "Description": "This API is to find the nearest cinema playing a specific movie.",
                "input_params": {
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "cinemaLocation": {
                        "description": "the location of the nearest cinema",
                        "type": "String"
                    }
                },
                "format": "FindNearestCinema(movieDetails) -> cinemaLocation"
            },
            {
                "name": "CalculateTravelTime",
                "Description": "This API is to calculate the travel time to a specific location.",
                "input_params": {
                    "cinemaLocation": {
                        "description": "the location of the cinema",
                        "type": "String"
                    }
                },
                "output_params": {
                    "travelTime": {
                        "description": "the estimated travel time to the cinema",
                        "type": "Time"
                    }
                },
                "format": "CalculateTravelTime(cinemaLocation) -> travelTime"
            }
        ],
        "Query": "I'm in the mood to watch 'Avengers: Endgame'. Can you calculate the time it will take to reach the closest cinema playing it?",
        "Label": "CalculateTravelTime(cinemaLocation=FindNearestCinema(movieDetails=GetMovieByName(movieName='Avengers: Endgame')))",
        "Index": 901
    },
    {
        "APIs": [
            {
                "name": "GetMovieByName",
                "Description": "This API is to get movie details by movie name.",
                "input_params": {
                    "movieName": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "format": "GetMovieByName(movieName) -> movieDetails"
            },
            {
                "name": "FindNearestCinema",
                "Description": "This API is to find the nearest cinema showing a specific movie.",
                "input_params": {
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "cinemaLocation": {
                        "description": "the location of the nearest cinema",
                        "type": "String"
                    }
                },
                "format": "FindNearestCinema(movieDetails) -> cinemaLocation"
            },
            {
                "name": "CalculateTravelTime",
                "Description": "This API is to calculate the travel time to a specific location.",
                "input_params": {
                    "cinemaLocation": {
                        "description": "the location of the cinema",
                        "type": "String"
                    }
                },
                "output_params": {
                    "travelTime": {
                        "description": "the estimated travel time",
                        "type": "Time"
                    }
                },
                "format": "CalculateTravelTime(cinemaLocation) -> travelTime"
            }
        ],
        "Query": "I'm in the mood to watch 'Avengers: Endgame'. Can you calculate the time it will take to reach the closest cinema playing it?",
        "Label": "CalculateTravelTime(cinemaLocation=FindNearestCinema(movieDetails=GetMovieByName(movieName='Avengers: Endgame')))",
        "Index": 902
    },
    {
        "APIs": [
            {
                "name": "GetMovieByName",
                "Description": "This API is to get movie details by movie name.",
                "input_params": {
                    "movieName": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "format": "GetMovieByName(movieName) -> movieDetails"
            },
            {
                "name": "FindNearestCinema",
                "Description": "This API is to find the nearest cinema showing a specific movie.",
                "input_params": {
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "cinemaLocation": {
                        "description": "the location of the nearest cinema",
                        "type": "String"
                    }
                },
                "format": "FindNearestCinema(movieDetails) -> cinemaLocation"
            },
            {
                "name": "CalculateTravelTime",
                "Description": "This API is to calculate the travel time to a specific location.",
                "input_params": {
                    "cinemaLocation": {
                        "description": "the location of the cinema",
                        "type": "String"
                    }
                },
                "output_params": {
                    "travelTime": {
                        "description": "the estimated travel time to the cinema",
                        "type": "Time"
                    }
                },
                "format": "CalculateTravelTime(cinemaLocation) -> travelTime"
            }
        ],
        "Query": "I wish to see the film 'The Lion King'. How much time will it take to get to a cinema that's showing it nearby?",
        "Label": "CalculateTravelTime(cinemaLocation=FindNearestCinema(movieDetails=GetMovieByName(movieName='The Lion King')))",
        "Index": 903
    },
    {
        "APIs": [
            {
                "name": "CalculateDistance",
                "Description": "This API is to calculate the distance between two locations.",
                "input_params": {
                    "StartLocation": {
                        "description": "the starting location",
                        "type": "String"
                    },
                    "EndLocation": {
                        "description": "the ending location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Distance": {
                        "description": "the distance between the two locations",
                        "type": "Float"
                    }
                },
                "format": "CalculateDistance(StartLocation, EndLocation) -> Distance"
            },
            {
                "name": "EstimateDeliveryTime",
                "Description": "This API is to estimate the delivery time.",
                "input_params": {
                    "Distance": {
                        "description": "the distance between the start and end locations",
                        "type": "Float"
                    },
                    "TransportMode": {
                        "description": "the mode of transportation for delivery",
                        "type": "String"
                    }
                },
                "output_params": {
                    "EstimatedDeliveryTime": {
                        "description": "the estimated delivery time",
                        "type": "Time"
                    }
                },
                "format": "EstimateDeliveryTime(Distance, TransportMode) -> EstimatedDeliveryTime"
            }
        ],
        "Query": "I would like to place an order for ProductID 'C9012' with a quantity of 5, to be delivered from San Francisco to Seattle using a hoverboard courier. Can you estimate the delivery time?",
        "Label": "EstimateDeliveryTime(Distance=CalculateDistance(StartLocation='San Francisco', EndLocation='Seattle'), TransportMode='Hoverboard')",
        "Index": 904
    },
    {
        "APIs": [
            {
                "name": "GetLocationData",
                "Description": "This API is to get the location data of a user.",
                "input_params": {
                    "Username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Location": {
                        "description": "the location data of the user",
                        "type": "String"
                    }
                },
                "format": "GetLocationData(Username) -> Location"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast for a specific location.",
                "input_params": {
                    "Location": {
                        "description": "the location for which weather forecast is needed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "WeatherReport": {
                        "description": "the weather report for the specified location",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(Location) -> WeatherReport"
            },
            {
                "name": "SuggestOutfit",
                "Description": "This API is to suggest an outfit based on the weather report.",
                "input_params": {
                    "WeatherReport": {
                        "description": "the weather report for which outfit suggestion is needed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Outfit": {
                        "description": "the suggested outfit based on the weather report",
                        "type": "String"
                    }
                },
                "format": "SuggestOutfit(WeatherReport) -> Outfit"
            }
        ],
        "Query": "I'm John. What clothing should I choose today considering the climate in my area?",
        "Label": "SuggestOutfit(WeatherReport=WeatherForecast(Location=GetLocationData(Username='John')))",
        "Index": 905
    },
    {
        "APIs": [
            {
                "name": "GetLocationData",
                "Description": "This API is to get the location data of a user.",
                "input_params": {
                    "Username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Location": {
                        "description": "the location data of the user",
                        "type": "String"
                    }
                },
                "format": "GetLocationData(Username) -> Location"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast based on a location.",
                "input_params": {
                    "Location": {
                        "description": "the location data",
                        "type": "String"
                    }
                },
                "output_params": {
                    "WeatherReport": {
                        "description": "the weather report for the location",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(Location) -> WeatherReport"
            },
            {
                "name": "SuggestOutfit",
                "Description": "This API is to suggest an outfit based on the weather report.",
                "input_params": {
                    "WeatherReport": {
                        "description": "the weather report",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Outfit": {
                        "description": "the suggested outfit",
                        "type": "String"
                    }
                },
                "format": "SuggestOutfit(WeatherReport) -> Outfit"
            }
        ],
        "Query": "My name is Emily. Based on my current weather conditions, what should I put on today?",
        "Label": "SuggestOutfit(WeatherReport=WeatherForecast(Location=GetLocationData(Username='Emily')))",
        "Index": 906
    },
    {
        "APIs": [
            {
                "name": "GetLocationData",
                "Description": "This API is to get the location data of a user.",
                "input_params": {
                    "Username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Location": {
                        "description": "the location data of the user",
                        "type": "String"
                    }
                },
                "format": "GetLocationData(Username) -> Location"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast for a specific location.",
                "input_params": {
                    "Location": {
                        "description": "the location for which weather forecast is required",
                        "type": "String"
                    }
                },
                "output_params": {
                    "WeatherReport": {
                        "description": "the weather report for the specified location",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(Location) -> WeatherReport"
            },
            {
                "name": "SuggestOutfit",
                "Description": "This API is to suggest an outfit based on the weather report.",
                "input_params": {
                    "WeatherReport": {
                        "description": "the weather report for which outfit suggestion is required",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Outfit": {
                        "description": "the suggested outfit based on the weather report",
                        "type": "String"
                    }
                },
                "format": "SuggestOutfit(WeatherReport) -> Outfit"
            }
        ],
        "Query": "I am David. What type of outfit should I wear today given the weather at my place?",
        "Label": "SuggestOutfit(WeatherReport=WeatherForecast(Location=GetLocationData(Username='David')))",
        "Index": 907
    },
    {
        "APIs": [
            {
                "name": "GetLocationData",
                "Description": "This API is to get the location data of a user.",
                "input_params": {
                    "Username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Location": {
                        "description": "the location data of the user",
                        "type": "String"
                    }
                },
                "format": "GetLocationData(Username) -> Location"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast for a specific location.",
                "input_params": {
                    "Location": {
                        "description": "the location for which weather forecast is needed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "WeatherReport": {
                        "description": "the weather report for the specified location",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(Location) -> WeatherReport"
            },
            {
                "name": "SuggestOutfit",
                "Description": "This API is to suggest an outfit based on the weather report.",
                "input_params": {
                    "WeatherReport": {
                        "description": "the weather report for which outfit suggestion is needed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Outfit": {
                        "description": "the suggested outfit based on the weather report",
                        "type": "String"
                    }
                },
                "format": "SuggestOutfit(WeatherReport) -> Outfit"
            }
        ],
        "Query": "I am David. What type of outfit should I wear today given the weather at my place?",
        "Label": "SuggestOutfit(WeatherReport=WeatherForecast(Location=GetLocationData(Username='David')))",
        "Index": 908
    },
    {
        "APIs": [
            {
                "name": "GetLocationData",
                "Description": "This API is to get the location data based on the username.",
                "input_params": {
                    "Username": {
                        "description": "the username of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Location": {
                        "description": "the location data of the person",
                        "type": "String"
                    }
                },
                "format": "GetLocationData(Username) -> Location"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast based on the location.",
                "input_params": {
                    "Location": {
                        "description": "the location data",
                        "type": "String"
                    }
                },
                "output_params": {
                    "WeatherReport": {
                        "description": "the weather report for the location",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(Location) -> WeatherReport"
            },
            {
                "name": "SuggestOutfit",
                "Description": "This API is to suggest an outfit based on the weather report.",
                "input_params": {
                    "WeatherReport": {
                        "description": "the weather report",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Outfit": {
                        "description": "the suggested outfit",
                        "type": "String"
                    }
                },
                "format": "SuggestOutfit(WeatherReport) -> Outfit"
            }
        ],
        "Query": "My name is Ethan. Based on the current weather at my location, what outfit should I choose for today?",
        "Label": "SuggestOutfit(WeatherReport=WeatherForecast(Location=GetLocationData(Username='Ethan')))",
        "Index": 909
    },
    {
        "APIs": [
            {
                "name": "TrackSpending",
                "Description": "This API is to track the spending of a user.",
                "input_params": {
                    "Username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "SpendingReport": {
                        "description": "the spending report of the user",
                        "type": "Object"
                    }
                },
                "format": "TrackSpending(Username) -> SpendingReport"
            },
            {
                "name": "CalculateSavings",
                "Description": "This API is to calculate the savings based on the spending report.",
                "input_params": {
                    "SpendingReport": {
                        "description": "the spending report of the user",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "Savings": {
                        "description": "the calculated savings",
                        "type": "Float"
                    }
                },
                "format": "CalculateSavings(SpendingReport) -> Savings"
            },
            {
                "name": "SuggestInvestment",
                "Description": "This API is to suggest where to put the savings based on the expenditures.",
                "input_params": {
                    "Savings": {
                        "description": "the calculated savings",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "InvestmentOptions": {
                        "description": "the suggested investment options",
                        "type": "List"
                    }
                },
                "format": "SuggestInvestment(Savings) -> InvestmentOptions"
            }
        ],
        "Query": "My name is Sarah. Can you suggest where I can put my savings based on my expenditures?",
        "Label": "SuggestInvestment(Savings=CalculateSavings(SpendingReport=TrackSpending(Username='Sarah')))",
        "Index": 910
    },
    {
        "APIs": [
            {
                "name": "TrackSpending",
                "Description": "This API is to track the spending of a user.",
                "input_params": {
                    "Username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "SpendingReport": {
                        "description": "the spending report of the user",
                        "type": "Object"
                    }
                },
                "format": "TrackSpending(Username) -> SpendingReport"
            },
            {
                "name": "CalculateSavings",
                "Description": "This API is to calculate the savings based on the spending report.",
                "input_params": {
                    "SpendingReport": {
                        "description": "the spending report of the user",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "Savings": {
                        "description": "the calculated savings",
                        "type": "Float"
                    }
                },
                "format": "CalculateSavings(SpendingReport) -> Savings"
            },
            {
                "name": "SuggestInvestment",
                "Description": "This API is to suggest investment options based on the savings.",
                "input_params": {
                    "Savings": {
                        "description": "the calculated savings",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "InvestmentOptions": {
                        "description": "the suggested investment options",
                        "type": "List"
                    }
                },
                "format": "SuggestInvestment(Savings) -> InvestmentOptions"
            }
        ],
        "Query": "I'm Lisa. Based on my expenditure, how should I save and where should I invest?",
        "Label": "SuggestInvestment(Savings=CalculateSavings(SpendingReport=TrackSpending(Username='Lisa')))",
        "Index": 911
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast for a specific city.",
                "input_params": {
                    "City": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "WeatherForecast": {
                        "description": "the weather forecast for the city",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(City)"
            },
            {
                "name": "RestaurantRecommendations",
                "Description": "This API is to get restaurant recommendations for a specific city.",
                "input_params": {
                    "City": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "RestaurantRecommendations": {
                        "description": "the restaurant recommendations for the city",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommendations(City)"
            },
            {
                "name": "OptimalTravelDate",
                "Description": "This API is to determine the optimal travel date for a romantic dinner.",
                "input_params": {
                    "WeatherForecast": {
                        "description": "the weather forecast for the city",
                        "type": "String"
                    },
                    "RestaurantRecommendations": {
                        "description": "the restaurant recommendations for the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "OptimalTravelDate": {
                        "description": "the optimal travel date for the romantic dinner",
                        "type": "String"
                    }
                },
                "format": "OptimalTravelDate(WeatherForecast, RestaurantRecommendations)"
            }
        ],
        "Query": "I am planning a romantic dinner in Paris. When should I schedule it?",
        "Label": "OptimalTravelDate(WeatherForecast=WeatherForecast(City='Paris'), RestaurantRecommendations=RestaurantRecommendations(City='Paris'))",
        "Index": 912
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast for a specific city.",
                "input_params": {
                    "City": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "WeatherForecast": {
                        "description": "the weather forecast for the city",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(City)"
            },
            {
                "name": "RestaurantRecommendations",
                "Description": "This API is to get restaurant recommendations for a specific city.",
                "input_params": {
                    "City": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "RestaurantRecommendations": {
                        "description": "the restaurant recommendations for the city",
                        "type": "List"
                    }
                },
                "format": "RestaurantRecommendations(City)"
            },
            {
                "name": "OptimalTravelDate",
                "Description": "This API is to determine the optimal travel date based on weather forecast and restaurant recommendations.",
                "input_params": {
                    "WeatherForecast": {
                        "description": "the weather forecast for the city",
                        "type": "String"
                    },
                    "RestaurantRecommendations": {
                        "description": "the restaurant recommendations for the city",
                        "type": "List"
                    }
                },
                "output_params": {
                    "OptimalTravelDate": {
                        "description": "the optimal travel date",
                        "type": "Date"
                    }
                },
                "format": "OptimalTravelDate(WeatherForecast, RestaurantRecommendations)"
            }
        ],
        "Query": "I want to have a special night out in Tokyo. When would be the best time?",
        "Label": "OptimalTravelDate(WeatherForecast=WeatherForecast(City='Tokyo'), RestaurantRecommendations=RestaurantRecommendations(City='Tokyo'))",
        "Index": 913
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast for a specific city.",
                "input_params": {
                    "City": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "WeatherForecast": {
                        "description": "the weather forecast for the city",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(City)"
            },
            {
                "name": "RestaurantRecommendations",
                "Description": "This API is to get restaurant recommendations for a specific city.",
                "input_params": {
                    "City": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "RestaurantRecommendations": {
                        "description": "the restaurant recommendations for the city",
                        "type": "List"
                    }
                },
                "format": "RestaurantRecommendations(City)"
            },
            {
                "name": "OptimalTravelDate",
                "Description": "This API is to determine the optimal travel date based on weather forecast and restaurant recommendations.",
                "input_params": {
                    "WeatherForecast": {
                        "description": "the weather forecast for the city",
                        "type": "String"
                    },
                    "RestaurantRecommendations": {
                        "description": "the restaurant recommendations for the city",
                        "type": "List"
                    }
                },
                "output_params": {
                    "OptimalTravelDate": {
                        "description": "the optimal travel date",
                        "type": "Date"
                    }
                },
                "format": "OptimalTravelDate(WeatherForecast, RestaurantRecommendations)"
            }
        ],
        "Query": "I'm thinking of an unforgettable dinner in Rome. When should I go?",
        "Label": "OptimalTravelDate(WeatherForecast=WeatherForecast(City='Rome'), RestaurantRecommendations=RestaurantRecommendations(City='Rome'))",
        "Index": 914
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast for a specific city.",
                "input_params": {
                    "City": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "WeatherForecast": {
                        "description": "the weather forecast for the city",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(City)"
            },
            {
                "name": "RestaurantRecommendations",
                "Description": "This API is to get restaurant recommendations for a specific city.",
                "input_params": {
                    "City": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "RestaurantRecommendations": {
                        "description": "the restaurant recommendations for the city",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommendations(City)"
            },
            {
                "name": "OptimalTravelDate",
                "Description": "This API is to determine the optimal travel date based on weather forecast and restaurant recommendations.",
                "input_params": {
                    "WeatherForecast": {
                        "description": "the weather forecast for the city",
                        "type": "String"
                    },
                    "RestaurantRecommendations": {
                        "description": "the restaurant recommendations for the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "OptimalTravelDate": {
                        "description": "the optimal travel date",
                        "type": "String"
                    }
                },
                "format": "OptimalTravelDate(WeatherForecast, RestaurantRecommendations)"
            }
        ],
        "Query": "I'm thinking of an unforgettable dinner in Rome. When should I go?",
        "Label": "OptimalTravelDate(WeatherForecast=WeatherForecast(City='Rome'), RestaurantRecommendations=RestaurantRecommendations(City='Rome'))",
        "Index": 915
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast for a specific city.",
                "input_params": {
                    "City": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "WeatherForecast": {
                        "description": "the weather forecast for the city",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(City)"
            },
            {
                "name": "RestaurantRecommendations",
                "Description": "This API is to get restaurant recommendations for a specific city.",
                "input_params": {
                    "City": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "RestaurantRecommendations": {
                        "description": "the restaurant recommendations for the city",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommendations(City)"
            },
            {
                "name": "OptimalTravelDate",
                "Description": "This API is to determine the optimal travel date for a dinner date.",
                "input_params": {
                    "WeatherForecast": {
                        "description": "the weather forecast for the city",
                        "type": "String"
                    },
                    "RestaurantRecommendations": {
                        "description": "the restaurant recommendations for the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "OptimalTravelDate": {
                        "description": "the optimal travel date for the dinner date",
                        "type": "String"
                    }
                },
                "format": "OptimalTravelDate(WeatherForecast, RestaurantRecommendations)"
            }
        ],
        "Query": "I want to plan a dinner date in Sydney. When is the best time for it?",
        "Label": "OptimalTravelDate(WeatherForecast=WeatherForecast(City='Sydney'), RestaurantRecommendations=RestaurantRecommendations(City='Sydney'))",
        "Index": 916
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast of a specific location.",
                "input_params": {
                    "Location": {
                        "description": "the location for which the weather forecast is needed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Weather": {
                        "description": "the weather forecast for the specified location",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(Location) -> Weather"
            },
            {
                "name": "TouristAttractions",
                "Description": "This API is to get the tourist attractions of a specific location.",
                "input_params": {
                    "Location": {
                        "description": "the location for which the tourist attractions are needed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Attractions": {
                        "description": "the tourist attractions for the specified location",
                        "type": "List of Strings"
                    }
                },
                "format": "TouristAttractions(Location) -> Attractions"
            },
            {
                "name": "PlanItinerary",
                "Description": "This API is to plan a travel itinerary based on weather forecast and tourist attractions.",
                "input_params": {
                    "WeatherForecast": {
                        "description": "the weather forecast for the travel location",
                        "type": "String"
                    },
                    "TouristAttractions": {
                        "description": "the tourist attractions for the travel location",
                        "type": "List of Strings"
                    }
                },
                "output_params": {
                    "Itinerary": {
                        "description": "the travel itinerary based on weather forecast and tourist attractions",
                        "type": "List of Strings"
                    }
                },
                "format": "PlanItinerary(WeatherForecast, TouristAttractions) -> Itinerary"
            }
        ],
        "Query": "I am planning a trip to Paris in two weeks. Could you help me prepare my travel plan?",
        "Label": "PlanItinerary(WeatherForecast=WeatherForecast(Location='Paris'), TouristAttractions=TouristAttractions(Location='Paris'))",
        "Index": 917
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast of a specific location.",
                "input_params": {
                    "Location": {
                        "description": "the location for which the weather forecast is needed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Weather": {
                        "description": "the weather forecast for the specified location",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(Location) -> Weather"
            },
            {
                "name": "TouristAttractions",
                "Description": "This API is to get the tourist attractions of a specific location.",
                "input_params": {
                    "Location": {
                        "description": "the location for which the tourist attractions are needed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Attractions": {
                        "description": "the tourist attractions for the specified location",
                        "type": "List"
                    }
                },
                "format": "TouristAttractions(Location) -> Attractions"
            },
            {
                "name": "PlanItinerary",
                "Description": "This API is to plan an itinerary based on weather forecast and tourist attractions.",
                "input_params": {
                    "WeatherForecast": {
                        "description": "the weather forecast for the desired location",
                        "type": "String"
                    },
                    "TouristAttractions": {
                        "description": "the tourist attractions for the desired location",
                        "type": "List"
                    }
                },
                "output_params": {
                    "Itinerary": {
                        "description": "the planned itinerary based on weather forecast and tourist attractions",
                        "type": "List"
                    }
                },
                "format": "PlanItinerary(WeatherForecast, TouristAttractions) -> Itinerary"
            }
        ],
        "Query": "I'm heading to Tokyo in a few days. Could you help me map out my tour?",
        "Label": "PlanItinerary(WeatherForecast=WeatherForecast(Location='Tokyo'), TouristAttractions=TouristAttractions(Location='Tokyo'))",
        "Index": 918
    },
    {
        "APIs": [
            {
                "name": "CheckWeather",
                "Description": "This API is to check the weather of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location to check the weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather condition of the location",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(location) -> weather"
            },
            {
                "name": "SuggestOutfit",
                "Description": "This API is to suggest an outfit based on the weather condition.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the suggested outfit",
                        "type": "String"
                    }
                },
                "format": "SuggestOutfit(weather) -> outfit"
            },
            {
                "name": "FindItemInWardrobe",
                "Description": "This API is to find a specific item in the wardrobe.",
                "input_params": {
                    "outfit": {
                        "description": "the suggested outfit",
                        "type": "String"
                    }
                },
                "output_params": {
                    "item_location": {
                        "description": "the location of the item in the wardrobe",
                        "type": "String"
                    }
                },
                "format": "FindItemInWardrobe(outfit) -> item_location"
            }
        ],
        "Query": "What clothes should I wear for my excursion to Tokyo and where can I locate them in my dress room?",
        "Label": "FindItemInWardrobe(SuggestOutfit(CheckWeather('Tokyo')))",
        "Index": 919
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find restaurants based on cuisine and location.",
                "input_params": {
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(cuisine, location) -> restaurant"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    }
                },
                "format": "GetMenu(restaurant) -> menu"
            },
            {
                "name": "RecommendDish",
                "Description": "This API is to recommend a dish based on dietary restrictions.",
                "input_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    },
                    "restriction": {
                        "description": "the dietary restriction",
                        "type": "String"
                    }
                },
                "output_params": {
                    "dish": {
                        "description": "the recommended dish",
                        "type": "String"
                    }
                },
                "format": "RecommendDish(menu, restriction) -> dish"
            }
        ],
        "Query": "I am in Los Angeles and I'm craving Chinese food but I am gluten intolerant. Can you suggest something for me?",
        "Label": "RecommendDish(GetMenu(FindRestaurant('Chinese', 'Los Angeles')), 'gluten intolerant')",
        "Index": 920
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on cuisine and location.",
                "input_params": {
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(cuisine, location) -> restaurant"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    }
                },
                "format": "GetMenu(restaurant) -> menu"
            },
            {
                "name": "RecommendDish",
                "Description": "This API is to recommend a dish based on dietary restrictions.",
                "input_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    },
                    "dietary_restrictions": {
                        "description": "the dietary restrictions of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "dish": {
                        "description": "the recommended dish",
                        "type": "String"
                    }
                },
                "format": "RecommendDish(menu, dietary_restrictions) -> dish"
            }
        ],
        "Query": "I am in Boston and I want to eat Mexican food but I have nut allergy. Can you recommend a dish for me?",
        "Label": "RecommendDish(GetMenu(FindRestaurant('Mexican', 'Boston')), 'nut allergy')",
        "Index": 921
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on cuisine and location.",
                "input_params": {
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(cuisine, location) -> restaurant"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    }
                },
                "format": "GetMenu(restaurant) -> menu"
            },
            {
                "name": "RecommendDish",
                "Description": "This API is to recommend a dish based on dietary restrictions.",
                "input_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    },
                    "restriction": {
                        "description": "the dietary restriction",
                        "type": "String"
                    }
                },
                "output_params": {
                    "dish": {
                        "description": "the recommended dish",
                        "type": "String"
                    }
                },
                "format": "RecommendDish(menu, restriction) -> dish"
            }
        ],
        "Query": "I am in Miami and I have a craving for Indian food but I am diabetic. Can you suggest a dish for me?",
        "Label": "RecommendDish(GetMenu(FindRestaurant('Indian', 'Miami')), 'diabetic')",
        "Index": 922
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on cuisine and location.",
                "input_params": {
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(cuisine, location) -> restaurant"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    }
                },
                "format": "GetMenu(restaurant) -> menu"
            },
            {
                "name": "RecommendDish",
                "Description": "This API is to recommend a dish based on the menu and dietary restriction.",
                "input_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    },
                    "restriction": {
                        "description": "the dietary restriction",
                        "type": "String"
                    }
                },
                "output_params": {
                    "dish": {
                        "description": "the recommended dish",
                        "type": "String"
                    }
                },
                "format": "RecommendDish(menu, restriction) -> dish"
            }
        ],
        "Query": "I am in Miami and I have a craving for Indian food but I am diabetic. Can you suggest a dish for me?",
        "Label": "RecommendDish(GetMenu(FindRestaurant('Indian', 'Miami')), 'diabetic')",
        "Index": 923
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on cuisine and location.",
                "input_params": {
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(cuisine, location) -> restaurant"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    }
                },
                "format": "GetMenu(restaurant) -> menu"
            },
            {
                "name": "RecommendDish",
                "Description": "This API is to recommend a dish based on dietary preferences.",
                "input_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    },
                    "dietary_preference": {
                        "description": "the dietary preference of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "dish": {
                        "description": "the recommended dish",
                        "type": "String"
                    }
                },
                "format": "RecommendDish(menu, dietary_preference) -> dish"
            }
        ],
        "Query": "I am in San Francisco and I want to eat Greek food but I am vegetarian. Can you suggest a dish for me?",
        "Label": "RecommendDish(GetMenu(FindRestaurant('Greek', 'San Francisco')), 'vegetarian')",
        "Index": 924
    },
    {
        "APIs": [
            {
                "name": "CheckWeather",
                "Description": "This API is to check the weather of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location to check the weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(location) -> weather"
            },
            {
                "name": "FindClothes",
                "Description": "This API is to find suitable clothes based on the weather condition.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "FindClothes(weather) -> outfit"
            },
            {
                "name": "PlanOutfit",
                "Description": "This API is to plan an outfit for a specific event.",
                "input_params": {
                    "event": {
                        "description": "the type of event",
                        "type": "String"
                    },
                    "outfit": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "output_params": {
                    "plan": {
                        "description": "the planned outfit for the event",
                        "type": "String"
                    }
                },
                "format": "PlanOutfit(event, outfit) -> plan"
            }
        ],
        "Query": "What should I dress for my corporate event in London this evening?",
        "Label": "PlanOutfit(event='corporate event', outfit=FindClothes(CheckWeather('London')))",
        "Index": 925
    },
    {
        "APIs": [
            {
                "name": "CheckWeather",
                "Description": "This API is to check the weather of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location to check the weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather condition of the location",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(location) -> weather"
            },
            {
                "name": "FindClothes",
                "Description": "This API is to find suitable clothes based on the weather condition.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothes": {
                        "description": "the suitable clothes for the weather condition",
                        "type": "String"
                    }
                },
                "format": "FindClothes(weather) -> clothes"
            },
            {
                "name": "PlanOutfit",
                "Description": "This API is to plan an outfit for a specific event based on the suitable clothes.",
                "input_params": {
                    "event": {
                        "description": "the type of event",
                        "type": "String"
                    },
                    "outfit": {
                        "description": "the suitable clothes for the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit_plan": {
                        "description": "the planned outfit for the event",
                        "type": "String"
                    }
                },
                "format": "PlanOutfit(event, outfit) -> outfit_plan"
            }
        ],
        "Query": "What should I put on for my conference in Tokyo this afternoon?",
        "Label": "PlanOutfit(event='conference', outfit=FindClothes(CheckWeather('Tokyo')))",
        "Index": 926
    },
    {
        "APIs": [
            {
                "name": "FetchParts",
                "Description": "This API is to fetch parts for a specific item.",
                "input_params": {
                    "item": {
                        "description": "the item for which parts need to be fetched",
                        "type": "String"
                    }
                },
                "output_params": {
                    "parts": {
                        "description": "a list of parts for the specified item",
                        "type": "List"
                    }
                },
                "format": "FetchParts(item) -> parts"
            },
            {
                "name": "FindElectronicsStores",
                "Description": "This API is to find electronics stores in a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location for which electronics stores need to be found",
                        "type": "String"
                    }
                },
                "output_params": {
                    "stores": {
                        "description": "a list of electronics stores in the specified location",
                        "type": "List"
                    }
                },
                "format": "FindElectronicsStores(location) -> stores"
            },
            {
                "name": "ComparePrices",
                "Description": "This API is to compare prices of parts from different stores.",
                "input_params": {
                    "parts": {
                        "description": "a list of parts for which prices need to be compared",
                        "type": "List"
                    },
                    "stores": {
                        "description": "a list of stores from which prices need to be compared",
                        "type": "List"
                    }
                },
                "output_params": {
                    "cheapest_parts": {
                        "description": "a list of the least expensive parts from the specified stores",
                        "type": "List"
                    }
                },
                "format": "ComparePrices(parts, stores) -> cheapest_parts"
            }
        ],
        "Query": "Where can I find the least expensive parts for a computer in New York?",
        "Label": "ComparePrices(FetchParts('computer'), FindElectronicsStores('New York'))",
        "Index": 927
    },
    {
        "APIs": [
            {
                "name": "FetchComponents",
                "Description": "This API is to fetch components for a bicycle.",
                "input_params": {
                    "product": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "components": {
                        "description": "a list of components for the product",
                        "type": "List"
                    }
                },
                "format": "FetchComponents(product) -> components"
            },
            {
                "name": "FindSportingGoodsStores",
                "Description": "This API is to find sporting goods stores in a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location to search for sporting goods stores",
                        "type": "String"
                    }
                },
                "output_params": {
                    "stores": {
                        "description": "a list of sporting goods stores in the location",
                        "type": "List"
                    }
                },
                "format": "FindSportingGoodsStores(location) -> stores"
            },
            {
                "name": "ComparePrices",
                "Description": "This API is to compare prices of components at different stores.",
                "input_params": {
                    "components": {
                        "description": "a list of components to compare prices",
                        "type": "List"
                    },
                    "stores": {
                        "description": "a list of stores to compare prices",
                        "type": "List"
                    }
                },
                "output_params": {
                    "cheapest_store": {
                        "description": "the store with the cheapest prices for the components",
                        "type": "String"
                    }
                },
                "format": "ComparePrices(components, stores) -> cheapest_store"
            }
        ],
        "Query": "Where can I buy the cheapest components for a bicycle in Los Angeles?",
        "Label": "ComparePrices(FetchComponents('bicycle'), FindSportingGoodsStores('Los Angeles'))",
        "Index": 928
    },
    {
        "APIs": [
            {
                "name": "FetchBooks",
                "Description": "This API is to fetch books based on a specific course.",
                "input_params": {
                    "course_name": {
                        "description": "the name of the course",
                        "type": "String"
                    }
                },
                "output_params": {
                    "books": {
                        "description": "a list of books related to the course",
                        "type": "List"
                    }
                },
                "format": "FetchBooks(course_name) -> books"
            },
            {
                "name": "FindBookStores",
                "Description": "This API is to find bookstores in a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location to search for bookstores",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bookstores": {
                        "description": "a list of bookstores in the location",
                        "type": "List"
                    }
                },
                "format": "FindBookStores(location) -> bookstores"
            },
            {
                "name": "ComparePrices",
                "Description": "This API is to compare prices of books from different bookstores.",
                "input_params": {
                    "books": {
                        "description": "a list of books to compare prices",
                        "type": "List"
                    },
                    "bookstores": {
                        "description": "a list of bookstores to compare prices",
                        "type": "List"
                    }
                },
                "output_params": {
                    "prices": {
                        "description": "a list of prices for each book from different bookstores",
                        "type": "List"
                    }
                },
                "format": "ComparePrices(books, bookstores) -> prices"
            }
        ],
        "Query": "Where can I find the most affordable books for a literature course in Boston?",
        "Label": "ComparePrices(FetchBooks('literature course'), FindBookStores('Boston'))",
        "Index": 929
    },
    {
        "APIs": [
            {
                "name": "FetchSupplies",
                "Description": "This API is to fetch supplies for a specific class.",
                "input_params": {
                    "class_name": {
                        "description": "the name of the class",
                        "type": "String"
                    }
                },
                "output_params": {
                    "supplies_list": {
                        "description": "a list of supplies for the class",
                        "type": "List"
                    }
                },
                "format": "FetchSupplies(class_name) -> supplies_list"
            },
            {
                "name": "FindArtSuppliesStores",
                "Description": "This API is to find art supplies stores in a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location to search for art supplies stores",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_list": {
                        "description": "a list of art supplies stores in the location",
                        "type": "List"
                    }
                },
                "format": "FindArtSuppliesStores(location) -> store_list"
            },
            {
                "name": "ComparePrices",
                "Description": "This API is to compare prices of supplies from different stores.",
                "input_params": {
                    "supplies_list": {
                        "description": "a list of supplies to compare prices",
                        "type": "List"
                    },
                    "store_list": {
                        "description": "a list of stores to compare prices",
                        "type": "List"
                    }
                },
                "output_params": {
                    "cheapest_store": {
                        "description": "the store with the least expensive supplies",
                        "type": "String"
                    }
                },
                "format": "ComparePrices(supplies_list, store_list) -> cheapest_store"
            }
        ],
        "Query": "Where can I find the least expensive supplies for a painting class in Chicago?",
        "Label": "ComparePrices(FetchSupplies('painting class'), FindArtSuppliesStores('Chicago'))",
        "Index": 930
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine type of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_info": {
                        "description": "the information of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "FindRestaurant(city, cuisine) -> restaurant_info"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu details of a restaurant.",
                "input_params": {
                    "restaurant_info": {
                        "description": "the information of the restaurant",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "menu_details": {
                        "description": "the details of the menu",
                        "type": "Object"
                    }
                },
                "format": "GetMenu(restaurant_info) -> menu_details"
            },
            {
                "name": "CalculateCalories",
                "Description": "This API is to calculate the calorie count of a menu.",
                "input_params": {
                    "menu_details": {
                        "description": "the details of the menu",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "calorie_count": {
                        "description": "the calorie count of the menu",
                        "type": "Integer"
                    }
                },
                "format": "CalculateCalories(menu_details) -> calorie_count"
            }
        ],
        "Query": "What's the calorie count if I dine at the best Indian restaurant in Chicago tonight?",
        "Label": "CalculateCalories(menu_details=GetMenu(restaurant_info=FindRestaurant(city='Chicago', cuisine='Indian')))",
        "Index": 931
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on the city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(city, cuisine) -> restaurant_name"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List of dishes"
                    }
                },
                "format": "GetMenu(restaurant_name) -> menu"
            },
            {
                "name": "SuggestFood",
                "Description": "This API is to suggest a dish based on the menu and dietary preferences.",
                "input_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List of dishes"
                    },
                    "dietary_preferences": {
                        "description": "the dietary preferences",
                        "type": "String"
                    }
                },
                "output_params": {
                    "suggested_dish": {
                        "description": "the suggested dish",
                        "type": "String"
                    }
                },
                "format": "SuggestFood(menu, dietary_preferences) -> suggested_dish"
            }
        ],
        "Query": "Can you propose a gluten-free dish from a French restaurant in San Francisco?",
        "Label": "SuggestFood(menu=GetMenu(restaurant_name=FindRestaurant(city='San Francisco', cuisine='French')), dietary_preferences='gluten-free')",
        "Index": 932
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine type of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(city, cuisine) -> restaurant_name"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List of dishes"
                    }
                },
                "format": "GetMenu(restaurant_name) -> menu"
            },
            {
                "name": "SuggestFood",
                "Description": "This API is to suggest a dish based on menu and dietary preferences.",
                "input_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List of dishes"
                    },
                    "dietary_preferences": {
                        "description": "the dietary preferences of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "suggested_dish": {
                        "description": "the suggested dish based on dietary preferences",
                        "type": "String"
                    }
                },
                "format": "SuggestFood(menu, dietary_preferences) -> suggested_dish"
            }
        ],
        "Query": "Can you provide a lactose-free dish from a Chinese restaurant in Houston?",
        "Label": "SuggestFood(menu=GetMenu(restaurant_name=FindRestaurant(city='Houston', cuisine='Chinese')), dietary_preferences='lactose-free')",
        "Index": 933
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(city, cuisine) -> restaurant_name"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List of dishes"
                    }
                },
                "format": "GetMenu(restaurant_name) -> menu"
            },
            {
                "name": "SuggestFood",
                "Description": "This API is to suggest a dish based on menu and dietary preferences.",
                "input_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List of dishes"
                    },
                    "dietary_preferences": {
                        "description": "the dietary preferences",
                        "type": "String"
                    }
                },
                "output_params": {
                    "suggested_dish": {
                        "description": "the suggested dish",
                        "type": "String"
                    }
                },
                "format": "SuggestFood(menu, dietary_preferences) -> suggested_dish"
            }
        ],
        "Query": "Can you suggest a halal dish from an Indian restaurant in Chicago?",
        "Label": "SuggestFood(menu=GetMenu(restaurant_name=FindRestaurant(city='Chicago', cuisine='Indian')), dietary_preferences='halal')",
        "Index": 934
    },
    {
        "APIs": [
            {
                "name": "FindBook",
                "Description": "This API is to find a book by its title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book": {
                        "description": "the book object",
                        "type": "Object"
                    }
                },
                "format": "FindBook(title) -> book"
            },
            {
                "name": "ReadReview",
                "Description": "This API is to read the review of a book.",
                "input_params": {
                    "book": {
                        "description": "the book object",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "review": {
                        "description": "the review of the book",
                        "type": "String"
                    }
                },
                "format": "ReadReview(book) -> review"
            },
            {
                "name": "SendReview",
                "Description": "This API is to send a review to a contact.",
                "input_params": {
                    "contact_info": {
                        "description": "the contact information of the recipient",
                        "type": "String"
                    },
                    "review": {
                        "description": "the review of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of the review sending",
                        "type": "String"
                    }
                },
                "format": "SendReview(contact_info, review) -> status"
            }
        ],
        "Query": "Can you find the book '1984' and send its review to my teacher whose email is teachsmith@school.edu?",
        "Label": "SendReview(contact_info='teachsmith@school.edu', review=ReadReview(book=FindBook(title='1984')))",
        "Index": 935
    },
    {
        "APIs": [
            {
                "name": "FindBook",
                "Description": "This API is to find a book by its title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book": {
                        "description": "the information of the book",
                        "type": "Object"
                    }
                },
                "format": "FindBook(title) -> book"
            },
            {
                "name": "ReadReview",
                "Description": "This API is to read the review of a book.",
                "input_params": {
                    "book": {
                        "description": "the book object",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "review": {
                        "description": "the review of the book",
                        "type": "String"
                    }
                },
                "format": "ReadReview(book) -> review"
            },
            {
                "name": "SendReview",
                "Description": "This API is to send a book review to a friend.",
                "input_params": {
                    "contact_info": {
                        "description": "the email address of the friend",
                        "type": "String"
                    },
                    "review": {
                        "description": "the review of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of the review sending",
                        "type": "String"
                    }
                },
                "format": "SendReview(contact_info, review) -> status"
            }
        ],
        "Query": "Can you find the book 'To Kill a Mockingbird' and send its review to my friend whose email is friendjoe@gmail.com?",
        "Label": "SendReview(contact_info='friendjoe@gmail.com', review=ReadReview(book=FindBook(title='To Kill a Mockingbird')))",
        "Index": 936
    },
    {
        "APIs": [
            {
                "name": "MovieFinder",
                "Description": "This API is to find the movie ID based on the movie name.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieFinder(movie_name) -> movie_id"
            },
            {
                "name": "MovieRatings",
                "Description": "This API is to get the ratings of a movie based on the movie ID.",
                "input_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "rating_scores": {
                        "description": "the ratings of the movie",
                        "type": "List of Float"
                    }
                },
                "format": "MovieRatings(movie_id) -> rating_scores"
            },
            {
                "name": "RatingAverage",
                "Description": "This API is to calculate the average rating based on the rating scores.",
                "input_params": {
                    "rating_scores": {
                        "description": "the ratings of the movie",
                        "type": "List of Float"
                    }
                },
                "output_params": {
                    "average_rating": {
                        "description": "the average rating of the movie",
                        "type": "Float"
                    }
                },
                "format": "RatingAverage(rating_scores) -> average_rating"
            }
        ],
        "Query": "What's the average rating of the movie 'Titanic'?",
        "Label": "RatingAverage(rating_scores=MovieRatings(movie_id=MovieFinder(movie_name='Titanic')))",
        "Index": 937
    },
    {
        "APIs": [
            {
                "name": "MovieFinder",
                "Description": "This API is to find the movie ID based on the movie name.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieFinder(movie_name) -> movie_id"
            },
            {
                "name": "MovieRatings",
                "Description": "This API is to get the ratings of a movie based on the movie ID.",
                "input_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "ratingScores": {
                        "description": "the ratings of the movie",
                        "type": "List"
                    }
                },
                "format": "MovieRatings(movie_id) -> ratingScores"
            },
            {
                "name": "RatingAverage",
                "Description": "This API is to calculate the average rating based on the rating scores.",
                "input_params": {
                    "ratingScores": {
                        "description": "the ratings of the movie",
                        "type": "List"
                    }
                },
                "output_params": {
                    "averageRating": {
                        "description": "the average rating of the movie",
                        "type": "Float"
                    }
                },
                "format": "RatingAverage(ratingScores) -> averageRating"
            }
        ],
        "Query": "What's the average rating of the movie 'The Dark Knight'?",
        "Label": "RatingAverage(ratingScores=MovieRatings(movie_id=MovieFinder(movie_name='The Dark Knight')))",
        "Index": 938
    },
    {
        "APIs": [
            {
                "name": "MovieFinder",
                "Description": "This API is to find the movie ID based on the movie name.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieFinder(movie_name) -> movie_id"
            },
            {
                "name": "MovieRatings",
                "Description": "This API is to get the ratings of a movie based on the movie ID.",
                "input_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "ratingScores": {
                        "description": "the ratings of the movie",
                        "type": "List"
                    }
                },
                "format": "MovieRatings(movie_id) -> ratingScores"
            },
            {
                "name": "RatingAverage",
                "Description": "This API is to calculate the average rating based on the rating scores.",
                "input_params": {
                    "ratingScores": {
                        "description": "the ratings of the movie",
                        "type": "List"
                    }
                },
                "output_params": {
                    "averageRating": {
                        "description": "the average rating of the movie",
                        "type": "Float"
                    }
                },
                "format": "RatingAverage(ratingScores) -> averageRating"
            }
        ],
        "Query": "What's the average rating of the movie 'Avengers: Endgame'?",
        "Label": "RatingAverage(ratingScores=MovieRatings(movie_id=MovieFinder(movie_name='Avengers: Endgame')))",
        "Index": 939
    },
    {
        "APIs": [
            {
                "name": "MovieFinder",
                "Description": "This API is to find the movie ID based on the movie name.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieFinder(movie_name) -> movie_id"
            },
            {
                "name": "MovieRatings",
                "Description": "This API is to get the ratings of a movie based on the movie ID.",
                "input_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "ratingScores": {
                        "description": "the ratings of the movie",
                        "type": "List"
                    }
                },
                "format": "MovieRatings(movie_id) -> ratingScores"
            },
            {
                "name": "RatingAverage",
                "Description": "This API is to calculate the average rating based on the rating scores.",
                "input_params": {
                    "ratingScores": {
                        "description": "the ratings of the movie",
                        "type": "List"
                    }
                },
                "output_params": {
                    "averageRating": {
                        "description": "the average rating of the movie",
                        "type": "Float"
                    }
                },
                "format": "RatingAverage(ratingScores) -> averageRating"
            }
        ],
        "Query": "What's the average rating of the movie 'Avengers: Endgame'?",
        "Label": "RatingAverage(ratingScores=MovieRatings(movie_id=MovieFinder(movie_name='Avengers: Endgame')))",
        "Index": 940
    },
    {
        "APIs": [
            {
                "name": "MovieFinder",
                "Description": "This API is to find the movie ID based on the movie name.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieFinder(movie_name) -> movie_id"
            },
            {
                "name": "MovieRatings",
                "Description": "This API is to get the ratings of a movie based on the movie ID.",
                "input_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "rating_scores": {
                        "description": "the scores of the movie ratings",
                        "type": "List of Float"
                    }
                },
                "format": "MovieRatings(movie_id) -> rating_scores"
            },
            {
                "name": "RatingAverage",
                "Description": "This API is to calculate the average rating based on the rating scores.",
                "input_params": {
                    "rating_scores": {
                        "description": "the scores of the movie ratings",
                        "type": "List of Float"
                    }
                },
                "output_params": {
                    "average_rating": {
                        "description": "the average rating of the movie",
                        "type": "Float"
                    }
                },
                "format": "RatingAverage(rating_scores) -> average_rating"
            }
        ],
        "Query": "What's the average rating of the movie 'Pulp Fiction'?",
        "Label": "RatingAverage(rating_scores=MovieRatings(movie_id=MovieFinder(movie_name='Pulp Fiction')))",
        "Index": 941
    },
    {
        "APIs": [
            {
                "name": "ProductSearch",
                "Description": "This API is to search for a product by its name.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductSearch(product_name) -> product_id"
            },
            {
                "name": "ProductReviews",
                "Description": "This API is to get the reviews of a product.",
                "input_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "review_scores": {
                        "description": "the scores of the reviews",
                        "type": "List of Float"
                    }
                },
                "format": "ProductReviews(product_id) -> review_scores"
            },
            {
                "name": "ReviewAverage",
                "Description": "This API is to calculate the average review score.",
                "input_params": {
                    "review_scores": {
                        "description": "the scores of the reviews",
                        "type": "List of Float"
                    }
                },
                "output_params": {
                    "average_score": {
                        "description": "the average review score",
                        "type": "Float"
                    }
                },
                "format": "ReviewAverage(review_scores) -> average_score"
            }
        ],
        "Query": "What is the average review score for the product 'Samsung Galaxy S21'?",
        "Label": "ReviewAverage(review_scores=ProductReviews(product_id=ProductSearch(product_name='Samsung Galaxy S21')))",
        "Index": 942
    },
    {
        "APIs": [
            {
                "name": "ProductSearch",
                "Description": "This API is to search for a product by its name.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductSearch(product_name) -> product_id"
            },
            {
                "name": "ProductReviews",
                "Description": "This API is to retrieve the reviews for a product.",
                "input_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "review_scores": {
                        "description": "the scores of the reviews",
                        "type": "List of Float"
                    }
                },
                "format": "ProductReviews(product_id) -> review_scores"
            },
            {
                "name": "ReviewAverage",
                "Description": "This API is to calculate the average review score.",
                "input_params": {
                    "review_scores": {
                        "description": "the scores of the reviews",
                        "type": "List of Float"
                    }
                },
                "output_params": {
                    "average_score": {
                        "description": "the average review score",
                        "type": "Float"
                    }
                },
                "format": "ReviewAverage(review_scores) -> average_score"
            }
        ],
        "Query": "What is the average review score for the product 'Sony PlayStation 5'?",
        "Label": "ReviewAverage(review_scores=ProductReviews(product_id=ProductSearch(product_name='Sony PlayStation 5')))",
        "Index": 943
    },
    {
        "APIs": [
            {
                "name": "ProductSearch",
                "Description": "This API is to search for a product by its name.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductSearch(product_name) -> product_id"
            },
            {
                "name": "ProductReviews",
                "Description": "This API is to get the reviews for a product.",
                "input_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "review_scores": {
                        "description": "the scores of the reviews",
                        "type": "List of Float"
                    }
                },
                "format": "ProductReviews(product_id) -> review_scores"
            },
            {
                "name": "ReviewAverage",
                "Description": "This API is to calculate the average review score.",
                "input_params": {
                    "review_scores": {
                        "description": "the scores of the reviews",
                        "type": "List of Float"
                    }
                },
                "output_params": {
                    "average_score": {
                        "description": "the average review score",
                        "type": "Float"
                    }
                },
                "format": "ReviewAverage(review_scores) -> average_score"
            }
        ],
        "Query": "What is the average review score for the product 'Sony PlayStation 5'?",
        "Label": "ReviewAverage(reviewScores=ProductReviews(product_id=ProductSearch(product_name='Sony PlayStation 5')))",
        "Index": 944
    },
    {
        "APIs": [
            {
                "name": "MovieSearch",
                "Description": "This API is to search for a movie by its title.",
                "input_params": {
                    "movie_title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieSearch(movie_title) -> movie_id"
            },
            {
                "name": "MovieRatings",
                "Description": "This API is to get the ratings of a movie.",
                "input_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "ratingScores": {
                        "description": "the ratings of the movie",
                        "type": "List of Float"
                    }
                },
                "format": "MovieRatings(movie_id) -> ratingScores"
            },
            {
                "name": "AverageRating",
                "Description": "This API is to calculate the average rating of a movie.",
                "input_params": {
                    "ratingScores": {
                        "description": "the ratings of the movie",
                        "type": "List of Float"
                    }
                },
                "output_params": {
                    "average_rating": {
                        "description": "the average rating of the movie",
                        "type": "Float"
                    }
                },
                "format": "AverageRating(ratingScores) -> average_rating"
            }
        ],
        "Query": "What is the average rating for the movie 'The Dark Knight'?",
        "Label": "AverageRating(ratingScores=MovieRatings(movie_id=MovieSearch(movie_title='The Dark Knight')))",
        "Index": 945
    },
    {
        "APIs": [
            {
                "name": "MovieSearch",
                "Description": "This API is to search for a movie by its title.",
                "input_params": {
                    "movie_title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieSearch(movie_title) -> movie_id"
            },
            {
                "name": "MovieRatings",
                "Description": "This API is to retrieve the ratings of a movie.",
                "input_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "ratingScores": {
                        "description": "the ratings of the movie",
                        "type": "List of Float"
                    }
                },
                "format": "MovieRatings(movie_id) -> ratingScores"
            },
            {
                "name": "AverageRating",
                "Description": "This API is to calculate the average rating of a movie.",
                "input_params": {
                    "ratingScores": {
                        "description": "the ratings of the movie",
                        "type": "List of Float"
                    }
                },
                "output_params": {
                    "average_rating": {
                        "description": "the average rating of the movie",
                        "type": "Float"
                    }
                },
                "format": "AverageRating(ratingScores) -> average_rating"
            }
        ],
        "Query": "What is the average rating for the movie 'The Godfather'?",
        "Label": "AverageRating(ratingScores=MovieRatings(movie_id=MovieSearch(movie_title='The Godfather')))",
        "Index": 946
    },
    {
        "APIs": [
            {
                "name": "ProductSearch",
                "Description": "This API is to search for a product.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductSearch(product_name) -> product_id"
            },
            {
                "name": "ProductReviews",
                "Description": "This API is to get the reviews for a product.",
                "input_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "reviewScores": {
                        "description": "the review scores for the product",
                        "type": "List of Float"
                    }
                },
                "format": "ProductReviews(product_id) -> reviewScores"
            },
            {
                "name": "AverageReview",
                "Description": "This API is to calculate the average review score.",
                "input_params": {
                    "reviewScores": {
                        "description": "the review scores for the product",
                        "type": "List of Float"
                    }
                },
                "output_params": {
                    "averageReview": {
                        "description": "the average review score",
                        "type": "Float"
                    }
                },
                "format": "AverageReview(reviewScores) -> averageReview"
            }
        ],
        "Query": "What is the average review for the product 'Samsung Galaxy S21'?",
        "Label": "AverageReview(reviewScores=ProductReviews(product_id=ProductSearch(product_name='Samsung Galaxy S21')))",
        "Index": 947
    },
    {
        "APIs": [
            {
                "name": "ProductSearch",
                "Description": "This API is to search for a product by its name.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductSearch(product_name) -> product_id"
            },
            {
                "name": "ProductReviews",
                "Description": "This API is to get the reviews for a product.",
                "input_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "reviewScores": {
                        "description": "the scores of the reviews",
                        "type": "List of Float"
                    }
                },
                "format": "ProductReviews(product_id) -> reviewScores"
            },
            {
                "name": "AverageReview",
                "Description": "This API is to calculate the average review score.",
                "input_params": {
                    "reviewScores": {
                        "description": "the scores of the reviews",
                        "type": "List of Float"
                    }
                },
                "output_params": {
                    "average_review": {
                        "description": "the average review score",
                        "type": "Float"
                    }
                },
                "format": "AverageReview(reviewScores) -> average_review"
            }
        ],
        "Query": "What is the average review for the product 'MacBook Pro'?",
        "Label": "AverageReview(reviewScores=ProductReviews(product_id=ProductSearch(product_name='MacBook Pro')))",
        "Index": 948
    },
    {
        "APIs": [
            {
                "name": "ProductSearch",
                "Description": "This API is to search for a product by its name.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductSearch(product_name) -> product_id"
            },
            {
                "name": "ProductReviews",
                "Description": "This API is to get the reviews for a product.",
                "input_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "reviewScores": {
                        "description": "the scores of the reviews",
                        "type": "List of Float"
                    }
                },
                "format": "ProductReviews(product_id) -> reviewScores"
            },
            {
                "name": "AverageReview",
                "Description": "This API is to calculate the average review score.",
                "input_params": {
                    "reviewScores": {
                        "description": "the scores of the reviews",
                        "type": "List of Float"
                    }
                },
                "output_params": {
                    "average_review": {
                        "description": "the average review score",
                        "type": "Float"
                    }
                },
                "format": "AverageReview(reviewScores) -> average_review"
            }
        ],
        "Query": "What is the average review for the product 'Dell XPS 15'?",
        "Label": "AverageReview(reviewScores=ProductReviews(product_id=ProductSearch(product_name='Dell XPS 15')))",
        "Index": 949
    },
    {
        "APIs": [
            {
                "name": "MovieLookup",
                "Description": "This API is to lookup the movie ID based on the movie name.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieLookup(movie_name) -> movie_id"
            },
            {
                "name": "MovieRating",
                "Description": "This API is to get the rating scores for a movie.",
                "input_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "rating_scores": {
                        "description": "the rating scores for the movie",
                        "type": "List of Float"
                    }
                },
                "format": "MovieRating(movie_id) -> rating_scores"
            },
            {
                "name": "HighestRating",
                "Description": "This API is to get the highest rating score from a list of rating scores.",
                "input_params": {
                    "rating_scores": {
                        "description": "the rating scores for a movie",
                        "type": "List of Float"
                    }
                },
                "output_params": {
                    "highest_rating": {
                        "description": "the highest rating score",
                        "type": "Float"
                    }
                },
                "format": "HighestRating(rating_scores) -> highest_rating"
            }
        ],
        "Query": "What is the highest rating score for the movie 'The Dark Knight'?",
        "Label": "HighestRating(rating_scores=MovieRating(movie_id=MovieLookup(movie_name='The Dark Knight')))",
        "Index": 950
    },
    {
        "APIs": [
            {
                "name": "MovieLookup",
                "Description": "This API is to lookup the movie ID based on the movie name.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieLookup(movie_name) -> movie_id"
            },
            {
                "name": "MovieRating",
                "Description": "This API is to get the rating scores for a movie.",
                "input_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "rating_scores": {
                        "description": "the rating scores for the movie",
                        "type": "List of Float"
                    }
                },
                "format": "MovieRating(movie_id) -> rating_scores"
            },
            {
                "name": "HighestRating",
                "Description": "This API is to get the highest rating score from a list of rating scores.",
                "input_params": {
                    "rating_scores": {
                        "description": "the rating scores for a movie",
                        "type": "List of Float"
                    }
                },
                "output_params": {
                    "highest_rating": {
                        "description": "the highest rating score",
                        "type": "Float"
                    }
                },
                "format": "HighestRating(rating_scores) -> highest_rating"
            }
        ],
        "Query": "What is the highest rating score for the movie 'Interstellar'?",
        "Label": "HighestRating(rating_scores=MovieRating(movie_id=MovieLookup(movie_name='Interstellar')))",
        "Index": 951
    },
    {
        "APIs": [
            {
                "name": "MovieLookup",
                "Description": "This API is to lookup the movie ID based on the movie name.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieLookup(movie_name) -> movie_id"
            },
            {
                "name": "MovieRating",
                "Description": "This API is to get the rating scores of a movie.",
                "input_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "rating_scores": {
                        "description": "the rating scores of the movie",
                        "type": "List"
                    }
                },
                "format": "MovieRating(movie_id) -> rating_scores"
            },
            {
                "name": "HighestRating",
                "Description": "This API is to get the highest rating score from a list of rating scores.",
                "input_params": {
                    "rating_scores": {
                        "description": "the rating scores of the movie",
                        "type": "List"
                    }
                },
                "output_params": {
                    "highest_rating": {
                        "description": "the highest rating score",
                        "type": "Float"
                    }
                },
                "format": "HighestRating(rating_scores) -> highest_rating"
            }
        ],
        "Query": "What is the highest rating score for the movie 'Titanic'?",
        "Label": "HighestRating(rating_scores=MovieRating(movie_id=MovieLookup(movie_name='Titanic')))",
        "Index": 952
    },
    {
        "APIs": [
            {
                "name": "MovieLookup",
                "Description": "This API is to convert movie name to movie ID.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieLookup(movie_name) -> movie_id"
            },
            {
                "name": "MovieRating",
                "Description": "This API is to get the rating scores for a movie.",
                "input_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "rating_scores": {
                        "description": "the rating scores for the movie",
                        "type": "List"
                    }
                },
                "format": "MovieRating(movie_id) -> rating_scores"
            },
            {
                "name": "HighestRating",
                "Description": "This API is to get the highest rating score from a list of rating scores.",
                "input_params": {
                    "rating_scores": {
                        "description": "the rating scores for a movie",
                        "type": "List"
                    }
                },
                "output_params": {
                    "highest_rating": {
                        "description": "the highest rating score",
                        "type": "Float"
                    }
                },
                "format": "HighestRating(rating_scores) -> highest_rating"
            }
        ],
        "Query": "What is the highest rating score for the movie 'Titanic'?",
        "Label": "HighestRating(rating_scores=MovieRating(movie_id=MovieLookup(movie_name='Titanic')))",
        "Index": 953
    },
    {
        "APIs": [
            {
                "name": "MovieLookup",
                "Description": "This API is to lookup the movie ID based on the movie name.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieLookup(movie_name) -> movie_id"
            },
            {
                "name": "MovieRating",
                "Description": "This API is to get the rating scores of a movie based on the movie ID.",
                "input_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "rating_scores": {
                        "description": "the rating scores of the movie",
                        "type": "List of Float"
                    }
                },
                "format": "MovieRating(movie_id) -> rating_scores"
            },
            {
                "name": "HighestRating",
                "Description": "This API is to get the highest rating score from a list of rating scores.",
                "input_params": {
                    "rating_scores": {
                        "description": "the rating scores of a movie",
                        "type": "List of Float"
                    }
                },
                "output_params": {
                    "highest_rating": {
                        "description": "the highest rating score",
                        "type": "Float"
                    }
                },
                "format": "HighestRating(rating_scores) -> highest_rating"
            }
        ],
        "Query": "What is the highest rating score for the movie 'The Shawshank Redemption'?",
        "Label": "HighestRating(rating_scores=MovieRating(movie_id=MovieLookup(movie_name='The Shawshank Redemption')))",
        "Index": 954
    },
    {
        "APIs": [
            {
                "name": "FlightSearch",
                "Description": "This API is to search for flights based on destination and date.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FlightSearch(destination, date) -> flight_id"
            },
            {
                "name": "SeatSelection",
                "Description": "This API is to select seats for a flight.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "seats": {
                        "description": "the available seats for the flight",
                        "type": "List"
                    }
                },
                "format": "SeatSelection(flight_id) -> seats"
            },
            {
                "name": "UpgradeAvailability",
                "Description": "This API is to check the availability of seat upgrades.",
                "input_params": {
                    "seats": {
                        "description": "the available seats for the flight",
                        "type": "List"
                    }
                },
                "output_params": {
                    "upgrade_status": {
                        "description": "the availability of seat upgrades",
                        "type": "String"
                    }
                },
                "format": "UpgradeAvailability(seats) -> upgrade_status"
            }
        ],
        "Query": "Can I upgrade my seat for the flight to New York on 15th July?",
        "Label": "UpgradeAvailability(seats=SeatSelection(flight_id=FlightSearch(destination='New York', date='15th July')))",
        "Index": 955
    },
    {
        "APIs": [
            {
                "name": "FlightSearch",
                "Description": "This API is to search for flights based on destination and date.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FlightSearch(destination, date) -> flight_id"
            },
            {
                "name": "SeatSelection",
                "Description": "This API is to select seats for a flight.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "seats": {
                        "description": "the available seats for the flight",
                        "type": "List"
                    }
                },
                "format": "SeatSelection(flight_id) -> seats"
            },
            {
                "name": "UpgradeAvailability",
                "Description": "This API is to check the availability of seat upgrades.",
                "input_params": {
                    "seats": {
                        "description": "the available seats for the flight",
                        "type": "List"
                    }
                },
                "output_params": {
                    "upgrade_available": {
                        "description": "the availability of seat upgrades",
                        "type": "Boolean"
                    }
                },
                "format": "UpgradeAvailability(seats) -> upgrade_available"
            }
        ],
        "Query": "Is there any seat upgrade available for the flight to Sydney on 10th August?",
        "Label": "UpgradeAvailability(seats=SeatSelection(flight_id=FlightSearch(destination='Sydney', date='10th August')))",
        "Index": 956
    },
    {
        "APIs": [
            {
                "name": "FlightSearch",
                "Description": "This API is to search for flights.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FlightSearch(destination, date) -> flight_id"
            },
            {
                "name": "SeatSelection",
                "Description": "This API is to select seats for a flight.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "seats": {
                        "description": "the selected seats for the flight",
                        "type": "String"
                    }
                },
                "format": "SeatSelection(flight_id) -> seats"
            },
            {
                "name": "UpgradeAvailability",
                "Description": "This API is to check the availability of seat upgrades.",
                "input_params": {
                    "seats": {
                        "description": "the selected seats for the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "upgrade_available": {
                        "description": "the availability of seat upgrades",
                        "type": "Boolean"
                    }
                },
                "format": "UpgradeAvailability(seats) -> upgrade_available"
            }
        ],
        "Query": "Can I get a seat upgrade for the flight to London on 20th September?",
        "Label": "UpgradeAvailability(seats=SeatSelection(flight_id=FlightSearch(destination='London', date='20th September')))",
        "Index": 957
    },
    {
        "APIs": [
            {
                "name": "FlightSearch",
                "Description": "This API is to search for flights.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FlightSearch(destination, date) -> flight_id"
            },
            {
                "name": "SeatSelection",
                "Description": "This API is to select seats for a flight.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "seats": {
                        "description": "the selected seats",
                        "type": "String"
                    }
                },
                "format": "SeatSelection(flight_id) -> seats"
            },
            {
                "name": "UpgradeAvailability",
                "Description": "This API is to check the availability of seat upgrades.",
                "input_params": {
                    "seats": {
                        "description": "the selected seats",
                        "type": "String"
                    }
                },
                "output_params": {
                    "upgrade_available": {
                        "description": "the availability of seat upgrades",
                        "type": "Boolean"
                    }
                },
                "format": "UpgradeAvailability(seats) -> upgrade_available"
            }
        ],
        "Query": "Can I get a seat upgrade for the flight to London on 20th September?",
        "Label": "UpgradeAvailability(seats=SeatSelection(flight_id=FlightSearch(destination='London', date='20th September')))",
        "Index": 958
    },
    {
        "APIs": [
            {
                "name": "FlightSearch",
                "Description": "This API is to search for flights based on destination and date.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FlightSearch(destination, date) -> flight_id"
            },
            {
                "name": "SeatSelection",
                "Description": "This API is to select seats for a flight.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "seats": {
                        "description": "the available seats for the flight",
                        "type": "List"
                    }
                },
                "format": "SeatSelection(flight_id) -> seats"
            },
            {
                "name": "UpgradeAvailability",
                "Description": "This API is to check the availability of seat upgrades.",
                "input_params": {
                    "seats": {
                        "description": "the available seats for the flight",
                        "type": "List"
                    }
                },
                "output_params": {
                    "upgrade_status": {
                        "description": "the availability of seat upgrades",
                        "type": "String"
                    }
                },
                "format": "UpgradeAvailability(seats) -> upgrade_status"
            }
        ],
        "Query": "Can I upgrade my seat for the flight to Paris on 30th November?",
        "Label": "UpgradeAvailability(seats=SeatSelection(flight_id=FlightSearch(destination='Paris', date='30th November')))",
        "Index": 959
    },
    {
        "APIs": [
            {
                "name": "FlightSearch",
                "Description": "This API is to search for flights based on departure and arrival cities.",
                "input_params": {
                    "departure_city": {
                        "description": "the city of departure",
                        "type": "String"
                    },
                    "arrival_city": {
                        "description": "the city of arrival",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FlightSearch(departure_city, arrival_city) -> flight_id"
            },
            {
                "name": "SeatClassAvailability",
                "Description": "This API is to check the availability of different seating classes for a flight.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "seat_classes": {
                        "description": "the available seating classes",
                        "type": "List"
                    }
                },
                "format": "SeatClassAvailability(flight_id) -> seat_classes"
            },
            {
                "name": "BestSeatClass",
                "Description": "This API is to locate the finest seating category for a flight.",
                "input_params": {
                    "seat_classes": {
                        "description": "the available seating classes",
                        "type": "List"
                    }
                },
                "output_params": {
                    "finest_seating_category": {
                        "description": "the finest seating category",
                        "type": "String"
                    }
                },
                "format": "BestSeatClass(seat_classes) -> finest_seating_category"
            }
        ],
        "Query": "Can you help me locate the finest seating category for a flight from New York to Paris?",
        "Label": "BestSeatClass(seat_classes=SeatClassAvailability(flight_id=FlightSearch(departure_city='New York', arrival_city='Paris')))",
        "Index": 960
    },
    {
        "APIs": [
            {
                "name": "FlightSearch",
                "Description": "This API is to search for flights based on departure and arrival cities.",
                "input_params": {
                    "departure_city": {
                        "description": "the city of departure",
                        "type": "String"
                    },
                    "arrival_city": {
                        "description": "the city of arrival",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FlightSearch(departure_city, arrival_city) -> flight_id"
            },
            {
                "name": "SeatClassAvailability",
                "Description": "This API is to check the availability of seat classes for a flight.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "seat_classes": {
                        "description": "the available seat classes",
                        "type": "List"
                    }
                },
                "format": "SeatClassAvailability(flight_id) -> seat_classes"
            },
            {
                "name": "BestSeatClass",
                "Description": "This API is to find the best seat class for a flight.",
                "input_params": {
                    "seat_classes": {
                        "description": "the available seat classes",
                        "type": "List"
                    }
                },
                "output_params": {
                    "best_seat_class": {
                        "description": "the best seat class for the flight",
                        "type": "String"
                    }
                },
                "format": "BestSeatClass(seat_classes) -> best_seat_class"
            }
        ],
        "Query": "Can you find the premium seat class for a flight from Singapore to San Francisco?",
        "Label": "BestSeatClass(seat_classes=SeatClassAvailability(flight_id=FlightSearch(departure_city='Singapore', arrival_city='San Francisco')))",
        "Index": 961
    },
    {
        "APIs": [
            {
                "name": "FlightSearch",
                "Description": "This API is to search for flights based on departure and arrival cities.",
                "input_params": {
                    "departure_city": {
                        "description": "the city of departure",
                        "type": "String"
                    },
                    "arrival_city": {
                        "description": "the city of arrival",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FlightSearch(departure_city, arrival_city) -> flight_id"
            },
            {
                "name": "SeatClassAvailability",
                "Description": "This API is to check the availability of seat classes for a given flight.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "seat_classes": {
                        "description": "the available seat classes for the flight",
                        "type": "List"
                    }
                },
                "format": "SeatClassAvailability(flight_id) -> seat_classes"
            },
            {
                "name": "BestSeatClass",
                "Description": "This API is to find the best seat class for a given flight.",
                "input_params": {
                    "seat_classes": {
                        "description": "the available seat classes for the flight",
                        "type": "List"
                    }
                },
                "output_params": {
                    "best_seat_class": {
                        "description": "the best seat class for the flight",
                        "type": "String"
                    }
                },
                "format": "BestSeatClass(seat_classes) -> best_seat_class"
            }
        ],
        "Query": "Can you find the premium seat class for a flight from Singapore to San Francisco?",
        "Label": "BestSeatClass(seat_classes=SeatClassAvailability(flight_id=FlightSearch(departure_city='Singapore', arrival_city='San Francisco')))",
        "Index": 962
    },
    {
        "APIs": [
            {
                "name": "FlightSearch",
                "Description": "This API is to search for flights based on departure and arrival cities.",
                "input_params": {
                    "departure_city": {
                        "description": "the city of departure",
                        "type": "String"
                    },
                    "arrival_city": {
                        "description": "the city of arrival",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FlightSearch(departure_city, arrival_city) -> flight_id"
            },
            {
                "name": "SeatClassAvailability",
                "Description": "This API is to check the availability of seat classes for a flight.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "seat_classes": {
                        "description": "the available seat classes",
                        "type": "List"
                    }
                },
                "format": "SeatClassAvailability(flight_id) -> seat_classes"
            },
            {
                "name": "BestSeatClass",
                "Description": "This API is to determine the choicest seat class for a flight.",
                "input_params": {
                    "seat_classes": {
                        "description": "the available seat classes",
                        "type": "List"
                    }
                },
                "output_params": {
                    "best_seat_class": {
                        "description": "the choicest seat class",
                        "type": "String"
                    }
                },
                "format": "BestSeatClass(seat_classes) -> best_seat_class"
            }
        ],
        "Query": "Can you determine the choicest seat class for a flight from Mumbai to Rome?",
        "Label": "BestSeatClass(seat_classes=SeatClassAvailability(flight_id=FlightSearch(departure_city='Mumbai', arrival_city='Rome')))",
        "Index": 963
    },
    {
        "APIs": [
            {
                "name": "HotelSearch",
                "Description": "This API is to search for hotels in a specific city and date range.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotel_id": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    }
                },
                "format": "HotelSearch(city, check_in_date, check_out_date) -> hotel_id"
            },
            {
                "name": "RoomAvailability",
                "Description": "This API is to check the availability of rooms in a hotel.",
                "input_params": {
                    "hotel_id": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "rooms": {
                        "description": "a list of available rooms",
                        "type": "List"
                    }
                },
                "format": "RoomAvailability(hotel_id) -> rooms"
            },
            {
                "name": "BestRoom",
                "Description": "This API is to find the best room in a given list of rooms.",
                "input_params": {
                    "rooms": {
                        "description": "a list of available rooms",
                        "type": "List"
                    }
                },
                "output_params": {
                    "best_room": {
                        "description": "the best room",
                        "type": "String"
                    }
                },
                "format": "BestRoom(rooms) -> best_room"
            }
        ],
        "Query": "Find me the best room in New York from July 4 to July 10.",
        "Label": "BestRoom(rooms=RoomAvailability(hotel_id=HotelSearch(city='New York', check_in_date='July 4', check_out_date='July 10')))",
        "Index": 964
    },
    {
        "APIs": [
            {
                "name": "HotelSearch",
                "Description": "This API is to search for hotels in a specific city and date range.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotel_id": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    }
                },
                "format": "HotelSearch(city, check_in_date, check_out_date) -> hotel_id"
            },
            {
                "name": "RoomAvailability",
                "Description": "This API is to check the availability of rooms in a hotel.",
                "input_params": {
                    "hotel_id": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "rooms": {
                        "description": "a list of available rooms",
                        "type": "List"
                    }
                },
                "format": "RoomAvailability(hotel_id) -> rooms"
            },
            {
                "name": "BestRoom",
                "Description": "This API is to find the best room in a hotel.",
                "input_params": {
                    "rooms": {
                        "description": "a list of available rooms",
                        "type": "List"
                    }
                },
                "output_params": {
                    "best_room": {
                        "description": "the best room",
                        "type": "String"
                    }
                },
                "format": "BestRoom(rooms) -> best_room"
            }
        ],
        "Query": "I need to find the best room in Tokyo from April 10 to April 17.",
        "Label": "BestRoom(rooms=RoomAvailability(hotel_id=HotelSearch(city='Tokyo', check_in_date='April 10', check_out_date='April 17')))",
        "Index": 965
    },
    {
        "APIs": [
            {
                "name": "HotelSearch",
                "Description": "This API is to search for hotels in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotel_id": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    }
                },
                "format": "HotelSearch(city, check_in_date, check_out_date) -> hotel_id"
            },
            {
                "name": "RoomAvailability",
                "Description": "This API is to check the availability of rooms in a hotel.",
                "input_params": {
                    "hotel_id": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "rooms": {
                        "description": "a list of available rooms",
                        "type": "List"
                    }
                },
                "format": "RoomAvailability(hotel_id) -> rooms"
            },
            {
                "name": "BestRoom",
                "Description": "This API is to find the best room for a stay.",
                "input_params": {
                    "rooms": {
                        "description": "a list of available rooms",
                        "type": "List"
                    }
                },
                "output_params": {
                    "best_room": {
                        "description": "the best room for the stay",
                        "type": "String"
                    }
                },
                "format": "BestRoom(rooms) -> best_room"
            }
        ],
        "Query": "Help me find the best room for my stay in Rome from September 15 to September 21.",
        "Label": "BestRoom(rooms=RoomAvailability(hotel_id=HotelSearch(city='Rome', check_in_date='September 15', check_out_date='September 21')))",
        "Index": 966
    },
    {
        "APIs": [
            {
                "name": "BookSearch",
                "Description": "This API is to search for a book by title and author.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    },
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookSearch(title, author) -> book_id"
            },
            {
                "name": "BookStoreAvailability",
                "Description": "This API is to check the availability of a book in different bookstores.",
                "input_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "store_ids": {
                        "description": "the IDs of the bookstores where the book is available",
                        "type": "List of Integer"
                    }
                },
                "format": "BookStoreAvailability(book_id) -> store_ids"
            },
            {
                "name": "NearestStore",
                "Description": "This API is to locate the nearest bookstore where a specific book is available.",
                "input_params": {
                    "store_ids": {
                        "description": "the IDs of the bookstores where the book is available",
                        "type": "List of Integer"
                    },
                    "user_location": {
                        "description": "the location of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "nearest_store": {
                        "description": "the ID of the nearest bookstore",
                        "type": "Integer"
                    }
                },
                "format": "NearestStore(store_ids, user_location) -> nearest_store"
            }
        ],
        "Query": "Could you locate the nearest bookstore where I could buy 'To Kill a Mockingbird' by Harper Lee in New York?",
        "Label": "NearestStore(store_ids=BookStoreAvailability(book_id=BookSearch(title='To Kill a Mockingbird', author='Harper Lee')), user_location='New York')",
        "Index": 967
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API is to search for a restaurant based on name and city.",
                "input_params": {
                    "name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantSearch(name, city) -> restaurant_id"
            },
            {
                "name": "TableAvailability",
                "Description": "This API is to check the availability of tables in a restaurant on a specific date.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date for table availability",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "tables": {
                        "description": "the available tables in the restaurant on the specified date",
                        "type": "List"
                    }
                },
                "format": "TableAvailability(restaurant_id, date) -> tables"
            },
            {
                "name": "BestTable",
                "Description": "This API is to book the best table in a restaurant.",
                "input_params": {
                    "tables": {
                        "description": "the available tables in the restaurant",
                        "type": "List"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the table booking",
                        "type": "String"
                    }
                },
                "format": "BestTable(tables) -> booking_status"
            }
        ],
        "Query": "Can you book the best table for 'The French Laundry' in Napa Valley on April 12th?",
        "Label": "BestTable(tables=TableAvailability(restaurant_id=RestaurantSearch(name='The French Laundry', city='Napa Valley'), date='April 12th'))",
        "Index": 968
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API is to search for a restaurant.",
                "input_params": {
                    "name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantSearch(name, city) -> restaurant_id"
            },
            {
                "name": "TableAvailability",
                "Description": "This API is to check the availability of tables in a restaurant on a specific date.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date for table availability",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "tables": {
                        "description": "the available tables in the restaurant on the specified date",
                        "type": "List"
                    }
                },
                "format": "TableAvailability(restaurant_id, date) -> tables"
            },
            {
                "name": "BestTable",
                "Description": "This API is to reserve the best table in a restaurant.",
                "input_params": {
                    "tables": {
                        "description": "the available tables in the restaurant",
                        "type": "List"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the table reservation",
                        "type": "String"
                    }
                },
                "format": "BestTable(tables) -> reservation_status"
            }
        ],
        "Query": "I'd like to reserve the best table for 'Gordon Ramsay Steak' in Las Vegas on May 30th.",
        "Label": "BestTable(tables=TableAvailability(restaurant_id=RestaurantSearch(name='Gordon Ramsay Steak', city='Las Vegas'), date='May 30th'))",
        "Index": 969
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API is to search for a restaurant.",
                "input_params": {
                    "name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantSearch(name, city) -> restaurant_id"
            },
            {
                "name": "TableAvailability",
                "Description": "This API is to check the availability of tables in a restaurant on a specific date.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date for table availability",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "tables": {
                        "description": "a list of available tables",
                        "type": "List"
                    }
                },
                "format": "TableAvailability(restaurant_id, date) -> tables"
            },
            {
                "name": "BestTable",
                "Description": "This API is to find the best table in a restaurant.",
                "input_params": {
                    "tables": {
                        "description": "a list of available tables",
                        "type": "List"
                    }
                },
                "output_params": {
                    "best_table": {
                        "description": "the best table",
                        "type": "Table"
                    }
                },
                "format": "BestTable(tables) -> best_table"
            }
        ],
        "Query": "Could you find the best table for 'Alinea' in Chicago on June 15th?",
        "Label": "BestTable(tables=TableAvailability(restaurant_id=RestaurantSearch(name='Alinea', city='Chicago'), date='June 15th'))",
        "Index": 970
    },
    {
        "APIs": [
            {
                "name": "ItemPrice",
                "Description": "This API is to get the price of an item.",
                "input_params": {
                    "item_id": {
                        "description": "the ID of the item",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "price": {
                        "description": "the price of the item",
                        "type": "Float"
                    }
                },
                "format": "ItemPrice(item_id) -> price"
            },
            {
                "name": "CurrencyConversion",
                "Description": "This API is to convert currency from one type to another.",
                "input_params": {
                    "from_currency": {
                        "description": "the currency to convert from",
                        "type": "String"
                    },
                    "to_currency": {
                        "description": "the currency to convert to",
                        "type": "String"
                    }
                },
                "output_params": {
                    "conversion_rate": {
                        "description": "the conversion rate between the two currencies",
                        "type": "Float"
                    }
                },
                "format": "CurrencyConversion(from_currency, to_currency) -> conversion_rate"
            },
            {
                "name": "CalculatePrice",
                "Description": "This API is to calculate the price of an item in a different currency.",
                "input_params": {
                    "price": {
                        "description": "the price of the item",
                        "type": "Float"
                    },
                    "conversion_rate": {
                        "description": "the conversion rate between the two currencies",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "converted_price": {
                        "description": "the price of the item in the new currency",
                        "type": "Float"
                    }
                },
                "format": "CalculatePrice(price, conversion_rate) -> converted_price"
            }
        ],
        "Query": "How much would item ID: 999 cost in Japanese Yen if its price is in Euros?",
        "Label": "CalculatePrice(price=ItemPrice(item_id='999'), conversion_rate=CurrencyConversion(from_currency='EUR', to_currency='JPY'))",
        "Index": 971
    },
    {
        "APIs": [
            {
                "name": "FoodFestival",
                "Description": "This API is to get the food festivals currently open in parks in a specific city.",
                "input_params": {
                    "park": {
                        "description": "the name of the park",
                        "type": "String"
                    }
                },
                "output_params": {
                    "food_festivals": {
                        "description": "a list of food festivals",
                        "type": "List"
                    }
                },
                "format": "FoodFestival(park)"
            },
            {
                "name": "OpenParks",
                "Description": "This API is to get the list of open parks in a specific city at the current time.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "time": {
                        "description": "the current time",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "open_parks": {
                        "description": "a list of open parks",
                        "type": "List"
                    }
                },
                "format": "OpenParks(city, time)"
            },
            {
                "name": "TheatrePlay",
                "Description": "This API is to get the theatre plays currently showing in theatres in a specific city.",
                "input_params": {
                    "theatre": {
                        "description": "the name of the theatre",
                        "type": "String"
                    }
                },
                "output_params": {
                    "theatre_plays": {
                        "description": "a list of theatre plays",
                        "type": "List"
                    }
                },
                "format": "TheatrePlay(theatre)"
            },
            {
                "name": "OpenTheatres",
                "Description": "This API is to get the list of open theatres in a specific city at the current time.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "time": {
                        "description": "the current time",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "open_theatres": {
                        "description": "a list of open theatres",
                        "type": "List"
                    }
                },
                "format": "OpenTheatres(city, time)"
            },
            {
                "name": "CurrentTime",
                "Description": "This API is to get the current time in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "current_time": {
                        "description": "the current time",
                        "type": "Time"
                    }
                },
                "format": "CurrentTime(city)"
            }
        ],
        "Query": "What food festivals are currently open in parks in Sydney?",
        "Label": "FoodFestival(park=OpenParks(city='Sydney', time=CurrentTime(city='Sydney')))",
        "Index": 972
    },
    {
        "APIs": [
            {
                "name": "TransportationBooking",
                "Description": "This API is to book transportation.",
                "input_params": {
                    "city": {
                        "description": "the city where the transportation is needed",
                        "type": "String"
                    },
                    "transportation": {
                        "description": "the transportation details",
                        "type": "Object"
                    },
                    "date": {
                        "description": "the date of the transportation",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time of the transportation",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "TransportationBooking(city, transportation, date, time) -> booking status"
            },
            {
                "name": "AirportTransportation",
                "Description": "This API is to book airport transportation.",
                "input_params": {
                    "city": {
                        "description": "the city where the airport is located",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the airport transportation",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time of the airport transportation",
                        "type": "String"
                    }
                },
                "output_params": {
                    "transportation": {
                        "description": "the details of the airport transportation",
                        "type": "Object"
                    }
                },
                "format": "AirportTransportation(city, date, time) -> transportation"
            },
            {
                "name": "FlightStatus",
                "Description": "This API is to get the status of a flight.",
                "input_params": {
                    "airline": {
                        "description": "the airline of the flight",
                        "type": "String"
                    },
                    "flight_number": {
                        "description": "the flight number",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "departure_time": {
                        "description": "the departure time of the flight",
                        "type": "String"
                    }
                },
                "format": "FlightStatus(airline, flight_number, date) -> departure_time"
            }
        ],
        "Query": "Can you help me book a ride to catch the American Airlines flight 7896 on Wednesday in New York?",
        "Label": "TransportationBooking(city='New York', transportation=AirportTransportation(city='New York', date='Wednesday', time=FlightStatus(airline='American Airlines', flight_number='7896', date='Wednesday').departure_time), date='Wednesday', time=FlightStatus(airline='American Airlines', flight_number='7896', date='Wednesday').departure_time)",
        "Index": 973
    },
    {
        "APIs": [
            {
                "name": "TransportationBooking",
                "Description": "This API is to recommend and book the optimal transportation.",
                "input_params": {
                    "city": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "transportation": {
                        "description": "the transportation details",
                        "type": "Object"
                    },
                    "date": {
                        "description": "the date of the transportation",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the transportation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "TransportationBooking(city, transportation, date, time) -> booking status"
            },
            {
                "name": "AirportTransportation",
                "Description": "This API is to get the transportation details for an airport.",
                "input_params": {
                    "city": {
                        "description": "the city where the airport is located",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the transportation",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the transportation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "transportation": {
                        "description": "the transportation details",
                        "type": "Object"
                    }
                },
                "format": "AirportTransportation(city, date, time) -> transportation"
            },
            {
                "name": "FlightStatus",
                "Description": "This API is to get the status of a flight.",
                "input_params": {
                    "airline": {
                        "description": "the airline of the flight",
                        "type": "String"
                    },
                    "flight_number": {
                        "description": "the number of the flight",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "departure_time": {
                        "description": "the departure time of the flight",
                        "type": "Time"
                    }
                },
                "format": "FlightStatus(airline, flight_number, date) -> departure_time"
            }
        ],
        "Query": "Could you recommend and book the optimal transportation for me to get to the Southwest Airlines flight 1234 on Tuesday in Dallas?",
        "Label": "TransportationBooking(city='Dallas', transportation=AirportTransportation(city='Dallas', date='Tuesday', time=FlightStatus(airline='Southwest Airlines', flight_number='1234', date='Tuesday').departure_time), date='Tuesday', time=FlightStatus(airline='Southwest Airlines', flight_number='1234', date='Tuesday').departure_time)",
        "Index": 974
    },
    {
        "APIs": [
            {
                "name": "TransportationBooking",
                "Description": "This API is to recommend and book the optimal transportation.",
                "input_params": {
                    "city": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "transportation": {
                        "description": "the transportation details",
                        "type": "Object"
                    },
                    "date": {
                        "description": "the date of the transportation",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time of the transportation",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "TransportationBooking(city, transportation, date, time) -> booking status"
            },
            {
                "name": "AirportTransportation",
                "Description": "This API is to get the transportation details to the airport.",
                "input_params": {
                    "city": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the transportation",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time of the transportation",
                        "type": "String"
                    }
                },
                "output_params": {
                    "transportation": {
                        "description": "the transportation details",
                        "type": "Object"
                    }
                },
                "format": "AirportTransportation(city, date, time) -> transportation"
            },
            {
                "name": "FlightStatus",
                "Description": "This API is to get the status of a flight.",
                "input_params": {
                    "airline": {
                        "description": "the airline of the flight",
                        "type": "String"
                    },
                    "flight_number": {
                        "description": "the flight number",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "departure_time": {
                        "description": "the departure time of the flight",
                        "type": "String"
                    }
                },
                "format": "FlightStatus(airline, flight_number, date) -> departure_time"
            }
        ],
        "Query": "Could you recommend and book the optimal transportation for me to get to the Southwest Airlines flight 1234 on Tuesday in Dallas?",
        "Label": "TransportationBooking(city='Dallas', transportation=AirportTransportation(city='Dallas', date='Tuesday', time=FlightStatus(airline='Southwest Airlines', flight_number='1234', date='Tuesday').departure_time), date='Tuesday', time=FlightStatus(airline='Southwest Airlines', flight_number='1234', date='Tuesday').departure_time)",
        "Index": 975
    },
    {
        "APIs": [
            {
                "name": "TrainSchedule",
                "Description": "This API is to get the train schedule from source to destination on a specific date.",
                "input_params": {
                    "source": {
                        "description": "the source city",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of travel",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "train_details": {
                        "description": "the details of the train schedule",
                        "type": "Object"
                    }
                },
                "format": "TrainSchedule(source, destination, date) -> train_details"
            },
            {
                "name": "HotelSearch",
                "Description": "This API is to search for hotels in a specific destination and date range.",
                "input_params": {
                    "destination": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date_in": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "date_out": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotel_details": {
                        "description": "the details of the available hotels",
                        "type": "Object"
                    }
                },
                "format": "HotelSearch(destination, date_in, date_out) -> hotel_details"
            },
            {
                "name": "PackageBooking",
                "Description": "This API is to book a package including train and hotel for a specific number of people.",
                "input_params": {
                    "trainDetails": {
                        "description": "the details of the train schedule",
                        "type": "Object"
                    },
                    "hotelDetails": {
                        "description": "the details of the available hotels",
                        "type": "Object"
                    },
                    "num_of_people": {
                        "description": "the number of people for the package",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the package booking",
                        "type": "String"
                    }
                },
                "format": "PackageBooking(trainDetails, hotelDetails, num_of_people) -> booking_status"
            }
        ],
        "Query": "I am planning to travel from New York to Los Angeles on the 10th of February and need a hotel until the 15th. Can you book a package for 2 people?",
        "Label": "PackageBooking(trainDetails=TrainSchedule(source='New York', destination='Los Angeles', date='10th of February'), hotelDetails=HotelSearch(destination='Los Angeles', date_in='10th of February', date_out='15th of February'), num_of_people='2')",
        "Index": 976
    },
    {
        "APIs": [
            {
                "name": "TrainSchedule",
                "Description": "This API is to get the train schedule from source to destination on a specific date.",
                "input_params": {
                    "source": {
                        "description": "the source city",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of travel",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "train_details": {
                        "description": "the details of the train schedule",
                        "type": "Object"
                    }
                },
                "format": "TrainSchedule(source, destination, date) -> train_details"
            },
            {
                "name": "HotelSearch",
                "Description": "This API is to search for hotels in a specific destination and date range.",
                "input_params": {
                    "destination": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date_in": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "date_out": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotel_details": {
                        "description": "the details of the available hotels",
                        "type": "Object"
                    }
                },
                "format": "HotelSearch(destination, date_in, date_out) -> hotel_details"
            },
            {
                "name": "PackageBooking",
                "Description": "This API is to book a package including train tickets and hotel rooms for a specific number of people.",
                "input_params": {
                    "trainDetails": {
                        "description": "the details of the train schedule",
                        "type": "Object"
                    },
                    "hotelDetails": {
                        "description": "the details of the available hotels",
                        "type": "Object"
                    },
                    "num_of_people": {
                        "description": "the number of people for the package",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the package booking",
                        "type": "String"
                    }
                },
                "format": "PackageBooking(trainDetails, hotelDetails, num_of_people) -> booking_status"
            }
        ],
        "Query": "I need to travel from Tokyo to Osaka on the 20th of April and need a hotel until the 25th. Can you book a package for 5 people?",
        "Label": "PackageBooking(trainDetails=TrainSchedule(source='Tokyo', destination='Osaka', date='20th of April'), hotelDetails=HotelSearch(destination='Osaka', date_in='20th of April', date_out='25th of April'), num_of_people='5')",
        "Index": 977
    },
    {
        "APIs": [
            {
                "name": "WeatherInquiry",
                "Description": "This API is to inquire about the weather in a specific location on a specific date.",
                "input_params": {
                    "location": {
                        "description": "the location to inquire about the weather",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date to inquire about the weather",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather_info": {
                        "description": "the weather information for the specified location and date",
                        "type": "String"
                    }
                },
                "format": "WeatherInquiry(location, date) -> weather_info"
            },
            {
                "name": "RestaurantSelection",
                "Description": "This API is to select a restaurant based on cuisine and location.",
                "input_params": {
                    "cuisine": {
                        "description": "the cuisine type to search for",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location to search for the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_details": {
                        "description": "the details of the selected restaurant",
                        "type": "Object"
                    }
                },
                "format": "RestaurantSelection(cuisine, location) -> restaurant_details"
            },
            {
                "name": "TableReservation",
                "Description": "This API is to book a table at a restaurant for a specific number of people and date.",
                "input_params": {
                    "restaurant_details": {
                        "description": "the details of the selected restaurant",
                        "type": "Object"
                    },
                    "num_of_people": {
                        "description": "the number of people for the table reservation",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date for the table reservation",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the table reservation",
                        "type": "String"
                    }
                },
                "format": "TableReservation(restaurant_details, num_of_people, date) -> reservation_status"
            }
        ],
        "Query": "Can you find out the weather in London on 22nd of April, locate an Italian restaurant there and book a table for 4 for lunch?",
        "Label": "TableReservation(restaurantDetails=RestaurantSelection(cuisine='Italian', location='London'), num_of_people='4', date='22nd of April')",
        "Index": 978
    },
    {
        "APIs": [
            {
                "name": "WeatherVerification",
                "Description": "This API is to verify the weather in a specific location on a specific date.",
                "input_params": {
                    "location": {
                        "description": "the location to verify the weather",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date to verify the weather",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the status of the weather",
                        "type": "String"
                    }
                },
                "format": "WeatherVerification(location, date) -> weather_status"
            },
            {
                "name": "RestaurantSelection",
                "Description": "This API is to select a restaurant based on cuisine and location.",
                "input_params": {
                    "cuisine": {
                        "description": "the cuisine type of the restaurant",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location to find the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_details": {
                        "description": "the details of the selected restaurant",
                        "type": "Object"
                    }
                },
                "format": "RestaurantSelection(cuisine, location) -> restaurant_details"
            },
            {
                "name": "TableReservation",
                "Description": "This API is to book a table at a restaurant for a specific number of people and date.",
                "input_params": {
                    "restaurant_details": {
                        "description": "the details of the selected restaurant",
                        "type": "Object"
                    },
                    "num_of_people": {
                        "description": "the number of people for the table reservation",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date for the table reservation",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the table reservation",
                        "type": "String"
                    }
                },
                "format": "TableReservation(restaurant_details, num_of_people, date) -> reservation_status"
            }
        ],
        "Query": "Can you verify the weather in New York on 30th of June, find an American cuisine restaurant there and book a table for 8 for breakfast?",
        "Label": "TableReservation(restaurantDetails=RestaurantSelection(cuisine='American', location='New York'), num_of_people='8', date='30th of June')",
        "Index": 979
    },
    {
        "APIs": [
            {
                "name": "WeatherVerification",
                "Description": "This API is to verify the weather in a specific location on a specific date.",
                "input_params": {
                    "location": {
                        "description": "the location to check the weather",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date to check the weather",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the status of the weather",
                        "type": "String"
                    }
                },
                "format": "WeatherVerification(location, date) -> weather_status"
            },
            {
                "name": "RestaurantSelection",
                "Description": "This API is to select a restaurant based on cuisine and location.",
                "input_params": {
                    "cuisine": {
                        "description": "the cuisine type of the restaurant",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location to find the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_details": {
                        "description": "the details of the selected restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantSelection(cuisine, location) -> restaurant_details"
            },
            {
                "name": "TableReservation",
                "Description": "This API is to book a table at a restaurant.",
                "input_params": {
                    "restaurant_details": {
                        "description": "the details of the restaurant",
                        "type": "String"
                    },
                    "num_of_people": {
                        "description": "the number of people for the reservation",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date for the reservation",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "TableReservation(restaurant_details, num_of_people, date) -> reservation_status"
            }
        ],
        "Query": "Can you verify the weather in New York on 30th of June, find an American cuisine restaurant there and book a table for 8 for breakfast?",
        "Label": "TableReservation(restaurantDetails=RestaurantSelection(cuisine='American', location='New York'), num_of_people='8', date='30th of June')",
        "Index": 980
    },
    {
        "APIs": [
            {
                "name": "MovieSuggestion",
                "Description": "This API is to suggest a movie based on the genre.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "suggestedMovies": {
                        "description": "a list of suggested movies",
                        "type": "List"
                    }
                },
                "format": "MovieSuggestion(genre) -> suggestedMovies"
            },
            {
                "name": "RestaurantRecommendation",
                "Description": "This API is to recommend a restaurant with a similar theme.",
                "input_params": {
                    "suggestedMovies": {
                        "description": "a list of suggested movies",
                        "type": "List"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommendation(suggestedMovies) -> restaurant"
            },
            {
                "name": "DinnerReservation",
                "Description": "This API is to book a table for dinner.",
                "input_params": {
                    "restaurant": {
                        "description": "the recommended restaurant",
                        "type": "String"
                    },
                    "time": {
                        "description": "the reservation time",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "DinnerReservation(restaurant, time) -> reservation_status"
            }
        ],
        "Query": "Could you recommend a horror movie for me, suggest a restaurant with a similar spooky theme, and book a table for tomorrow at 7 pm?",
        "Label": "DinnerReservation(restaurant=RestaurantRecommendation(suggestedMovies=MovieSuggestion(genre='horror')), time='7 pm')",
        "Index": 981
    },
    {
        "APIs": [
            {
                "name": "MovieSuggestion",
                "Description": "This API is to suggest a movie based on the genre.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "suggestedMovies": {
                        "description": "a list of suggested movies",
                        "type": "List"
                    }
                },
                "format": "MovieSuggestion(genre) -> suggestedMovies"
            },
            {
                "name": "RestaurantRecommendation",
                "Description": "This API is to recommend a restaurant based on the theme.",
                "input_params": {
                    "suggestedMovies": {
                        "description": "a list of suggested movies",
                        "type": "List"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommendation(suggestedMovies) -> restaurant"
            },
            {
                "name": "DinnerReservation",
                "Description": "This API is to make a dinner reservation at a specific time.",
                "input_params": {
                    "restaurant": {
                        "description": "the recommended restaurant",
                        "type": "String"
                    },
                    "time": {
                        "description": "the reservation time",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "DinnerReservation(restaurant, time) -> reservation_status"
            }
        ],
        "Query": "Could you suggest a comedy movie for me, propose a restaurant with a similar joyful theme, and book a table for tonight at 9 pm?",
        "Label": "DinnerReservation(restaurant=RestaurantRecommendation(suggestedMovies=MovieSuggestion(genre='comedy')), time='9 pm')",
        "Index": 982
    },
    {
        "APIs": [
            {
                "name": "UserEmailRetriever",
                "Description": "This API is to retrieve the email of a user based on their username.",
                "input_params": {
                    "userName": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "userEmail": {
                        "description": "the email of the user",
                        "type": "String"
                    }
                },
                "format": "UserEmailRetriever(userName) -> userEmail"
            },
            {
                "name": "EmailCompose",
                "Description": "This API is to compose an email with a subject and body.",
                "input_params": {
                    "userEmail": {
                        "description": "the email of the user",
                        "type": "String"
                    },
                    "subject": {
                        "description": "the subject of the email",
                        "type": "String"
                    },
                    "body": {
                        "description": "the body of the email",
                        "type": "String"
                    }
                },
                "output_params": {
                    "email": {
                        "description": "the composed email",
                        "type": "Email"
                    }
                },
                "format": "EmailCompose(userEmail, subject, body) -> email"
            },
            {
                "name": "EmailSender",
                "Description": "This API is to send an email to a user.",
                "input_params": {
                    "email": {
                        "description": "the email to be sent",
                        "type": "Email"
                    }
                },
                "output_params": {
                    "status": {
                        "description": "the status of the email sending",
                        "type": "String"
                    }
                },
                "format": "EmailSender(email) -> status"
            }
        ],
        "Query": "Would you please send an email to the user 'mikethomas' with the subject 'Project Update' and body 'We need to discuss about the project update tomorrow at 10am'?",
        "Label": "EmailSender(email=EmailCompose(userEmail=UserEmailRetriever(userName='mikethomas'), subject='Project Update', body='We need to discuss about the project update tomorrow at 10am'))",
        "Index": 983
    },
    {
        "APIs": [
            {
                "name": "FindTransport",
                "Description": "This API is to find the optimal way to get to a destination from a bus station.",
                "input_params": {
                    "BusStation": {
                        "description": "the name of the bus station",
                        "type": "String"
                    },
                    "Destination": {
                        "description": "the destination to be reached",
                        "type": "API: RestaurantFinder"
                    }
                },
                "output_params": {
                    "Transportation": {
                        "description": "the optimal transportation method to reach the destination",
                        "type": "String"
                    }
                },
                "format": "FindTransport(BusStation, Destination) -> Transportation"
            },
            {
                "name": "RestaurantFinder",
                "Description": "This API is to find a restaurant based on the city name and cuisine type.",
                "input_params": {
                    "CityName": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "CuisineType": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "RestaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantFinder(CityName, CuisineType) -> RestaurantName"
            }
        ],
        "Query": "What's the optimal way to get to an Indian restaurant in Sydney after getting off at the Central Coach Terminal?",
        "Label": "FindTransport(BusStation='Central Coach Terminal', Destination=RestaurantFinder(CityName='Sydney', CuisineType='Indian'))",
        "Index": 984
    },
    {
        "APIs": [
            {
                "name": "CinemaLocation",
                "Description": "This API is to convert city name to cinema location.",
                "input_params": {
                    "CityName": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "ShowTime": {
                        "description": "the showtime of the movie",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "CinemaName": {
                        "description": "the name of the cinema",
                        "type": "String"
                    }
                },
                "format": "CinemaLocation(CityName, ShowTime) -> CinemaName"
            },
            {
                "name": "FetchMovie",
                "Description": "This API is to fetch movie details.",
                "input_params": {
                    "MovieName": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ShowTime": {
                        "description": "the showtime of the movie",
                        "type": "Time"
                    }
                },
                "format": "FetchMovie(MovieName) -> ShowTime"
            },
            {
                "name": "BookTicket",
                "Description": "This API is to book a movie ticket.",
                "input_params": {
                    "CinemaName": {
                        "description": "the name of the cinema",
                        "type": "String"
                    },
                    "ShowTime": {
                        "description": "the showtime of the movie",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookTicket(CinemaName, ShowTime) -> booking status"
            }
        ],
        "Query": "Can you arrange a ticket for me at a movie theater in San Francisco to watch Titanic at its showtime?",
        "Label": "BookTicket(CinemaName=CinemaLocation(CityName='San Francisco', ShowTime=FetchMovie(MovieName='Titanic')), ShowTime=FetchMovie(MovieName='Titanic'))",
        "Index": 985
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on the cuisine type.",
                "input_params": {
                    "CuisineType": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "RestaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(CuisineType='Mexican') -> RestaurantName"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu items of a restaurant.",
                "input_params": {
                    "RestaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "MenuItems": {
                        "description": "the list of menu items",
                        "type": "List"
                    }
                },
                "format": "GetMenu(RestaurantName='RestaurantName') -> MenuItems"
            },
            {
                "name": "FindNutritionalInfo",
                "Description": "This API is to find the nutritional information for menu items.",
                "input_params": {
                    "MenuItems": {
                        "description": "the list of menu items",
                        "type": "List"
                    }
                },
                "output_params": {
                    "NutritionalInfo": {
                        "description": "the nutritional information for the menu items",
                        "type": "Dictionary"
                    }
                },
                "format": "FindNutritionalInfo(MenuItems='MenuItems') -> NutritionalInfo"
            }
        ],
        "Query": "I want to know the nutritional information for the food at the Mexican restaurant.",
        "Label": "FindNutritionalInfo(MenuItems=GetMenu(RestaurantName=FindRestaurant(CuisineType='Mexican')))",
        "Index": 986
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on the cuisine type.",
                "input_params": {
                    "CuisineType": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "RestaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(CuisineType) -> RestaurantName"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu items of a restaurant.",
                "input_params": {
                    "RestaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "MenuItems": {
                        "description": "the list of menu items",
                        "type": "List"
                    }
                },
                "format": "GetMenu(RestaurantName) -> MenuItems"
            },
            {
                "name": "FindNutritionalInfo",
                "Description": "This API is to find the nutritional information for menu items.",
                "input_params": {
                    "MenuItems": {
                        "description": "the list of menu items",
                        "type": "List"
                    }
                },
                "output_params": {
                    "NutritionalInfo": {
                        "description": "the nutritional information for menu items",
                        "type": "List"
                    }
                },
                "format": "FindNutritionalInfo(MenuItems) -> NutritionalInfo"
            }
        ],
        "Query": "I want to know the nutritional information for the food at the Mexican restaurant.",
        "Label": "FindNutritionalInfo(MenuItems=GetMenu(RestaurantName=FindRestaurant(CuisineType='Mexican')))",
        "Index": 987
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on the cuisine type.",
                "input_params": {
                    "CuisineType": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "RestaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(CuisineType='Chinese') -> RestaurantName"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a restaurant.",
                "input_params": {
                    "RestaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "MenuItems": {
                        "description": "the list of menu items",
                        "type": "List"
                    }
                },
                "format": "GetMenu(RestaurantName='Chinese Restaurant') -> MenuItems"
            },
            {
                "name": "FindNutritionalInfo",
                "Description": "This API is to find the nutritional information of menu items.",
                "input_params": {
                    "MenuItems": {
                        "description": "the list of menu items",
                        "type": "List"
                    }
                },
                "output_params": {
                    "NutritionalContent": {
                        "description": "the nutritional content of the menu items",
                        "type": "Dictionary"
                    }
                },
                "format": "FindNutritionalInfo(MenuItems) -> NutritionalContent"
            }
        ],
        "Query": "What's the nutritional content for the food at the Chinese restaurant?",
        "Label": "FindNutritionalInfo(MenuItems=GetMenu(RestaurantName=FindRestaurant(CuisineType='Chinese')))",
        "Index": 988
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the current weather condition of a location.",
                "input_params": {
                    "location": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_condition": {
                        "description": "the current weather condition",
                        "type": "String"
                    }
                },
                "format": "GetWeather(location) -> weather_condition"
            },
            {
                "name": "FindClothingType",
                "Description": "This API is to find the appropriate clothing type based on the weather condition.",
                "input_params": {
                    "weather_condition": {
                        "description": "the current weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_type": {
                        "description": "the recommended clothing type",
                        "type": "String"
                    }
                },
                "format": "FindClothingType(WeatherCondition) -> clothing_type"
            },
            {
                "name": "FindStore",
                "Description": "This API is to find the stores where the clothing type can be purchased.",
                "input_params": {
                    "ClothingType": {
                        "description": "the recommended clothing type",
                        "type": "String"
                    },
                    "location": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_list": {
                        "description": "a list of stores where the clothing type can be purchased",
                        "type": "List"
                    }
                },
                "format": "FindStore(ClothingType, location) -> store_list"
            }
        ],
        "Query": "What type of outfit should I wear for the current weather in London and where can I purchase it?",
        "Label": "FindStore(ClothingType=FindClothingType(WeatherCondition=GetWeather(location='London')), location='London')",
        "Index": 989
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the weather condition of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location to get the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_condition": {
                        "description": "the weather condition of the location",
                        "type": "String"
                    }
                },
                "format": "GetWeather(location) -> weather_condition"
            },
            {
                "name": "FindClothingType",
                "Description": "This API is to find the suitable clothing type based on the weather condition.",
                "input_params": {
                    "WeatherCondition": {
                        "description": "the weather condition to find the suitable clothing type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ClothingType": {
                        "description": "the suitable clothing type based on the weather condition",
                        "type": "String"
                    }
                },
                "format": "FindClothingType(WeatherCondition) -> ClothingType"
            },
            {
                "name": "FindStore",
                "Description": "This API is to find the stores where the clothing type can be bought.",
                "input_params": {
                    "ClothingType": {
                        "description": "the clothing type to find the stores",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location to find the stores",
                        "type": "String"
                    }
                },
                "output_params": {
                    "stores": {
                        "description": "the stores where the clothing type can be bought",
                        "type": "List of Strings"
                    }
                },
                "format": "FindStore(ClothingType, location) -> stores"
            }
        ],
        "Query": "What kind of dress should I put on for today's weather in New York and where can it be bought?",
        "Label": "FindStore(ClothingType=FindClothingType(WeatherCondition=GetWeather(location='New York')), location='New York')",
        "Index": 990
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the current weather condition of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_condition": {
                        "description": "the current weather condition",
                        "type": "String"
                    }
                },
                "format": "GetWeather(location) -> weather_condition"
            },
            {
                "name": "FindClothingType",
                "Description": "This API is to find the suitable clothing type based on the weather condition.",
                "input_params": {
                    "weather_condition": {
                        "description": "the current weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_type": {
                        "description": "the suitable clothing type",
                        "type": "String"
                    }
                },
                "format": "FindClothingType(WeatherCondition) -> clothing_type"
            },
            {
                "name": "FindStore",
                "Description": "This API is to find the stores where the clothing type can be purchased.",
                "input_params": {
                    "ClothingType": {
                        "description": "the suitable clothing type",
                        "type": "String"
                    },
                    "location": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_list": {
                        "description": "a list of stores where the clothing type can be purchased",
                        "type": "List"
                    }
                },
                "format": "FindStore(ClothingType, location) -> store_list"
            }
        ],
        "Query": "What suit should I put on for the current weather in Sydney and where can I purchase it?",
        "Label": "FindStore(ClothingType=FindClothingType(WeatherCondition=GetWeather(location='Sydney')), location='Sydney')",
        "Index": 991
    },
    {
        "APIs": [
            {
                "name": "SearchRestaurant",
                "Description": "This API is to search for a restaurant based on cuisine type and city.",
                "input_params": {
                    "CuisineType": {
                        "description": "the type of cuisine",
                        "type": "String"
                    },
                    "City": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "RestaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "SearchRestaurant(CuisineType, City) -> RestaurantName"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a restaurant.",
                "input_params": {
                    "RestaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    }
                },
                "format": "GetMenu(RestaurantName) -> Menu"
            },
            {
                "name": "CalculateCalories",
                "Description": "This API is to calculate the total calories of a menu.",
                "input_params": {
                    "Menu": {
                        "description": "the menu of a restaurant",
                        "type": "List"
                    }
                },
                "output_params": {
                    "TotalCalories": {
                        "description": "the total calories of the menu",
                        "type": "Integer"
                    }
                },
                "format": "CalculateCalories(Menu) -> TotalCalories"
            }
        ],
        "Query": "What is the total calories of the best Chinese restaurant's menu in Los Angeles?",
        "Label": "CalculateCalories(Menu=GetMenu(RestaurantName=SearchRestaurant(CuisineType='Chinese', City='Los Angeles')))",
        "Index": 992
    },
    {
        "APIs": [
            {
                "name": "SearchRestaurant",
                "Description": "This API is to search for a restaurant based on cuisine type and city.",
                "input_params": {
                    "CuisineType": {
                        "description": "the type of cuisine",
                        "type": "String"
                    },
                    "City": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "RestaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "SearchRestaurant(CuisineType, City) -> RestaurantName"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a restaurant.",
                "input_params": {
                    "RestaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    }
                },
                "format": "GetMenu(RestaurantName) -> Menu"
            },
            {
                "name": "CalculateCalories",
                "Description": "This API is to calculate the total calories of a menu.",
                "input_params": {
                    "Menu": {
                        "description": "the menu of a restaurant",
                        "type": "List"
                    }
                },
                "output_params": {
                    "TotalCalories": {
                        "description": "the total calories of the menu",
                        "type": "Integer"
                    }
                },
                "format": "CalculateCalories(Menu) -> TotalCalories"
            }
        ],
        "Query": "What is the total calories of the best French restaurant's menu in Boston?",
        "Label": "CalculateCalories(Menu=GetMenu(RestaurantName=SearchRestaurant(CuisineType='French', City='Boston')))",
        "Index": 993
    },
    {
        "APIs": [
            {
                "name": "SearchRestaurant",
                "Description": "This API is to search for a restaurant based on cuisine type and city.",
                "input_params": {
                    "CuisineType": {
                        "description": "the type of cuisine",
                        "type": "String"
                    },
                    "City": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "RestaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "SearchRestaurant(CuisineType, City) -> RestaurantName"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a restaurant.",
                "input_params": {
                    "RestaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    }
                },
                "format": "GetMenu(RestaurantName) -> Menu"
            },
            {
                "name": "CalculateCalories",
                "Description": "This API is to calculate the total calories of a menu.",
                "input_params": {
                    "Menu": {
                        "description": "the menu of a restaurant",
                        "type": "List"
                    }
                },
                "output_params": {
                    "TotalCalories": {
                        "description": "the total calories of the menu",
                        "type": "Integer"
                    }
                },
                "format": "CalculateCalories(Menu) -> TotalCalories"
            }
        ],
        "Query": "What is the total calories of the best French restaurant's menu in Boston?",
        "Label": "CalculateCalories(Menu=GetMenu(RestaurantName=SearchRestaurant(CuisineType='French', City='Boston')))",
        "Index": 994
    },
    {
        "APIs": [
            {
                "name": "SearchRestaurant",
                "Description": "This API is to search for a restaurant based on cuisine type and city.",
                "input_params": {
                    "CuisineType": {
                        "description": "the type of cuisine",
                        "type": "String"
                    },
                    "City": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "RestaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "SearchRestaurant(CuisineType, City) -> RestaurantName"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a restaurant.",
                "input_params": {
                    "RestaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    }
                },
                "format": "GetMenu(RestaurantName) -> Menu"
            },
            {
                "name": "CalculateCalories",
                "Description": "This API is to calculate the total calories of a menu.",
                "input_params": {
                    "Menu": {
                        "description": "the menu of a restaurant",
                        "type": "List"
                    }
                },
                "output_params": {
                    "TotalCalories": {
                        "description": "the total calories of the menu",
                        "type": "Integer"
                    }
                },
                "format": "CalculateCalories(Menu) -> TotalCalories"
            }
        ],
        "Query": "What is the total calories of the best Japanese restaurant's menu in Houston?",
        "Label": "CalculateCalories(Menu=GetMenu(RestaurantName=SearchRestaurant(CuisineType='Japanese', City='Houston')))",
        "Index": 995
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the weather data of a specific location.",
                "input_params": {
                    "Location": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "WeatherData": {
                        "description": "the weather data of the location",
                        "type": "JSON"
                    }
                },
                "format": "GetWeather(Location)"
            },
            {
                "name": "GetClothingRecommendation",
                "Description": "This API is to get the recommended clothing based on weather data.",
                "input_params": {
                    "WeatherData": {
                        "description": "the weather data of a location",
                        "type": "JSON"
                    }
                },
                "output_params": {
                    "ClothesList": {
                        "description": "the list of recommended clothing",
                        "type": "List"
                    }
                },
                "format": "GetClothingRecommendation(WeatherData)"
            },
            {
                "name": "GetShoppingSites",
                "Description": "This API is to get the shopping sites where clothing can be purchased.",
                "input_params": {
                    "ClothesList": {
                        "description": "the list of recommended clothing",
                        "type": "List"
                    }
                },
                "output_params": {
                    "ShoppingSites": {
                        "description": "the list of shopping sites",
                        "type": "List"
                    }
                },
                "format": "GetShoppingSites(ClothesList)"
            }
        ],
        "Query": "What clothing is suitable for today's weather in London and where can I purchase it?",
        "Label": "GetShoppingSites(ClothesList=GetClothingRecommendation(WeatherData=GetWeather(Location='London')))",
        "Index": 996
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the weather data for a specific location.",
                "input_params": {
                    "Location": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "WeatherData": {
                        "description": "the weather data for the location",
                        "type": "Object"
                    }
                },
                "format": "GetWeather(Location) -> WeatherData"
            },
            {
                "name": "GetClothingRecommendation",
                "Description": "This API is to get the clothing recommendations based on weather data.",
                "input_params": {
                    "WeatherData": {
                        "description": "the weather data for a specific location",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "ClothesList": {
                        "description": "the list of recommended clothing items",
                        "type": "List"
                    }
                },
                "format": "GetClothingRecommendation(WeatherData) -> ClothesList"
            },
            {
                "name": "GetShoppingSites",
                "Description": "This API is to get the shopping sites for a list of clothing items.",
                "input_params": {
                    "ClothesList": {
                        "description": "the list of clothing items",
                        "type": "List"
                    }
                },
                "output_params": {
                    "ShoppingSites": {
                        "description": "the list of shopping sites for the clothing items",
                        "type": "List"
                    }
                },
                "format": "GetShoppingSites(ClothesList) -> ShoppingSites"
            }
        ],
        "Query": "What should I put on for today's weather in Sydney and where can I shop them?",
        "Label": "GetShoppingSites(ClothesList=GetClothingRecommendation(WeatherData=GetWeather(Location='Sydney')))",
        "Index": 997
    },
    {
        "APIs": [
            {
                "name": "GetRecipe",
                "Description": "This API is to get the recipe for a specific dish.",
                "input_params": {
                    "Dish": {
                        "description": "the name of the dish",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Recipe": {
                        "description": "the recipe for the dish",
                        "type": "String"
                    }
                },
                "format": "GetRecipe(Dish)"
            },
            {
                "name": "GetIngredientsList",
                "Description": "This API is to get the list of ingredients for a specific recipe.",
                "input_params": {
                    "Recipe": {
                        "description": "the recipe for the dish",
                        "type": "String"
                    }
                },
                "output_params": {
                    "IngredientsList": {
                        "description": "the list of ingredients for the recipe",
                        "type": "List"
                    }
                },
                "format": "GetIngredientsList(Recipe)"
            },
            {
                "name": "GetGroceryStores",
                "Description": "This API is to get the nearest grocery stores where ingredients can be found.",
                "input_params": {
                    "IngredientsList": {
                        "description": "the list of ingredients",
                        "type": "List"
                    }
                },
                "output_params": {
                    "GroceryStores": {
                        "description": "the nearest grocery stores",
                        "type": "List"
                    }
                },
                "format": "GetGroceryStores(IngredientsList)"
            }
        ],
        "Query": "Can you tell me how to cook lasagna and point me to the nearest store where I can get the ingredients?",
        "Label": "GetGroceryStores(IngredientsList=GetIngredientsList(Recipe=GetRecipe(Dish='lasagna')))",
        "Index": 998
    },
    {
        "APIs": [
            {
                "name": "GetRecipe",
                "Description": "This API is to get the recipe for a dish.",
                "input_params": {
                    "Dish": {
                        "description": "the name of the dish",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Recipe": {
                        "description": "the recipe for the dish",
                        "type": "String"
                    }
                },
                "format": "GetRecipe(Dish)"
            },
            {
                "name": "GetIngredientsList",
                "Description": "This API is to get the list of ingredients for a recipe.",
                "input_params": {
                    "Recipe": {
                        "description": "the recipe for the dish",
                        "type": "String"
                    }
                },
                "output_params": {
                    "IngredientsList": {
                        "description": "the list of ingredients for the recipe",
                        "type": "List"
                    }
                },
                "format": "GetIngredientsList(Recipe)"
            },
            {
                "name": "GetGroceryStores",
                "Description": "This API is to get the grocery stores where ingredients can be bought.",
                "input_params": {
                    "IngredientsList": {
                        "description": "the list of ingredients",
                        "type": "List"
                    }
                },
                "output_params": {
                    "GroceryStores": {
                        "description": "the list of grocery stores where ingredients can be bought",
                        "type": "List"
                    }
                },
                "format": "GetGroceryStores(IngredientsList)"
            }
        ],
        "Query": "I want to prepare sushi, where can I buy all the things I need?",
        "Label": "GetGroceryStores(IngredientsList=GetIngredientsList(Recipe=GetRecipe(Dish='sushi')))",
        "Index": 999
    },
    {
        "APIs": [
            {
                "name": "GetRecipe",
                "Description": "This API is to get the recipe for a specific dish.",
                "input_params": {
                    "Dish": {
                        "description": "the name of the dish",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Recipe": {
                        "description": "the recipe for the dish",
                        "type": "String"
                    }
                },
                "format": "GetRecipe(Dish)"
            },
            {
                "name": "GetIngredientsList",
                "Description": "This API is to get the list of ingredients for a specific recipe.",
                "input_params": {
                    "Recipe": {
                        "description": "the recipe for the dish",
                        "type": "String"
                    }
                },
                "output_params": {
                    "IngredientsList": {
                        "description": "the list of ingredients for the recipe",
                        "type": "List"
                    }
                },
                "format": "GetIngredientsList(Recipe)"
            },
            {
                "name": "GetGroceryStores",
                "Description": "This API is to get the list of grocery stores where the required items can be bought.",
                "input_params": {
                    "IngredientsList": {
                        "description": "the list of ingredients for the recipe",
                        "type": "List"
                    }
                },
                "output_params": {
                    "GroceryStores": {
                        "description": "the list of grocery stores",
                        "type": "List"
                    }
                },
                "format": "GetGroceryStores(IngredientsList)"
            }
        ],
        "Query": "How can I make a turkey sandwich and where can I buy the required items?",
        "Label": "GetGroceryStores(IngredientsList=GetIngredientsList(Recipe=GetRecipe(Dish='turkey sandwich')))",
        "Index": 1000
    },
    {
        "APIs": [
            {
                "name": "SearchBook",
                "Description": "This API is to search for a book by its title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "BookID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "SearchBook(title) -> BookID"
            },
            {
                "name": "GetBookDetails",
                "Description": "This API is to get the details of a book by its ID.",
                "input_params": {
                    "BookID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "BookDetails": {
                        "description": "the details of the book",
                        "type": "String"
                    }
                },
                "format": "GetBookDetails(BookID) -> BookDetails"
            },
            {
                "name": "ConvertToAudio",
                "Description": "This API is to convert book details to audio in a specific language.",
                "input_params": {
                    "BookDetails": {
                        "description": "the details of the book",
                        "type": "String"
                    },
                    "Language": {
                        "description": "the language to convert the audio to",
                        "type": "String"
                    }
                },
                "output_params": {
                    "AudioFile": {
                        "description": "the audio file of the book details in the specified language",
                        "type": "File"
                    }
                },
                "format": "ConvertToAudio(BookDetails, Language) -> AudioFile"
            }
        ],
        "Query": "Could I get the book 'War and Peace' details to be read out in Italian?",
        "Label": "ConvertToAudio(BookDetails=GetBookDetails(BookID=SearchBook(title='War and Peace')), Language='Italian')",
        "Index": 1001
    },
    {
        "APIs": [
            {
                "name": "SearchBook",
                "Description": "This API is to search for a book by its title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "BookID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "SearchBook(title) -> BookID"
            },
            {
                "name": "GetBookDetails",
                "Description": "This API is to get the details of a book by its ID.",
                "input_params": {
                    "BookID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "BookDetails": {
                        "description": "the details of the book",
                        "type": "String"
                    }
                },
                "format": "GetBookDetails(BookID) -> BookDetails"
            },
            {
                "name": "ConvertToAudio",
                "Description": "This API is to convert book details to audio in a specific language.",
                "input_params": {
                    "BookDetails": {
                        "description": "the details of the book",
                        "type": "String"
                    },
                    "Language": {
                        "description": "the language for audio conversion",
                        "type": "String"
                    }
                },
                "output_params": {
                    "AudioFile": {
                        "description": "the audio file of the book details in the specified language",
                        "type": "File"
                    }
                },
                "format": "ConvertToAudio(BookDetails, Language) -> AudioFile"
            }
        ],
        "Query": "Could I get the book 'War and Peace' details to be read out in Italian?",
        "Label": "ConvertToAudio(BookDetails=GetBookDetails(BookID=SearchBook(title='War and Peace')), Language='Italian')",
        "Index": 1002
    },
    {
        "APIs": [
            {
                "name": "SearchBook",
                "Description": "This API is to search for a book by its title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "BookID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "SearchBook(title) -> BookID"
            },
            {
                "name": "GetBookDetails",
                "Description": "This API is to get the details of a book by its ID.",
                "input_params": {
                    "BookID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "BookDetails": {
                        "description": "the details of the book",
                        "type": "String"
                    }
                },
                "format": "GetBookDetails(BookID) -> BookDetails"
            },
            {
                "name": "ConvertToAudio",
                "Description": "This API is to convert book details to audio in a specific language.",
                "input_params": {
                    "BookDetails": {
                        "description": "the details of the book",
                        "type": "String"
                    },
                    "Language": {
                        "description": "the language for audio translation",
                        "type": "String"
                    }
                },
                "output_params": {
                    "AudioFile": {
                        "description": "the audio file of the book details in the specified language",
                        "type": "File"
                    }
                },
                "format": "ConvertToAudio(BookDetails, Language) -> AudioFile"
            }
        ],
        "Query": "Can I have the details of the book 'Moby Dick' translated to audio in Japanese?",
        "Label": "ConvertToAudio(BookDetails=GetBookDetails(BookID=SearchBook(title='Moby Dick')), Language='Japanese')",
        "Index": 1003
    },
    {
        "APIs": [
            {
                "name": "FindFlight",
                "Description": "This API is to find a flight to a specific destination on a specific date.",
                "input_params": {
                    "destination": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight_details": {
                        "description": "the details of the flight",
                        "type": "String"
                    }
                },
                "format": "FindFlight(destination, date) -> flight_details"
            },
            {
                "name": "BookHotel",
                "Description": "This API is to book a hotel in a specific city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the city where the hotel is located",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the hotel reservation",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotel_confirmation": {
                        "description": "the confirmation details of the hotel reservation",
                        "type": "String"
                    }
                },
                "format": "BookHotel(city, date) -> hotel_confirmation"
            },
            {
                "name": "ReserveAirportTransport",
                "Description": "This API is to reserve airport transportation based on flight details and hotel confirmation.",
                "input_params": {
                    "flightDetails": {
                        "description": "the details of the flight",
                        "type": "String"
                    },
                    "hotelConfirmation": {
                        "description": "the confirmation details of the hotel reservation",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reservation_confirmation": {
                        "description": "the confirmation details of the airport transportation reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveAirportTransport(flightDetails, hotelConfirmation) -> reservation_confirmation"
            }
        ],
        "Query": "Can you find a flight to Tokyo on October 15, reserve a hotel for my stay, and organize my airport transportation?",
        "Label": "ReserveAirportTransport(flightDetails=FindFlight(destination='Tokyo', date='October 15'), hotelConfirmation=BookHotel(city='Tokyo', date='October 15'))",
        "Index": 1004
    },
    {
        "APIs": [
            {
                "name": "BookReviews",
                "Description": "This API is to book reviews for a book.",
                "input_params": {
                    "author_info": {
                        "description": "the information of the author",
                        "type": "AuthorInfo"
                    },
                    "num_of_reviews": {
                        "description": "the number of reviews needed",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "reviews": {
                        "description": "a list of reviews",
                        "type": "List"
                    }
                },
                "format": "BookReviews(author_info, num_of_reviews) -> reviews"
            },
            {
                "name": "AuthorInfo",
                "Description": "This API is to get the information of an author.",
                "input_params": {
                    "book_details": {
                        "description": "the details of the book",
                        "type": "BookSearch"
                    }
                },
                "output_params": {
                    "author_info": {
                        "description": "the information of the author",
                        "type": "Author"
                    }
                },
                "format": "AuthorInfo(book_details) -> author_info"
            },
            {
                "name": "BookSearch",
                "Description": "This API is to search for a book.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_details": {
                        "description": "the details of the book",
                        "type": "Book"
                    }
                },
                "format": "BookSearch(book_title) -> book_details"
            }
        ],
        "Query": "I need three reviews on '1984' by George Orwell. Can you assist me?",
        "Label": "BookReviews(author_info=AuthorInfo(book_details=BookSearch(book_title='1984')), num_of_reviews='3')",
        "Index": 1005
    },
    {
        "APIs": [
            {
                "name": "ProductLookup",
                "Description": "This API is to look up product information.",
                "input_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_info": {
                        "description": "the information of the product",
                        "type": "Object"
                    }
                },
                "format": "ProductLookup(product_id) -> product_info"
            },
            {
                "name": "CustomerPurchase",
                "Description": "This API is to retrieve customer purchase information.",
                "input_params": {
                    "product_info": {
                        "description": "the information of the product",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "purchase_info": {
                        "description": "the purchase information of the customer",
                        "type": "Object"
                    }
                },
                "format": "CustomerPurchase(product_info) -> purchase_info"
            },
            {
                "name": "ProductRating",
                "Description": "This API is to fetch product ratings.",
                "input_params": {
                    "purchase_info": {
                        "description": "the purchase information of the customer",
                        "type": "Object"
                    },
                    "number_of_ratings": {
                        "description": "the number of ratings to fetch",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "ratings": {
                        "description": "the ratings of the product",
                        "type": "List"
                    }
                },
                "format": "ProductRating(purchase_info, number_of_ratings) -> ratings"
            }
        ],
        "Query": "Could you fetch me five reviews for the item with id 12345?",
        "Label": "ProductRating(purchase_info=CustomerPurchase(product_info=ProductLookup(product_id='12345')), number_of_ratings='5')",
        "Index": 1006
    },
    {
        "APIs": [
            {
                "name": "ProductRating",
                "Description": "This API is to get the ratings for a product.",
                "input_params": {
                    "purchase_info": {
                        "description": "the purchase information of the customer",
                        "type": "CustomerPurchase"
                    },
                    "number_of_ratings": {
                        "description": "the number of ratings to retrieve",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "ratings": {
                        "description": "the ratings for the product",
                        "type": "List"
                    }
                },
                "format": "ProductRating(purchase_info, number_of_ratings) -> ratings"
            },
            {
                "name": "CustomerPurchase",
                "Description": "This API is to get the purchase information of a customer.",
                "input_params": {
                    "product_info": {
                        "description": "the product information",
                        "type": "ProductLookup"
                    }
                },
                "output_params": {
                    "purchase_info": {
                        "description": "the purchase information of the customer",
                        "type": "String"
                    }
                },
                "format": "CustomerPurchase(product_info) -> purchase_info"
            },
            {
                "name": "ProductLookup",
                "Description": "This API is to lookup a product by its ID.",
                "input_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "product_info": {
                        "description": "the information of the product",
                        "type": "String"
                    }
                },
                "format": "ProductLookup(product_id) -> product_info"
            }
        ],
        "Query": "I need 15 ratings for the product having id 67890. Can you get that for me?",
        "Label": "ProductRating(purchase_info=CustomerPurchase(product_info=ProductLookup(product_id='67890')), number_of_ratings='15')",
        "Index": 1007
    },
    {
        "APIs": [
            {
                "name": "ProductLookup",
                "Description": "This API is to lookup product information.",
                "input_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "product_info": {
                        "description": "the information of the product",
                        "type": "String"
                    }
                },
                "format": "ProductLookup(product_id) -> product_info"
            },
            {
                "name": "CustomerPurchase",
                "Description": "This API is to retrieve customer purchase information.",
                "input_params": {
                    "product_info": {
                        "description": "the information of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "purchase_info": {
                        "description": "the purchase information of the customer",
                        "type": "String"
                    }
                },
                "format": "CustomerPurchase(product_info) -> purchase_info"
            },
            {
                "name": "ProductRating",
                "Description": "This API is to retrieve product ratings.",
                "input_params": {
                    "purchase_info": {
                        "description": "the purchase information of the customer",
                        "type": "String"
                    },
                    "number_of_ratings": {
                        "description": "the number of ratings to retrieve",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "ratings": {
                        "description": "the ratings of the product",
                        "type": "List"
                    }
                },
                "format": "ProductRating(purchase_info, number_of_ratings) -> ratings"
            }
        ],
        "Query": "Will you provide twenty reviews for the product with id 23456?",
        "Label": "ProductRating(purchase_info=CustomerPurchase(product_info=ProductLookup(product_id='23456')), number_of_ratings='20')",
        "Index": 1008
    },
    {
        "APIs": [
            {
                "name": "ProductLookup",
                "Description": "This API is to lookup product information based on product ID.",
                "input_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "product_info": {
                        "description": "the information of the product",
                        "type": "String"
                    }
                },
                "format": "ProductLookup(product_id) -> product_info"
            },
            {
                "name": "CustomerPurchase",
                "Description": "This API is to retrieve customer purchase information based on product information.",
                "input_params": {
                    "product_info": {
                        "description": "the information of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "purchase_info": {
                        "description": "the purchase information of the customer",
                        "type": "String"
                    }
                },
                "format": "CustomerPurchase(product_info) -> purchase_info"
            },
            {
                "name": "ProductRating",
                "Description": "This API is to retrieve product ratings based on customer purchase information and number of ratings.",
                "input_params": {
                    "purchase_info": {
                        "description": "the purchase information of the customer",
                        "type": "String"
                    },
                    "number_of_ratings": {
                        "description": "the number of ratings to retrieve",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "ratings": {
                        "description": "the ratings of the product",
                        "type": "List"
                    }
                },
                "format": "ProductRating(purchase_info, number_of_ratings) -> ratings"
            }
        ],
        "Query": "Could you pull up twelve reviews for the product with id 34567?",
        "Label": "ProductRating(purchase_info=CustomerPurchase(product_info=ProductLookup(product_id='34567')), number_of_ratings='12')",
        "Index": 1009
    },
    {
        "APIs": [
            {
                "name": "BookInfo",
                "Description": "This API is to get the details of a book.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bookdetails": {
                        "description": "the details of the book",
                        "type": "Object"
                    }
                },
                "format": "BookInfo(title) -> bookdetails"
            },
            {
                "name": "AuthorBio",
                "Description": "This API is to get the biography of an author.",
                "input_params": {
                    "author": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "authorData": {
                        "description": "the biography of the author",
                        "type": "Object"
                    }
                },
                "format": "AuthorBio(author) -> authorData"
            },
            {
                "name": "ReviewGenerator",
                "Description": "This API is to generate a review for a book using its details and author's biography.",
                "input_params": {
                    "bookdetails": {
                        "description": "the details of the book",
                        "type": "Object"
                    },
                    "authorData": {
                        "description": "the biography of the author",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "review": {
                        "description": "the generated review for the book",
                        "type": "String"
                    }
                },
                "format": "ReviewGenerator(bookdetails, authorData) -> review"
            }
        ],
        "Query": "Can you generate a review for the book '1984' by George Orwell?",
        "Label": "ReviewGenerator(bookdetails = BookInfo(title = '1984'), authorData = AuthorBio(author = 'George Orwell'))",
        "Index": 1010
    },
    {
        "APIs": [
            {
                "name": "BookInfo",
                "Description": "This API is to get the details of a book.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bookdetails": {
                        "description": "the details of the book",
                        "type": "Object"
                    }
                },
                "format": "BookInfo(title) -> bookdetails"
            },
            {
                "name": "AuthorBio",
                "Description": "This API is to get the biography of an author.",
                "input_params": {
                    "author": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "authorData": {
                        "description": "the biography of the author",
                        "type": "Object"
                    }
                },
                "format": "AuthorBio(author) -> authorData"
            },
            {
                "name": "ReviewGenerator",
                "Description": "This API is to generate a review for a book using book details and author biography.",
                "input_params": {
                    "bookdetails": {
                        "description": "the details of the book",
                        "type": "Object"
                    },
                    "authorData": {
                        "description": "the biography of the author",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "review": {
                        "description": "the generated review for the book",
                        "type": "String"
                    }
                },
                "format": "ReviewGenerator(bookdetails, authorData) -> review"
            }
        ],
        "Query": "Can you generate a review for the book 'Pride and Prejudice' by Jane Austen?",
        "Label": "ReviewGenerator(bookdetails = BookInfo(title = 'Pride and Prejudice'), authorData = AuthorBio(author = 'Jane Austen'))",
        "Index": 1011
    },
    {
        "APIs": [
            {
                "name": "BookInfo",
                "Description": "This API is to get the details of a book.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bookdetails": {
                        "description": "the details of the book",
                        "type": "Object"
                    }
                },
                "format": "BookInfo(title) -> bookdetails"
            },
            {
                "name": "AuthorBio",
                "Description": "This API is to get the biography of an author.",
                "input_params": {
                    "author": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "authorData": {
                        "description": "the biography of the author",
                        "type": "Object"
                    }
                },
                "format": "AuthorBio(author) -> authorData"
            },
            {
                "name": "ReviewGenerator",
                "Description": "This API is to generate a review for a book.",
                "input_params": {
                    "bookdetails": {
                        "description": "the details of the book",
                        "type": "Object"
                    },
                    "authorData": {
                        "description": "the biography of the author",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "review": {
                        "description": "the generated review for the book",
                        "type": "String"
                    }
                },
                "format": "ReviewGenerator(bookdetails, authorData) -> review"
            }
        ],
        "Query": "Can you generate a review for the book 'Catcher in the Rye' by J.D. Salinger?",
        "Label": "ReviewGenerator(bookdetails = BookInfo(title = 'Catcher in the Rye'), authorData = AuthorBio(author = 'J.D. Salinger'))",
        "Index": 1012
    },
    {
        "APIs": [
            {
                "name": "BookInfo",
                "Description": "This API is to get the details of a book.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bookdetails": {
                        "description": "the details of the book",
                        "type": "Object"
                    }
                },
                "format": "BookInfo(title) -> bookdetails"
            },
            {
                "name": "AuthorBio",
                "Description": "This API is to get the biography of an author.",
                "input_params": {
                    "author": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "authorData": {
                        "description": "the biography of the author",
                        "type": "Object"
                    }
                },
                "format": "AuthorBio(author) -> authorData"
            },
            {
                "name": "ReviewGenerator",
                "Description": "This API is to generate a review for a book using book details and author biography.",
                "input_params": {
                    "bookdetails": {
                        "description": "the details of the book",
                        "type": "Object"
                    },
                    "authorData": {
                        "description": "the biography of the author",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "review": {
                        "description": "the generated review for the book",
                        "type": "String"
                    }
                },
                "format": "ReviewGenerator(bookdetails, authorData) -> review"
            }
        ],
        "Query": "Can you generate a review for the book 'The Great Gatsby' by F. Scott Fitzgerald?",
        "Label": "ReviewGenerator(bookdetails = BookInfo(title = 'The Great Gatsby'), authorData = AuthorBio(author = 'F. Scott Fitzgerald'))",
        "Index": 1013
    },
    {
        "APIs": [
            {
                "name": "CryptoPrice",
                "Description": "This API is to get the current price of a cryptocurrency.",
                "input_params": {
                    "cryptoType": {
                        "description": "the type of the cryptocurrency",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cryptoPrice": {
                        "description": "the current price of the cryptocurrency",
                        "type": "Float"
                    }
                },
                "format": "CryptoPrice(cryptoType) -> cryptoPrice"
            },
            {
                "name": "StockPrice",
                "Description": "This API is to get the current price of a stock.",
                "input_params": {
                    "stockName": {
                        "description": "the name of the stock",
                        "type": "String"
                    }
                },
                "output_params": {
                    "stockPrice": {
                        "description": "the current price of the stock",
                        "type": "Float"
                    }
                },
                "format": "StockPrice(stockName) -> stockPrice"
            },
            {
                "name": "InvestmentSuggestion",
                "Description": "This API is to provide an investment suggestion based on cryptocurrency and stock prices.",
                "input_params": {
                    "cryptoPrice": {
                        "description": "the current price of the cryptocurrency",
                        "type": "Float"
                    },
                    "stockPrice": {
                        "description": "the current price of the stock",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "suggestion": {
                        "description": "the investment suggestion",
                        "type": "String"
                    }
                },
                "format": "InvestmentSuggestion(cryptoPrice, stockPrice) -> suggestion"
            }
        ],
        "Query": "Should I invest in Ethereum or Apple stocks given their current market values?",
        "Label": "InvestmentSuggestion(cryptoPrice = CryptoPrice(cryptoType = 'Ethereum'), stockPrice = StockPrice(stockName = 'Apple'))",
        "Index": 1014
    },
    {
        "APIs": [
            {
                "name": "CryptoPrice",
                "Description": "This API is to get the price of a cryptocurrency.",
                "input_params": {
                    "cryptoType": {
                        "description": "the type of the cryptocurrency",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cryptoPrice": {
                        "description": "the price of the cryptocurrency",
                        "type": "Float"
                    }
                },
                "format": "CryptoPrice(cryptoType) -> cryptoPrice"
            },
            {
                "name": "StockPrice",
                "Description": "This API is to get the price of a stock.",
                "input_params": {
                    "stockName": {
                        "description": "the name of the stock",
                        "type": "String"
                    }
                },
                "output_params": {
                    "stockPrice": {
                        "description": "the price of the stock",
                        "type": "Float"
                    }
                },
                "format": "StockPrice(stockName) -> stockPrice"
            },
            {
                "name": "InvestmentSuggestion",
                "Description": "This API is to provide an investment suggestion based on cryptocurrency and stock prices.",
                "input_params": {
                    "cryptoPrice": {
                        "description": "the price of the cryptocurrency",
                        "type": "Float"
                    },
                    "stockPrice": {
                        "description": "the price of the stock",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "suggestion": {
                        "description": "the investment suggestion",
                        "type": "String"
                    }
                },
                "format": "InvestmentSuggestion(cryptoPrice, stockPrice) -> suggestion"
            }
        ],
        "Query": "Should I invest in Ripple or Microsoft stocks considering the recent market situation?",
        "Label": "InvestmentSuggestion(cryptoPrice = CryptoPrice(cryptoType = 'Ripple'), stockPrice = StockPrice(stockName = 'Microsoft'))",
        "Index": 1015
    },
    {
        "APIs": [
            {
                "name": "TripPlan",
                "Description": "This API is to organize a travel itinerary for a trip.",
                "input_params": {
                    "city": {
                        "description": "the city of the trip",
                        "type": "String"
                    },
                    "hotel": {
                        "description": "the information of the hotel",
                        "type": "HotelInfo"
                    },
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "RestaurantLocation"
                    }
                },
                "output_params": {
                    "itinerary": {
                        "description": "the travel itinerary",
                        "type": "String"
                    }
                },
                "format": "TripPlan(city, hotel, location) -> itinerary"
            },
            {
                "name": "HotelInfo",
                "Description": "This API is to get information about a top-rated hotel in a city.",
                "input_params": {
                    "city": {
                        "description": "the city of the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_info": {
                        "description": "the information of the hotel",
                        "type": "String"
                    }
                },
                "format": "HotelInfo(city) -> hotel_info"
            },
            {
                "name": "RestaurantLocation",
                "Description": "This API is to get the location of a renowned restaurant in a city.",
                "input_params": {
                    "city": {
                        "description": "the city of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantLocation(city) -> restaurant_location"
            }
        ],
        "Query": "Can you organize a travel itinerary for my upcoming trip to Rome, which includes a top-rated hotel and a renowned restaurant?",
        "Label": "TripPlan(city='Rome', hotel=HotelInfo(city='Rome'), location=RestaurantLocation(city='Rome'))",
        "Index": 1016
    },
    {
        "APIs": [
            {
                "name": "TripPlan",
                "Description": "This API is to plan a trip including the selection of a hotel and restaurant.",
                "input_params": {
                    "city": {
                        "description": "the city for the trip",
                        "type": "String"
                    },
                    "hotel": {
                        "description": "the information of the hotel",
                        "type": "HotelInfo"
                    },
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "RestaurantLocation"
                    }
                },
                "output_params": {
                    "trip_plan": {
                        "description": "the plan for the trip",
                        "type": "String"
                    }
                },
                "format": "TripPlan(city, hotel, location) -> trip_plan"
            },
            {
                "name": "HotelInfo",
                "Description": "This API is to provide information about a high-quality hotel.",
                "input_params": {
                    "city": {
                        "description": "the city for the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_info": {
                        "description": "the information of the hotel",
                        "type": "String"
                    }
                },
                "format": "HotelInfo(city) -> hotel_info"
            },
            {
                "name": "RestaurantLocation",
                "Description": "This API is to provide the location of a restaurant.",
                "input_params": {
                    "city": {
                        "description": "the city for the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantLocation(city) -> restaurant_location"
            }
        ],
        "Query": "Could you help me plan my London trip, including the selection of a high-quality hotel and restaurant?",
        "Label": "TripPlan(city='London', hotel=HotelInfo(city='London'), location=RestaurantLocation(city='London'))",
        "Index": 1017
    },
    {
        "APIs": [
            {
                "name": "TripPlan",
                "Description": "This API is to generate a travel plan.",
                "input_params": {
                    "city": {
                        "description": "the city for the travel plan",
                        "type": "String"
                    },
                    "hotel": {
                        "description": "the information of the hotel",
                        "type": "HotelInfo"
                    },
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "RestaurantLocation"
                    }
                },
                "output_params": {
                    "travel_plan": {
                        "description": "the generated travel plan",
                        "type": "String"
                    }
                },
                "format": "TripPlan(city, hotel, location) -> travel_plan"
            },
            {
                "name": "HotelInfo",
                "Description": "This API is to get information about a hotel.",
                "input_params": {
                    "city": {
                        "description": "the city for the hotel information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_info": {
                        "description": "the information of the hotel",
                        "type": "String"
                    }
                },
                "format": "HotelInfo(city) -> hotel_info"
            },
            {
                "name": "RestaurantLocation",
                "Description": "This API is to get the location of a restaurant.",
                "input_params": {
                    "city": {
                        "description": "the city for the restaurant location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantLocation(city) -> restaurant_location"
            }
        ],
        "Query": "Can you generate a travel plan for my Tokyo vacation that includes a superior hotel and popular restaurant?",
        "Label": "TripPlan(city='Tokyo', hotel=HotelInfo(city='Tokyo'), location=RestaurantLocation(city='Tokyo'))",
        "Index": 1018
    },
    {
        "APIs": [
            {
                "name": "TripPlan",
                "Description": "This API is to outline a trip for a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "hotel": {
                        "description": "information about the hotel",
                        "type": "HotelInfo"
                    },
                    "location": {
                        "description": "information about the restaurant location",
                        "type": "RestaurantLocation"
                    }
                },
                "output_params": {
                    "trip_outline": {
                        "description": "the outline of the trip",
                        "type": "String"
                    }
                },
                "format": "TripPlan(city, hotel, location) -> trip_outline"
            },
            {
                "name": "HotelInfo",
                "Description": "This API is to provide information about a hotel in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_info": {
                        "description": "information about the hotel",
                        "type": "String"
                    }
                },
                "format": "HotelInfo(city) -> hotel_info"
            },
            {
                "name": "RestaurantLocation",
                "Description": "This API is to provide information about a restaurant location in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_location": {
                        "description": "information about the restaurant location",
                        "type": "String"
                    }
                },
                "format": "RestaurantLocation(city) -> restaurant_location"
            }
        ],
        "Query": "Can you outline a trip for my Sydney journey which includes a luxury hotel and an excellent restaurant?",
        "Label": "TripPlan(city='Sydney', hotel=HotelInfo(city='Sydney'), location=RestaurantLocation(city='Sydney'))",
        "Index": 1019
    },
    {
        "APIs": [
            {
                "name": "BookPrice",
                "Description": "This API is to get the price of a book.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bookPrice": {
                        "description": "the price of the book",
                        "type": "Float"
                    }
                },
                "format": "BookPrice(title) -> bookPrice"
            },
            {
                "name": "BookTitle",
                "Description": "This API is to get the title of a book.",
                "input_params": {
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    },
                    "genre": {
                        "description": "the genre of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "format": "BookTitle(author, genre) -> title"
            },
            {
                "name": "ShippingEstimate",
                "Description": "This API is to estimate the shipping cost.",
                "input_params": {
                    "bookPrice": {
                        "description": "the price of the book",
                        "type": "Float"
                    },
                    "destination": {
                        "description": "the destination of the delivery",
                        "type": "String"
                    }
                },
                "output_params": {
                    "shippingCost": {
                        "description": "the cost of shipping",
                        "type": "Float"
                    }
                },
                "format": "ShippingEstimate(bookPrice, destination) -> shippingCost"
            }
        ],
        "Query": "I want to purchase a romance book by Nicholas Sparks and need it delivered to New York. How much will it all cost?",
        "Label": "ShippingEstimate(bookPrice=BookPrice(title=BookTitle(author='Nicholas Sparks', genre='romance')), destination='New York')",
        "Index": 1020
    },
    {
        "APIs": [
            {
                "name": "BookPrice",
                "Description": "This API is to get the price of a book.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bookPrice": {
                        "description": "the price of the book",
                        "type": "Float"
                    }
                },
                "format": "BookPrice(title) -> bookPrice"
            },
            {
                "name": "BookTitle",
                "Description": "This API is to get the title of a book.",
                "input_params": {
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    },
                    "genre": {
                        "description": "the genre of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "format": "BookTitle(author, genre) -> title"
            },
            {
                "name": "ShippingEstimate",
                "Description": "This API is to estimate the shipping expense.",
                "input_params": {
                    "bookPrice": {
                        "description": "the price of the book",
                        "type": "Float"
                    },
                    "destination": {
                        "description": "the destination of the shipment",
                        "type": "String"
                    }
                },
                "output_params": {
                    "totalExpense": {
                        "description": "the total expense of the shipment",
                        "type": "Float"
                    }
                },
                "format": "ShippingEstimate(bookPrice, destination) -> totalExpense"
            }
        ],
        "Query": "I am interested in buying a fantasy novel by J.K. Rowling and wish to have it shipped to London. Can you inform me about the total expense?",
        "Label": "ShippingEstimate(bookPrice=BookPrice(title=BookTitle(author='J.K. Rowling', genre='fantasy')), destination='London')",
        "Index": 1021
    },
    {
        "APIs": [
            {
                "name": "MovieSearch",
                "Description": "This API is to search for movies based on city and genre.",
                "input_params": {
                    "city": {
                        "description": "the city where the movie is being searched",
                        "type": "String"
                    },
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "format": "MovieSearch(city, genre) -> movie"
            },
            {
                "name": "ShowTiming",
                "Description": "This API is to get the show timings of a movie on a specific date.",
                "input_params": {
                    "movie": {
                        "description": "the movie for which show timings are required",
                        "type": "Object"
                    },
                    "date": {
                        "description": "the date for which show timings are required",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "the show timings of the movie on the specified date",
                        "type": "Object"
                    }
                },
                "format": "ShowTiming(movie, date) -> showtime"
            },
            {
                "name": "BookTicket",
                "Description": "This API is to book tickets for a movie show.",
                "input_params": {
                    "showtime": {
                        "description": "the show timing for which tickets are to be booked",
                        "type": "Object"
                    },
                    "seats": {
                        "description": "the number of seats to be booked",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the ticket booking",
                        "type": "String"
                    }
                },
                "format": "BookTicket(showtime, seats) -> booking status"
            }
        ],
        "Query": "I'm currently in Chicago and I'm interested in a romance movie next Friday. Can you find a high-rated movie and book three seats for me?",
        "Label": "BookTicket(showtime=ShowTiming(movie=MovieSearch(city='Chicago', genre='romance'), date='next Friday'), seats=3)",
        "Index": 1022
    },
    {
        "APIs": [
            {
                "name": "MovieSearch",
                "Description": "This API is to search for movies based on city and genre.",
                "input_params": {
                    "city": {
                        "description": "the city where the movie is being searched",
                        "type": "String"
                    },
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie": {
                        "description": "the movie details",
                        "type": "Object"
                    }
                },
                "format": "MovieSearch(city, genre) -> movie"
            },
            {
                "name": "ShowTiming",
                "Description": "This API is to get the show timings of a movie on a specific date.",
                "input_params": {
                    "movie": {
                        "description": "the movie details",
                        "type": "Object"
                    },
                    "date": {
                        "description": "the date for which show timings are required",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "the show timings of the movie on the specified date",
                        "type": "Object"
                    }
                },
                "format": "ShowTiming(movie, date) -> showtime"
            },
            {
                "name": "BookTicket",
                "Description": "This API is to book tickets for a movie show.",
                "input_params": {
                    "showtime": {
                        "description": "the show timings of the movie",
                        "type": "Object"
                    },
                    "seats": {
                        "description": "the number of seats to be reserved",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the ticket booking",
                        "type": "String"
                    }
                },
                "format": "BookTicket(showtime, seats) -> booking status"
            }
        ],
        "Query": "I'm in Dallas and I want to see a sci-fi movie next Monday. Can you find a popular movie and reserve five seats for me?",
        "Label": "BookTicket(showtime=ShowTiming(movie=MovieSearch(city='Dallas', genre='sci-fi'), date='next Monday'), seats=5)",
        "Index": 1023
    },
    {
        "APIs": [
            {
                "name": "GetClothingRecommendation",
                "Description": "This API is to get clothing recommendations based on weather forecast.",
                "input_params": {
                    "weather": {
                        "description": "the weather forecast for a specific city",
                        "type": "WeatherForecast"
                    }
                },
                "output_params": {
                    "clothing": {
                        "description": "the recommended clothing for the given weather forecast",
                        "type": "String"
                    }
                },
                "format": "GetClothingRecommendation(weather=WeatherForecast(city='city_name')) -> clothing"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast for a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast for the given city",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city='city_name') -> weather"
            },
            {
                "name": "PlanOutfit",
                "Description": "This API is to plan an outfit for a specific occasion.",
                "input_params": {
                    "clothing": {
                        "description": "the recommended clothing for the occasion",
                        "type": "String"
                    },
                    "occasion": {
                        "description": "the specific occasion",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the planned outfit for the occasion",
                        "type": "String"
                    }
                },
                "format": "PlanOutfit(clothing=GetClothingRecommendation(weather=WeatherForecast(city='city_name')), occasion='occasion_name') -> outfit"
            }
        ],
        "Query": "I'm going to a beach party in Miami this weekend, what should I wear?",
        "Label": "PlanOutfit(clothing=GetClothingRecommendation(weather=WeatherForecast(city='Miami')), occasion='beach party')",
        "Index": 1024
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine the user wants",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(city, cuisine) -> restaurant"
            },
            {
                "name": "BookTable",
                "Description": "This API is to book a table at a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the reservation",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant, date, time) -> reservation_status"
            }
        ],
        "Query": "I would like to eat Chinese food in Los Angeles on Saturday at 6pm. Can you arrange a reservation?",
        "Label": "BookTable(restaurant=FindRestaurant(city='Los Angeles', cuisine='Chinese'), date='Saturday', time='6pm')",
        "Index": 1025
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine desired",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(city, cuisine) -> restaurant"
            },
            {
                "name": "BookTable",
                "Description": "This API is to make a reservation at a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the reservation",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant, date, time) -> reservation_status"
            }
        ],
        "Query": "I'm looking to dine at a French restaurant in Chicago on Sunday at 1pm. Can you make a reservation?",
        "Label": "BookTable(restaurant=FindRestaurant(city='Chicago', cuisine='French'), date='Sunday', time='1pm')",
        "Index": 1026
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine desired",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(city, cuisine) -> restaurant"
            },
            {
                "name": "BookTable",
                "Description": "This API is to reserve a table at a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the reservation",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant, date, time) -> reservation_status"
            }
        ],
        "Query": "I crave for Japanese cuisine in San Francisco on Monday at 8pm. Can I reserve a table?",
        "Label": "BookTable(restaurant=FindRestaurant(city='San Francisco', cuisine='Japanese'), date='Monday', time='8pm')",
        "Index": 1027
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine desired",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(city, cuisine) -> restaurant"
            },
            {
                "name": "BookTable",
                "Description": "This API is to book a table at a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the reservation",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time of the reservation",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant, date, time) -> booking status"
            }
        ],
        "Query": "I crave for Japanese cuisine in San Francisco on Monday at 8pm. Can I reserve a table?",
        "Label": "BookTable(restaurant=FindRestaurant(city='San Francisco', cuisine='Japanese'), date='Monday', time='8pm')",
        "Index": 1028
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on the city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(city, cuisine) -> restaurant"
            },
            {
                "name": "BookTable",
                "Description": "This API is to book a table at a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the reservation",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant, date, time) -> reservation_status"
            }
        ],
        "Query": "I'm thinking about eating Mexican food in Houston on Thursday at 7:30pm. Is it possible to get a reservation?",
        "Label": "BookTable(restaurant=FindRestaurant(city='Houston', cuisine='Mexican'), date='Thursday', time='7:30pm')",
        "Index": 1029
    },
    {
        "APIs": [
            {
                "name": "PharmacyLocator",
                "Description": "This API is to locate nearby pharmacies.",
                "input_params": {
                    "city": {
                        "description": "the city where the user is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "pharmacy": {
                        "description": "the nearby pharmacy",
                        "type": "String"
                    }
                },
                "format": "PharmacyLocator(city) -> pharmacy"
            },
            {
                "name": "OrderMedicine",
                "Description": "This API is to order medicine from a pharmacy.",
                "input_params": {
                    "pharmacy": {
                        "description": "the nearby pharmacy",
                        "type": "String"
                    },
                    "medicine_name": {
                        "description": "the name of the medicine",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity of medicine to purchase",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "OrderMedicine(pharmacy, medicine_name, quantity) -> reservation_status"
            }
        ],
        "Query": "I am currently in New York and I need to purchase 5 packs of Paracetamol. Can you look for a nearby drugstore where it's in stock and reserve it for me?",
        "Label": "OrderMedicine(pharmacy=PharmacyLocator(city='New York'), medicine_name='Paracetamol', quantity=5)",
        "Index": 1030
    },
    {
        "APIs": [
            {
                "name": "PharmacyLocator",
                "Description": "This API is to locate a pharmacy based on the city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "pharmacy": {
                        "description": "the details of the pharmacy",
                        "type": "Object"
                    }
                },
                "format": "PharmacyLocator(city) -> pharmacy"
            },
            {
                "name": "OrderMedicine",
                "Description": "This API is to make an order for a specific medicine from a pharmacy.",
                "input_params": {
                    "pharmacy": {
                        "description": "the details of the pharmacy",
                        "type": "Object"
                    },
                    "medicine_name": {
                        "description": "the name of the medicine",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity of the medicine",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderMedicine(pharmacy, medicine_name, quantity) -> order_status"
            }
        ],
        "Query": "I'm in Los Angeles and I need to get 3 bottles of Aspirin. Can you find a pharmacy where it's available and make an order for me?",
        "Label": "OrderMedicine(pharmacy=PharmacyLocator(city='Los Angeles'), medicine_name='Aspirin', quantity=3)",
        "Index": 1031
    },
    {
        "APIs": [
            {
                "name": "PharmacyLocator",
                "Description": "This API is to locate a pharmacy based on the city.",
                "input_params": {
                    "city": {
                        "description": "the city where the pharmacy is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "pharmacy": {
                        "description": "the details of the pharmacy",
                        "type": "Object"
                    }
                },
                "format": "PharmacyLocator(city) -> pharmacy"
            },
            {
                "name": "OrderMedicine",
                "Description": "This API is to place an order for a specific medicine at a pharmacy.",
                "input_params": {
                    "pharmacy": {
                        "description": "the details of the pharmacy",
                        "type": "Object"
                    },
                    "medicine_name": {
                        "description": "the name of the medicine",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity of the medicine to order",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderMedicine(pharmacy, medicine_name, quantity) -> order_status"
            }
        ],
        "Query": "I'm staying in Chicago and I need to buy 4 boxes of Cough Syrup. Can you search for a pharmacy where it's available and place the order for me?",
        "Label": "OrderMedicine(pharmacy=PharmacyLocator(city='Chicago'), medicine_name='Cough Syrup', quantity=4)",
        "Index": 1032
    },
    {
        "APIs": [
            {
                "name": "PharmacyLocator",
                "Description": "This API is to locate a pharmacy based on the city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "pharmacy": {
                        "description": "the location of the pharmacy",
                        "type": "String"
                    }
                },
                "format": "PharmacyLocator(city) -> pharmacy"
            },
            {
                "name": "OrderMedicine",
                "Description": "This API is to order a specific medicine from a pharmacy.",
                "input_params": {
                    "pharmacy": {
                        "description": "the location of the pharmacy",
                        "type": "String"
                    },
                    "medicine_name": {
                        "description": "the name of the medicine",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity of the medicine",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "OrderMedicine(pharmacy, medicine_name, quantity) -> order_status"
            }
        ],
        "Query": "I am in Seattle and I need to purchase 3 packs of Vitamin C. Can you identify a pharmacy where it's available and order it for me?",
        "Label": "OrderMedicine(pharmacy=PharmacyLocator(city='Seattle'), medicine_name='Vitamin C', quantity=3)",
        "Index": 1033
    },
    {
        "APIs": [
            {
                "name": "GetMovie",
                "Description": "This API is to get information about a movie.",
                "input_params": {
                    "show": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "venue": {
                        "description": "the venue where the movie is being shown",
                        "type": "String"
                    }
                },
                "format": "GetMovie(show) -> venue"
            },
            {
                "name": "RestaurantRecommendation",
                "Description": "This API is to recommend a restaurant.",
                "input_params": {
                    "venue": {
                        "description": "the venue where the movie is being shown",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommendation(venue) -> restaurant"
            },
            {
                "name": "BookTable",
                "Description": "This API is to book a table at a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "no_of_persons": {
                        "description": "the number of persons for the table",
                        "type": "Integer"
                    },
                    "time": {
                        "description": "the time for the table booking",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the table booking",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant, no_of_persons, time) -> booking status"
            }
        ],
        "Query": "We are going to see the new Disney movie this weekend. Can you recommend a restaurant for lunch and book a table for 6 at 1 PM?",
        "Label": "BookTable(restaurant=RestaurantRecommendation(venue=GetMovie(show='Disney')), no_of_persons='6', time='1 PM')",
        "Index": 1034
    },
    {
        "APIs": [
            {
                "name": "GetMovie",
                "Description": "This API is to get the showtime of a movie.",
                "input_params": {
                    "show": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "Time"
                    }
                },
                "format": "GetMovie(show) -> showtime"
            },
            {
                "name": "RestaurantRecommendation",
                "Description": "This API is to recommend a restaurant.",
                "input_params": {
                    "venue": {
                        "description": "the name of the movie venue",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommendation(venue) -> restaurant"
            },
            {
                "name": "BookTable",
                "Description": "This API is to make a reservation at a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "no_of_persons": {
                        "description": "the number of persons for the reservation",
                        "type": "Integer"
                    },
                    "time": {
                        "description": "the reservation time",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant, no_of_persons, time) -> reservation_status"
            }
        ],
        "Query": "We are looking forward to watching the latest Pixar film tomorrow. Can you suggest a place to enjoy breakfast and make a reservation for 2 at 8 AM?",
        "Label": "BookTable(restaurant=RestaurantRecommendation(venue=GetMovie(show='Pixar')), no_of_persons='2', time='8 AM')",
        "Index": 1035
    },
    {
        "APIs": [
            {
                "name": "GetMovie",
                "Description": "This API is to get information about a movie.",
                "input_params": {
                    "show": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_info": {
                        "description": "information about the movie",
                        "type": "String"
                    }
                },
                "format": "GetMovie(show) -> movie_info"
            },
            {
                "name": "RestaurantRecommendation",
                "Description": "This API is to recommend a restaurant.",
                "input_params": {
                    "venue": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommendation(venue) -> restaurant_name"
            },
            {
                "name": "BookTable",
                "Description": "This API is to book a table at a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "no_of_persons": {
                        "description": "the number of persons for the table",
                        "type": "Integer"
                    },
                    "time": {
                        "description": "the time for the table reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the table reservation",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant, no_of_persons, time) -> booking_status"
            }
        ],
        "Query": "We are excited to view the new Star Wars movie tonight. Can you recommend a spot for dinner and reserve a table for 5 at 7 PM?",
        "Label": "BookTable(restaurant=RestaurantRecommendation(venue=GetMovie(show='Star Wars')), no_of_persons='5', time='7 PM')",
        "Index": 1036
    },
    {
        "APIs": [
            {
                "name": "GetMovie",
                "Description": "This API is to get information about a movie.",
                "input_params": {
                    "show": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_info": {
                        "description": "information about the movie",
                        "type": "String"
                    }
                },
                "format": "GetMovie(show) -> movie_info"
            },
            {
                "name": "RestaurantRecommendation",
                "Description": "This API is to recommend a restaurant.",
                "input_params": {
                    "venue": {
                        "description": "the name of the movie theater",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommendation(venue) -> restaurant_name"
            },
            {
                "name": "BookTable",
                "Description": "This API is to make a reservation at a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "no_of_persons": {
                        "description": "the number of persons for the reservation",
                        "type": "Integer"
                    },
                    "time": {
                        "description": "the time of the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant, no_of_persons, time) -> reservation_status"
            }
        ],
        "Query": "We are eager to watch the new Harry Potter movie tomorrow night. Can you recommend a restaurant for dinner and make a reservation for 8 at 6 PM?",
        "Label": "BookTable(restaurant=RestaurantRecommendation(venue=GetMovie(show='Harry Potter')), no_of_persons='8', time='6 PM')",
        "Index": 1037
    },
    {
        "APIs": [
            {
                "name": "RestaurantDetails",
                "Description": "This API is to get the details of a restaurant.",
                "input_params": {
                    "restaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantInfo": {
                        "description": "the information of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "RestaurantDetails(restaurantName) -> restaurantInfo"
            },
            {
                "name": "CuisineRecommendation",
                "Description": "This API is to recommend cuisine based on restaurant information.",
                "input_params": {
                    "restaurantInfo": {
                        "description": "the information of the restaurant",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "cuisineRec": {
                        "description": "the recommended cuisine",
                        "type": "Object"
                    }
                },
                "format": "CuisineRecommendation(restaurantInfo) -> cuisineRec"
            },
            {
                "name": "MenuSelection",
                "Description": "This API is to select a menu based on restaurant information and cuisine recommendation.",
                "input_params": {
                    "restaurantInfo": {
                        "description": "the information of the restaurant",
                        "type": "Object"
                    },
                    "cuisineRec": {
                        "description": "the recommended cuisine",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "menuSelection": {
                        "description": "the selected menu",
                        "type": "Object"
                    }
                },
                "format": "MenuSelection(restaurantInfo, cuisineRec) -> menuSelection"
            }
        ],
        "Query": "What is nice to order at 'El Celler de Can Roca'?",
        "Label": "MenuSelection(restaurantInfo=RestaurantDetails(restaurantName='El Celler de Can Roca'), cuisineRec=CuisineRecommendation(restaurantInfo=RestaurantDetails(restaurantName='El Celler de Can Roca')))",
        "Index": 1038
    },
    {
        "APIs": [
            {
                "name": "RestaurantDetails",
                "Description": "This API is to get the details of a restaurant.",
                "input_params": {
                    "restaurantName": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantInfo": {
                        "description": "the information of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "RestaurantDetails(restaurantName) -> restaurantInfo"
            },
            {
                "name": "CuisineRecommendation",
                "Description": "This API is to recommend cuisine based on restaurant information.",
                "input_params": {
                    "restaurantInfo": {
                        "description": "the information of the restaurant",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "cuisineRec": {
                        "description": "the recommended cuisine",
                        "type": "Object"
                    }
                },
                "format": "CuisineRecommendation(restaurantInfo) -> cuisineRec"
            },
            {
                "name": "MenuSelection",
                "Description": "This API is to select menu items based on restaurant and cuisine information.",
                "input_params": {
                    "restaurantInfo": {
                        "description": "the information of the restaurant",
                        "type": "Object"
                    },
                    "cuisineRec": {
                        "description": "the recommended cuisine",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "menuItems": {
                        "description": "the recommended menu items",
                        "type": "List"
                    }
                },
                "format": "MenuSelection(restaurantInfo, cuisineRec) -> menuItems"
            }
        ],
        "Query": "What's worth trying at 'Mirazur'?",
        "Label": "MenuSelection(restaurantInfo=RestaurantDetails(restaurantName='Mirazur'), cuisineRec=CuisineRecommendation(restaurantInfo=RestaurantDetails(restaurantName='Mirazur')))",
        "Index": 1039
    },
    {
        "APIs": [
            {
                "name": "ClothingRecommendation",
                "Description": "This API is to provide clothing recommendations based on weather forecast.",
                "input_params": {
                    "weatherForecast": {
                        "description": "the weather forecast for a specific city and country",
                        "type": "WeatherForecast"
                    }
                },
                "output_params": {
                    "clothingRecommendation": {
                        "description": "the recommended clothing items",
                        "type": "ClothingRecommendation"
                    }
                },
                "format": "ClothingRecommendation(weatherForecast)"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to retrieve the weather forecast for a specific city and country.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "country": {
                        "description": "the name of the country",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weatherForecast": {
                        "description": "the weather forecast",
                        "type": "WeatherForecast"
                    }
                },
                "format": "WeatherForecast(city, country)"
            },
            {
                "name": "PackItems",
                "Description": "This API is to provide a list of items to pack for a trip.",
                "input_params": {
                    "clothingRecommendation": {
                        "description": "the recommended clothing items",
                        "type": "ClothingRecommendation"
                    },
                    "tripDuration": {
                        "description": "the duration of the trip",
                        "type": "String"
                    }
                },
                "output_params": {
                    "packedItems": {
                        "description": "the list of items to pack",
                        "type": "List"
                    }
                },
                "format": "PackItems(clothingRecommendation, tripDuration)"
            }
        ],
        "Query": "What clothes should I pack for a two week's trip to Berlin, Germany?",
        "Label": "PackItems(clothingRecommendation=ClothingRecommendation(weatherForecast=WeatherForecast(city='Berlin', country='Germany')), tripDuration='two weeks')",
        "Index": 1040
    },
    {
        "APIs": [
            {
                "name": "ClothingRecommendation",
                "Description": "This API is to provide clothing recommendations based on the weather forecast.",
                "input_params": {
                    "weatherForecast": {
                        "description": "the weather forecast for a specific city",
                        "type": "WeatherForecast"
                    }
                },
                "output_params": {
                    "clothingRecommendation": {
                        "description": "the recommended clothing for the given weather forecast",
                        "type": "ClothingRecommendation"
                    }
                },
                "format": "ClothingRecommendation(weatherForecast)"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to retrieve the weather forecast for a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "country": {
                        "description": "the name of the country",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weatherForecast": {
                        "description": "the weather forecast for the given city and country",
                        "type": "WeatherForecast"
                    }
                },
                "format": "WeatherForecast(city, country)"
            },
            {
                "name": "PackItems",
                "Description": "This API is to provide a list of items to pack for a trip.",
                "input_params": {
                    "clothingRecommendation": {
                        "description": "the recommended clothing for the trip",
                        "type": "ClothingRecommendation"
                    },
                    "tripDuration": {
                        "description": "the duration of the trip",
                        "type": "String"
                    }
                },
                "output_params": {
                    "packedItems": {
                        "description": "a list of items to pack for the trip",
                        "type": "List"
                    }
                },
                "format": "PackItems(clothingRecommendation, tripDuration)"
            }
        ],
        "Query": "What outfits should I pack for a three day trip to Tokyo, Japan?",
        "Label": "PackItems(clothingRecommendation=ClothingRecommendation(weatherForecast=WeatherForecast(city='Tokyo', country='Japan')), tripDuration='three days')",
        "Index": 1041
    },
    {
        "APIs": [
            {
                "name": "ClothingRecommendation",
                "Description": "This API is to provide clothing recommendations based on weather forecast.",
                "input_params": {
                    "weatherForecast": {
                        "description": "the weather forecast for a specific city and country",
                        "type": "WeatherForecast"
                    }
                },
                "output_params": {
                    "clothingRecommendation": {
                        "description": "the recommended clothing for the given weather forecast",
                        "type": "String"
                    }
                },
                "format": "ClothingRecommendation(weatherForecast) -> clothingRecommendation"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to retrieve the weather forecast for a specific city and country.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "country": {
                        "description": "the name of the country",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weatherForecast": {
                        "description": "the weather forecast for the given city and country",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, country) -> weatherForecast"
            },
            {
                "name": "PackItems",
                "Description": "This API is to provide a list of items to pack for a trip.",
                "input_params": {
                    "clothingRecommendation": {
                        "description": "the recommended clothing for the trip",
                        "type": "String"
                    },
                    "tripDuration": {
                        "description": "the duration of the trip",
                        "type": "String"
                    }
                },
                "output_params": {
                    "packingList": {
                        "description": "the list of items to pack for the trip",
                        "type": "String"
                    }
                },
                "format": "PackItems(clothingRecommendation, tripDuration) -> packingList"
            }
        ],
        "Query": "What outfits should I pack for a three day trip to Tokyo, Japan?",
        "Label": "PackItems(clothingRecommendation=ClothingRecommendation(weatherForecast=WeatherForecast(city='Tokyo', country='Japan')), tripDuration='three days')",
        "Index": 1042
    },
    {
        "APIs": [
            {
                "name": "CarInfo",
                "Description": "This API is to get information about a car.",
                "input_params": {
                    "car_name": {
                        "description": "the name of the car",
                        "type": "String"
                    },
                    "country": {
                        "description": "the country where the car is bought",
                        "type": "String"
                    }
                },
                "output_params": {
                    "car_info": {
                        "description": "the information about the car",
                        "type": "Object"
                    }
                },
                "format": "CarInfo(car_name, country) -> car_info"
            },
            {
                "name": "CountryTaxRate",
                "Description": "This API is to get the tax rate of a country.",
                "input_params": {
                    "country": {
                        "description": "the name of the country",
                        "type": "String"
                    }
                },
                "output_params": {
                    "tax_rate": {
                        "description": "the tax rate of the country",
                        "type": "Float"
                    }
                },
                "format": "CountryTaxRate(country) -> tax_rate"
            },
            {
                "name": "TaxCostCalculator",
                "Description": "This API is to calculate the tax cost based on the price and tax rate.",
                "input_params": {
                    "price": {
                        "description": "the price of the car",
                        "type": "Float"
                    },
                    "tax_rate": {
                        "description": "the tax rate of the country",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "tax_cost": {
                        "description": "the tax cost to be paid",
                        "type": "Float"
                    }
                },
                "format": "TaxCostCalculator(price, tax_rate) -> tax_cost"
            }
        ],
        "Query": "How much tax will I have to pay if I buy a BMW X5 in France?",
        "Label": "TaxCostCalculator(price=CarInfo(car_name='BMW X5', country='France'), tax_rate=CountryTaxRate(country='France'))",
        "Index": 1043
    },
    {
        "APIs": [
            {
                "name": "CarInfo",
                "Description": "This API is to get information about a car.",
                "input_params": {
                    "car_name": {
                        "description": "the name of the car",
                        "type": "String"
                    },
                    "country": {
                        "description": "the country where the car is being purchased",
                        "type": "String"
                    }
                },
                "output_params": {
                    "car_info": {
                        "description": "the information about the car",
                        "type": "String"
                    }
                },
                "format": "CarInfo(car_name, country) -> car_info"
            },
            {
                "name": "CountryTaxRate",
                "Description": "This API is to get the tax rate of a country.",
                "input_params": {
                    "country": {
                        "description": "the country for which the tax rate is required",
                        "type": "String"
                    }
                },
                "output_params": {
                    "tax_rate": {
                        "description": "the tax rate of the country",
                        "type": "Float"
                    }
                },
                "format": "CountryTaxRate(country) -> tax_rate"
            },
            {
                "name": "TaxCostCalculator",
                "Description": "This API is to calculate the tax cost for a car.",
                "input_params": {
                    "price": {
                        "description": "the price of the car",
                        "type": "Float"
                    },
                    "tax_rate": {
                        "description": "the tax rate applicable for the car",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "tax_cost": {
                        "description": "the tax cost for the car",
                        "type": "Float"
                    }
                },
                "format": "TaxCostCalculator(price, tax_rate) -> tax_cost"
            }
        ],
        "Query": "Can you tell me the tax I would need to pay if I get a Audi Q7 in Italy?",
        "Label": "TaxCostCalculator(price=CarInfo(car_name='Audi Q7', country='Italy'), tax_rate=CountryTaxRate(country='Italy'))",
        "Index": 1044
    },
    {
        "APIs": [
            {
                "name": "CarInfo",
                "Description": "This API is to get information about a car.",
                "input_params": {
                    "car_name": {
                        "description": "the name of the car",
                        "type": "String"
                    },
                    "country": {
                        "description": "the country where the car is being purchased",
                        "type": "String"
                    }
                },
                "output_params": {
                    "car_info": {
                        "description": "the information about the car",
                        "type": "String"
                    }
                },
                "format": "CarInfo(car_name, country) -> car_info"
            },
            {
                "name": "CountryTaxRate",
                "Description": "This API is to get the tax rate of a country.",
                "input_params": {
                    "country": {
                        "description": "the country for which the tax rate is required",
                        "type": "String"
                    }
                },
                "output_params": {
                    "tax_rate": {
                        "description": "the tax rate of the country",
                        "type": "Float"
                    }
                },
                "format": "CountryTaxRate(country) -> tax_rate"
            },
            {
                "name": "TaxCostCalculator",
                "Description": "This API is to calculate the tax cost for a car.",
                "input_params": {
                    "price": {
                        "description": "the price of the car",
                        "type": "Float"
                    },
                    "tax_rate": {
                        "description": "the tax rate of the country",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "tax_cost": {
                        "description": "the tax cost for the car",
                        "type": "Float"
                    }
                },
                "format": "TaxCostCalculator(price, tax_rate) -> tax_cost"
            }
        ],
        "Query": "Can you tell me the tax I would need to pay if I get a Audi Q7 in Italy?",
        "Label": "TaxCostCalculator(price=CarInfo(car_name='Audi Q7', country='Italy'), tax_rate=CountryTaxRate(country='Italy'))",
        "Index": 1045
    },
    {
        "APIs": [
            {
                "name": "CarInfo",
                "Description": "This API is to get the information of a car.",
                "input_params": {
                    "car_name": {
                        "description": "the name of the car",
                        "type": "String"
                    },
                    "country": {
                        "description": "the country where the car is bought",
                        "type": "String"
                    }
                },
                "output_params": {
                    "car_info": {
                        "description": "the information of the car",
                        "type": "String"
                    }
                },
                "format": "CarInfo(car_name, country) -> car_info"
            },
            {
                "name": "CountryTaxRate",
                "Description": "This API is to get the tax rate of a country.",
                "input_params": {
                    "country": {
                        "description": "the country to get the tax rate",
                        "type": "String"
                    }
                },
                "output_params": {
                    "tax_rate": {
                        "description": "the tax rate of the country",
                        "type": "Float"
                    }
                },
                "format": "CountryTaxRate(country) -> tax_rate"
            },
            {
                "name": "TaxCostCalculator",
                "Description": "This API is to calculate the tax cost.",
                "input_params": {
                    "price": {
                        "description": "the price of the car",
                        "type": "Float"
                    },
                    "tax_rate": {
                        "description": "the tax rate of the country",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "tax_cost": {
                        "description": "the tax cost of the car",
                        "type": "Float"
                    }
                },
                "format": "TaxCostCalculator(price, tax_rate) -> tax_cost"
            }
        ],
        "Query": "Can you calculate the tax for me if I buy a Honda Accord in Canada?",
        "Label": "TaxCostCalculator(price=CarInfo(car_name='Honda Accord', country='Canada'), tax_rate=CountryTaxRate(country='Canada'))",
        "Index": 1046
    },
    {
        "APIs": [
            {
                "name": "FlightInfo",
                "Description": "This API is to get the flight information.",
                "input_params": {
                    "city_from": {
                        "description": "the departure city",
                        "type": "String"
                    },
                    "city_to": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date_from": {
                        "description": "the start date of the flight",
                        "type": "Date"
                    },
                    "date_to": {
                        "description": "the end date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight_info": {
                        "description": "the information of the flight",
                        "type": "String"
                    }
                },
                "format": "FlightInfo(city_from, city_to, date_from, date_to) -> flight_info"
            },
            {
                "name": "WeatherEffectPrice",
                "Description": "This API is to calculate the effect of weather conditions on flight price.",
                "input_params": {
                    "city": {
                        "description": "the city of the flight",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "String"
                    },
                    "original_price": {
                        "description": "the original price of the flight",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "final_price": {
                        "description": "the final price of the flight considering weather conditions",
                        "type": "Float"
                    }
                },
                "format": "WeatherEffectPrice(city, date, original_price) -> final_price"
            }
        ],
        "Query": "I am interested in knowing the cost of my upcoming flight to Paris from London in the first week of December considering the weather conditions.",
        "Label": "WeatherEffectPrice(city='Paris', date='first week of December', original_price=FlightInfo(city_from='London', city_to='Paris', date_from='first week of December', date_to='first week of December'))",
        "Index": 1047
    },
    {
        "APIs": [
            {
                "name": "FlightInfo",
                "Description": "This API is to get flight information.",
                "input_params": {
                    "city_from": {
                        "description": "the departure city",
                        "type": "String"
                    },
                    "city_to": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date_from": {
                        "description": "the start date of the flight",
                        "type": "Date"
                    },
                    "date_to": {
                        "description": "the end date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight_info": {
                        "description": "the information of the flight",
                        "type": "String"
                    }
                },
                "format": "FlightInfo(city_from, city_to, date_from, date_to) -> flight_info"
            },
            {
                "name": "WeatherEffectPrice",
                "Description": "This API is to calculate the potential cost of a flight considering the weather conditions.",
                "input_params": {
                    "city": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    },
                    "original_price": {
                        "description": "the original price of the flight",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "final_price": {
                        "description": "the potential cost of the flight considering the weather conditions",
                        "type": "Float"
                    }
                },
                "format": "WeatherEffectPrice(city, date, original_price) -> final_price"
            }
        ],
        "Query": "I'd like to know the potential cost of my flight to Sydney from San Francisco in June considering the weather conditions.",
        "Label": "WeatherEffectPrice(city='Sydney', date='June', original_price=FlightInfo(city_from='San Francisco', city_to='Sydney', date_from='June', date_to='June'))",
        "Index": 1048
    },
    {
        "APIs": [
            {
                "name": "WeatherEffectPrice",
                "Description": "This API is to calculate the potential cost of a flight considering the weather conditions.",
                "input_params": {
                    "city": {
                        "description": "the destination city of the flight",
                        "type": "String"
                    },
                    "date": {
                        "description": "the month of the flight",
                        "type": "String"
                    },
                    "original_price": {
                        "description": "the original price of the flight",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "final_price": {
                        "description": "the potential cost of the flight considering the weather conditions",
                        "type": "Float"
                    }
                },
                "format": "WeatherEffectPrice(city, date, original_price) -> final_price"
            },
            {
                "name": "FlightInfo",
                "Description": "This API is to retrieve flight information.",
                "input_params": {
                    "city_from": {
                        "description": "the departure city of the flight",
                        "type": "String"
                    },
                    "city_to": {
                        "description": "the destination city of the flight",
                        "type": "String"
                    },
                    "date_from": {
                        "description": "the start date of the flight",
                        "type": "String"
                    },
                    "date_to": {
                        "description": "the end date of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_info": {
                        "description": "the information of the flight",
                        "type": "String"
                    }
                },
                "format": "FlightInfo(city_from, city_to, date_from, date_to) -> flight_info"
            }
        ],
        "Query": "I'd like to know the potential cost of my flight to Sydney from San Francisco in June considering the weather conditions.",
        "Label": "WeatherEffectPrice(city='Sydney', date='June', original_price=FlightInfo(city_from='San Francisco', city_to='Sydney', date_from='June', date_to='June'))",
        "Index": 1049
    },
    {
        "APIs": [
            {
                "name": "BoatDetail",
                "Description": "This API is to get the details of a boat.",
                "input_params": {
                    "boat_id": {
                        "description": "the ID of the boat",
                        "type": "String"
                    }
                },
                "output_params": {
                    "boat_location": {
                        "description": "the location of the boat",
                        "type": "String"
                    }
                },
                "format": "BoatDetail(boat_id) -> boat_location"
            },
            {
                "name": "TideCheck",
                "Description": "This API is to check the tide status.",
                "input_params": {
                    "boat_location": {
                        "description": "the location of the boat",
                        "type": "String"
                    }
                },
                "output_params": {
                    "tide_status": {
                        "description": "the status of the tide",
                        "type": "String"
                    }
                },
                "format": "TideCheck(boat_location) -> tide_status"
            }
        ],
        "Query": "What's the tide status for the boat with id Z5678?",
        "Label": "TideCheck(boat_location=BoatDetail(boat_id='Z5678'))",
        "Index": 1050
    },
    {
        "APIs": [
            {
                "name": "BoatDetail",
                "Description": "This API is to get the details of a boat.",
                "input_params": {
                    "boat_id": {
                        "description": "the ID of the boat",
                        "type": "String"
                    }
                },
                "output_params": {
                    "boat_location": {
                        "description": "the location of the boat",
                        "type": "String"
                    }
                },
                "format": "BoatDetail(boat_id) -> boat_location"
            },
            {
                "name": "TideCheck",
                "Description": "This API is to check the tide information.",
                "input_params": {
                    "boat_location": {
                        "description": "the location of the boat",
                        "type": "String"
                    }
                },
                "output_params": {
                    "tide_information": {
                        "description": "the information about the tide",
                        "type": "String"
                    }
                },
                "format": "TideCheck(boat_location) -> tide_information"
            }
        ],
        "Query": "Could you provide the tide information for boat number A3691?",
        "Label": "TideCheck(boat_location=BoatDetail(boat_id='A3691'))",
        "Index": 1051
    },
    {
        "APIs": [
            {
                "name": "BoatDetail",
                "Description": "This API is to get the details of a boat.",
                "input_params": {
                    "boat_id": {
                        "description": "the ID of the boat",
                        "type": "String"
                    }
                },
                "output_params": {
                    "boat_location": {
                        "description": "the location of the boat",
                        "type": "String"
                    }
                },
                "format": "BoatDetail(boat_id) -> boat_location"
            },
            {
                "name": "TideCheck",
                "Description": "This API is to check the tide status.",
                "input_params": {
                    "boat_location": {
                        "description": "the location of the boat",
                        "type": "String"
                    }
                },
                "output_params": {
                    "tide_status": {
                        "description": "the status of the tide",
                        "type": "String"
                    }
                },
                "format": "TideCheck(boat_location) -> tide_status"
            }
        ],
        "Query": "I need to know the tide status for boat ID X1112.",
        "Label": "TideCheck(boat_location=BoatDetail(boat_id='X1112'))",
        "Index": 1052
    },
    {
        "APIs": [
            {
                "name": "TideCheck",
                "Description": "This API is to check the tide status for a boat.",
                "input_params": {
                    "boat_location": {
                        "description": "the location of the boat",
                        "type": "BoatDetail"
                    }
                },
                "output_params": {
                    "tide_status": {
                        "description": "the status of the tide",
                        "type": "String"
                    }
                },
                "format": "TideCheck(boat_location=BoatDetail(boat_id))"
            },
            {
                "name": "BoatDetail",
                "Description": "This API is to get the details of a boat.",
                "input_params": {
                    "boat_id": {
                        "description": "the identifier of the boat",
                        "type": "String"
                    }
                },
                "output_params": {
                    "boat_details": {
                        "description": "the details of the boat",
                        "type": "Object"
                    }
                },
                "format": "BoatDetail(boat_id)"
            }
        ],
        "Query": "I need to know the tide status for boat ID X1112.",
        "Label": "TideCheck(boat_location=BoatDetail(boat_id='X1112'))",
        "Index": 1053
    },
    {
        "APIs": [
            {
                "name": "BoatDetail",
                "Description": "This API is to get the details of a boat.",
                "input_params": {
                    "boat_id": {
                        "description": "the ID of the boat",
                        "type": "String"
                    }
                },
                "output_params": {
                    "boat_location": {
                        "description": "the location of the boat",
                        "type": "String"
                    }
                },
                "format": "BoatDetail(boat_id) -> boat_location"
            },
            {
                "name": "TideCheck",
                "Description": "This API is to check the tidal conditions for a boat.",
                "input_params": {
                    "boat_location": {
                        "description": "the location of the boat",
                        "type": "String"
                    }
                },
                "output_params": {
                    "tidal_conditions": {
                        "description": "the tidal conditions for the boat",
                        "type": "String"
                    }
                },
                "format": "TideCheck(boat_location) -> tidal_conditions"
            }
        ],
        "Query": "Can you give me the tidal conditions for the boat with the id E5432?",
        "Label": "TideCheck(boat_location=BoatDetail(boat_id='E5432'))",
        "Index": 1054
    },
    {
        "APIs": [
            {
                "name": "PollutionCheck",
                "Description": "This API is to check the pollution index for a city.",
                "input_params": {
                    "city_coordinates": {
                        "description": "the coordinates of the city",
                        "type": "CityDetail"
                    }
                },
                "output_params": {
                    "pollution_index": {
                        "description": "the pollution index of the city",
                        "type": "Float"
                    }
                },
                "format": "PollutionCheck(city_coordinates) -> pollution_index"
            },
            {
                "name": "CityDetail",
                "Description": "This API is to get the details of a city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_coordinates": {
                        "description": "the coordinates of the city",
                        "type": "Coordinates"
                    }
                },
                "format": "CityDetail(city_name) -> city_coordinates"
            }
        ],
        "Query": "What is the pollution index for the city of Houston?",
        "Label": "PollutionCheck(city_coordinates=CityDetail(city_name='Houston'))",
        "Index": 1055
    },
    {
        "APIs": [
            {
                "name": "MovieNameToID",
                "Description": "This API is to convert movie name to movie ID.",
                "input_params": {
                    "name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieNameToID(name) -> movie_id"
            },
            {
                "name": "MovieSchedule",
                "Description": "This API is to get the schedule of a movie.",
                "input_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "schedule": {
                        "description": "the schedule of the movie",
                        "type": "List"
                    }
                },
                "format": "MovieSchedule(movie_id) -> schedule"
            },
            {
                "name": "ClosetCinema",
                "Description": "This API is to find the closest cinema playing a specific movie.",
                "input_params": {
                    "schedule": {
                        "description": "the schedule of the movie",
                        "type": "List"
                    }
                },
                "output_params": {
                    "cinema_location": {
                        "description": "the location of the closest cinema",
                        "type": "String"
                    }
                },
                "format": "ClosetCinema(schedule) -> cinema_location"
            }
        ],
        "Query": "Where is the closest theatre playing 'Harry Potter and the Philosopher's Stone'?",
        "Label": "ClosetCinema(schedule=MovieSchedule(movie_id=MovieNameToID(name='Harry Potter and the Philosopher's Stone')))",
        "Index": 1056
    },
    {
        "APIs": [
            {
                "name": "MovieNameToID",
                "Description": "This API is to convert movie name to movie ID.",
                "input_params": {
                    "name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieNameToID(name) -> movie_id"
            },
            {
                "name": "MovieSchedule",
                "Description": "This API is to get the schedule of a movie.",
                "input_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "schedule": {
                        "description": "the schedule of the movie",
                        "type": "List"
                    }
                },
                "format": "MovieSchedule(movie_id) -> schedule"
            },
            {
                "name": "ClosetCinema",
                "Description": "This API is to find the nearest cinema showing a movie.",
                "input_params": {
                    "schedule": {
                        "description": "the schedule of the movie",
                        "type": "List"
                    }
                },
                "output_params": {
                    "cinema_name": {
                        "description": "the name of the cinema",
                        "type": "String"
                    }
                },
                "format": "ClosetCinema(schedule) -> cinema_name"
            }
        ],
        "Query": "What is the nearest cinema showing 'The Lion King'?",
        "Label": "ClosetCinema(schedule=MovieSchedule(movie_id=MovieNameToID(name='The Lion King')))",
        "Index": 1057
    },
    {
        "APIs": [
            {
                "name": "MovieNameToID",
                "Description": "This API is to convert movie name to movie ID.",
                "input_params": {
                    "name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieNameToID(name) -> movie_id"
            },
            {
                "name": "MovieSchedule",
                "Description": "This API is to get the schedule of a movie.",
                "input_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "schedule": {
                        "description": "the schedule of the movie",
                        "type": "List"
                    }
                },
                "format": "MovieSchedule(movie_id) -> schedule"
            },
            {
                "name": "ClosetCinema",
                "Description": "This API is to find the nearest movie theatre playing a specific movie.",
                "input_params": {
                    "schedule": {
                        "description": "the schedule of the movie",
                        "type": "List"
                    }
                },
                "output_params": {
                    "cinema_location": {
                        "description": "the location of the nearest movie theatre",
                        "type": "String"
                    }
                },
                "format": "ClosetCinema(schedule) -> cinema_location"
            }
        ],
        "Query": "Where can I find the nearest movie theatre playing 'The Dark Knight Rises'?",
        "Label": "ClosetCinema(schedule=MovieSchedule(movie_id=MovieNameToID(name='The Dark Knight Rises')))",
        "Index": 1058
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API is to search for restaurants based on location.",
                "input_params": {
                    "location": {
                        "description": "the location to search for restaurants",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantSearch(location) -> restaurant_name"
            },
            {
                "name": "RestaurantReview",
                "Description": "This API is to get the review report of a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "review_report": {
                        "description": "the review report of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "RestaurantReview(restaurant_name) -> review_report"
            },
            {
                "name": "CuisineRecommendations",
                "Description": "This API is to recommend cuisine based on review report and dietary preferences.",
                "input_params": {
                    "review_report": {
                        "description": "the review report of the restaurant",
                        "type": "Object"
                    },
                    "dietary_preferences": {
                        "description": "the dietary preferences",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recommendations": {
                        "description": "the recommended cuisine",
                        "type": "String"
                    }
                },
                "format": "CuisineRecommendations(review_report, dietary_preferences) -> recommendations"
            }
        ],
        "Query": "What should I order at a top-rated restaurant in Paris? I'm in the mood for seafood.",
        "Label": "CuisineRecommendations(review_report=RestaurantReview(restaurant_name=RestaurantSearch(location='Paris')), dietary_preferences='seafood')",
        "Index": 1059
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API is to search for restaurants based on location.",
                "input_params": {
                    "location": {
                        "description": "the location to search for restaurants",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantSearch(location) -> restaurant_name"
            },
            {
                "name": "RestaurantReview",
                "Description": "This API is to get the review report of a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "review_report": {
                        "description": "the review report of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantReview(restaurant_name) -> review_report"
            },
            {
                "name": "CuisineRecommendations",
                "Description": "This API is to recommend a dish from a famous restaurant based on dietary preferences.",
                "input_params": {
                    "review_report": {
                        "description": "the review report of the restaurant",
                        "type": "String"
                    },
                    "dietary_preferences": {
                        "description": "the dietary preferences of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recommended_dish": {
                        "description": "the recommended dish from the restaurant",
                        "type": "String"
                    }
                },
                "format": "CuisineRecommendations(review_report, dietary_preferences) -> recommended_dish"
            }
        ],
        "Query": "Can you suggest a dish from a famous restaurant in Tokyo? I love eating vegan foods.",
        "Label": "CuisineRecommendations(review_report=RestaurantReview(restaurant_name=RestaurantSearch(location='Tokyo')), dietary_preferences='vegan')",
        "Index": 1060
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API is to search for restaurants based on location.",
                "input_params": {
                    "location": {
                        "description": "the location to search for restaurants",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantSearch(location) -> restaurant_name"
            },
            {
                "name": "RestaurantReview",
                "Description": "This API is to get the review report of a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "review_report": {
                        "description": "the review report of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantReview(restaurant_name) -> review_report"
            },
            {
                "name": "CuisineRecommendations",
                "Description": "This API is to recommend cuisines based on review report and dietary preferences.",
                "input_params": {
                    "review_report": {
                        "description": "the review report of the restaurant",
                        "type": "String"
                    },
                    "dietary_preferences": {
                        "description": "the dietary preferences of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recommended_cuisines": {
                        "description": "the recommended cuisines for the user",
                        "type": "List"
                    }
                },
                "format": "CuisineRecommendations(review_report, dietary_preferences) -> recommended_cuisines"
            }
        ],
        "Query": "Which food should I taste at a well-known restaurant in Dubai? I need gluten-free dishes.",
        "Label": "CuisineRecommendations(review_report=RestaurantReview(restaurant_name=RestaurantSearch(location='Dubai')), dietary_preferences='gluten-free')",
        "Index": 1061
    },
    {
        "APIs": [
            {
                "name": "CuisineByRestaurant",
                "Description": "This API is to get the cuisine data of a restaurant.",
                "input_params": {
                    "restaurantData": {
                        "description": "the data of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cuisineData": {
                        "description": "the cuisine data of the restaurant",
                        "type": "String"
                    }
                },
                "format": "CuisineByRestaurant(restaurantData) -> cuisineData"
            },
            {
                "name": "RestaurantByLocation",
                "Description": "This API is to get the restaurant data by location.",
                "input_params": {
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantData": {
                        "description": "the data of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantByLocation(location) -> restaurantData"
            },
            {
                "name": "FoodDelivery",
                "Description": "This API is to get the delivery time for a specific cuisine.",
                "input_params": {
                    "cuisineData": {
                        "description": "the cuisine data",
                        "type": "String"
                    }
                },
                "output_params": {
                    "deliveryTime": {
                        "description": "the delivery time for the cuisine",
                        "type": "String"
                    }
                },
                "format": "FoodDelivery(cuisineData) -> deliveryTime"
            }
        ],
        "Query": "I'm in London and I want to eat some Chinese food. When can it be delivered?",
        "Label": "FoodDelivery(cuisineData=CuisineByRestaurant(restaurantData=RestaurantByLocation(location='London')))",
        "Index": 1062
    },
    {
        "APIs": [
            {
                "name": "RestaurantByLocation",
                "Description": "This API is to find restaurants based on location.",
                "input_params": {
                    "location": {
                        "description": "the location where the user is",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantData": {
                        "description": "the data of restaurants in the specified location",
                        "type": "List"
                    }
                },
                "format": "RestaurantByLocation(location) -> restaurantData"
            },
            {
                "name": "CuisineByRestaurant",
                "Description": "This API is to find cuisines offered by a restaurant.",
                "input_params": {
                    "restaurantData": {
                        "description": "the data of a restaurant",
                        "type": "List"
                    }
                },
                "output_params": {
                    "cuisineData": {
                        "description": "the data of cuisines offered by the restaurant",
                        "type": "List"
                    }
                },
                "format": "CuisineByRestaurant(restaurantData) -> cuisineData"
            },
            {
                "name": "FoodDelivery",
                "Description": "This API is to get the delivery time for a cuisine.",
                "input_params": {
                    "cuisineData": {
                        "description": "the data of a cuisine",
                        "type": "List"
                    }
                },
                "output_params": {
                    "deliveryTime": {
                        "description": "the estimated delivery time for the cuisine",
                        "type": "String"
                    }
                },
                "format": "FoodDelivery(cuisineData) -> deliveryTime"
            }
        ],
        "Query": "I am in Sydney, I am feeling like eating Indian food, when will it get delivered?",
        "Label": "FoodDelivery(cuisineData=CuisineByRestaurant(restaurantData=RestaurantByLocation(location='Sydney')))",
        "Index": 1063
    },
    {
        "APIs": [
            {
                "name": "RestaurantByLocation",
                "Description": "This API is to find restaurants based on location.",
                "input_params": {
                    "location": {
                        "description": "the location where the user is",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantData": {
                        "description": "the data of restaurants in the specified location",
                        "type": "List"
                    }
                },
                "format": "RestaurantByLocation(location) -> restaurantData"
            },
            {
                "name": "CuisineByRestaurant",
                "Description": "This API is to find cuisines available in a restaurant.",
                "input_params": {
                    "restaurantData": {
                        "description": "the data of the restaurant",
                        "type": "List"
                    }
                },
                "output_params": {
                    "cuisineData": {
                        "description": "the data of cuisines available in the restaurant",
                        "type": "List"
                    }
                },
                "format": "CuisineByRestaurant(restaurantData) -> cuisineData"
            },
            {
                "name": "FoodDelivery",
                "Description": "This API is to get the delivery time for a specific cuisine.",
                "input_params": {
                    "cuisineData": {
                        "description": "the data of the cuisine",
                        "type": "List"
                    }
                },
                "output_params": {
                    "deliveryTime": {
                        "description": "the estimated delivery time for the cuisine",
                        "type": "String"
                    }
                },
                "format": "FoodDelivery(cuisineData) -> deliveryTime"
            }
        ],
        "Query": "I'm in Paris and I feel like eating French food, can you tell me how soon can I get my food delivered?",
        "Label": "FoodDelivery(cuisineData=CuisineByRestaurant(restaurantData=RestaurantByLocation(location='Paris')))",
        "Index": 1064
    },
    {
        "APIs": [
            {
                "name": "RestaurantByLocation",
                "Description": "This API is to find restaurants based on location.",
                "input_params": {
                    "location": {
                        "description": "the location where the user is",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantData": {
                        "description": "the data of restaurants in the specified location",
                        "type": "List"
                    }
                },
                "format": "RestaurantByLocation(location) -> restaurantData"
            },
            {
                "name": "CuisineByRestaurant",
                "Description": "This API is to find cuisines available in a restaurant.",
                "input_params": {
                    "restaurantData": {
                        "description": "the data of a restaurant",
                        "type": "List"
                    }
                },
                "output_params": {
                    "cuisineData": {
                        "description": "the data of cuisines available in the restaurant",
                        "type": "List"
                    }
                },
                "format": "CuisineByRestaurant(restaurantData) -> cuisineData"
            },
            {
                "name": "FoodDelivery",
                "Description": "This API is to estimate the delivery time for food.",
                "input_params": {
                    "cuisineData": {
                        "description": "the data of cuisines available for delivery",
                        "type": "List"
                    }
                },
                "output_params": {
                    "deliveryTime": {
                        "description": "the estimated time for food delivery",
                        "type": "String"
                    }
                },
                "format": "FoodDelivery(cuisineData) -> deliveryTime"
            }
        ],
        "Query": "I am in Los Angeles, craving for Mexican food, can you tell me how soon can I get my food delivered?",
        "Label": "FoodDelivery(cuisineData=CuisineByRestaurant(restaurantData=RestaurantByLocation(location='Los Angeles')))",
        "Index": 1065
    },
    {
        "APIs": [
            {
                "name": "SearchMovie",
                "Description": "This API is to search for movies based on genre and location.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location where the movie is playing",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "format": "SearchMovie(genre, location) -> movie_name"
            },
            {
                "name": "CheckShowtimes",
                "Description": "This API is to check the showtimes of a movie on a specific date.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which to check the showtimes",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "the showtime of the movie on the specified date",
                        "type": "Time"
                    }
                },
                "format": "CheckShowtimes(movie_name, date) -> showtime"
            },
            {
                "name": "BookTickets",
                "Description": "This API is to book tickets for a movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "Time"
                    },
                    "number_of_tickets": {
                        "description": "the number of tickets to reserve",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the ticket booking",
                        "type": "String"
                    }
                },
                "format": "BookTickets(movie_name, showtime, number_of_tickets) -> booking_status"
            }
        ],
        "Query": "I need to reserve 4 tickets for a comedy movie in New York next Tuesday at 7pm.",
        "Label": "BookTickets(movie_name=SearchMovie(genre='comedy', location='New York'), showtime=CheckShowtimes(movie_name=SearchMovie(genre='comedy', location='New York'), date='next Tuesday'), number_of_tickets=4)",
        "Index": 1066
    },
    {
        "APIs": [
            {
                "name": "SearchMovie",
                "Description": "This API is to search for movies based on genre and location.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location where the movie is playing",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "format": "SearchMovie(genre, location) -> movie_name"
            },
            {
                "name": "CheckShowtimes",
                "Description": "This API is to check the showtimes of a movie on a specific date.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which to check the showtimes",
                        "type": "String"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "the showtime of the movie on the specified date",
                        "type": "Time"
                    }
                },
                "format": "CheckShowtimes(movie_name, date) -> showtime"
            },
            {
                "name": "BookTickets",
                "Description": "This API is to book tickets for a movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "Time"
                    },
                    "number_of_tickets": {
                        "description": "the number of tickets to book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the ticket booking",
                        "type": "String"
                    }
                },
                "format": "BookTickets(movie_name, showtime, number_of_tickets) -> booking_status"
            }
        ],
        "Query": "I would like to get 5 tickets for a drama movie in Chicago on Sunday at 6pm.",
        "Label": "BookTickets(movie_name=SearchMovie(genre='drama', location='Chicago'), showtime=CheckShowtimes(movie_name=SearchMovie(genre='drama', location='Chicago'), date='Sunday'), number_of_tickets=5)",
        "Index": 1067
    },
    {
        "APIs": [
            {
                "name": "FindEventCity",
                "Description": "This API is to find the city of a specific event.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_name": {
                        "description": "the name of the city where the event is taking place",
                        "type": "String"
                    }
                },
                "format": "FindEventCity(event_name) -> city_name"
            },
            {
                "name": "FindEventDate",
                "Description": "This API is to find the date of a specific event.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    }
                },
                "format": "FindEventDate(event_name) -> date"
            },
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast for a specific location and date.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which the weather forecast is needed",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the weather forecast for the specified location and date",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city_name, date) -> weather_forecast"
            }
        ],
        "Query": "What is the weather forecast for the location of the Super Bowl on the day it starts?",
        "Label": "GetWeatherForecast(city_name=FindEventCity(event_name='Super Bowl'), date=FindEventDate(event_name='Super Bowl'))",
        "Index": 1068
    },
    {
        "APIs": [
            {
                "name": "FindEventCity",
                "Description": "This API is to find the city of a specific event.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_name": {
                        "description": "the name of the city where the event takes place",
                        "type": "String"
                    }
                },
                "format": "FindEventCity(event_name) -> city_name"
            },
            {
                "name": "FindEventDate",
                "Description": "This API is to find the date of a specific event.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "date": {
                        "description": "the date when the event starts",
                        "type": "Date"
                    }
                },
                "format": "FindEventDate(event_name) -> date"
            },
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast for a specific location and date.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which the weather forecast is needed",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the weather forecast for the specified location and date",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city_name, date) -> weather_forecast"
            }
        ],
        "Query": "What is the weather forecast for the location of the Wimbledon tennis tournament on the day it starts?",
        "Label": "GetWeatherForecast(city_name=FindEventCity(event_name='Wimbledon'), date=FindEventDate(event_name='Wimbledon'))",
        "Index": 1069
    },
    {
        "APIs": [
            {
                "name": "FindEventCity",
                "Description": "This API is to find the city location of an event.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_name": {
                        "description": "the name of the city where the event is located",
                        "type": "String"
                    }
                },
                "format": "FindEventCity(event_name) -> city_name"
            },
            {
                "name": "FindEventDate",
                "Description": "This API is to find the date of an event.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    }
                },
                "format": "FindEventDate(event_name) -> date"
            },
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast for a specific location and date.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which the weather forecast is required",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the weather forecast for the specified location and date",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city_name, date) -> weather_forecast"
            }
        ],
        "Query": "What is the weather forecast for the location of the Burning Man Festival on the day it starts?",
        "Label": "GetWeatherForecast(city_name=FindEventCity(event_name='Burning Man Festival'), date=FindEventDate(event_name='Burning Man Festival'))",
        "Index": 1070
    },
    {
        "APIs": [
            {
                "name": "FindEventCity",
                "Description": "This API is to find the city location of an event.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_name": {
                        "description": "the name of the city where the event is located",
                        "type": "String"
                    }
                },
                "format": "FindEventCity(event_name) -> city_name"
            },
            {
                "name": "FindEventDate",
                "Description": "This API is to find the date of an event.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    }
                },
                "format": "FindEventDate(event_name) -> date"
            },
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast for a specific location and date.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the weather forecast for the specified location and date",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city_name, date) -> weather_forecast"
            }
        ],
        "Query": "What is the weather forecast for the location of the Burning Man Festival on the day it starts?",
        "Label": "GetWeatherForecast(city_name=FindEventCity(event_name='Burning Man Festival'), date=FindEventDate(event_name='Burning Man Festival'))",
        "Index": 1071
    },
    {
        "APIs": [
            {
                "name": "FindEventCity",
                "Description": "This API is to find the city of an event.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_name": {
                        "description": "the name of the city where the event is taking place",
                        "type": "String"
                    }
                },
                "format": "FindEventCity(event_name) -> city_name"
            },
            {
                "name": "FindEventDate",
                "Description": "This API is to find the date of an event.",
                "input_params": {
                    "event_name": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    }
                },
                "format": "FindEventDate(event_name) -> date"
            },
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast for a location on a specific date.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which the weather forecast is required",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the weather forecast for the location on the specified date",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city_name, date) -> weather_forecast"
            }
        ],
        "Query": "What is the weather forecast for the location of the Oscars Awards Ceremony on the day it starts?",
        "Label": "GetWeatherForecast(city_name=FindEventCity(event_name='Oscars Awards Ceremony'), date=FindEventDate(event_name='Oscars Awards Ceremony'))",
        "Index": 1072
    },
    {
        "APIs": [
            {
                "name": "SearchHotel",
                "Description": "This API is to search for hotels in a specific city with a specific star rating.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "starRating": {
                        "description": "the star rating of the hotel",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "hotelName": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "SearchHotel(city, starRating) -> hotelName"
            },
            {
                "name": "FindRoomType",
                "Description": "This API is to find the room type available in a hotel for a specific number of guests.",
                "input_params": {
                    "hotelName": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "guestNumber": {
                        "description": "the number of guests",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "roomType": {
                        "description": "the type of room available",
                        "type": "String"
                    }
                },
                "format": "FindRoomType(hotelName, guestNumber) -> roomType"
            },
            {
                "name": "BookHotel",
                "Description": "This API is to book a hotel room.",
                "input_params": {
                    "roomType": {
                        "description": "the type of room",
                        "type": "String"
                    },
                    "checkInDate": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "checkOutDate": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "bookingStatus": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(roomType, checkInDate, checkOutDate) -> bookingStatus"
            }
        ],
        "Query": "I would like to reserve a room in a 5-star hotel in Los Angeles for two people from 5th June to 12th June.",
        "Label": "BookHotel(roomType=FindRoomType(hotelName=SearchHotel(city='Los Angeles', starRating=5), guestNumber=2), checkInDate='5th June', checkOutDate='12th June')",
        "Index": 1073
    },
    {
        "APIs": [
            {
                "name": "SearchHotel",
                "Description": "This API is to search for hotels in a specific city with a specific star rating.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "starRating": {
                        "description": "the star rating of the hotel",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "hotelName": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "SearchHotel(city, starRating) -> hotelName"
            },
            {
                "name": "FindRoomType",
                "Description": "This API is to find the room type available in a hotel for a specific number of guests.",
                "input_params": {
                    "hotelName": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "guestNumber": {
                        "description": "the number of guests",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "roomType": {
                        "description": "the type of room available",
                        "type": "String"
                    }
                },
                "format": "FindRoomType(hotelName, guestNumber) -> roomType"
            },
            {
                "name": "BookHotel",
                "Description": "This API is to book a hotel room.",
                "input_params": {
                    "roomType": {
                        "description": "the type of room",
                        "type": "String"
                    },
                    "checkInDate": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "checkOutDate": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(roomType, checkInDate, checkOutDate) -> booking status"
            }
        ],
        "Query": "I need to book a room for five people in a 4-star hotel in Seattle from 15th September to 22nd September",
        "Label": "BookHotel(roomType=FindRoomType(hotelName=SearchHotel(city='Seattle', starRating=4), guestNumber=5), checkInDate='15th September', checkOutDate='22nd September')",
        "Index": 1074
    },
    {
        "APIs": [
            {
                "name": "SearchHotel",
                "Description": "This API is to search for hotels in a specific city with a specific star rating.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "starRating": {
                        "description": "the star rating of the hotel",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "hotelName": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "SearchHotel(city, starRating) -> hotelName"
            },
            {
                "name": "FindRoomType",
                "Description": "This API is to find the room type available in a hotel for a specific number of guests.",
                "input_params": {
                    "hotelName": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "guestNumber": {
                        "description": "the number of guests",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "roomType": {
                        "description": "the type of room available",
                        "type": "String"
                    }
                },
                "format": "FindRoomType(hotelName, guestNumber) -> roomType"
            },
            {
                "name": "BookHotel",
                "Description": "This API is to book a hotel room.",
                "input_params": {
                    "roomType": {
                        "description": "the type of room",
                        "type": "String"
                    },
                    "checkInDate": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "checkOutDate": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(roomType, checkInDate, checkOutDate) -> booking status"
            }
        ],
        "Query": "I need to book a room for five people in a 4-star hotel in Seattle from 15th September to 22nd September.",
        "Label": "BookHotel(roomType=FindRoomType(hotelName=SearchHotel(city='Seattle', starRating=4), guestNumber=5), checkInDate='15th September', checkOutDate='22nd September')",
        "Index": 1075
    },
    {
        "APIs": [
            {
                "name": "SearchHotel",
                "Description": "This API is to search for hotels in a specific city with a specific star rating.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "starRating": {
                        "description": "the star rating of the hotel",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "hotelName": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "SearchHotel(city, starRating) -> hotelName"
            },
            {
                "name": "FindRoomType",
                "Description": "This API is to find the room type available in a specific hotel for a specific number of guests.",
                "input_params": {
                    "hotelName": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "guestNumber": {
                        "description": "the number of guests",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "roomType": {
                        "description": "the type of room available",
                        "type": "String"
                    }
                },
                "format": "FindRoomType(hotelName, guestNumber) -> roomType"
            },
            {
                "name": "BookHotel",
                "Description": "This API is to book a hotel room.",
                "input_params": {
                    "roomType": {
                        "description": "the type of room",
                        "type": "String"
                    },
                    "checkInDate": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "checkOutDate": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookHotel(roomType, checkInDate, checkOutDate) -> booking status"
            }
        ],
        "Query": "I would like to reserve a hotel in San Francisco for two people from 10th October to 17th October, and I prefer a 3-star hotel.",
        "Label": "BookHotel(roomType=FindRoomType(hotelName=SearchHotel(city='San Francisco', starRating=3), guestNumber=2), checkInDate='10th October', checkOutDate='17th October')",
        "Index": 1076
    },
    {
        "APIs": [
            {
                "name": "FindDoctor",
                "Description": "This API is to find a doctor based on their specialty.",
                "input_params": {
                    "specialty": {
                        "description": "the specialty of the doctor",
                        "type": "String"
                    }
                },
                "output_params": {
                    "doctorId": {
                        "description": "the ID of the doctor",
                        "type": "Integer"
                    }
                },
                "format": "FindDoctor(specialty) -> doctorId"
            },
            {
                "name": "FindPatient",
                "Description": "This API is to find a patient based on their name.",
                "input_params": {
                    "patientName": {
                        "description": "the name of the patient",
                        "type": "String"
                    }
                },
                "output_params": {
                    "patientId": {
                        "description": "the ID of the patient",
                        "type": "Integer"
                    }
                },
                "format": "FindPatient(patientName) -> patientId"
            },
            {
                "name": "CreateAppointment",
                "Description": "This API is to create an appointment with a doctor.",
                "input_params": {
                    "doctorId": {
                        "description": "the ID of the doctor",
                        "type": "Integer"
                    },
                    "patientId": {
                        "description": "the ID of the patient",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the appointment",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the appointment",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "appointmentId": {
                        "description": "the ID of the appointment",
                        "type": "Integer"
                    }
                },
                "format": "CreateAppointment(doctorId, patientId, date, time) -> appointmentId"
            }
        ],
        "Query": "I need to schedule an appointment with a dentist for Jane Smith on 20th July at 2:00 PM",
        "Label": "CreateAppointment(doctorId=FindDoctor(specialty='dentist'), patientId=FindPatient(patientName='Jane Smith'), date='20th July', time='2:00 PM')",
        "Index": 1077
    },
    {
        "APIs": [
            {
                "name": "FindDoctor",
                "Description": "This API is to find a doctor based on their specialty.",
                "input_params": {
                    "specialty": {
                        "description": "the specialty of the doctor",
                        "type": "String"
                    }
                },
                "output_params": {
                    "doctorId": {
                        "description": "the ID of the doctor",
                        "type": "Integer"
                    }
                },
                "format": "FindDoctor(specialty) -> doctorId"
            },
            {
                "name": "FindPatient",
                "Description": "This API is to find a patient based on their name.",
                "input_params": {
                    "patientName": {
                        "description": "the name of the patient",
                        "type": "String"
                    }
                },
                "output_params": {
                    "patientId": {
                        "description": "the ID of the patient",
                        "type": "Integer"
                    }
                },
                "format": "FindPatient(patientName) -> patientId"
            },
            {
                "name": "CreateAppointment",
                "Description": "This API is to create an appointment.",
                "input_params": {
                    "doctorId": {
                        "description": "the ID of the doctor",
                        "type": "Integer"
                    },
                    "patientId": {
                        "description": "the ID of the patient",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the appointment",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the appointment",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "appointmentId": {
                        "description": "the ID of the appointment",
                        "type": "Integer"
                    }
                },
                "format": "CreateAppointment(doctorId, patientId, date, time) -> appointmentId"
            }
        ],
        "Query": "I want to book an appointment with a dermatologist for Alex Brown on 10th August at 1:00 PM",
        "Label": "CreateAppointment(doctorId=FindDoctor(specialty='dermatologist'), patientId=FindPatient(patientName='Alex Brown'), date='10th August', time='1:00 PM')",
        "Index": 1078
    },
    {
        "APIs": [
            {
                "name": "FindDoctor",
                "Description": "This API is to find a doctor based on their specialty.",
                "input_params": {
                    "specialty": {
                        "description": "the specialty of the doctor",
                        "type": "String"
                    }
                },
                "output_params": {
                    "doctorId": {
                        "description": "the ID of the doctor",
                        "type": "Integer"
                    }
                },
                "format": "FindDoctor(specialty) -> doctorId"
            },
            {
                "name": "FindPatient",
                "Description": "This API is to find a patient based on their name.",
                "input_params": {
                    "patientName": {
                        "description": "the name of the patient",
                        "type": "String"
                    }
                },
                "output_params": {
                    "patientId": {
                        "description": "the ID of the patient",
                        "type": "Integer"
                    }
                },
                "format": "FindPatient(patientName) -> patientId"
            },
            {
                "name": "CreateAppointment",
                "Description": "This API is to create an appointment.",
                "input_params": {
                    "doctorId": {
                        "description": "the ID of the doctor",
                        "type": "Integer"
                    },
                    "patientId": {
                        "description": "the ID of the patient",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the appointment",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the appointment",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "appointmentId": {
                        "description": "the ID of the appointment",
                        "type": "Integer"
                    }
                },
                "format": "CreateAppointment(doctorId, patientId, date, time) -> appointmentId"
            }
        ],
        "Query": "I need to arrange an appointment with a gastroenterologist for Emily Davis on 25th September at 4:00 PM",
        "Label": "CreateAppointment(doctorId=FindDoctor(specialty='gastroenterologist'), patientId=FindPatient(patientName='Emily Davis'), date='25th September', time='4:00 PM')",
        "Index": 1079
    },
    {
        "APIs": [
            {
                "name": "FindDoctor",
                "Description": "This API is to find a doctor based on their specialty.",
                "input_params": {
                    "specialty": {
                        "description": "the specialty of the doctor",
                        "type": "String"
                    }
                },
                "output_params": {
                    "doctorId": {
                        "description": "the ID of the doctor",
                        "type": "Integer"
                    }
                },
                "format": "FindDoctor(specialty) -> doctorId"
            },
            {
                "name": "FindPatient",
                "Description": "This API is to find a patient based on their name.",
                "input_params": {
                    "patientName": {
                        "description": "the name of the patient",
                        "type": "String"
                    }
                },
                "output_params": {
                    "patientId": {
                        "description": "the ID of the patient",
                        "type": "Integer"
                    }
                },
                "format": "FindPatient(patientName) -> patientId"
            },
            {
                "name": "CreateAppointment",
                "Description": "This API is to create an appointment.",
                "input_params": {
                    "doctorId": {
                        "description": "the ID of the doctor",
                        "type": "Integer"
                    },
                    "patientId": {
                        "description": "the ID of the patient",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the appointment",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the appointment",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "appointmentId": {
                        "description": "the ID of the appointment",
                        "type": "Integer"
                    }
                },
                "format": "CreateAppointment(doctorId, patientId, date, time) -> appointmentId"
            }
        ],
        "Query": "I want to set an appointment with an ophthalmologist for Michael Johnson on 5th October at 10:00 AM",
        "Label": "CreateAppointment(doctorId=FindDoctor(specialty='ophthalmologist'), patientId=FindPatient(patientName='Michael Johnson'), date='5th October', time='10:00 AM')",
        "Index": 1080
    },
    {
        "APIs": [
            {
                "name": "FindDoctor",
                "Description": "This API is to find a doctor based on their specialty.",
                "input_params": {
                    "specialty": {
                        "description": "the specialty of the doctor",
                        "type": "String"
                    }
                },
                "output_params": {
                    "doctorId": {
                        "description": "the ID of the doctor",
                        "type": "Integer"
                    }
                },
                "format": "FindDoctor(specialty) -> doctorId"
            },
            {
                "name": "FindPatient",
                "Description": "This API is to find a patient based on their name.",
                "input_params": {
                    "patientName": {
                        "description": "the name of the patient",
                        "type": "String"
                    }
                },
                "output_params": {
                    "patientId": {
                        "description": "the ID of the patient",
                        "type": "Integer"
                    }
                },
                "format": "FindPatient(patientName) -> patientId"
            },
            {
                "name": "CreateAppointment",
                "Description": "This API is to create an appointment.",
                "input_params": {
                    "doctorId": {
                        "description": "the ID of the doctor",
                        "type": "Integer"
                    },
                    "patientId": {
                        "description": "the ID of the patient",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the appointment",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the appointment",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "appointmentId": {
                        "description": "the ID of the appointment",
                        "type": "Integer"
                    }
                },
                "format": "CreateAppointment(doctorId, patientId, date, time) -> appointmentId"
            }
        ],
        "Query": "I need to book an appointment with a neurologist for Sarah Williams on 30th November at 3:00 PM",
        "Label": "CreateAppointment(doctorId=FindDoctor(specialty='neurologist'), patientId=FindPatient(patientName='Sarah Williams'), date='30th November', time='3:00 PM')",
        "Index": 1081
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the current weather of a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_info": {
                        "description": "the current weather information",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather_info"
            },
            {
                "name": "GetLunchRecommendation",
                "Description": "This API is to get a lunch recommendation based on the weather information.",
                "input_params": {
                    "weather_info": {
                        "description": "the current weather information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "lunch_suggestion": {
                        "description": "the recommended lunch suggestion",
                        "type": "String"
                    }
                },
                "format": "GetLunchRecommendation(weather_info) -> lunch_suggestion"
            },
            {
                "name": "OrderFood",
                "Description": "This API is to order food from a specific restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "food_item": {
                        "description": "the food item to be ordered",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the food order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(restaurant, food_item) -> order_status"
            }
        ],
        "Query": "I want to find out the current weather in Paris and then need a lunch suggestion based on that weather. Afterward, I'd like to order the recommended food from 'Parisian Bistro'.",
        "Label": "OrderFood(restaurant='Parisian Bistro', food_item=GetLunchRecommendation(weather_info=GetWeather(city='Paris')))",
        "Index": 1082
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the weather information of a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_info": {
                        "description": "the weather information of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather_info"
            },
            {
                "name": "GetLunchRecommendation",
                "Description": "This API is to get a lunch recommendation based on the weather information.",
                "input_params": {
                    "weather_info": {
                        "description": "the weather information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "food_item": {
                        "description": "the recommended food item for lunch",
                        "type": "String"
                    }
                },
                "format": "GetLunchRecommendation(weather_info) -> food_item"
            },
            {
                "name": "OrderFood",
                "Description": "This API is to order food from a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "food_item": {
                        "description": "the food item to be ordered",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the food order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(restaurant, food_item) -> order_status"
            }
        ],
        "Query": "I want to know the weather in Tokyo and get a lunch recommendation based on the weather. Then I want to order that food from 'Tokyo Sushi Bar'.",
        "Label": "OrderFood(restaurant='Tokyo Sushi Bar', food_item=GetLunchRecommendation(weather_info=GetWeather(city='Tokyo')))",
        "Index": 1083
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the weather information of a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_info": {
                        "description": "the weather information of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather_info"
            },
            {
                "name": "GetLunchRecommendation",
                "Description": "This API is to get a lunch recommendation based on the weather information.",
                "input_params": {
                    "weather_info": {
                        "description": "the weather information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "food_item": {
                        "description": "the recommended lunch item",
                        "type": "String"
                    }
                },
                "format": "GetLunchRecommendation(weather_info) -> food_item"
            },
            {
                "name": "OrderFood",
                "Description": "This API is to order food from a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "food_item": {
                        "description": "the food item to be ordered",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the food order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(restaurant, food_item) -> order_status"
            }
        ],
        "Query": "I want to know the weather in Tokyo and get a lunch recommendation based on the weather. Then I want to order that food from 'Tokyo Sushi Bar'.",
        "Label": "OrderFood(restaurant='Tokyo Sushi Bar', food_item=GetLunchRecommendation(weather_info=GetWeather(city='Tokyo')))",
        "Index": 1084
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API is to find a movie based on genre and location.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location where the movie is being searched",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovie(genre, location) -> movie_name"
            },
            {
                "name": "FindShowtime",
                "Description": "This API is to find the showtime of a movie based on movie name, location, and date.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location where the movie is being searched",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which the showtime is being searched",
                        "type": "String"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "String"
                    }
                },
                "format": "FindShowtime(movie_name, location, date) -> showtime"
            },
            {
                "name": "BookMovieTicket",
                "Description": "This API is to book movie tickets.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "String"
                    },
                    "number_of_tickets": {
                        "description": "the number of tickets to be booked",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the ticket booking",
                        "type": "String"
                    }
                },
                "format": "BookMovieTicket(movie_name, showtime, number_of_tickets) -> booking_status"
            }
        ],
        "Query": "I am looking to watch a romantic movie in New York City on July 20th for 2 people. Can you help me find a movie and book the tickets?",
        "Label": "BookMovieTicket(movie_name=FindMovie(genre='romantic', location='New York City'), showtime=FindShowtime(movie_name=FindMovie(genre='romantic', location='New York City'), location='New York City', date='July 20th'), number_of_tickets=2)",
        "Index": 1085
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API is to find a movie based on genre and location.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location where the movie is being played",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovie(genre, location) -> movie_name"
            },
            {
                "name": "FindShowtime",
                "Description": "This API is to find the showtime of a movie based on movie name, location, and date.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location where the movie is being played",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the showtime",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "Time"
                    }
                },
                "format": "FindShowtime(movie_name, location, date) -> showtime"
            },
            {
                "name": "BookMovieTicket",
                "Description": "This API is to book movie tickets.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "Time"
                    },
                    "number_of_tickets": {
                        "description": "the number of tickets to book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the ticket booking",
                        "type": "String"
                    }
                },
                "format": "BookMovieTicket(movie_name, showtime, number_of_tickets) -> booking_status"
            }
        ],
        "Query": "I'd like to watch a horror film in San Francisco on October 31st for 4 people. Could you assist me in finding a suitable movie and booking the tickets?",
        "Label": "BookMovieTicket(movie_name=FindMovie(genre='horror', location='San Francisco'), showtime=FindShowtime(movie_name=FindMovie(genre='horror', location='San Francisco'), location='San Francisco', date='October 31st'), number_of_tickets=4)",
        "Index": 1086
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API is to find a movie based on genre and location.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location where the movie is playing",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovie(genre, location) -> movie_name"
            },
            {
                "name": "FindShowtime",
                "Description": "This API is to find the showtime of a movie based on movie name, location, and date.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location where the movie is playing",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the showtime",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "Time"
                    }
                },
                "format": "FindShowtime(movie_name, location, date) -> showtime"
            },
            {
                "name": "BookMovieTicket",
                "Description": "This API is to book movie tickets.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "Time"
                    },
                    "number_of_tickets": {
                        "description": "the number of tickets to be reserved",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the ticket booking",
                        "type": "String"
                    }
                },
                "format": "BookMovieTicket(movie_name, showtime, number_of_tickets) -> booking_status"
            }
        ],
        "Query": "Could you find and reserve tickets for a comedy movie in Chicago on April 1st for 5 people?",
        "Label": "BookMovieTicket(movie_name=FindMovie(genre='comedy', location='Chicago'), showtime=FindShowtime(movie_name=FindMovie(genre='comedy', location='Chicago'), location='Chicago', date='April 1st'), number_of_tickets=5)",
        "Index": 1087
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API is to find a movie based on genre and location.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location where the movie is being searched",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovie(genre, location) -> movie_name"
            },
            {
                "name": "FindShowtime",
                "Description": "This API is to find the showtime of a movie based on movie name, location, and date.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location where the movie is being searched",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which the showtime is being searched",
                        "type": "String"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "String"
                    }
                },
                "format": "FindShowtime(movie_name, location, date) -> showtime"
            },
            {
                "name": "BookMovieTicket",
                "Description": "This API is to book movie tickets.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "String"
                    },
                    "number_of_tickets": {
                        "description": "the number of tickets to be booked",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the ticket booking",
                        "type": "String"
                    }
                },
                "format": "BookMovieTicket(movie_name, showtime, number_of_tickets) -> booking_status"
            }
        ],
        "Query": "I want to watch a drama movie in Seattle on December 25th for 6 people. Could you find a suitable movie and book the tickets?",
        "Label": "BookMovieTicket(movie_name=FindMovie(genre='drama', location='Seattle'), showtime=FindShowtime(movie_name=FindMovie(genre='drama', location='Seattle'), location='Seattle', date='December 25th'), number_of_tickets=6)",
        "Index": 1088
    },
    {
        "APIs": [
            {
                "name": "GetCityByZip",
                "Description": "This API retrieves the city given a zip code.",
                "input_params": {
                    "zip_code": {
                        "description": "the zip code",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "the city corresponding to the zip code",
                        "type": "String"
                    }
                },
                "format": "GetCityByZip(zip_code) -> city"
            },
            {
                "name": "GetWeatherForecast",
                "Description": "This API provides the weather forecast for specific cities on specific dates.",
                "input_params": {
                    "city": {
                        "description": "the city for which weather forecast is required",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which weather forecast is required",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast for the specified city and date",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather"
            },
            {
                "name": "GetClothingAdvice",
                "Description": "This API gives clothing advice based on the weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the recommended outfit based on the weather",
                        "type": "String"
                    }
                },
                "format": "GetClothingAdvice(weather) -> outfit"
            },
            {
                "name": "GetOutfitStore",
                "Description": "This API finds stores in a given city where the recommended outfit can be purchased.",
                "input_params": {
                    "city": {
                        "description": "the city for which stores are to be found",
                        "type": "String"
                    },
                    "outfit": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_name": {
                        "description": "the name of the store where the recommended outfit can be purchased",
                        "type": "String"
                    }
                },
                "format": "GetOutfitStore(city, outfit) -> store_name"
            }
        ],
        "Query": "I'm at 10001 and would like to know the weather tomorrow and what should I wear. Also, is there any store I can buy the suggested outfit?",
        "Label": "GetOutfitStore(city=GetCityByZip(zip_code='10001'), outfit=GetClothingAdvice(weather=GetWeatherForecast(city=GetCityByZip(zip_code='10001'), date='tomorrow')))",
        "Index": 1089
    },
    {
        "APIs": [
            {
                "name": "GetCity",
                "Description": "This API finds the corresponding city for a given zip code.",
                "input_params": {
                    "zipcode": {
                        "description": "the zip code",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "format": "GetCity(zipcode) -> city_name"
            },
            {
                "name": "GetWeather",
                "Description": "This API provides the current weather status for a specified city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the current weather status",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city_name) -> weather_status"
            },
            {
                "name": "GetClothing",
                "Description": "This API suggests clothing based on the current weather status.",
                "input_params": {
                    "weather_status": {
                        "description": "the current weather status",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_suggestion": {
                        "description": "the suggested clothing",
                        "type": "String"
                    }
                },
                "format": "GetClothing(weather_status) -> clothing_suggestion"
            }
        ],
        "Query": "I'm in the 10001 zip code area, what should I wear today?",
        "Label": "GetClothing(weather_status=GetWeather(city_name=GetCity(zipcode='10001')))",
        "Index": 1090
    },
    {
        "APIs": [
            {
                "name": "GetRecipe",
                "Description": "This API provides a recipe based on the user's diet type and meal type.",
                "input_params": {
                    "diet_type": {
                        "description": "the type of diet (e.g. vegetarian, vegan, gluten-free)",
                        "type": "String"
                    },
                    "meal_type": {
                        "description": "the type of meal (e.g. breakfast, lunch, dinner)",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recipe_name": {
                        "description": "the name of the recipe",
                        "type": "String"
                    }
                },
                "format": "GetRecipe(diet_type, meal_type) -> recipe_name"
            },
            {
                "name": "GetIngredients",
                "Description": "This API provides the list of ingredients required for a given recipe.",
                "input_params": {
                    "recipe_name": {
                        "description": "the name of the recipe",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ingredients": {
                        "description": "the list of ingredients required for the recipe",
                        "type": "List of Strings"
                    }
                },
                "format": "GetIngredients(recipe_name) -> ingredients"
            },
            {
                "name": "CheckPantry",
                "Description": "This API checks the user's pantry for the available and missing ingredients for a given recipe.",
                "input_params": {
                    "ingredients": {
                        "description": "the list of ingredients required for the recipe",
                        "type": "List of Strings"
                    }
                },
                "output_params": {
                    "available_ingredients": {
                        "description": "the list of available ingredients in the pantry",
                        "type": "List of Strings"
                    },
                    "missing_ingredients": {
                        "description": "the list of missing ingredients in the pantry",
                        "type": "List of Strings"
                    }
                },
                "format": "CheckPantry(ingredients) -> available_ingredients, missing_ingredients"
            }
        ],
        "Query": "I'm a vegetarian and I want to cook dinner, what can I cook with the ingredients I have in my pantry?",
        "Label": "CheckPantry(ingredients=GetIngredients(recipe_name=GetRecipe(diet_type='vegetarian', meal_type='dinner')))",
        "Index": 1091
    },
    {
        "APIs": [
            {
                "name": "UserEmail2ID",
                "Description": "This API is to convert user email to user ID.",
                "input_params": {
                    "user_email": {
                        "description": "the email of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmail2ID(user_email) -> user_ID"
            },
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "CheckStock",
                "Description": "This API checks the stock status of a product.",
                "input_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "stock_status": {
                        "description": "the stock status of the product",
                        "type": "String"
                    }
                },
                "format": "CheckStock(product_ID) -> stock_status"
            },
            {
                "name": "PurchaseItem",
                "Description": "This API is to purchase a product.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the product to purchase",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "PurchaseItem(user_ID, product_ID, quantity) -> purchase_status"
            }
        ],
        "Query": "Can you please assist Emily to purchase 3 units of iPhone12, her email is emily@gmail.com.",
        "Label": "PurchaseItem(user_ID=UserEmail2ID(user_email='emily@gmail.com'), product_ID=ProductName2ID(product_name='iPhone12'), quantity=3)",
        "Index": 1092
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API is to find a movie based on genre and rating.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "rating": {
                        "description": "the rating of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovie(genre, rating) -> movie"
            },
            {
                "name": "GetMovieTimes",
                "Description": "This API is to get the showtimes for a specific movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "showtimes": {
                        "description": "the showtimes for the movie",
                        "type": "List"
                    }
                },
                "format": "GetMovieTimes(movie_name) -> showtimes"
            },
            {
                "name": "BookMovieTickets",
                "Description": "This API is to book movie tickets for a specific showtime.",
                "input_params": {
                    "showtime": {
                        "description": "the showtime for the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ticket": {
                        "description": "the ticket for the movie",
                        "type": "String"
                    }
                },
                "format": "BookMovieTickets(showtime) -> ticket"
            }
        ],
        "Query": "I want to watch a highly rated thriller movie. Please book tickets for it.",
        "Label": "BookMovieTickets(showtime=GetMovieTimes(movie_name=FindMovie(genre='thriller', rating='high')))",
        "Index": 1093
    },
    {
        "APIs": [
            {
                "name": "GetCityLocation",
                "Description": "This API is to find the geographical location of a city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "latitude": {
                        "description": "the latitude of the city",
                        "type": "Float"
                    },
                    "longitude": {
                        "description": "the longitude of the city",
                        "type": "Float"
                    }
                },
                "format": "GetCityLocation(city_name) -> latitude, longitude"
            },
            {
                "name": "GetWeather",
                "Description": "This API is to get the current weather condition at a certain location.",
                "input_params": {
                    "latitude": {
                        "description": "the latitude of the location",
                        "type": "Float"
                    },
                    "longitude": {
                        "description": "the longitude of the location",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "weather_condition": {
                        "description": "the current weather condition",
                        "type": "String"
                    }
                },
                "format": "GetWeather(latitude, longitude) -> weather_condition"
            },
            {
                "name": "GetClothingAdvice",
                "Description": "This API is to provide clothing advice based on the current weather condition.",
                "input_params": {
                    "weather_condition": {
                        "description": "the current weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_recommendation": {
                        "description": "the clothing recommendation",
                        "type": "String"
                    }
                },
                "format": "GetClothingAdvice(weather_condition) -> clothing_recommendation"
            }
        ],
        "Query": "What's the weather like in London and what should I wear today?",
        "Label": "GetClothingAdvice(weather_condition=GetWeather(latitude, longitude = GetCityLocation(city_name='London')))",
        "Index": 1094
    },
    {
        "APIs": [
            {
                "name": "GetUserAge",
                "Description": "This API is to get the user's age based on their username.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "age": {
                        "description": "the age of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserAge(username) -> age"
            },
            {
                "name": "GetDailyCalorieIntake",
                "Description": "This API is to find the appropriate daily calorie intake for someone of a specific age.",
                "input_params": {
                    "age": {
                        "description": "the age of the person",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "recommended daily calorie intake": {
                        "description": "the recommended daily calorie intake for the person",
                        "type": "Integer"
                    }
                },
                "format": "GetDailyCalorieIntake(age) -> recommended daily calorie intake"
            },
            {
                "name": "GetNutritionPlan",
                "Description": "This API is to generate a nutrition plan based on a certain calorie intake.",
                "input_params": {
                    "calorie_intake": {
                        "description": "the calorie intake for the nutrition plan",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "nutrition plan": {
                        "description": "the generated nutrition plan",
                        "type": "String"
                    }
                },
                "format": "GetNutritionPlan(calorie_intake) -> nutrition plan"
            }
        ],
        "Query": "I'm John, what should I eat today to maintain a healthy diet?",
        "Label": "GetNutritionPlan(calorie_intake=GetDailyCalorieIntake(age=GetUserAge(username='John')))",
        "Index": 1095
    },
    {
        "APIs": [
            {
                "name": "LocatePharmacy",
                "Description": "This API locates a pharmacy in a given city that has a certain drug in stock.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "drug": {
                        "description": "the name of the drug",
                        "type": "String"
                    }
                },
                "output_params": {
                    "pharmacy_name": {
                        "description": "the name of the pharmacy",
                        "type": "String"
                    }
                },
                "format": "LocatePharmacy(city, drug) -> pharmacy_name"
            },
            {
                "name": "CheckAvailability",
                "Description": "This API verifies if a certain drug is available in the specified pharmacy.",
                "input_params": {
                    "pharmacy_name": {
                        "description": "the name of the pharmacy",
                        "type": "String"
                    },
                    "drug": {
                        "description": "the name of the drug",
                        "type": "String"
                    }
                },
                "output_params": {
                    "availability_status": {
                        "description": "the availability status of the drug",
                        "type": "String"
                    }
                },
                "format": "CheckAvailability(pharmacy_name, drug) -> availability_status"
            },
            {
                "name": "ReserveMedicine",
                "Description": "This API allows the user to reserve a medicine in a specific pharmacy.",
                "input_params": {
                    "pharmacy_name": {
                        "description": "the name of the pharmacy",
                        "type": "String"
                    },
                    "drug": {
                        "description": "the name of the drug",
                        "type": "String"
                    },
                    "patient_name": {
                        "description": "the name of the patient",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the reservation status of the medicine",
                        "type": "String"
                    }
                },
                "format": "ReserveMedicine(pharmacy_name, drug, patient_name) -> reservation_status"
            }
        ],
        "Query": "I'm in Los Angeles and I need to find a pharmacy that carries penicillin. If it's available, please reserve it under my name, John Smith.",
        "Label": "ReserveMedicine(pharmacy_name=LocatePharmacy(city='Los Angeles', drug='penicillin'), drug='penicillin', patient_name='John Smith')",
        "Index": 1096
    },
    {
        "APIs": [
            {
                "name": "FlightStatus",
                "Description": "This API checks the status of a specified flight.",
                "input_params": {
                    "flight_number": {
                        "description": "the number of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_info": {
                        "description": "the information of the flight",
                        "type": "String"
                    }
                },
                "format": "FlightStatus(flight_number) -> flight_info"
            },
            {
                "name": "GetFlightNumber",
                "Description": "This API retrieves the flight number a certain person booked.",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "flight_number": {
                        "description": "the number of the flight",
                        "type": "String"
                    }
                },
                "format": "GetFlightNumber(person_ID) -> flight_number"
            },
            {
                "name": "PersonName2ID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "person_name": {
                        "description": "the name of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "PersonName2ID(person_name) -> person_ID"
            }
        ],
        "Query": "Can you check the status of John's flight?",
        "Label": "FlightStatus(flight_number=GetFlightNumber(person_ID=PersonName2ID(person_name='John')))",
        "Index": 1097
    },
    {
        "APIs": [
            {
                "name": "GetFlightDetails",
                "Description": "This API is to get the flight details from the current city to a specific city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the specific city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_details": {
                        "description": "the details of the flight",
                        "type": "Object"
                    }
                },
                "format": "GetFlightDetails(city, date) -> flight_details"
            },
            {
                "name": "CheckBaggageAllowance",
                "Description": "This API is to check the baggage allowance of a specific airline.",
                "input_params": {
                    "airline": {
                        "description": "the specific airline",
                        "type": "String"
                    }
                },
                "output_params": {
                    "baggage_allowance": {
                        "description": "the baggage allowance of the airline",
                        "type": "Object"
                    }
                },
                "format": "CheckBaggageAllowance(airline) -> baggage_allowance"
            },
            {
                "name": "SuggestLuggage",
                "Description": "This API is to suggest the type and amount of luggage based on baggage allowance and trip duration.",
                "input_params": {
                    "baggage_allowance": {
                        "description": "the baggage allowance of the airline",
                        "type": "Object"
                    },
                    "trip_duration": {
                        "description": "the duration of the trip",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "luggage_suggestions": {
                        "description": "the suggested type and amount of luggage",
                        "type": "Object"
                    }
                },
                "format": "SuggestLuggage(baggage_allowance, trip_duration) -> luggage_suggestions"
            }
        ],
        "Query": "What kind of luggage should I pack for my 5-day trip to London from New York tomorrow?",
        "Label": "SuggestLuggage(baggage_allowance=CheckBaggageAllowance(airline=GetFlightDetails(city='London', date='tomorrow').airline), trip_duration=5)",
        "Index": 1098
    },
    {
        "APIs": [
            {
                "name": "GetExchangeRate",
                "Description": "This API is to get the exchange rate from one currency to another.",
                "input_params": {
                    "from_currency": {
                        "description": "the currency to convert from",
                        "type": "String"
                    },
                    "to_currency": {
                        "description": "the currency to convert to",
                        "type": "String"
                    }
                },
                "output_params": {
                    "exchange_rate": {
                        "description": "the exchange rate from the from_currency to the to_currency",
                        "type": "Float"
                    }
                },
                "format": "GetExchangeRate(from_currency, to_currency) -> exchange_rate"
            },
            {
                "name": "CalculateCost",
                "Description": "This API is to calculate the cost of a product in a different currency.",
                "input_params": {
                    "price": {
                        "description": "the price of the product",
                        "type": "Float"
                    },
                    "exchange_rate": {
                        "description": "the exchange rate from the currency of the price to the desired currency",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "cost": {
                        "description": "the cost of the product in the desired currency",
                        "type": "Float"
                    }
                },
                "format": "CalculateCost(price, exchange_rate) -> cost"
            },
            {
                "name": "GetProductPrice",
                "Description": "This API is to get the price of a product based on its ID.",
                "input_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "price": {
                        "description": "the price of the product",
                        "type": "Float"
                    }
                },
                "format": "GetProductPrice(product_ID) -> price"
            }
        ],
        "Query": "What is the cost of product with ID '12345' in Euros if its price is listed in Dollars?",
        "Label": "CalculateCost(price=GetProductPrice(product_ID='12345'), exchange_rate=GetExchangeRate(from_currency='Dollars', to_currency='Euros'))",
        "Index": 1099
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the current weather in a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the current weather in the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "GetTravelTime",
                "Description": "This API is to get the approximate travel time between two locations.",
                "input_params": {
                    "source": {
                        "description": "the starting location",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "travel_time": {
                        "description": "the approximate travel time between the two locations",
                        "type": "String"
                    }
                },
                "format": "GetTravelTime(source,destination) -> travel_time"
            },
            {
                "name": "GetClothingAdvice",
                "Description": "This API provides clothing advice based on the weather and type of activity.",
                "input_params": {
                    "weather": {
                        "description": "the current weather",
                        "type": "String"
                    },
                    "activity": {
                        "description": "the type of activity",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_advice": {
                        "description": "the clothing advice based on the weather and activity",
                        "type": "String"
                    }
                },
                "format": "GetClothingAdvice(weather, activity) -> clothing_advice"
            }
        ],
        "Query": "What should I wear for a walk in Paris if I start from London now?",
        "Label": "GetClothingAdvice(weather=GetWeather(city='Paris'), activity='walk')",
        "Index": 1100
    },
    {
        "APIs": [
            {
                "name": "SearchMovieDatabase",
                "Description": "This API is to search for the details of a specified movie.",
                "input_params": {
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_details": {
                        "description": "the details of the movie",
                        "type": "String"
                    }
                },
                "format": "SearchMovieDatabase(movie) -> movie_details"
            },
            {
                "name": "CheckCinemaSchedule",
                "Description": "This API is used to check the schedule of the specified movie in the nearest cinemas.",
                "input_params": {
                    "movie_details": {
                        "description": "the details of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "schedule": {
                        "description": "the schedule of the movie in the nearest cinemas",
                        "type": "String"
                    }
                },
                "format": "CheckCinemaSchedule(movie_details) -> schedule"
            },
            {
                "name": "BookMovieTicket",
                "Description": "This API is to book a movie ticket according to the provided schedule.",
                "input_params": {
                    "schedule": {
                        "description": "the schedule of the movie in the nearest cinemas",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ticket_confirmation": {
                        "description": "the confirmation of the booked movie ticket",
                        "type": "String"
                    }
                },
                "format": "BookMovieTicket(schedule) -> ticket_confirmation"
            }
        ],
        "Query": "Can you find the next showing of \"Inception\" in my nearest cinema and book a ticket for me?",
        "Label": "BookMovieTicket(schedule=CheckCinemaSchedule(movie_details=SearchMovieDatabase(movie='Inception')))",
        "Index": 1101
    },
    {
        "APIs": [
            {
                "name": "SearchFlight",
                "Description": "This API is to search for a flight to a specified destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight": {
                        "description": "the flight details",
                        "type": "Object"
                    }
                },
                "format": "SearchFlight(destination) -> flight"
            },
            {
                "name": "CheckBaggageAllowance",
                "Description": "This API is to check the baggage allowance for a specific flight.",
                "input_params": {
                    "flight": {
                        "description": "the flight details",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "baggage_allowance": {
                        "description": "the baggage allowance for the flight",
                        "type": "Object"
                    }
                },
                "format": "CheckBaggageAllowance(flight) -> baggage_allowance"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight with a specified baggage allowance.",
                "input_params": {
                    "flight": {
                        "description": "the flight details",
                        "type": "Object"
                    },
                    "baggage_allowance": {
                        "description": "the baggage allowance for the flight",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "booking_confirmation": {
                        "description": "the confirmation of the flight booking",
                        "type": "Object"
                    }
                },
                "format": "BookFlight(flight, baggage_allowance) -> booking_confirmation"
            }
        ],
        "Query": "I need to book a flight to Paris with the most baggage allowance.",
        "Label": "BookFlight(flight=SearchFlight(destination='Paris'), baggage_allowance=CheckBaggageAllowance(flight=SearchFlight(destination='Paris')))",
        "Index": 1102
    },
    {
        "APIs": [
            {
                "name": "SearchBook",
                "Description": "This API is to search for a book based on its title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_information": {
                        "description": "information about the book",
                        "type": "String"
                    }
                },
                "format": "SearchBook(title) -> book_information"
            },
            {
                "name": "FindBookStore",
                "Description": "This API is to find a bookstore that has the searched book in stock.",
                "input_params": {
                    "book_information": {
                        "description": "information about the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bookstore_location": {
                        "description": "location of the bookstore",
                        "type": "String"
                    }
                },
                "format": "FindBookStore(book_information) -> bookstore_location"
            },
            {
                "name": "GetDirections",
                "Description": "This API is to generate directions to a specified destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination to get directions to",
                        "type": "String"
                    }
                },
                "output_params": {
                    "direction_information": {
                        "description": "information about the directions",
                        "type": "String"
                    }
                },
                "format": "GetDirections(destination) -> direction_information"
            }
        ],
        "Query": "Can you find me the directions to the bookstore where I can find the book 'To Kill a Mockingbird'?",
        "Label": "GetDirections(destination=FindBookStore(book_information=SearchBook(title='To Kill a Mockingbird')))",
        "Index": 1103
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API is to find a movie based on the specified title.",
                "input_params": {
                    "title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "format": "FindMovie(title) -> movie"
            },
            {
                "name": "GetShowtimes",
                "Description": "This API is to get the showtimes of a specified movie in a specified city.",
                "input_params": {
                    "movie": {
                        "description": "the details of the movie",
                        "type": "Object"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "showtimes": {
                        "description": "the showtimes of the movie in the specified city",
                        "type": "List"
                    }
                },
                "format": "GetShowtimes(movie, city) -> showtimes"
            },
            {
                "name": "BuyTickets",
                "Description": "This API is to buy a specified number of tickets for a specified showtime.",
                "input_params": {
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "String"
                    },
                    "number_of_tickets": {
                        "description": "the number of tickets to buy",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "ticket_confirmation": {
                        "description": "the confirmation of the ticket purchase",
                        "type": "String"
                    }
                },
                "format": "BuyTickets(showtime, number_of_tickets) -> ticket_confirmation"
            }
        ],
        "Query": "Can you please buy 2 tickets for me for the movie 'Titanic' in New York?",
        "Label": "BuyTickets(showtime=GetShowtimes(movie=FindMovie(title='Titanic'), city='New York'), number_of_tickets=2)",
        "Index": 1104
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API searches for the restaurant id of a specific restaurant name.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_id": {
                        "description": "the id of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantSearch(restaurant_name) -> restaurant_id"
            },
            {
                "name": "RestaurantReviews",
                "Description": "This API finds the review scores for a specific restaurant id.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the id of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "reviewScores": {
                        "description": "the review scores of the restaurant",
                        "type": "List"
                    }
                },
                "format": "RestaurantReviews(restaurant_id) -> reviewScores"
            },
            {
                "name": "AverageScore",
                "Description": "This API calculates the average score of given review scores.",
                "input_params": {
                    "reviewScores": {
                        "description": "the review scores of the restaurant",
                        "type": "List"
                    }
                },
                "output_params": {
                    "avgScore": {
                        "description": "the average score of the review scores",
                        "type": "Float"
                    }
                },
                "format": "AverageScore(reviewScores) -> avgScore"
            }
        ],
        "Query": "What is the average review score for the restaurant 'Italiano Delight'?",
        "Label": "AverageScore(reviewScores=RestaurantReviews(restaurant_id=RestaurantSearch(restaurant_name='Italiano Delight')))",
        "Index": 1105
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API searches for a restaurant id in a specific city for a particular restaurant.",
                "input_params": {
                    "name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantSearch(name, city) -> restaurant_id"
            },
            {
                "name": "TableAvailability",
                "Description": "This API checks the availability of tables at a specific restaurant for a certain number of people.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    },
                    "no_of_people": {
                        "description": "the number of people for the table",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "table_id": {
                        "description": "the ID of the available table",
                        "type": "Integer"
                    }
                },
                "format": "TableAvailability(restaurant_id, no_of_people) -> table_id"
            },
            {
                "name": "Reservation",
                "Description": "This API reserves a table at the given date and time and returns a confirmation.",
                "input_params": {
                    "table_id": {
                        "description": "the ID of the table",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the reservation",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "confirmation": {
                        "description": "the confirmation of the reservation",
                        "type": "String"
                    }
                },
                "format": "Reservation(table_id, date, time) -> confirmation"
            }
        ],
        "Query": "I want to book a table for 4 at 'The French Laundry' in Napa on 15th August at 8 PM. Can you do that?",
        "Label": "Reservation(table_id=TableAvailability(restaurant_id=RestaurantSearch(name='The French Laundry', city='Napa'), no_of_people=4), date='15th August', time='8 PM')",
        "Index": 1106
    },
    {
        "APIs": [
            {
                "name": "GetFlightDetails",
                "Description": "This API provides flight details for a specified city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight": {
                        "description": "the details of the flight",
                        "type": "Object"
                    }
                },
                "format": "GetFlightDetails(city, date) -> flight"
            },
            {
                "name": "GetHotelDetails",
                "Description": "This API provides hotel availability and pricing in a specific city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the hotel booking",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotel": {
                        "description": "the details of the hotel",
                        "type": "Object"
                    }
                },
                "format": "GetHotelDetails(city, date) -> hotel"
            },
            {
                "name": "PlanTrip",
                "Description": "This API plans a trip by taking flight details and hotel details as input and provides a complete trip itinerary.",
                "input_params": {
                    "flight": {
                        "description": "the details of the flight",
                        "type": "Object"
                    },
                    "hotel": {
                        "description": "the details of the hotel",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "trip": {
                        "description": "the complete trip itinerary",
                        "type": "Object"
                    }
                },
                "format": "PlanTrip(flight, hotel) -> trip"
            }
        ],
        "Query": "Can you plan a trip to Paris from New York next Friday?",
        "Label": "PlanTrip(flight=GetFlightDetails(city='Paris', date='next Friday'), hotel=GetHotelDetails(city='Paris', date='next Friday'))",
        "Index": 1107
    },
    {
        "APIs": [
            {
                "name": "CarRentalSearch",
                "Description": "This API is used to search for cars available for rent in a certain city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the city where the car rental is being searched",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date for the car rental search",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "rentalCarDetails": {
                        "description": "the details of the available rental cars",
                        "type": "List"
                    }
                },
                "format": "CarRentalSearch(city, date) -> rentalCarDetails"
            },
            {
                "name": "HotelSearch",
                "Description": "This API is to search for available hotels in a specific city on a certain date based on the number of rooms required.",
                "input_params": {
                    "city": {
                        "description": "the city where the hotel search is being performed",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date for the hotel search",
                        "type": "Date"
                    },
                    "num_of_rooms": {
                        "description": "the number of rooms required for the hotel booking",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "hotelResults": {
                        "description": "the results of the available hotels",
                        "type": "List"
                    }
                },
                "format": "HotelSearch(city, date, num_of_rooms) -> hotelResults"
            },
            {
                "name": "PackageBooking",
                "Description": "This API is to book a combined hotel and car rental package based on the hotel results, car rental details, and the number of people.",
                "input_params": {
                    "hotelResults": {
                        "description": "the results of the available hotels",
                        "type": "List"
                    },
                    "rentalCarDetails": {
                        "description": "the details of the available rental cars",
                        "type": "List"
                    },
                    "num_of_people": {
                        "description": "the number of people for the package booking",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "bookingConfirmation": {
                        "description": "the confirmation details of the package booking",
                        "type": "String"
                    }
                },
                "format": "PackageBooking(hotelResults, rentalCarDetails, num_of_people) -> bookingConfirmation"
            }
        ],
        "Query": "Could you please help me search for a car to rent and a hotel to stay in London for 3 nights from 10th of March for 2 people?",
        "Label": "PackageBooking(hotelResults=HotelSearch(city='London', date='10th of March', num_of_rooms='1'), rentalCarDetails=CarRentalSearch(city='London', date='10th of March'), num_of_people='2')",
        "Index": 1108
    },
    {
        "APIs": [
            {
                "name": "MovieSearch",
                "Description": "This API searches for a movie by a specific director.",
                "input_params": {
                    "title": {
                        "description": "the title of the movie",
                        "type": "String"
                    },
                    "director": {
                        "description": "the director of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "format": "MovieSearch(title, director) -> movieDetails"
            },
            {
                "name": "CinemaFinder",
                "Description": "This API finds the cinemas where the searched movie is being shown.",
                "input_params": {
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "cinemaLocations": {
                        "description": "the locations of the cinemas",
                        "type": "Object"
                    }
                },
                "format": "CinemaFinder(movieDetails) -> cinemaLocations"
            },
            {
                "name": "ShowtimeCheck",
                "Description": "This API checks the showtimes for a specific movie at the found cinemas.",
                "input_params": {
                    "cinemaLocations": {
                        "description": "the locations of the cinemas",
                        "type": "Object"
                    },
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "showTimes": {
                        "description": "the showtimes of the movie at the cinemas",
                        "type": "Object"
                    }
                },
                "format": "ShowtimeCheck(cinemaLocations, movieDetails) -> showTimes"
            }
        ],
        "Query": "Can you find where the movie 'Inception' by Christopher Nolan is being shown and tell me the showtimes?",
        "Label": "ShowtimeCheck(cinemaLocations=CinemaFinder(movieDetails=MovieSearch(title='Inception', director='Christopher Nolan')), movieDetails=MovieSearch(title='Inception', director='Christopher Nolan'))",
        "Index": 1109
    },
    {
        "APIs": [
            {
                "name": "ProductSearch",
                "Description": "This API searches for a specific product and provides the details.",
                "input_params": {
                    "productName": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "productDetails": {
                        "description": "the details of the product",
                        "type": "String"
                    }
                },
                "format": "ProductSearch(productName) -> productDetails"
            },
            {
                "name": "StoreLocator",
                "Description": "This API finds the store where the searched product is available.",
                "input_params": {
                    "productDetails": {
                        "description": "the details of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "storeLocations": {
                        "description": "the locations of the stores where the product is available",
                        "type": "String"
                    }
                },
                "format": "StoreLocator(productDetails) -> storeLocations"
            },
            {
                "name": "StoreWorkingHours",
                "Description": "This API provides the working hours of the selected store.",
                "input_params": {
                    "storeLocations": {
                        "description": "the locations of the stores",
                        "type": "String"
                    }
                },
                "output_params": {
                    "workingHours": {
                        "description": "the working hours of the store",
                        "type": "String"
                    }
                },
                "format": "StoreWorkingHours(storeLocations) -> workingHours"
            }
        ],
        "Query": "Can you find a 'Samsung Galaxy S21' for me and tell me where I can buy it and what are the working hours of that store?",
        "Label": "StoreWorkingHours(storeLocations=StoreLocator(productDetails=ProductSearch(productName='Samsung Galaxy S21')))",
        "Index": 1110
    },
    {
        "APIs": [
            {
                "name": "FlightSearch",
                "Description": "This API searches for flights to a specific destination on a specific date.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    },
                    "departureDate": {
                        "description": "the date of departure",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flightDetails": {
                        "description": "the details of the flight",
                        "type": "String"
                    }
                },
                "format": "FlightSearch(destination, departureDate) -> flightDetails"
            },
            {
                "name": "HotelBooking",
                "Description": "This API books a hotel at the flight destination.",
                "input_params": {
                    "flightDetails": {
                        "description": "the details of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotelBookingConfirmation": {
                        "description": "the confirmation of the hotel booking",
                        "type": "String"
                    }
                },
                "format": "HotelBooking(flightDetails) -> hotelBookingConfirmation"
            },
            {
                "name": "CarRentalService",
                "Description": "This API books a car rental service based on the hotel booking confirmation.",
                "input_params": {
                    "hotelBookingConfirmation": {
                        "description": "the confirmation of the hotel booking",
                        "type": "String"
                    }
                },
                "output_params": {
                    "carRentalConfirmation": {
                        "description": "the confirmation of the car rental service",
                        "type": "String"
                    }
                },
                "format": "CarRentalService(hotelBookingConfirmation) -> carRentalConfirmation"
            }
        ],
        "Query": "Can you book a flight to Las Vegas for me on 5th November, also book a hotel and a car rental service for me?",
        "Label": "CarRentalService(hotelBookingConfirmation=HotelBooking(flightDetails=FlightSearch(destination='Las Vegas', departureDate='5th November')))",
        "Index": 1111
    },
    {
        "APIs": [
            {
                "name": "GetMovieTime",
                "Description": "This API gets the showtime for a specific movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ShowTime": {
                        "description": "the showtime for the movie",
                        "type": "Time"
                    }
                },
                "format": "GetMovieTime(movie_name) -> ShowTime"
            },
            {
                "name": "FindRestaurant",
                "Description": "This API finds restaurants that are open before or after the movie showtime.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "ShowTime": {
                        "description": "the showtime for the movie",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "RestaurantOptions": {
                        "description": "the options of restaurants",
                        "type": "List"
                    }
                },
                "format": "FindRestaurant(movie_name, ShowTime) -> RestaurantOptions"
            },
            {
                "name": "MakeReservation",
                "Description": "This API reserves a table at the chosen restaurant at a desired time.",
                "input_params": {
                    "RestaurantOptions": {
                        "description": "the options of restaurants",
                        "type": "List"
                    },
                    "ShowTime": {
                        "description": "the showtime for the movie",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "ReservationStatus": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "MakeReservation(RestaurantOptions, ShowTime) -> ReservationStatus"
            }
        ],
        "Query": "Can I find a restaurant near the theatre showing 'Inception' and make a reservation?",
        "Label": "MakeReservation(RestaurantOptions=FindRestaurant(movie_name='Inception', ShowTime=GetMovieTime(movie_name='Inception')), ShowTime=GetMovieTime(movie_name='Inception'))",
        "Index": 1112
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API provides the weather status for a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "WeatherStatus": {
                        "description": "the weather status",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> WeatherStatus"
            },
            {
                "name": "FindClothing",
                "Description": "This API recommends the clothing based on the weather status.",
                "input_params": {
                    "WeatherStatus": {
                        "description": "the weather status",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ClothingRecommendation": {
                        "description": "the recommended clothing",
                        "type": "String"
                    }
                },
                "format": "FindClothing(WeatherStatus) -> ClothingRecommendation"
            },
            {
                "name": "FindStore",
                "Description": "This API provides the store information where the recommended clothing is available.",
                "input_params": {
                    "ClothingRecommendation": {
                        "description": "the recommended clothing",
                        "type": "String"
                    }
                },
                "output_params": {
                    "StoreInfo": {
                        "description": "the store information",
                        "type": "String"
                    }
                },
                "format": "FindStore(ClothingRecommendation) -> StoreInfo"
            }
        ],
        "Query": "What clothing should I wear in New York today and where can I buy it?",
        "Label": "FindStore(ClothingRecommendation=FindClothing(WeatherStatus=GetWeather(city='New York')))",
        "Index": 1113
    },
    {
        "APIs": [
            {
                "name": "CheckFlight",
                "Description": "This API checks the arrival time for a specific flight.",
                "input_params": {
                    "flight_number": {
                        "description": "the number of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ArrivalTime": {
                        "description": "the arrival time of the flight",
                        "type": "Time"
                    }
                },
                "format": "CheckFlight(flight_number) -> ArrivalTime"
            },
            {
                "name": "FindTaxi",
                "Description": "This API finds a taxi available for the specific arrival time.",
                "input_params": {
                    "ArrivalTime": {
                        "description": "the arrival time of the flight",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "TaxiInfo": {
                        "description": "information about the available taxi",
                        "type": "String"
                    }
                },
                "format": "FindTaxi(ArrivalTime) -> TaxiInfo"
            },
            {
                "name": "CalculateFare",
                "Description": "This API calculates the fare for the taxi ride based on taxi information and destination.",
                "input_params": {
                    "TaxiInfo": {
                        "description": "information about the available taxi",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination of the taxi ride",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Fare": {
                        "description": "the fare for the taxi ride",
                        "type": "Float"
                    }
                },
                "format": "CalculateFare(TaxiInfo, destination) -> Fare"
            }
        ],
        "Query": "How much would a taxi cost from the airport to my hotel if my flight number is AA123?",
        "Label": "CalculateFare(TaxiInfo=FindTaxi(ArrivalTime=CheckFlight(flight_number='AA123')), destination='my hotel')",
        "Index": 1114
    },
    {
        "APIs": [
            {
                "name": "MovieFinderAPI",
                "Description": "This API provides a list of movies based on genre and the year of release.",
                "input_params": {
                    "Genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "Year": {
                        "description": "the year of release of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "MovieList": {
                        "description": "a list of movies",
                        "type": "List"
                    }
                },
                "format": "MovieFinderAPI(Genre, Year) -> MovieList"
            },
            {
                "name": "MovieRatingAPI",
                "Description": "This API provides the rating for a specific movie.",
                "input_params": {
                    "MovieName": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "MovieRating": {
                        "description": "the rating of the movie",
                        "type": "Float"
                    }
                },
                "format": "MovieRatingAPI(MovieName) -> MovieRating"
            },
            {
                "name": "MovieSuggestionAPI",
                "Description": "This API suggests a movie to watch based on the movie list and highest movie rating.",
                "input_params": {
                    "MovieList": {
                        "description": "a list of movies",
                        "type": "List"
                    },
                    "MovieRating": {
                        "description": "the rating of the movie",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "MovieSuggestion": {
                        "description": "the suggested movie",
                        "type": "String"
                    }
                },
                "format": "MovieSuggestionAPI(MovieList, MovieRating) -> MovieSuggestion"
            }
        ],
        "Query": "Which is the best rated horror movie released in 2018?",
        "Label": "MovieSuggestionAPI(MovieList=MovieFinderAPI(Genre='horror', Year='2018'), MovieRating=MovieRatingAPI(MovieName=MovieFinderAPI(Genre='horror', Year='2018')))",
        "Index": 1115
    },
    {
        "APIs": [
            {
                "name": "BookSearch",
                "Description": "This API finds the ID of a book based on a specific title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "BookID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookSearch(title) -> BookID"
            },
            {
                "name": "BookPrice",
                "Description": "This API finds the price of a book based on a specific ID.",
                "input_params": {
                    "BookID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "Price": {
                        "description": "the price of the book",
                        "type": "Float"
                    }
                },
                "format": "BookPrice(BookID) -> Price"
            },
            {
                "name": "ConvertToCurrency",
                "Description": "This API converts a book price into a specific currency.",
                "input_params": {
                    "Price": {
                        "description": "the price of the book",
                        "type": "Float"
                    },
                    "Currency": {
                        "description": "the target currency",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Amount": {
                        "description": "the converted price in the target currency",
                        "type": "Float"
                    }
                },
                "format": "ConvertToCurrency(Price, Currency) -> Amount"
            }
        ],
        "Query": "How much does the book 'Harry Potter' cost in Canadian dollars?",
        "Label": "ConvertToCurrency(Price=BookPrice(BookID=BookSearch(title='Harry Potter')), Currency='Canadian dollars')",
        "Index": 1116
    },
    {
        "APIs": [
            {
                "name": "BookTitle",
                "Description": "This API fetches the title of a book using its ISBN number.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN number of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "format": "BookTitle(ISBN) -> Title"
            },
            {
                "name": "PageCount",
                "Description": "This API fetches the number of pages in a book using its title.",
                "input_params": {
                    "Title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Pages": {
                        "description": "the number of pages in the book",
                        "type": "Integer"
                    }
                },
                "format": "PageCount(Title) -> Pages"
            },
            {
                "name": "ReadingTime",
                "Description": "This API estimates the time it will take to read a book based on the number of pages.",
                "input_params": {
                    "Pages": {
                        "description": "the number of pages in the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "Time": {
                        "description": "the estimated time to read the book",
                        "type": "String"
                    }
                },
                "format": "ReadingTime(Pages) -> Time"
            }
        ],
        "Query": "How long will it take me to read the book with ISBN 123456789?",
        "Label": "ReadingTime(Pages=PageCount(Title=BookTitle(ISBN='123456789')))",
        "Index": 1117
    },
    {
        "APIs": [
            {
                "name": "Weather",
                "Description": "This API fetches the current weather condition in a specific city.",
                "input_params": {
                    "City": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "WeatherCondition": {
                        "description": "the current weather condition",
                        "type": "String"
                    }
                },
                "format": "Weather(City) -> WeatherCondition"
            },
            {
                "name": "OutfitSuggestion",
                "Description": "This API suggests an outfit based on the weather condition.",
                "input_params": {
                    "WeatherCondition": {
                        "description": "the current weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Outfit": {
                        "description": "the suggested outfit",
                        "type": "String"
                    }
                },
                "format": "OutfitSuggestion(WeatherCondition) -> Outfit"
            },
            {
                "name": "Shop",
                "Description": "This API finds stores that have the suggested outfit in stock.",
                "input_params": {
                    "Outfit": {
                        "description": "the suggested outfit",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Stores": {
                        "description": "the stores that have the suggested outfit in stock",
                        "type": "List"
                    }
                },
                "format": "Shop(Outfit) -> Stores"
            }
        ],
        "Query": "Where can I buy the appropriate outfit for today's weather in Los Angeles?",
        "Label": "Shop(Outfit=OutfitSuggestion(WeatherCondition=Weather(City='Los Angeles')))",
        "Index": 1118
    },
    {
        "APIs": [
            {
                "name": "AlbumArtist",
                "Description": "This API is to query the artist who created a certain album.",
                "input_params": {
                    "album_name": {
                        "description": "the name of the album",
                        "type": "String"
                    }
                },
                "output_params": {
                    "artist": {
                        "description": "the artist who created the album",
                        "type": "String"
                    }
                },
                "format": "AlbumArtist(album_name) -> artist"
            },
            {
                "name": "ArtistGenre",
                "Description": "This API is to query the genre of a certain artist.",
                "input_params": {
                    "artist_name": {
                        "description": "the name of the artist",
                        "type": "String"
                    }
                },
                "output_params": {
                    "genre": {
                        "description": "the genre of the artist",
                        "type": "String"
                    }
                },
                "format": "ArtistGenre(artist_name) -> genre"
            },
            {
                "name": "MusicRecommend",
                "Description": "This API recommends music based on the certain artist, genre and year.",
                "input_params": {
                    "artist": {
                        "description": "the artist of the song",
                        "type": "String"
                    },
                    "genre": {
                        "description": "the genre of the song",
                        "type": "String"
                    },
                    "year": {
                        "description": "the year of the song",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "music": {
                        "description": "the recommended music",
                        "type": "String"
                    }
                },
                "format": "MusicRecommend(artist, genre, year) -> music"
            }
        ],
        "Query": "Can you recommend a pop song from 2010 by the artist of 'The Fame' album?",
        "Label": "MusicRecommend(artist=AlbumArtist(album_name='The Fame'), genre='pop', year='2010')",
        "Index": 1119
    },
    {
        "APIs": [
            {
                "name": "BookAuthor",
                "Description": "This API is to query the author information of a book.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    }
                },
                "format": "BookAuthor(book_name) -> author"
            },
            {
                "name": "AuthorBirthplace",
                "Description": "This API retrieves the birthplace of a specific author.",
                "input_params": {
                    "author": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "birthplace": {
                        "description": "the birthplace of the author",
                        "type": "String"
                    }
                },
                "format": "AuthorBirthplace(author) -> birthplace"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API provides weather forecast for a specific city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "forecast": {
                        "description": "the weather forecast for the city on the date",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> forecast"
            }
        ],
        "Query": "Can you tell me the weather forecast in the birthplace of the author of 'Pride and Prejudice' on 10th November 2022?",
        "Label": "WeatherForecast(city=AuthorBirthplace(author=BookAuthor(book_name='Pride and Prejudice')), date='10th November 2022')",
        "Index": 1120
    },
    {
        "APIs": [
            {
                "name": "FoodCuisine",
                "Description": "This API retrieves the cuisine of a particular food.",
                "input_params": {
                    "food_name": {
                        "description": "the name of the food",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cuisine": {
                        "description": "the cuisine of the food",
                        "type": "String"
                    }
                },
                "format": "FoodCuisine(food_name) -> cuisine"
            },
            {
                "name": "CuisineOrigin",
                "Description": "This API provides the origin country of a specific cuisine.",
                "input_params": {
                    "cuisine": {
                        "description": "the cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "country": {
                        "description": "the origin country of the cuisine",
                        "type": "String"
                    }
                },
                "format": "CuisineOrigin(cuisine) -> country"
            },
            {
                "name": "CountryCapital",
                "Description": "This API retrieves the capital city of a specific country.",
                "input_params": {
                    "country": {
                        "description": "the country",
                        "type": "String"
                    }
                },
                "output_params": {
                    "capital": {
                        "description": "the capital city of the country",
                        "type": "String"
                    }
                },
                "format": "CountryCapital(country) -> capital"
            }
        ],
        "Query": "What is the capital of the country where the cuisine of 'Tacos' originates?",
        "Label": "CountryCapital(country=CuisineOrigin(cuisine=FoodCuisine(food_name='Tacos')))",
        "Index": 1121
    },
    {
        "APIs": [
            {
                "name": "UserSearch",
                "Description": "This API is used to find the details of the user.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_details": {
                        "description": "the details of the user",
                        "type": "Object"
                    }
                },
                "format": "UserSearch(username) -> user_details"
            },
            {
                "name": "OrderHistory",
                "Description": "This API is used to find out the order history of a user.",
                "input_params": {
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_history": {
                        "description": "the order history of the user",
                        "type": "List"
                    }
                },
                "format": "OrderHistory(user_id) -> order_history"
            },
            {
                "name": "OrderSearch",
                "Description": "This API is used to find the details of the specific order.",
                "input_params": {
                    "order_id": {
                        "description": "the ID of the order",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_details": {
                        "description": "the details of the order",
                        "type": "Object"
                    }
                },
                "format": "OrderSearch(order_id) -> order_details"
            }
        ],
        "Query": "What is the last order details of user \u2018John1234\u2019?",
        "Label": "OrderSearch(order_id=OrderHistory(user_id=UserSearch(username='John1234')))",
        "Index": 1122
    },
    {
        "APIs": [
            {
                "name": "UserProfile",
                "Description": "This API is used to find user's profile.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user profile": {
                        "description": "the profile of the user",
                        "type": "Object"
                    }
                },
                "format": "UserProfile(username) -> user profile"
            },
            {
                "name": "CalculateCalorie",
                "Description": "This API calculates calorie of a given food.",
                "input_params": {
                    "food": {
                        "description": "the name of the food",
                        "type": "String"
                    }
                },
                "output_params": {
                    "calorie": {
                        "description": "the calorie count of the food",
                        "type": "Integer"
                    }
                },
                "format": "CalculateCalorie(food) -> calorie"
            },
            {
                "name": "MealSuggestion",
                "Description": "This API suggests meals based on calorie count and dietary restrictions.",
                "input_params": {
                    "calorie": {
                        "description": "the calorie count",
                        "type": "Integer"
                    },
                    "dietary_restrictions": {
                        "description": "the dietary restrictions",
                        "type": "String"
                    }
                },
                "output_params": {
                    "suggested meals": {
                        "description": "the suggested meals",
                        "type": "List"
                    }
                },
                "format": "MealSuggestion(calorie, dietary_restrictions) -> suggested meals"
            }
        ],
        "Query": "I am allergic to peanuts and I ate a cheeseburger for lunch. Can you suggest dinner for me?",
        "Label": "MealSuggestion(calorie=CalculateCalorie(food='cheeseburger'), dietary_restrictions='peanuts')",
        "Index": 1123
    },
    {
        "APIs": [
            {
                "name": "GetCurrentWeather",
                "Description": "This API retrieves the current weather for a given location.",
                "input_params": {
                    "location": {
                        "description": "the location for which to retrieve the current weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "current_weather": {
                        "description": "the current weather for the given location",
                        "type": "String"
                    }
                },
                "format": "GetCurrentWeather(location) -> current_weather"
            },
            {
                "name": "GetWeatherForecast",
                "Description": "This API retrieves the weather forecast for the next seven days for a given location.",
                "input_params": {
                    "location": {
                        "description": "the location for which to retrieve the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the weather forecast for the next seven days for the given location",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(location) -> weather_forecast"
            },
            {
                "name": "CompareWeather",
                "Description": "This API compares the current weather with the forecasted weather.",
                "input_params": {
                    "current_weather": {
                        "description": "the current weather for a location",
                        "type": "String"
                    },
                    "weather_forecast": {
                        "description": "the weather forecast for the next seven days for a location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_comparison": {
                        "description": "the comparison result of the current weather with the forecasted weather",
                        "type": "String"
                    }
                },
                "format": "CompareWeather(current_weather, weather_forecast) -> weather_comparison"
            }
        ],
        "Query": "How does the current weather in London compare to the forecast for the next week?",
        "Label": "CompareWeather(current_weather=GetCurrentWeather(location='London'), weather_forecast=GetWeatherForecast(location='London'))",
        "Index": 1124
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API gives the weather forecast for a specific city and date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_info": {
                        "description": "the weather forecast information",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather_info"
            },
            {
                "name": "RestaurantRecommend",
                "Description": "This API recommends restaurants in a certain city that serve a particular cuisine depending on the weather.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    },
                    "weather": {
                        "description": "the weather forecast information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurants": {
                        "description": "the recommended restaurants",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommend(city, cuisine, weather) -> restaurants"
            },
            {
                "name": "FlightInfo",
                "Description": "This API provides information about flights from one city to another on a specific date.",
                "input_params": {
                    "city_from": {
                        "description": "the departure city",
                        "type": "String"
                    },
                    "city_to": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_info": {
                        "description": "the flight information",
                        "type": "String"
                    }
                },
                "format": "FlightInfo(city_from, city_to, date) -> flight_info"
            }
        ],
        "Query": "I want to go to Paris from New York on July 15th. Can you recommend a French restaurant there according to the weather that day?",
        "Label": "RestaurantRecommend(city='Paris', cuisine='French', weather=WeatherForecast(city='Paris', date='July 15th'))",
        "Index": 1125
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API finds the best restaurants based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the details of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "RestaurantSearch(city, cuisine) -> restaurant"
            },
            {
                "name": "EventSearch",
                "Description": "This API provides details on events happening in the specified city on a given date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "event": {
                        "description": "the details of the event",
                        "type": "Object"
                    }
                },
                "format": "EventSearch(city, date) -> event"
            },
            {
                "name": "CityGuide",
                "Description": "This API creates a guide containing restaurant and event information.",
                "input_params": {
                    "restaurant": {
                        "description": "the details of the restaurant",
                        "type": "Object"
                    },
                    "event": {
                        "description": "the details of the event",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "guide": {
                        "description": "the guide containing restaurant and event information",
                        "type": "Object"
                    }
                },
                "format": "CityGuide(restaurant, event) -> guide"
            }
        ],
        "Query": "What's happening in London on March 12, and can you suggest a good Italian restaurant?",
        "Label": "CityGuide(restaurant = RestaurantSearch(city = 'London', cuisine = 'Italian'), event = EventSearch(city = 'London', date = 'March 12'))",
        "Index": 1126
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API gives the weather forecast for the given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast for the city",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city) -> weather"
            },
            {
                "name": "RestaurantRecommendation",
                "Description": "This API recommends a restaurant in the given city for the specified cuisine.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommendation(city, cuisine) -> restaurant"
            },
            {
                "name": "TravelPlan",
                "Description": "This API generates a travel plan based on the weather and restaurant recommendation.",
                "input_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    },
                    "restaurant": {
                        "description": "the recommended restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "plan": {
                        "description": "the generated travel plan",
                        "type": "String"
                    }
                },
                "format": "TravelPlan(weather, restaurant) -> plan"
            }
        ],
        "Query": "I'm planning a day out in Tokyo and I would like to have Italian food, can you make a plan for me?",
        "Label": "TravelPlan(weather=WeatherForecast(city='Tokyo'), restaurant=RestaurantRecommendation(city='Tokyo', cuisine='Italian'))",
        "Index": 1127
    },
    {
        "APIs": [
            {
                "name": "StockPrice",
                "Description": "This API gives the current price for a company's stock.",
                "input_params": {
                    "company": {
                        "description": "the name of the company",
                        "type": "String"
                    }
                },
                "output_params": {
                    "price": {
                        "description": "the current price of the company's stock",
                        "type": "Float"
                    }
                },
                "format": "StockPrice(company) -> price"
            },
            {
                "name": "NewsHeadlines",
                "Description": "This API gives the most recent news headlines about the specified company.",
                "input_params": {
                    "company": {
                        "description": "the name of the company",
                        "type": "String"
                    }
                },
                "output_params": {
                    "news": {
                        "description": "the most recent news headlines about the company",
                        "type": "String"
                    }
                },
                "format": "NewsHeadlines(company) -> news"
            },
            {
                "name": "InvestmentStrategy",
                "Description": "This API generates an investment strategy based on the stock price and news headlines.",
                "input_params": {
                    "stockPrice": {
                        "description": "the current price of the company's stock",
                        "type": "Float"
                    },
                    "news": {
                        "description": "the most recent news headlines about the company",
                        "type": "String"
                    }
                },
                "output_params": {
                    "strategy": {
                        "description": "the generated investment strategy",
                        "type": "String"
                    }
                },
                "format": "InvestmentStrategy(stockPrice, news) -> strategy"
            }
        ],
        "Query": "I'm considering investing in Google, can you provide an investment strategy?",
        "Label": "InvestmentStrategy(stockPrice=StockPrice(company='Google'), news=NewsHeadlines(company='Google'))",
        "Index": 1128
    },
    {
        "APIs": [
            {
                "name": "RestaurantRating",
                "Description": "This API gives the current rating of a restaurant in a specified city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "rating": {
                        "description": "the current rating of the restaurant",
                        "type": "Float"
                    }
                },
                "format": "RestaurantRating(city, restaurant) -> rating"
            },
            {
                "name": "RestaurantPriceRange",
                "Description": "This API gives the price range for a restaurant in the specified city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "priceRange": {
                        "description": "the price range of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantPriceRange(city, restaurant) -> priceRange"
            },
            {
                "name": "TransportFare",
                "Description": "This API gives the one-way transportation fare to the destination in a specified city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination",
                        "type": "String"
                    }
                },
                "output_params": {
                    "fare": {
                        "description": "the one-way transportation fare",
                        "type": "Float"
                    }
                },
                "format": "TransportFare(city, destination) -> fare"
            },
            {
                "name": "TotalDinnerCost",
                "Description": "This API calculates the total cost of dinner including the price range of the restaurant and transportation fare.",
                "input_params": {
                    "restaurantPriceRange": {
                        "description": "the price range of the restaurant",
                        "type": "String"
                    },
                    "transportFare": {
                        "description": "the one-way transportation fare",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "totalCost": {
                        "description": "the total cost of dinner",
                        "type": "Float"
                    }
                },
                "format": "TotalDinnerCost(restaurantPriceRange, transportFare) -> totalCost"
            }
        ],
        "Query": "I'm planning to have dinner at \"Le Bernardin\" in New York and I need to take a taxi there. Can you estimate the total cost for me?",
        "Label": "TotalDinnerCost(restaurantPriceRange=RestaurantPriceRange(city='New York', restaurant='Le Bernardin'), transportFare=TransportFare(city='New York', destination='Le Bernardin'))",
        "Index": 1129
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API gives the weather forecast for the given location.",
                "input_params": {
                    "location": {
                        "description": "the location for which weather forecast is required",
                        "type": "String"
                    }
                },
                "output_params": {
                    "forecast": {
                        "description": "the weather forecast for the given location",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(location) -> forecast"
            },
            {
                "name": "ClothingSuggestion",
                "Description": "This API suggests suitable clothing based on the weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothes": {
                        "description": "the suggested clothing based on the weather",
                        "type": "String"
                    }
                },
                "format": "ClothingSuggestion(weather) -> clothes"
            },
            {
                "name": "FashionStore",
                "Description": "This API gives the price of suggested clothing in the local stores of the given location.",
                "input_params": {
                    "clothes": {
                        "description": "the suggested clothing",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location for which price is required",
                        "type": "String"
                    }
                },
                "output_params": {
                    "price": {
                        "description": "the price of suggested clothing in the local stores",
                        "type": "Float"
                    }
                },
                "format": "FashionStore(clothes, location) -> price"
            }
        ],
        "Query": "What should I wear in New York tomorrow and how much would it cost?",
        "Label": "FashionStore(clothes=ClothingSuggestion(weather=WeatherForecast(location='New York')), location='New York')",
        "Index": 1130
    },
    {
        "APIs": [
            {
                "name": "DistanceCalculator",
                "Description": "This API calculates the distance between two locations.",
                "input_params": {
                    "origin": {
                        "description": "the starting location",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "the calculated distance",
                        "type": "Float"
                    }
                },
                "format": "DistanceCalculator(origin, destination) -> distance"
            },
            {
                "name": "TrafficEstimator",
                "Description": "This API estimates the traffic based on the distance.",
                "input_params": {
                    "distance": {
                        "description": "the distance between two locations",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "traffic": {
                        "description": "the estimated traffic",
                        "type": "String"
                    }
                },
                "format": "TrafficEstimator(distance) -> traffic"
            },
            {
                "name": "TimeCalculator",
                "Description": "This API calculates the time taken to travel based on the traffic and mode of transport.",
                "input_params": {
                    "traffic": {
                        "description": "the estimated traffic",
                        "type": "String"
                    },
                    "modeOfTransport": {
                        "description": "the mode of transport",
                        "type": "String"
                    }
                },
                "output_params": {
                    "time": {
                        "description": "the calculated time taken to travel",
                        "type": "String"
                    }
                },
                "format": "TimeCalculator(traffic, modeOfTransport) -> time"
            }
        ],
        "Query": "How long will it take to drive from Los Angeles to San Francisco?",
        "Label": "TimeCalculator(traffic=TrafficEstimator(distance=DistanceCalculator(origin='Los Angeles', destination='San Francisco')), modeOfTransport='drive')",
        "Index": 1131
    },
    {
        "APIs": [
            {
                "name": "CalculateDistance",
                "Description": "This API calculates the distance between the origin and destination.",
                "input_params": {
                    "origin": {
                        "description": "the starting point of the journey",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination point of the journey",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "the calculated distance between the origin and destination",
                        "type": "Float"
                    }
                },
                "format": "CalculateDistance(origin, destination) -> distance"
            },
            {
                "name": "CalculateTime",
                "Description": "This API calculates the travel time based on distance and speed.",
                "input_params": {
                    "distance": {
                        "description": "the distance of the journey",
                        "type": "Float"
                    },
                    "speed": {
                        "description": "the average speed of the journey",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "time": {
                        "description": "the estimated travel time",
                        "type": "Float"
                    }
                },
                "format": "CalculateTime(distance, speed) -> time"
            },
            {
                "name": "RoutePlanner",
                "Description": "This API provides a travel route plan from origin to destination with distance and estimated time.",
                "input_params": {
                    "origin": {
                        "description": "the starting point of the journey",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination point of the journey",
                        "type": "String"
                    },
                    "distance": {
                        "description": "the distance of the journey",
                        "type": "Float"
                    },
                    "time": {
                        "description": "the estimated travel time",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "route": {
                        "description": "the travel route plan",
                        "type": "String"
                    }
                },
                "format": "RoutePlanner(origin, destination, distance, time) -> route"
            }
        ],
        "Query": "I'm in New York and I'm planning to drive to Washington D.C. Can you tell me the route and how long it will take if I drive at an average speed of 60 miles per hour?",
        "Label": "RoutePlanner(origin='New York', destination='Washington D.C.', distance=CalculateDistance(origin='New York', destination='Washington D.C.'), time=CalculateTime(distance=CalculateDistance(origin='New York', destination='Washington D.C.'), speed=60))",
        "Index": 1132
    },
    {
        "APIs": [
            {
                "name": "UserLocation",
                "Description": "This API gets the location of a specific user.",
                "input_params": {
                    "userID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location of the user",
                        "type": "String"
                    }
                },
                "format": "UserLocation(userID) -> location"
            },
            {
                "name": "WeatherCheck",
                "Description": "This API checks the weather of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location to check the weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather of the location",
                        "type": "String"
                    }
                },
                "format": "WeatherCheck(location) -> weather"
            },
            {
                "name": "DressSuggestion",
                "Description": "This API suggests a dress based on the weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather to suggest a dress",
                        "type": "String"
                    }
                },
                "output_params": {
                    "dress": {
                        "description": "the suggested dress based on the weather",
                        "type": "String"
                    }
                },
                "format": "DressSuggestion(weather) -> dress"
            }
        ],
        "Query": "What dress should I wear today? My user ID is 987654.",
        "Label": "DressSuggestion(weather=WeatherCheck(location=UserLocation(userID='987654')))",
        "Index": 1133
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API gets the weather forecast of a specific city on a certain date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast for the city on the specified date",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather"
            },
            {
                "name": "OutdoorActivityRecommend",
                "Description": "This API recommends outdoor activities based on the weather and city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "weather": {
                        "description": "the weather forecast for the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity": {
                        "description": "the recommended outdoor activity based on the weather and city",
                        "type": "String"
                    }
                },
                "format": "OutdoorActivityRecommend(city, weather) -> activity"
            },
            {
                "name": "BookActivity",
                "Description": "This API books an activity in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "activity": {
                        "description": "the recommended outdoor activity",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking": {
                        "description": "the booking status of the activity in the specified city",
                        "type": "String"
                    }
                },
                "format": "BookActivity(city, activity) -> booking"
            }
        ],
        "Query": "Can you suggest and book an outdoor activity for me in Sydney next Sunday?",
        "Label": "BookActivity(city='Sydney', activity=OutdoorActivityRecommend(city='Sydney', weather=WeatherForecast(city='Sydney', date='next Sunday')))",
        "Index": 1134
    },
    {
        "APIs": [
            {
                "name": "BusSchedule",
                "Description": "This API is to query the schedule and route details of a specific bus.",
                "input_params": {
                    "bus_number": {
                        "description": "the number of the bus",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bus_info": {
                        "description": "the schedule and route details of the bus",
                        "type": "String"
                    }
                },
                "format": "BusSchedule(bus_number) -> bus_info"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to find the weather forecast based on a specific city and date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast for the city and date",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather"
            },
            {
                "name": "ParkRecommend",
                "Description": "This API recommends parks in a city that are suitable for particular weather.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "parks": {
                        "description": "the recommended parks in the city",
                        "type": "List"
                    }
                },
                "format": "ParkRecommend(city, weather) -> parks"
            }
        ],
        "Query": "I plan to take the bus number 23 tomorrow. Can you show me some suitable parks to visit according to the weather in the city where the bus ends?",
        "Label": "ParkRecommend(city=BusSchedule(bus_number='23'), weather=WeatherForecast(city=BusSchedule(bus_number='23'), date='tomorrow'))",
        "Index": 1135
    },
    {
        "APIs": [
            {
                "name": "RestaurantFinder",
                "Description": "This API is used to find a restaurant based on the cuisine and city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantFinder(city, cuisine) -> restaurant"
            },
            {
                "name": "MenuGetter",
                "Description": "This API is used to get the menu from a specified restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "String"
                    }
                },
                "format": "MenuGetter(restaurant) -> menu"
            },
            {
                "name": "OrderFood",
                "Description": "This API is used to place an order for a specified item from the menu of a specified restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "String"
                    },
                    "item": {
                        "description": "the item to be ordered",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order": {
                        "description": "the order details",
                        "type": "String"
                    }
                },
                "format": "OrderFood(restaurant, menu, item) -> order"
            }
        ],
        "Query": "I want to order a Margherita pizza from an Italian restaurant in Boston.",
        "Label": "OrderFood(restaurant=RestaurantFinder(city='Boston', cuisine='Italian'), menu=MenuGetter(restaurant=RestaurantFinder(city='Boston', cuisine='Italian')), item='Margherita pizza')",
        "Index": 1136
    },
    {
        "APIs": [
            {
                "name": "FootballTeamInfo",
                "Description": "This API is to query the detailed information of the football team.",
                "input_params": {
                    "team_name": {
                        "description": "the name of the football team",
                        "type": "String"
                    }
                },
                "output_params": {
                    "team_info": {
                        "description": "the detailed information of the football team",
                        "type": "String"
                    }
                },
                "format": "FootballTeamInfo(team_name) -> team_info"
            },
            {
                "name": "GameSchedule",
                "Description": "This API provides a schedule for the team's games based on the team information.",
                "input_params": {
                    "team_info": {
                        "description": "the detailed information of the football team",
                        "type": "String"
                    }
                },
                "output_params": {
                    "game_schedule": {
                        "description": "the schedule for the team's games",
                        "type": "String"
                    }
                },
                "format": "GameSchedule(team_info) -> game_schedule"
            },
            {
                "name": "TicketPrice",
                "Description": "This API calculates the ticket price based on the game schedule.",
                "input_params": {
                    "game_schedule": {
                        "description": "the schedule for the team's games",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ticket_price": {
                        "description": "the price for watching the team's games",
                        "type": "Float"
                    }
                },
                "format": "TicketPrice(game_schedule) -> ticket_price"
            }
        ],
        "Query": "What would be the price for watching Manchester United's games?",
        "Label": "TicketPrice(game_schedule=GameSchedule(team_info=FootballTeamInfo(team_name='Manchester United')))",
        "Index": 1137
    },
    {
        "APIs": [
            {
                "name": "GetMovieRatings",
                "Description": "This API returns the rating information of a specific movie.",
                "input_params": {
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "rating_info": {
                        "description": "the rating information of the movie",
                        "type": "String"
                    }
                },
                "format": "GetMovieRatings(movie) -> rating_info"
            },
            {
                "name": "FindMovieGenre",
                "Description": "This API finds out the genre of a specific movie.",
                "input_params": {
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovieGenre(movie) -> genre"
            },
            {
                "name": "SuggestSimilarMovies",
                "Description": "This API suggests similar movies based on the genre and rating.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "rating": {
                        "description": "the rating information of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movies_list": {
                        "description": "a list of similar movies",
                        "type": "List"
                    }
                },
                "format": "SuggestSimilarMovies(genre, rating) -> movies_list"
            }
        ],
        "Query": "I just watched \"The Dark Knight\" and loved it. Can you suggest similar movies?",
        "Label": "SuggestSimilarMovies(genre=FindMovieGenre(movie='The Dark Knight'), rating=GetMovieRatings(movie='The Dark Knight'))",
        "Index": 1138
    },
    {
        "APIs": [
            {
                "name": "BookDetails",
                "Description": "This API returns details about a certain book.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bookInfo": {
                        "description": "the information about the book",
                        "type": "Object"
                    }
                },
                "format": "BookDetails(title) -> bookInfo"
            },
            {
                "name": "AuthorInformation",
                "Description": "This API provides information about an author.",
                "input_params": {
                    "author": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "authorBio": {
                        "description": "the information about the author",
                        "type": "Object"
                    }
                },
                "format": "AuthorInformation(author) -> authorBio"
            },
            {
                "name": "ReadingSuggestion",
                "Description": "This API generates a reading plan based on book and author information.",
                "input_params": {
                    "bookInfo": {
                        "description": "the information about the book",
                        "type": "Object"
                    },
                    "authorBio": {
                        "description": "the information about the author",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "readingPlan": {
                        "description": "the generated reading plan",
                        "type": "Object"
                    }
                },
                "format": "ReadingSuggestion(bookInfo, authorBio) -> readingPlan"
            }
        ],
        "Query": "Can you suggest me a reading plan for the book '1984' by George Orwell?",
        "Label": "ReadingSuggestion(bookInfo=BookDetails(title='1984'), authorBio=AuthorInformation(author='George Orwell'))",
        "Index": 1139
    },
    {
        "APIs": [
            {
                "name": "HotelReservation",
                "Description": "This API returns information about hotel reservations in a certain city on a particular date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the hotel reservation",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotelInfo": {
                        "description": "information about hotel reservations",
                        "type": "String"
                    }
                },
                "format": "HotelReservation(city, date) -> hotelInfo"
            },
            {
                "name": "EventSuggestions",
                "Description": "This API provides suggestions for events happening in a certain city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the event suggestions",
                        "type": "String"
                    }
                },
                "output_params": {
                    "eventDetails": {
                        "description": "suggestions for events happening in the city",
                        "type": "String"
                    }
                },
                "format": "EventSuggestions(city, date) -> eventDetails"
            },
            {
                "name": "RestaurantRecommendation",
                "Description": "This API suggests restaurants based on the city, hotel, and event locations.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "hotelInfo": {
                        "description": "information about hotel reservations",
                        "type": "String"
                    },
                    "eventDetails": {
                        "description": "suggestions for events happening in the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantSuggestion": {
                        "description": "suggested restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommendation(city, hotelInfo, eventDetails) -> restaurantSuggestion"
            }
        ],
        "Query": "I'm going to London next week. I have a hotel reservation at the Hilton and I'm attending a concert at the O2 arena. Can you suggest a restaurant for me?",
        "Label": "RestaurantRecommendation(city='London', hotelInfo=HotelReservation(city='London', date='next week'), eventDetails=EventSuggestions(city='London', date='next week'))",
        "Index": 1140
    },
    {
        "APIs": [
            {
                "name": "FindFlight",
                "Description": "This API finds the available flights from an origin to a destination.",
                "input_params": {
                    "origin": {
                        "description": "the origin location",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flightDetails": {
                        "description": "the details of the available flights",
                        "type": "List"
                    }
                },
                "format": "FindFlight(origin, destination) -> flightDetails"
            },
            {
                "name": "CalculateDistance",
                "Description": "This API calculates the distance between two locations.",
                "input_params": {
                    "origin": {
                        "description": "the origin location",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "the distance between the two locations",
                        "type": "Float"
                    }
                },
                "format": "CalculateDistance(origin, destination) -> distance"
            },
            {
                "name": "FuelConsumption",
                "Description": "This API estimates the fuel amount consumed by a certain flight on a certain distance.",
                "input_params": {
                    "flightID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "distance": {
                        "description": "the distance of the flight",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "fuelAmount": {
                        "description": "the estimated fuel amount consumed by the flight",
                        "type": "Float"
                    }
                },
                "format": "FuelConsumption(flightID, distance) -> fuelAmount"
            }
        ],
        "Query": "How much fuel will a flight from London to New York consume?",
        "Label": "FuelConsumption(flightID=FindFlight(origin='London', destination='New York'), distance=CalculateDistance(origin='London', destination='New York'))",
        "Index": 1141
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API retrieves the weather forecast for a certain city and date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather"
            },
            {
                "name": "ClothingRecommendation",
                "Description": "This API recommends clothing based on the weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing": {
                        "description": "the recommended clothing",
                        "type": "String"
                    }
                },
                "format": "ClothingRecommendation(weather) -> clothing"
            },
            {
                "name": "OutfitStoreSearch",
                "Description": "This API searches for stores that sell the recommended clothing in the city.",
                "input_params": {
                    "clothing": {
                        "description": "the recommended clothing",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store": {
                        "description": "the stores that sell the recommended clothing",
                        "type": "String"
                    }
                },
                "format": "OutfitStoreSearch(clothing, city) -> store"
            }
        ],
        "Query": "I want to know where I can buy the recommended clothing for the weather in Paris on February 14th.",
        "Label": "OutfitStoreSearch(clothing=ClothingRecommendation(weather=WeatherForecast(city='Paris', date='February 14th')), city='Paris')",
        "Index": 1142
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API retrieves the current weather conditions for a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the current weather conditions",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "CityPopulation",
                "Description": "This API retrieves the population of a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityPopulation(city) -> population"
            },
            {
                "name": "WeatherImpactOnPopulation",
                "Description": "This API estimates the impact of weather conditions on the population.",
                "input_params": {
                    "weather": {
                        "description": "the current weather conditions",
                        "type": "String"
                    },
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "impact": {
                        "description": "the estimated impact of weather conditions on the population",
                        "type": "String"
                    }
                },
                "format": "WeatherImpactOnPopulation(weather, population) -> impact"
            }
        ],
        "Query": "What could be the impact of the current weather on the population in Los Angeles?",
        "Label": "WeatherImpactOnPopulation(weather=GetWeather(city='Los Angeles'), population=CityPopulation(city='Los Angeles'))",
        "Index": 1143
    },
    {
        "APIs": [
            {
                "name": "MovieRecommender",
                "Description": "This API recommends a movie based on a specific genre.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie": {
                        "description": "the recommended movie",
                        "type": "String"
                    }
                },
                "format": "MovieRecommender(genre) -> movie"
            },
            {
                "name": "RestaurantRecommendation",
                "Description": "This API recommends a restaurant in a certain city that serves specific cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine served by the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommendation(city, cuisine) -> restaurant"
            },
            {
                "name": "ReservationMaker",
                "Description": "This API makes a reservation at a specific restaurant for a certain time.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time of the reservation",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reservation": {
                        "description": "the reservation details",
                        "type": "String"
                    }
                },
                "format": "ReservationMaker(restaurant_name, time) -> reservation"
            }
        ],
        "Query": "Could you recommend a horror movie for me? And find a Chinese restaurant in Los Angeles? Also, make a reservation for 8 pm.",
        "Label": "ReservationMaker(restaurant_name=RestaurantRecommendation(city='Los Angeles', cuisine='Chinese'), time='8 pm')",
        "Index": 1144
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API provides the weather forecast for a specific city and date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast for the specified city and date",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather"
            },
            {
                "name": "RestaurantRecommendation",
                "Description": "This API recommends restaurants in a specific city with a specific cuisine.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the recommended restaurant in the specified city with the specified cuisine",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommendation(city, cuisine) -> restaurant"
            },
            {
                "name": "TableBooking",
                "Description": "This API books a table for a specific number of persons at the specified restaurant, date, and time.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "number_of_persons": {
                        "description": "the number of persons for table booking",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date for table booking",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time for table booking",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking_confirmation": {
                        "description": "the confirmation of the table booking",
                        "type": "String"
                    }
                },
                "format": "TableBooking(restaurant_name, number_of_persons, date, time) -> booking_confirmation"
            }
        ],
        "Query": "Can you tell me the weather in Paris on 25th December and suggest an Italian restaurant where I can book a table for four at 7 pm?",
        "Label": "TableBooking(restaurant_name=RestaurantRecommendation(city='Paris', cuisine='Italian'), number_of_persons='4', date='25th December', time='7 pm')",
        "Index": 1145
    },
    {
        "APIs": [
            {
                "name": "MovieDetails",
                "Description": "This API is to get the movie ID using the movie title.",
                "input_params": {
                    "movie_title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieDetails(movie_title) -> movie_id"
            },
            {
                "name": "MovieReviews",
                "Description": "This API is to gather reviews of a movie using the movie ID.",
                "input_params": {
                    "movie_id": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "reviews": {
                        "description": "the reviews of the movie",
                        "type": "String"
                    }
                },
                "format": "MovieReviews(movie_id) -> reviews"
            },
            {
                "name": "SentimentAnalysis",
                "Description": "This API is to perform sentiment analysis on a set of reviews to determine public opinion about a movie.",
                "input_params": {
                    "reviews": {
                        "description": "the set of reviews",
                        "type": "String"
                    }
                },
                "output_params": {
                    "sentiment": {
                        "description": "the public sentiment about the movie",
                        "type": "String"
                    }
                },
                "format": "SentimentAnalysis(reviews) -> sentiment"
            }
        ],
        "Query": "What is the public sentiment about the movie 'Inception'?",
        "Label": "SentimentAnalysis(reviews=MovieReviews(movie_id=MovieDetails(movie_title='Inception')))",
        "Index": 1146
    },
    {
        "APIs": [
            {
                "name": "BookName",
                "Description": "This API is used to get the title of the book given its ISBN.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "format": "BookName(ISBN) -> title"
            },
            {
                "name": "AuthorName",
                "Description": "This API is used to fetch the name of the author of a book given its title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "format": "AuthorName(title) -> author"
            },
            {
                "name": "Publisher",
                "Description": "This API is used to get the publisher of the book given its author.",
                "input_params": {
                    "author": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "publisher": {
                        "description": "the publisher of the book",
                        "type": "String"
                    }
                },
                "format": "Publisher(author) -> publisher"
            }
        ],
        "Query": "Can you tell me the publisher of the book with ISBN 978-3-16-148410-0?",
        "Label": "Publisher(author=AuthorName(title=BookName(ISBN='978-3-16-148410-0')))",
        "Index": 1147
    },
    {
        "APIs": [
            {
                "name": "TrainInfo",
                "Description": "This API is to query the location information of the train station.",
                "input_params": {
                    "train_name": {
                        "description": "the name of the train",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "train_station": {
                        "description": "the location information of the train station",
                        "type": "String"
                    }
                },
                "format": "TrainInfo(train_name, city) -> train_station"
            },
            {
                "name": "WeatherInfo",
                "Description": "This API is to find out the current weather conditions of the city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_conditions": {
                        "description": "the current weather conditions",
                        "type": "String"
                    }
                },
                "format": "WeatherInfo(city) -> weather_conditions"
            },
            {
                "name": "OutfitSuggestion",
                "Description": "This API suggests what outfit to wear based on the weather conditions.",
                "input_params": {
                    "weather_conditions": {
                        "description": "the current weather conditions",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the suggested outfit",
                        "type": "String"
                    }
                },
                "format": "OutfitSuggestion(weather_conditions) -> outfit"
            }
        ],
        "Query": "Can you tell me what I should wear today if I'm going to take the Eurostar from London?",
        "Label": "OutfitSuggestion(weather_conditions=WeatherInfo(city=\"London\"))",
        "Index": 1148
    },
    {
        "APIs": [
            {
                "name": "StoreFinder",
                "Description": "This API is to find the nearest store of a given type located in the given zip code.",
                "input_params": {
                    "zip_code": {
                        "description": "the zip code of the location",
                        "type": "String"
                    },
                    "store_type": {
                        "description": "the type of the store",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_location": {
                        "description": "the location of the store",
                        "type": "String"
                    }
                },
                "format": "StoreFinder(zip_code, store_type) -> store_location"
            },
            {
                "name": "StoreRating",
                "Description": "This API is to find the customer rating of a particular store.",
                "input_params": {
                    "store_location": {
                        "description": "the location of the store",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_rating": {
                        "description": "the rating of the store",
                        "type": "Float"
                    }
                },
                "format": "StoreRating(store_location) -> store_rating"
            },
            {
                "name": "ProductPriceQuery",
                "Description": "This API is to find the price of a specific product in the given store.",
                "input_params": {
                    "store_location": {
                        "description": "the location of the store",
                        "type": "String"
                    },
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_price": {
                        "description": "the price of the product",
                        "type": "Float"
                    }
                },
                "format": "ProductPriceQuery(store_location, product_name) -> product_price"
            }
        ],
        "Query": "What is the price of an iPhone 12 at the highest rated Apple Store in 90001 zip code?",
        "Label": "ProductPriceQuery(store_location=StoreFinder(zip_code=90001, store_type='Apple Store'), product_name='iPhone 12')",
        "Index": 1149
    },
    {
        "APIs": [
            {
                "name": "ConnectivityCheck",
                "Description": "This API checks the internet connectivity status between the origin and destination.",
                "input_params": {
                    "origin": {
                        "description": "the origin location",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "connection_status": {
                        "description": "the status of the internet connectivity",
                        "type": "String"
                    }
                },
                "format": "ConnectivityCheck(origin, destination) -> connection_status"
            },
            {
                "name": "SpeedTest",
                "Description": "This API performs a speed test for the connection and provides the details.",
                "input_params": {
                    "connection_status": {
                        "description": "the status of the internet connectivity",
                        "type": "String"
                    }
                },
                "output_params": {
                    "speed_details": {
                        "description": "the details of the internet connection speed",
                        "type": "String"
                    }
                },
                "format": "SpeedTest(connection_status) -> speed_details"
            },
            {
                "name": "FileTransfer",
                "Description": "This API calculates the time required to transfer a file of a certain size over the input internet connection speed.",
                "input_params": {
                    "speed_details": {
                        "description": "the details of the internet connection speed",
                        "type": "String"
                    },
                    "file_size": {
                        "description": "the size of the file to be transferred",
                        "type": "String"
                    }
                },
                "output_params": {
                    "transfer_time": {
                        "description": "the time required to transfer the file",
                        "type": "String"
                    }
                },
                "format": "FileTransfer(speed_details, file_size) -> transfer_time"
            }
        ],
        "Query": "How long will it take to transfer a 5GB file from Boston to London?",
        "Label": "FileTransfer(speed_details=SpeedTest(connection_status=ConnectivityCheck(origin='Boston', destination='London')), file_size='5GB')",
        "Index": 1150
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API gives the weather forecast for a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_condition": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city) -> weather_condition"
            },
            {
                "name": "ActivitySuggestion",
                "Description": "This API suggests suitable activities based on the weather condition.",
                "input_params": {
                    "weather_condition": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity_type": {
                        "description": "the suggested activity type",
                        "type": "String"
                    }
                },
                "format": "ActivitySuggestion(weather_condition) -> activity_type"
            },
            {
                "name": "PlacesRecommender",
                "Description": "This API recommends places to do the suggested activity in the city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "activity_type": {
                        "description": "the suggested activity type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "place_name": {
                        "description": "the recommended place name",
                        "type": "String"
                    }
                },
                "format": "PlacesRecommender(city, activity_type) -> place_name"
            }
        ],
        "Query": "What are some good places to visit for activities suitable for the current weather in London?",
        "Label": "PlacesRecommender(city='London', activity_type=ActivitySuggestion(weather_condition=WeatherForecast(city='London')))",
        "Index": 1151
    },
    {
        "APIs": [
            {
                "name": "WeatherForecaster",
                "Description": "This API provides the weather condition of a city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_condition": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "format": "WeatherForecaster(city, date) -> weather_condition"
            },
            {
                "name": "OutfitRecommender",
                "Description": "This API suggests an appropriate outfit based on the weather condition.",
                "input_params": {
                    "weather_condition": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "OutfitRecommender(weather_condition) -> outfit"
            },
            {
                "name": "ShoppingAssistant",
                "Description": "This API locates the nearest store where the recommended outfit can be purchased.",
                "input_params": {
                    "outfit": {
                        "description": "the recommended outfit",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_address": {
                        "description": "the address of the nearest store",
                        "type": "String"
                    }
                },
                "format": "ShoppingAssistant(outfit, city) -> store_address"
            }
        ],
        "Query": "Where can I buy a suitable outfit for a trip in Miami next Monday?",
        "Label": "ShoppingAssistant(outfit=OutfitRecommender(weather_condition=WeatherForecaster(city='Miami', date='next Monday')), city='Miami')",
        "Index": 1152
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API provides weather forecast for a city on a certain date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast for the city on the specified date",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather"
            },
            {
                "name": "CarRentalAvailability",
                "Description": "This API provides information about the availability of rental cars in a city on a certain date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for car rental availability",
                        "type": "String"
                    }
                },
                "output_params": {
                    "available_cars": {
                        "description": "the information about the availability of rental cars in the city on the specified date",
                        "type": "String"
                    }
                },
                "format": "CarRentalAvailability(city, date) -> available_cars"
            },
            {
                "name": "ConferenceDetails",
                "Description": "This API provides information about conferences in a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "conferences": {
                        "description": "the information about conferences in the city",
                        "type": "String"
                    }
                },
                "format": "ConferenceDetails(city) -> conferences"
            },
            {
                "name": "BusinessTripPlanner",
                "Description": "This API helps in planning your business trip by combining weather, car rental, and conference information.",
                "input_params": {
                    "weather": {
                        "description": "the weather forecast for the city on the specified date",
                        "type": "String"
                    },
                    "available_cars": {
                        "description": "the information about the availability of rental cars in the city on the specified date",
                        "type": "String"
                    },
                    "conferences": {
                        "description": "the information about conferences in the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "business_plan": {
                        "description": "the business trip plan combining weather, car rental, and conference information",
                        "type": "String"
                    }
                },
                "format": "BusinessTripPlanner(weather, available_cars, conferences) -> business_plan"
            }
        ],
        "Query": "Could you help me to plan a business trip to San Francisco in two weeks?",
        "Label": "BusinessTripPlanner(weather=WeatherForecast(city='San Francisco', date='in two weeks'), available_cars=CarRentalAvailability(city='San Francisco', date='in two weeks'), conferences=ConferenceDetails(city='San Francisco'))",
        "Index": 1153
    },
    {
        "APIs": [
            {
                "name": "GetWeatherForecast",
                "Description": "This API provides weather forecast of a city on a certain date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the weather forecast for the city on the specified date",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather_forecast"
            },
            {
                "name": "OutdoorActivities",
                "Description": "This API provides information about possible outdoor activities in a city based on the weather forecast.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "weather_forecast": {
                        "description": "the weather forecast for the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activities": {
                        "description": "the possible outdoor activities in the city based on the weather forecast",
                        "type": "String"
                    }
                },
                "format": "OutdoorActivities(city, weather_forecast) -> activities"
            },
            {
                "name": "RestaurantSuggestion",
                "Description": "This API provides suggestions for restaurants based on food preferences in a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "food_preference": {
                        "description": "the food preference",
                        "type": "String"
                    }
                },
                "output_params": {
                    "suggested_restaurant": {
                        "description": "the suggested restaurant based on food preferences in the city",
                        "type": "String"
                    }
                },
                "format": "RestaurantSuggestion(city, food_preference) -> suggested_restaurant"
            },
            {
                "name": "TripPlanner",
                "Description": "This API helps in planning your trip by combining weather forecast, outdoor activities and restaurant suggestions.",
                "input_params": {
                    "weather_forecast": {
                        "description": "the weather forecast for the city",
                        "type": "String"
                    },
                    "activities": {
                        "description": "the possible outdoor activities in the city based on the weather forecast",
                        "type": "String"
                    },
                    "suggested_restaurant": {
                        "description": "the suggested restaurant based on food preferences in the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "trip_plan": {
                        "description": "the trip plan combining weather forecast, outdoor activities and restaurant suggestions",
                        "type": "String"
                    }
                },
                "format": "TripPlanner(weather_forecast, activities, suggested_restaurant) -> trip_plan"
            }
        ],
        "Query": "Could you help me to plan a trip to Los Angeles tomorrow considering I am a vegetarian?",
        "Label": "TripPlanner(weather_forecast=GetWeatherForecast(city='Los Angeles', date='tomorrow'), activities=OutdoorActivities(city='Los Angeles', weather_forecast=GetWeatherForecast(city='Los Angeles', date='tomorrow')), suggested_restaurant=RestaurantSuggestion(city='Los Angeles', food_preference='vegetarian'))",
        "Index": 1154
    },
    {
        "APIs": [
            {
                "name": "FindBook",
                "Description": "This API is used to find a book using the title of the book.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "FindBook(title) -> book_id"
            },
            {
                "name": "GetAuthor",
                "Description": "This API is used to get the author name of a specific book.",
                "input_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "format": "GetAuthor(book_id) -> author_name"
            },
            {
                "name": "CheckAvailability",
                "Description": "This API checks if there are any books available by a specific author at a given library.",
                "input_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    },
                    "library_name": {
                        "description": "the name of the library",
                        "type": "String"
                    }
                },
                "output_params": {
                    "availability_status": {
                        "description": "the availability status of the book",
                        "type": "String"
                    }
                },
                "format": "CheckAvailability(author_name, library_name) -> availability_status"
            }
        ],
        "Query": "I am searching for the book 'To Kill a Mockingbird' and want to know if it's available in the 'Central Library' by the same author.",
        "Label": "CheckAvailability(author_name=GetAuthor(book_id=FindBook(title='To Kill a Mockingbird')), library_name='Central Library')",
        "Index": 1155
    },
    {
        "APIs": [
            {
                "name": "GetFlightDetails",
                "Description": "This API is used to get flight details to a specific destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "GetFlightDetails(destination) -> flight_id"
            },
            {
                "name": "CheckWeather",
                "Description": "This API is used to check the current weather of a specific destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination to check the weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the current weather status",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(destination) -> weather_status"
            },
            {
                "name": "BookFlight",
                "Description": "This API books a flight if the weather at the destination is good.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "weather_status": {
                        "description": "the current weather status",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the flight booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_id, weather_status) -> booking_status"
            }
        ],
        "Query": "I want to book a flight to Paris and I also want to know the current weather there.",
        "Label": "BookFlight(flight_id=GetFlightDetails(destination='Paris'), weather_status=CheckWeather(destination='Paris'))",
        "Index": 1156
    },
    {
        "APIs": [
            {
                "name": "CheckWeather",
                "Description": "This API is used to check the current weather in a given city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the current weather status",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(city_name) -> weather_status"
            },
            {
                "name": "SearchFlight",
                "Description": "This API is used to search for flights given the departure and destination cities.",
                "input_params": {
                    "departure_city": {
                        "description": "the name of the departure city",
                        "type": "String"
                    },
                    "destination_city": {
                        "description": "the name of the destination city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_options": {
                        "description": "the available flight options",
                        "type": "List"
                    }
                },
                "format": "SearchFlight(departure_city, destination_city) -> flight_options"
            },
            {
                "name": "BookFlight",
                "Description": "This API is used to book a flight given its id.",
                "input_params": {
                    "flight_id": {
                        "description": "the id of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_id) -> booking_status"
            },
            {
                "name": "GetFlightID",
                "Description": "This API returns the flight id considering the weather status.",
                "input_params": {
                    "flight_options": {
                        "description": "the available flight options",
                        "type": "List"
                    },
                    "weather_status": {
                        "description": "the current weather status",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the id of the flight",
                        "type": "String"
                    }
                },
                "format": "GetFlightID(flight_options, weather_status) -> flight_id"
            }
        ],
        "Query": "I want to check the weather in London and then book a flight from New York to London",
        "Label": "BookFlight(flight_id=GetFlightID(flight_options=SearchFlight(departure_city='New York', destination_city='London'), weather_status=CheckWeather(city_name='London')))",
        "Index": 1157
    },
    {
        "APIs": [
            {
                "name": "SearchFare",
                "Description": "This API is used to search for the fare between source and destination on a particular date.",
                "input_params": {
                    "src": {
                        "description": "the source location",
                        "type": "String"
                    },
                    "dest": {
                        "description": "the destination location",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of travel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "fare_id": {
                        "description": "the ID of the fare",
                        "type": "Integer"
                    }
                },
                "format": "SearchFare(src, dest, date) -> fare_id"
            },
            {
                "name": "CheckDiscount",
                "Description": "This API is used to check the discount available on a particular fare using a coupon.",
                "input_params": {
                    "coupon": {
                        "description": "the coupon code",
                        "type": "String"
                    },
                    "fare_id": {
                        "description": "the ID of the fare",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "discount_amount": {
                        "description": "the amount of discount",
                        "type": "Float"
                    }
                },
                "format": "CheckDiscount(coupon, fare_id) -> discount_amount"
            },
            {
                "name": "CalculateFinalFare",
                "Description": "This API calculates the final fare after applying the discount.",
                "input_params": {
                    "fare_id": {
                        "description": "the ID of the fare",
                        "type": "Integer"
                    },
                    "discount_amount": {
                        "description": "the amount of discount",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "final_fare": {
                        "description": "the final fare after applying the discount",
                        "type": "Float"
                    }
                },
                "format": "CalculateFinalFare(fare_id, discount_amount) -> final_fare"
            }
        ],
        "Query": "I am planning to travel from London to Paris on 1st May. I have a coupon \"TRAVEL100\" and I want to calculate the final fare after the discount.",
        "Label": "CalculateFinalFare(fare_id=SearchFare(src='London', dest='Paris', date='1st May'), discount_amount=CheckDiscount(coupon='TRAVEL100', fare_id=SearchFare(src='London', dest='Paris', date='1st May')))",
        "Index": 1158
    },
    {
        "APIs": [
            {
                "name": "SearchProduct",
                "Description": "This API is to search for a product based on its ID.",
                "input_params": {
                    "productId": {
                        "description": "the ID of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product details": {
                        "description": "the details of the product",
                        "type": "Object"
                    }
                },
                "format": "SearchProduct(productId) -> product details"
            },
            {
                "name": "GetWeather",
                "Description": "This API is to fetch the weather forecast for a particular city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather forecast": {
                        "description": "the forecast of the weather",
                        "type": "Object"
                    }
                },
                "format": "GetWeather(city) -> weather forecast"
            },
            {
                "name": "GetLocation",
                "Description": "This API is to fetch the location where the product is available.",
                "input_params": {
                    "product": {
                        "description": "the product details",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location where the product is available",
                        "type": "String"
                    }
                },
                "format": "GetLocation(product) -> location"
            }
        ],
        "Query": "I want to buy a jacket with product id 'ABC123'. Can you tell me if the weather at the location where the product is available is suitable for wearing a jacket?",
        "Label": "GetWeather(city=GetLocation(product=SearchProduct(productId='ABC123')))",
        "Index": 1159
    },
    {
        "APIs": [
            {
                "name": "CheckWeather",
                "Description": "This API is to check the weather forecast for a specific location on a specific date.",
                "input_params": {
                    "location": {
                        "description": "the location to check the weather",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date to check the weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the forecast of the weather",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(location, date) -> weather_forecast"
            },
            {
                "name": "GetOutdoorActivity",
                "Description": "This API is to suggest an outdoor activity based on the weather forecast.",
                "input_params": {
                    "weather_forecast": {
                        "description": "the forecast of the weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity": {
                        "description": "the suggested outdoor activity",
                        "type": "String"
                    }
                },
                "format": "GetOutdoorActivity(weather_forecast) -> activity"
            },
            {
                "name": "BookActivity",
                "Description": "This API is to book an activity.",
                "input_params": {
                    "activity": {
                        "description": "the activity to book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_confirmation": {
                        "description": "the confirmation of the booking",
                        "type": "String"
                    }
                },
                "format": "BookActivity(activity) -> booking_confirmation"
            }
        ],
        "Query": "I want to do something fun outside in San Francisco this Saturday.",
        "Label": "BookActivity(activity=GetOutdoorActivity(weather_forecast=CheckWeather(location='San Francisco', date='this Saturday')))",
        "Index": 1160
    },
    {
        "APIs": [
            {
                "name": "IdentifyBook",
                "Description": "This API is to find the book details when the user specifies a book title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_details": {
                        "description": "the details of the book",
                        "type": "Object"
                    }
                },
                "format": "IdentifyBook(title) -> book_details"
            },
            {
                "name": "LocateLibrary",
                "Description": "This API is used to locate the library that has a specific book in a certain city.",
                "input_params": {
                    "city": {
                        "description": "the city where the library is located",
                        "type": "String"
                    },
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "library_location": {
                        "description": "the location of the library",
                        "type": "String"
                    }
                },
                "format": "LocateLibrary(city, book_title) -> library_location"
            },
            {
                "name": "ReserveBook",
                "Description": "This API is to reserve a book at a specific library.",
                "input_params": {
                    "library_location": {
                        "description": "the location of the library",
                        "type": "String"
                    },
                    "book_details": {
                        "description": "the details of the book",
                        "type": "Object"
                    },
                    "date": {
                        "description": "the date of the reservation",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "reservation_confirmation": {
                        "description": "the confirmation of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveBook(library_location, book_details, date) -> reservation_confirmation"
            }
        ],
        "Query": "I want to reserve the book 'To Kill a Mockingbird' in the Boston library for next Wednesday.",
        "Label": "ReserveBook(library_location=LocateLibrary(city='Boston', book_title='To Kill a Mockingbird'), book_details=IdentifyBook(title='To Kill a Mockingbird'), date='next Wednesday')",
        "Index": 1161
    },
    {
        "APIs": [
            {
                "name": "FindBook",
                "Description": "This API is to find the book id when the user specifies a book title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the id of the book",
                        "type": "Integer"
                    }
                },
                "format": "FindBook(title) -> book_id"
            },
            {
                "name": "BookStore",
                "Description": "This API checks the availability of the book in the store given a book id.",
                "input_params": {
                    "book_id": {
                        "description": "the id of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "availability": {
                        "description": "the availability of the book",
                        "type": "String"
                    }
                },
                "format": "BookStore(book_id) -> availability"
            },
            {
                "name": "BuyBook",
                "Description": "This API is to buy the book given the book id.",
                "input_params": {
                    "book_id": {
                        "description": "the id of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase confirmation": {
                        "description": "the confirmation of the purchase",
                        "type": "String"
                    }
                },
                "format": "BuyBook(book_id) -> purchase confirmation"
            }
        ],
        "Query": "I want to buy 'The Alchemist' from the bookstore.",
        "Label": "BuyBook(book_id=FindBook(title='The Alchemist'))",
        "Index": 1162
    },
    {
        "APIs": [
            {
                "name": "SearchFilm",
                "Description": "This API is to find the film id when the user specifies a film title.",
                "input_params": {
                    "title": {
                        "description": "the title of the film",
                        "type": "String"
                    }
                },
                "output_params": {
                    "film_id": {
                        "description": "the id of the film",
                        "type": "Integer"
                    }
                },
                "format": "SearchFilm(title) -> film_id"
            },
            {
                "name": "ShowTimes",
                "Description": "This API returns the available show times for a specific film on a specific date.",
                "input_params": {
                    "film_id": {
                        "description": "the id of the film",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the show",
                        "type": "String"
                    }
                },
                "output_params": {
                    "show_times": {
                        "description": "the available show times",
                        "type": "List"
                    }
                },
                "format": "ShowTimes(film_id, date) -> show_times"
            },
            {
                "name": "BookMovie",
                "Description": "This API is to book movie tickets for a specific film, date and show time.",
                "input_params": {
                    "film_id": {
                        "description": "the id of the film",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the show",
                        "type": "String"
                    },
                    "show_time": {
                        "description": "the show time",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking confirmation": {
                        "description": "the confirmation of the booking",
                        "type": "String"
                    }
                },
                "format": "BookMovie(film_id, date, show_time) -> booking confirmation"
            }
        ],
        "Query": "I want to watch 'Inception' on Friday night.",
        "Label": "BookMovie(film_id=SearchFilm(title='Inception'), date='Friday', show_time='night')",
        "Index": 1163
    },
    {
        "APIs": [
            {
                "name": "GetBookISBN",
                "Description": "This API retrieves the ISBN of a specific book title.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "format": "GetBookISBN(book_title) -> ISBN"
            },
            {
                "name": "BuyBook",
                "Description": "This API orders a book by its ISBN in a specific quantity.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity of books to order",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order confirmation": {
                        "description": "the confirmation of the order",
                        "type": "String"
                    }
                },
                "format": "BuyBook(ISBN, quantity) -> order confirmation"
            },
            {
                "name": "GetAvailability",
                "Description": "This API checks the availability of a book by its ISBN.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "availability": {
                        "description": "the availability of the book",
                        "type": "String"
                    }
                },
                "format": "GetAvailability(ISBN) -> availability"
            }
        ],
        "Query": "I need to order 5 copies of \"Harry Potter and the Chamber of Secrets\".",
        "Label": "BuyBook(ISBN=GetBookISBN(book_title='Harry Potter and the Chamber of Secrets'), quantity=5)",
        "Index": 1164
    },
    {
        "APIs": [
            {
                "name": "FetchStockData",
                "Description": "This API is to retrieve real-time stock data for a given stock symbol.",
                "input_params": {
                    "stock_symbol": {
                        "description": "the symbol of the stock",
                        "type": "String"
                    }
                },
                "output_params": {
                    "stock_data": {
                        "description": "the real-time stock data",
                        "type": "Object"
                    }
                },
                "format": "FetchStockData(stock_symbol) -> stock_data"
            },
            {
                "name": "BasicDataAnalysis",
                "Description": "This API performs a basic data analysis on the input stock data.",
                "input_params": {
                    "stock_data": {
                        "description": "the real-time stock data",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "analyzed_data": {
                        "description": "the analyzed stock data",
                        "type": "Object"
                    }
                },
                "format": "BasicDataAnalysis(stock_data) -> analyzed_data"
            },
            {
                "name": "GenerateReport",
                "Description": "This API generates a stock analysis report based on the analyzed data and a specific template.",
                "input_params": {
                    "analyzed_data": {
                        "description": "the analyzed stock data",
                        "type": "Object"
                    },
                    "template": {
                        "description": "the specific template for the report",
                        "type": "String"
                    }
                },
                "output_params": {
                    "report": {
                        "description": "the generated stock analysis report",
                        "type": "Object"
                    }
                },
                "format": "GenerateReport(analyzed_data, template) -> report"
            }
        ],
        "Query": "I want to analyze the stock data of 'AAPL' and generate a report with the 'basic_analysis' template.",
        "Label": "GenerateReport(analyzed_data=BasicDataAnalysis(stock_data=FetchStockData(stock_symbol='AAPL')), template='basic_analysis')",
        "Index": 1165
    },
    {
        "APIs": [
            {
                "name": "FetchProductDetails",
                "Description": "This API fetches the product details using product id.",
                "input_params": {
                    "product_id": {
                        "description": "the id of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_info": {
                        "description": "the details of the product",
                        "type": "Object"
                    }
                },
                "format": "FetchProductDetails(product_id) -> product_info"
            },
            {
                "name": "CreateShoppingCart",
                "Description": "This API creates a shopping cart with the provided user id and product info.",
                "input_params": {
                    "user_id": {
                        "description": "the id of the user",
                        "type": "String"
                    },
                    "product_info": {
                        "description": "the details of the product",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "shopping_cart_id": {
                        "description": "the id of the shopping cart",
                        "type": "String"
                    }
                },
                "format": "CreateShoppingCart(user_id, product_info) -> shopping_cart_id"
            },
            {
                "name": "CheckoutShoppingCart",
                "Description": "This API checks out the shopping cart and completes the purchase.",
                "input_params": {
                    "shopping_cart_id": {
                        "description": "the id of the shopping cart",
                        "type": "String"
                    }
                },
                "output_params": {
                    "checkout_status": {
                        "description": "the status of the checkout",
                        "type": "String"
                    }
                },
                "format": "CheckoutShoppingCart(shopping_cart_id) -> checkout_status"
            }
        ],
        "Query": "I want to add product with id '12345' to my shopping cart having user id '57890' and then checkout the cart.",
        "Label": "CheckoutShoppingCart(shopping_cart_id=CreateShoppingCart(user_id='57890', product_info=FetchProductDetails(product_id='12345')))",
        "Index": 1166
    },
    {
        "APIs": [
            {
                "name": "FindFlight",
                "Description": "This API is to find a flight based on the origin, destination, and date.",
                "input_params": {
                    "origin": {
                        "description": "the origin of the flight",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FindFlight(origin, destination, date) -> flight_id"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight for a passenger.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "passenger_id": {
                        "description": "the ID of the passenger",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking confirmation": {
                        "description": "the confirmation of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_id, passenger_id) -> booking confirmation"
            },
            {
                "name": "GetPassengerId",
                "Description": "This API is to get the passenger id using the name and date of birth.",
                "input_params": {
                    "name": {
                        "description": "the name of the passenger",
                        "type": "String"
                    },
                    "dob": {
                        "description": "the date of birth of the passenger",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "passenger_id": {
                        "description": "the ID of the passenger",
                        "type": "Integer"
                    }
                },
                "format": "GetPassengerId(name, dob) -> passenger_id"
            }
        ],
        "Query": "I want to book a flight from New York to London on 1st June. My name is John Doe and my date of birth is 01/01/1980.",
        "Label": "BookFlight(flight_id=FindFlight(origin='New York', destination='London', date='1st June'), passenger_id=GetPassengerId(name='John Doe', dob='01/01/1980'))",
        "Index": 1167
    },
    {
        "APIs": [
            {
                "name": "GetCityByZip",
                "Description": "This API is to get city name by given zip code.",
                "input_params": {
                    "zip_code": {
                        "description": "the zip code of the area",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "the city of the given zip code",
                        "type": "String"
                    }
                },
                "format": "GetCityByZip(zip_code) -> city"
            },
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get weather forecast of a given city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the city to get weather forecast",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date to get weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast of the city on the date",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather"
            },
            {
                "name": "GetClothingAdvice",
                "Description": "This API is to get clothing advice based on the weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather to get clothing advice",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the suggested clothes based on the weather",
                        "type": "String"
                    }
                },
                "format": "GetClothingAdvice(weather) -> outfit"
            },
            {
                "name": "GetOutfitStore",
                "Description": "This API is to get store location where you can purchase the suggested clothes.",
                "input_params": {
                    "city": {
                        "description": "the city to get store location",
                        "type": "String"
                    },
                    "outfit": {
                        "description": "the outfit to search store",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_location": {
                        "description": "the store location where you can purchase the outfit",
                        "type": "String"
                    }
                },
                "format": "GetOutfitStore(city, outfit) -> store_location"
            }
        ],
        "Query": "I'm currently in 80014 and I need to know the weather forecast for next Monday and what should I dress in? Can you tell me a place where I can purchase the suggested clothes?",
        "Label": "GetOutfitStore(city=GetCityByZip(zip_code='80014'), outfit=GetClothingAdvice(weather=GetWeatherForecast(city=GetCityByZip(zip_code='80014'), date='next Monday')))",
        "Index": 1168
    },
    {
        "APIs": [
            {
                "name": "GetCityByZip",
                "Description": "This API is to convert zip code to city.",
                "input_params": {
                    "zip_code": {
                        "description": "the zip code",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "the city corresponding to the zip code",
                        "type": "String"
                    }
                },
                "format": "GetCityByZip(zip_code) -> city"
            },
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get weather forecast for a specific city and date.",
                "input_params": {
                    "city": {
                        "description": "the city for which the weather forecast is required",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which the weather forecast is required",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast for the city on the specific date",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city,date) -> weather"
            },
            {
                "name": "GetClothingAdvice",
                "Description": "This API is to get clothing advice based on the weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather based on which the clothing advice is required",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the suggested outfit based on the weather",
                        "type": "String"
                    }
                },
                "format": "GetClothingAdvice(weather) -> outfit"
            },
            {
                "name": "GetOutfitStore",
                "Description": "This API is to get the store where the suggested clothing can be bought.",
                "input_params": {
                    "city": {
                        "description": "the city where the store is located",
                        "type": "String"
                    },
                    "outfit": {
                        "description": "the outfit for which the store needs to be found",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store": {
                        "description": "the store where the suggested clothing can be bought",
                        "type": "String"
                    }
                },
                "format": "GetOutfitStore(city,outfit) -> store"
            }
        ],
        "Query": "I'm residing at 60629 and I would like to know the weather next Wednesday and what would be the appropriate clothing? Also, where can I buy the suggested clothing?",
        "Label": "GetOutfitStore(city=GetCityByZip(zip_code='60629'), outfit=GetClothingAdvice(weather=GetWeatherForecast(city=GetCityByZip(zip_code='60629'), date='next Wednesday')))",
        "Index": 1169
    },
    {
        "APIs": [
            {
                "name": "GetCityByZip",
                "Description": "This API is to get city name by zip code.",
                "input_params": {
                    "zip_code": {
                        "description": "the zip code",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "the city of the zip code",
                        "type": "String"
                    }
                },
                "format": "GetCityByZip(zip_code) -> city"
            },
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast for a given city and date.",
                "input_params": {
                    "city": {
                        "description": "the city where to get the weather",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date when to get the weather",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather"
            },
            {
                "name": "GetClothingAdvice",
                "Description": "This API is to suggest the appropriate clothing based on the weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the suggested clothing",
                        "type": "String"
                    }
                },
                "format": "GetClothingAdvice(weather) -> outfit"
            },
            {
                "name": "GetOutfitStore",
                "Description": "This API is to find the stores selling the suggested clothing in a city.",
                "input_params": {
                    "city": {
                        "description": "the city where to find the store",
                        "type": "String"
                    },
                    "outfit": {
                        "description": "the clothing to buy",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store": {
                        "description": "the store selling the clothing",
                        "type": "String"
                    }
                },
                "format": "GetOutfitStore(city, outfit) -> store"
            }
        ],
        "Query": "I'm residing at 60629 and I would like to know the weather next Wednesday and what would be the appropriate clothing? Also, where can I buy the suggested clothing?",
        "Label": "GetOutfitStore(city=GetCityByZip(zip_code='60629'), outfit=GetClothingAdvice(weather=GetWeatherForecast(city=GetCityByZip(zip_code='60629'), date='next Wednesday')))",
        "Index": 1170
    },
    {
        "APIs": [
            {
                "name": "GetCityByZip",
                "Description": "This API returns the city corresponding to the entered zip code.",
                "input_params": {
                    "zip_code": {
                        "description": "Zip code of the area",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "Name of the city corresponding to the entered zip code",
                        "type": "String"
                    }
                },
                "format": "GetCityByZip(zip_code) -> city"
            },
            {
                "name": "GetWeatherForecast",
                "Description": "This API forecasts the weather for a specific city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "City for which to forecast the weather",
                        "type": "String"
                    },
                    "date": {
                        "description": "Date for which to forecast the weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "Weather conditions for the specified city and date",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city, date) -> weather"
            },
            {
                "name": "GetClothingAdvice",
                "Description": "This API provides clothing advice based on weather conditions.",
                "input_params": {
                    "weather": {
                        "description": "Weather conditions for a specific day",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "Clothing advice based on weather conditions",
                        "type": "String"
                    }
                },
                "format": "GetClothingAdvice(weather) -> outfit"
            },
            {
                "name": "GetOutfitStore",
                "Description": "This API suggests a store where the recommended outfit can be purchased.",
                "input_params": {
                    "city": {
                        "description": "City where the user is located",
                        "type": "String"
                    },
                    "outfit": {
                        "description": "Recommended outfit based on weather conditions",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store": {
                        "description": "Suggested store where the recommended outfit can be purchased",
                        "type": "String"
                    }
                },
                "format": "GetOutfitStore(city, outfit) -> store"
            }
        ],
        "Query": "I'm located at 02128 and I am curious about the weather next Friday and what should I wear? Could you suggest a store where I can buy the recommended outfit?",
        "Label": "GetOutfitStore(city=GetCityByZip(zip_code='02128'), outfit=GetClothingAdvice(weather=GetWeatherForecast(city=GetCityByZip(zip_code='02128'), date='next Friday')))",
        "Index": 1171
    },
    {
        "APIs": [
            {
                "name": "GetCity",
                "Description": "This API is to get the city name based on the zip code.",
                "input_params": {
                    "zipcode": {
                        "description": "the zipcode of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_name": {
                        "description": "the name of the city based on the zipcode",
                        "type": "String"
                    }
                },
                "format": "GetCity(zipcode) -> city_name"
            },
            {
                "name": "GetWeather",
                "Description": "This API is to get the current weather status of a city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the current weather status of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city_name) -> weather_status"
            },
            {
                "name": "GetClothing",
                "Description": "This API is to suggest clothing based on the weather status.",
                "input_params": {
                    "weather_status": {
                        "description": "the current weather status",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_suggestion": {
                        "description": "suggestion of clothing based on the weather status",
                        "type": "String"
                    }
                },
                "format": "GetClothing(weather_status) -> clothing_suggestion"
            }
        ],
        "Query": "I'm in the 90210 zip code area, what should I wear today?",
        "Label": "GetClothing(weather_status=GetWeather(city_name=GetCity(zipcode='90210')))",
        "Index": 1172
    },
    {
        "APIs": [
            {
                "name": "GetCity",
                "Description": "This API is to get the city name based on the zipcode.",
                "input_params": {
                    "zipcode": {
                        "description": "the zip code of the area",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "format": "GetCity(zipcode) -> city_name"
            },
            {
                "name": "GetWeather",
                "Description": "This API is to get the weather status based on the city name.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the status of the weather in the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city_name) -> weather_status"
            },
            {
                "name": "GetClothing",
                "Description": "This API is to get the clothing recommendation based on the weather status.",
                "input_params": {
                    "weather_status": {
                        "description": "the status of the weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing": {
                        "description": "the recommend clothing based on the weather status",
                        "type": "String"
                    }
                },
                "format": "GetClothing(weather_status) -> clothing"
            }
        ],
        "Query": "I'm in the 33101 zip code area, what should I wear today?",
        "Label": "GetClothing(weather_status=GetWeather(city_name=GetCity(zipcode='33101')))",
        "Index": 1173
    },
    {
        "APIs": [
            {
                "name": "GetCity",
                "Description": "This API is to convert zip code to city name.",
                "input_params": {
                    "zipcode": {
                        "description": "the zip code of the area",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "format": "GetCity(zipcode) -> city_name"
            },
            {
                "name": "GetWeather",
                "Description": "This API is to get the weather status of a specific city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the weather status of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city_name) -> weather_status"
            },
            {
                "name": "GetClothing",
                "Description": "This API is to give clothing suggestions based on weather status.",
                "input_params": {
                    "weather_status": {
                        "description": "the weather status of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_suggestion": {
                        "description": "the suggested clothing based on the weather",
                        "type": "String"
                    }
                },
                "format": "GetClothing(weather_status) -> clothing_suggestion"
            }
        ],
        "Query": "I'm in the 60601 zip code area, what should I wear today?",
        "Label": "GetClothing(weather_status=GetWeather(city_name=GetCity(zipcode='60601')))",
        "Index": 1174
    },
    {
        "APIs": [
            {
                "name": "GetCity",
                "Description": "This API is to convert zipcode to city name.",
                "input_params": {
                    "zipcode": {
                        "description": "the zipcode of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "format": "GetCity(zipcode) -> city_name"
            },
            {
                "name": "GetWeather",
                "Description": "This API is to get the weather status of a city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the weather status of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city_name) -> weather_status"
            },
            {
                "name": "GetClothing",
                "Description": "This API is to suggest clothing based on the weather status.",
                "input_params": {
                    "weather_status": {
                        "description": "the weather status of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_suggestion": {
                        "description": "suggested clothing based on weather",
                        "type": "String"
                    }
                },
                "format": "GetClothing(weather_status)-> clothing_suggestion"
            }
        ],
        "Query": "I'm in the 94101 zip code area, what should I wear today?",
        "Label": "GetClothing(weather_status=GetWeather(city_name=GetCity(zipcode='94101')))",
        "Index": 1175
    },
    {
        "APIs": [
            {
                "name": "UserEmail2ID",
                "Description": "This API is to convert user email to user ID.",
                "input_params": {
                    "user_email": {
                        "description": "the email of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmail2ID(user_email) -> user_ID"
            },
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "PurchaseItem",
                "Description": "This API is to purchase a product item.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "PurchaseItem(user_ID, product_ID, quantity) -> purchase status."
            }
        ],
        "Query": "Can you help John purchase 2 units of Samsung Galaxy S21 Ultra, his email is john@example.com.",
        "Label": "PurchaseItem(user_ID=UserEmail2ID(user_email='john@example.com'), product_ID=ProductName2ID(product_name='Samsung Galaxy S21 Ultra'), quantity=2)",
        "Index": 1176
    },
    {
        "APIs": [
            {
                "name": "UserEmail2ID",
                "Description": "This API is to convert user email to user ID.",
                "input_params": {
                    "user_email": {
                        "description": "the email of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmail2ID(user_email) -> user_ID"
            },
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "PurchaseItem",
                "Description": "This API is to make a purchase.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the number of units to be purchased",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "PurchaseItem(user_ID, product_ID, quantity) -> purchase status."
            }
        ],
        "Query": "Could you assist Jennifer in purchasing 5 units of MacBook Pro, her email is jennifer@yahoo.com.",
        "Label": "PurchaseItem(user_ID=UserEmail2ID(user_email='jennifer@yahoo.com'), product_ID=ProductName2ID(product_name='MacBook Pro'), quantity=5)",
        "Index": 1177
    },
    {
        "APIs": [
            {
                "name": "UserEmail2ID",
                "Description": "This API is to convert user email to user ID.",
                "input_params": {
                    "user_email": {
                        "description": "the email of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmail2ID(user_email) -> user_ID"
            },
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "PurchaseItem",
                "Description": "This API is to purchase a product.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the product to be purchased",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "PurchaseItem(user_ID, product_ID, quantity) -> purchase status"
            }
        ],
        "Query": "Please help Robert to buy 4 units of OnePlus 9 Pro, his email is robert@gmail.com.",
        "Label": "PurchaseItem(user_ID=UserEmail2ID(user_email='robert@gmail.com'), product_ID=ProductName2ID(product_name='OnePlus 9 Pro'), quantity=4)",
        "Index": 1178
    },
    {
        "APIs": [
            {
                "name": "UserEmail2ID",
                "Description": "This API is to convert user email to user ID.",
                "input_params": {
                    "user_email": {
                        "description": "the email of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserEmail2ID(user_email) -> user_ID"
            },
            {
                "name": "ProductName2ID",
                "Description": "This API is to convert product name to product ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "ProductName2ID(product_name) -> product_ID"
            },
            {
                "name": "PurchaseItem",
                "Description": "This API is to purchase a certain quantity of a product.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "quantity": {
                        "description": "the quantity of the product to purchase",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "PurchaseItem(user_ID, product_ID, quantity) -> purchase status"
            }
        ],
        "Query": "Can you assist Laura to purchase 1 unit of iPad Pro, her email is laura@hotmail.com.",
        "Label": "PurchaseItem(user_ID=UserEmail2ID(user_email='laura@hotmail.com'), product_ID=ProductName2ID(product_name='iPad Pro'), quantity=1)",
        "Index": 1179
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API is to find a movie based on genre and rating.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "rating": {
                        "description": "the rating of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovie(genre, rating) -> movie_name"
            },
            {
                "name": "GetMovieTimes",
                "Description": "This API is to get the showtime of a specified movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "Time"
                    }
                },
                "format": "GetMovieTimes(movie_name) -> showtime"
            },
            {
                "name": "BookMovieTickets",
                "Description": "This API is to book movie tickets.",
                "input_params": {
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookMovieTickets(showtime) -> booking status."
            }
        ],
        "Query": "I want to see a high-rated comedy movie. Please secure tickets for it.",
        "Label": "BookMovieTickets(showtime=GetMovieTimes(movie_name=FindMovie(genre='comedy', rating='high')))",
        "Index": 1180
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API is to find a movie based on genre and rating.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "rating": {
                        "description": "the rating of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_name": {
                        "description": "the name of the found movie",
                        "type": "String"
                    }
                },
                "format": "FindMovie(genre, rating) -> movie_name"
            },
            {
                "name": "GetMovieTimes",
                "Description": "This API is to get the showtimes of a specified movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "the showtime of the specified movie",
                        "type": "String"
                    }
                },
                "format": "GetMovieTimes(movie_name) -> showtime"
            },
            {
                "name": "BookMovieTickets",
                "Description": "This API is to book movie tickets for a specified showtime.",
                "input_params": {
                    "showtime": {
                        "description": "the showtime to book tickets for",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookMovieTickets(showtime) -> booking status"
            }
        ],
        "Query": "I want to see a high-rated comedy movie. Please secure tickets for it.",
        "Label": "BookMovieTickets(showtime=GetMovieTimes(movie_name=FindMovie(genre='comedy', rating='high')))",
        "Index": 1181
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API is to find a movie based on genre and rating.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "rating": {
                        "description": "the rating of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_name": {
                        "description": "the name of the movie found",
                        "type": "String"
                    }
                },
                "format": "FindMovie(genre, rating) -> movie_name"
            },
            {
                "name": "GetMovieTimes",
                "Description": "This API is to get show times for a specified movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "the show time of the movie",
                        "type": "Time"
                    }
                },
                "format": "GetMovieTimes(movie_name) -> showtime"
            },
            {
                "name": "BookMovieTickets",
                "Description": "This API is to book movie tickets.",
                "input_params": {
                    "showtime": {
                        "description": "the show time of the movie",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookMovieTickets(showtime) -> booking status"
            }
        ],
        "Query": "I would like to watch a highly rated horror movie. Can you book tickets for it?",
        "Label": "BookMovieTickets(showtime=GetMovieTimes(movie_name=FindMovie(genre='horror', rating='high')))",
        "Index": 1182
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find the most famous restaurant at a location.",
                "input_params": {
                    "location": {
                        "description": "the location where you want to find a restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the most famous restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(location) -> restaurant_name"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu from a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    }
                },
                "format": "GetMenu(restaurant_name) -> menu"
            },
            {
                "name": "CalculateCalories",
                "Description": "This API is to calculate total calories of the menu.",
                "input_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    }
                },
                "output_params": {
                    "total_calories": {
                        "description": "the total calories of the menu",
                        "type": "Integer"
                    }
                },
                "format": "CalculateCalories(menu) -> total_calories"
            }
        ],
        "Query": "I am thinking of having lunch at the most famous restaurant in New York tomorrow. Can you assist me in calculating the total calories?",
        "Label": "CalculateCalories(menu=GetMenu(restaurant_name=FindRestaurant(location='New York')))",
        "Index": 1183
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find the top restaurant at a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location where to find the top restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the top restaurant at the location",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(location) -> restaurant_name"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a specific restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    }
                },
                "format": "GetMenu(restaurant_name) -> menu"
            },
            {
                "name": "CalculateCalories",
                "Description": "This API is to calculate the overall calories of a menu.",
                "input_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    }
                },
                "output_params": {
                    "calories": {
                        "description": "the overall calories of the menu",
                        "type": "Float"
                    }
                },
                "format": "CalculateCalories(menu) -> calories"
            }
        ],
        "Query": "I want to have dinner at the top restaurant in London this weekend. Could you aid me in calculating the overall calories?",
        "Label": "CalculateCalories(menu=GetMenu(restaurant_name=FindRestaurant(location='London')))",
        "Index": 1184
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find the most renowned restaurant in a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location where the user wants to find the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the most renowned restaurant in the specific location",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(location) -> restaurant_name"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a specific restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    }
                },
                "format": "GetMenu(restaurant_name) -> menu"
            },
            {
                "name": "CalculateCalories",
                "Description": "This API is to calculate the total caloric intake from a specific menu.",
                "input_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    }
                },
                "output_params": {
                    "total_calories": {
                        "description": "the total caloric intake from the menu",
                        "type": "Integer"
                    }
                },
                "format": "CalculateCalories(menu) -> total_calories"
            }
        ],
        "Query": "I am planning to eat at the most well-known restaurant in Rome tomorrow night. Can you assist me in working out the total calories?",
        "Label": "CalculateCalories(menu=GetMenu(restaurant_name=FindRestaurant(location='Rome')))",
        "Index": 1185
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find the most prestigious restaurant in a given location.",
                "input_params": {
                    "location": {
                        "description": "the location where to find the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the most prestigious restaurant in the given location",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(location) -> restaurant_name"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu of a given restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "String"
                    }
                },
                "format": "GetMenu(restaurant_name) -> menu"
            },
            {
                "name": "CalculateCalories",
                "Description": "This API is to calculate the total calories of a given menu.",
                "input_params": {
                    "menu": {
                        "description": "the menu from a restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "total_calories": {
                        "description": "the total calories of the given menu",
                        "type": "Integer"
                    }
                },
                "format": "CalculateCalories(menu) -> total_calories"
            }
        ],
        "Query": "I intend to have a meal at the most prestigious restaurant in Sydney this Friday. Could you help me in computing the total calories?",
        "Label": "CalculateCalories(menu=GetMenu(restaurant_name=FindRestaurant(location='Sydney')))",
        "Index": 1186
    },
    {
        "APIs": [
            {
                "name": "GetCityLocation",
                "Description": "This API is to get the geographical coordinates of a city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "latitude": {
                        "description": "the latitude of the city",
                        "type": "Float"
                    },
                    "longitude": {
                        "description": "the longitude of the city",
                        "type": "Float"
                    }
                },
                "format": "GetCityLocation(city_name) -> latitude, longitude"
            },
            {
                "name": "GetWeather",
                "Description": "This API is to get the weather condition of a location based on its latitude and longitude.",
                "input_params": {
                    "latitude": {
                        "description": "the latitude of the location",
                        "type": "Float"
                    },
                    "longitude": {
                        "description": "the longitude of the location",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "weather_condition": {
                        "description": "the weather condition of the location",
                        "type": "String"
                    }
                },
                "format": "GetWeather(latitude, longitude) -> weather_condition"
            },
            {
                "name": "GetClothingAdvice",
                "Description": "This API is to get clothing advice based on weather condition.",
                "input_params": {
                    "weather_condition": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_advice": {
                        "description": "the clothing advice based on the weather condition",
                        "type": "String"
                    }
                },
                "format": "GetClothingAdvice(weather_condition) -> clothing_advice"
            }
        ],
        "Query": "What's the weather like in Paris and what should I wear today?",
        "Label": "GetClothingAdvice(weather_condition=GetWeather(latitude, longitude = GetCityLocation(city_name='Paris')))",
        "Index": 1187
    },
    {
        "APIs": [
            {
                "name": "GetCityLocation",
                "Description": "This API is to get the latitude and longitude of a city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "latitude": {
                        "description": "the latitude of the city",
                        "type": "Float"
                    },
                    "longitude": {
                        "description": "the longitude of the city",
                        "type": "Float"
                    }
                },
                "format": "GetCityLocation(city_name) -> latitude, longitude"
            },
            {
                "name": "GetWeather",
                "Description": "This API is to get the weather condition of a location.",
                "input_params": {
                    "latitude": {
                        "description": "the latitude of a location",
                        "type": "Float"
                    },
                    "longitude": {
                        "description": "the longitude of a location",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "weather_condition": {
                        "description": "the weather condition of the location",
                        "type": "String"
                    }
                },
                "format": "GetWeather(latitude, longitude) -> weather_condition"
            },
            {
                "name": "GetClothingAdvice",
                "Description": "This API is to give clothing advice based on the weather.",
                "input_params": {
                    "weather_condition": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_advice": {
                        "description": "the suggested clothing based on the weather",
                        "type": "String"
                    }
                },
                "format": "GetClothingAdvice(weather_condition) -> clothing_advice"
            }
        ],
        "Query": "What's the weather like in New York and what should I wear today?",
        "Label": "GetClothingAdvice(weather_condition=GetWeather(latitude, longitude = GetCityLocation(city_name='New York')))",
        "Index": 1188
    },
    {
        "APIs": [
            {
                "name": "GetCityLocation",
                "Description": "This API is to get latitude and longitude of a city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "latitude": {
                        "description": "the latitude of the city",
                        "type": "Float"
                    },
                    "longitude": {
                        "description": "the longitude of the city",
                        "type": "Float"
                    }
                },
                "format": "GetCityLocation(city_name) -> latitude, longitude"
            },
            {
                "name": "GetWeather",
                "Description": "This API is to get weather condition of a location.",
                "input_params": {
                    "latitude": {
                        "description": "the latitude of the location",
                        "type": "Float"
                    },
                    "longitude": {
                        "description": "the longitude of the location",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "weather_condition": {
                        "description": "the weather condition of the location",
                        "type": "String"
                    }
                },
                "format": "GetWeather(latitude, longitude) -> weather_condition"
            },
            {
                "name": "GetClothingAdvice",
                "Description": "This API is to get clothing advice based on weather condition.",
                "input_params": {
                    "weather_condition": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_advice": {
                        "description": "the clothing advice based on weather condition",
                        "type": "String"
                    }
                },
                "format": "GetClothingAdvice(weather_condition) -> clothing_advice"
            }
        ],
        "Query": "What's the weather like in Moscow and what should I wear today?",
        "Label": "GetClothingAdvice(weather_condition=GetWeather(latitude, longitude = GetCityLocation(city_name='Moscow')))",
        "Index": 1189
    },
    {
        "APIs": [
            {
                "name": "GetCityLocation",
                "Description": "This API is to get the latitude and longitude of a city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "latitude": {
                        "description": "the latitude of the city",
                        "type": "Float"
                    },
                    "longitude": {
                        "description": "the longitude of the city",
                        "type": "Float"
                    }
                },
                "format": "GetCityLocation(city_name) -> latitude, longitude"
            },
            {
                "name": "GetWeather",
                "Description": "This API is to get the weather condition based on latitude and longitude.",
                "input_params": {
                    "latitude": {
                        "description": "the latitude of the location",
                        "type": "Float"
                    },
                    "longitude": {
                        "description": "the longitude of the location",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "weather_condition": {
                        "description": "the weather condition of the location",
                        "type": "String"
                    }
                },
                "format": "GetWeather(latitude, longitude) -> weather_condition"
            },
            {
                "name": "GetClothingAdvice",
                "Description": "This API is to get clothing advice based on the weather condition.",
                "input_params": {
                    "weather_condition": {
                        "description": "the weather condition of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_advice": {
                        "description": "the advice of clothing based on the weather",
                        "type": "String"
                    }
                },
                "format": "GetClothingAdvice(weather_condition) -> clothing_advice"
            }
        ],
        "Query": "What's the weather like in Tokyo and what should I wear today?",
        "Label": "GetClothingAdvice(weather_condition=GetWeather(latitude, longitude = GetCityLocation(city_name='Tokyo')))",
        "Index": 1190
    },
    {
        "APIs": [
            {
                "name": "GetCityLocation",
                "Description": "This API is to get the latitude and longitude of a city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "latitude": {
                        "description": "the latitude of the city",
                        "type": "Float"
                    },
                    "longitude": {
                        "description": "the longitude of the city",
                        "type": "Float"
                    }
                },
                "format": "GetCityLocation(city_name) -> latitude, longitude"
            },
            {
                "name": "GetWeather",
                "Description": "This API is to get the weather condition of a location.",
                "input_params": {
                    "latitude": {
                        "description": "the latitude of the location",
                        "type": "Float"
                    },
                    "longitude": {
                        "description": "the longitude of the location",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "weather_condition": {
                        "description": "the weather condition of the location",
                        "type": "String"
                    }
                },
                "format": "GetWeather(latitude, longitude) -> weather_condition"
            },
            {
                "name": "GetClothingAdvice",
                "Description": "This API is to get clothing advice based on the weather condition.",
                "input_params": {
                    "weather_condition": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_advice": {
                        "description": "the advice for clothing",
                        "type": "String"
                    }
                },
                "format": "GetClothingAdvice(weather_condition) -> clothing_advice."
            }
        ],
        "Query": "What's the weather like in Sydney and what should I wear today?",
        "Label": "GetClothingAdvice(weather_condition=GetWeather(latitude, longitude = GetCityLocation(city_name='Sydney')))",
        "Index": 1191
    },
    {
        "APIs": [
            {
                "name": "GetUserAge",
                "Description": "This API is to get the age of the user.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "age": {
                        "description": "the age of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserAge(username) -> age"
            },
            {
                "name": "GetDailyCalorieIntake",
                "Description": "This API is to get the recommended daily calorie intake for the user based on their age.",
                "input_params": {
                    "age": {
                        "description": "the age of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "calorie_intake": {
                        "description": "the recommended daily calorie intake for the user",
                        "type": "Integer"
                    }
                },
                "format": "GetDailyCalorieIntake(age) -> calorie_intake"
            },
            {
                "name": "GetNutritionPlan",
                "Description": "This API is to get the meal plan for the user based on their daily calorie intake.",
                "input_params": {
                    "calorie_intake": {
                        "description": "the recommended daily calorie intake for the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "meal_plan": {
                        "description": "the meal plan for the user",
                        "type": "String"
                    }
                },
                "format": "GetNutritionPlan(calorie_intake) -> meal_plan"
            }
        ],
        "Query": "Hi, I am Sarah. What should be my meal plan for today to stay healthy?",
        "Label": "GetNutritionPlan(calorie_intake=GetDailyCalorieIntake(age=GetUserAge(username='Sarah')))",
        "Index": 1192
    },
    {
        "APIs": [
            {
                "name": "GetUserAge",
                "Description": "This API is to get the age of a user.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "age": {
                        "description": "the age of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserAge(username) -> age"
            },
            {
                "name": "GetDailyCalorieIntake",
                "Description": "This API is to calculate daily calorie intake for a person.",
                "input_params": {
                    "age": {
                        "description": "the age of the person",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "calorie_intake": {
                        "description": "the daily calorie intake for the person",
                        "type": "Float"
                    }
                },
                "format": "GetDailyCalorieIntake(age) -> calorie_intake"
            },
            {
                "name": "GetNutritionPlan",
                "Description": "This API is to suggest a nutrition plan based on calorie intake.",
                "input_params": {
                    "calorie_intake": {
                        "description": "the daily calorie intake for the person",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "nutrition_plan": {
                        "description": "the nutrition plan suggested",
                        "type": "String"
                    }
                },
                "format": "GetNutritionPlan(calorie_intake) -> nutrition_plan"
            }
        ],
        "Query": "Hello, my name is Robert. Can you suggest me a diet to remain fit?",
        "Label": "GetNutritionPlan(calorie_intake=GetDailyCalorieIntake(age=GetUserAge(username='Robert')))",
        "Index": 1193
    },
    {
        "APIs": [
            {
                "name": "GetUserAge",
                "Description": "This API is to get the age of the user.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "age": {
                        "description": "the age of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserAge(username) -> age"
            },
            {
                "name": "GetDailyCalorieIntake",
                "Description": "This API is to get the daily calorie intake for a user based on their age.",
                "input_params": {
                    "age": {
                        "description": "the age of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "calorie_intake": {
                        "description": "the daily calorie intake for the user",
                        "type": "Integer"
                    }
                },
                "format": "GetDailyCalorieIntake(age) -> calorie_intake"
            },
            {
                "name": "GetNutritionPlan",
                "Description": "This API is to get a balanced nutrition plan for a user based on their calorie intake.",
                "input_params": {
                    "calorie_intake": {
                        "description": "the daily calorie intake for the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "nutrition_plan": {
                        "description": "a balanced nutrition plan for the user",
                        "type": "String"
                    }
                },
                "format": "GetNutritionPlan(calorie_intake) -> nutrition_plan"
            }
        ],
        "Query": "This is James. What should be my today's diet for healthy living?",
        "Label": "GetNutritionPlan(calorie_intake=GetDailyCalorieIntake(age=GetUserAge(username='James')))",
        "Index": 1194
    },
    {
        "APIs": [
            {
                "name": "LocatePharmacy",
                "Description": "This API is to locate a pharmacy that stocks a specific drug in a city.",
                "input_params": {
                    "city": {
                        "description": "the city in which the user is located",
                        "type": "String"
                    },
                    "drug": {
                        "description": "the name of the drug",
                        "type": "String"
                    }
                },
                "output_params": {
                    "pharmacy_name": {
                        "description": "the name of the pharmacy that stocks the drug",
                        "type": "String"
                    }
                },
                "format": "LocatePharmacy(city, drug) -> pharmacy_name"
            },
            {
                "name": "ReserveMedicine",
                "description": "This API is to reserve a specific drug under a patient's name at a pharmacy.",
                "input_params": {
                    "pharmacy_name": {
                        "description": "the name of the pharmacy where the reservation is to be made",
                        "type": "String"
                    },
                    "drug": {
                        "description": "the name of the drug to be reserved",
                        "type": "String"
                    },
                    "patient_name": {
                        "description": "the name of the patient for whom the reservation is to be made",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveMedicine(pharmacy_name, drug, patient_name) -> reservation_status"
            }
        ],
        "Query": "I'm situated in Chicago and I need to find a pharmacy that stocks amoxicillin. If it's available, could you please reserve it under my name, Sarah Williams?",
        "Label": "ReserveMedicine(pharmacy_name=LocatePharmacy(city='Chicago', drug='amoxicillin'), drug='amoxicillin', patient_name='Sarah Williams')",
        "Index": 1195
    },
    {
        "APIs": [
            {
                "name": "LocatePharmacy",
                "Description": "This API is to locate a pharmacy that carries a specific drug in a given city.",
                "input_params": {
                    "city": {
                        "description": "the city where the search is performed",
                        "type": "String"
                    },
                    "drug": {
                        "description": "the drug to search for",
                        "type": "String"
                    }
                },
                "output_params": {
                    "pharmacy_name": {
                        "description": "the name of the pharmacy that carries the drug",
                        "type": "String"
                    }
                },
                "format": "LocatePharmacy(city, drug) -> pharmacy_name"
            },
            {
                "name": "ReserveMedicine",
                "Description": "This API is to reserve a specific drug under a patient's name at a specified pharmacy.",
                "input_params": {
                    "pharmacy_name": {
                        "description": "the name of the pharmacy where the reservation is made",
                        "type": "String"
                    },
                    "drug": {
                        "description": "the drug to be reserved",
                        "type": "String"
                    },
                    "patient_name": {
                        "description": "the name of the patient for whom the reservation is made",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveMedicine(pharmacy_name, drug, patient_name) -> reservation_status"
            }
        ],
        "Query": "I am in Miami and I am searching for a pharmacy that carries ibuprofen. If they have it, please reserve it under my name, Mike Johnson.",
        "Label": "ReserveMedicine(pharmacy_name=LocatePharmacy(city='Miami', drug='ibuprofen'), drug='ibuprofen', patient_name='Mike Johnson')",
        "Index": 1196
    },
    {
        "APIs": [
            {
                "name": "LocatePharmacy",
                "Description": "This API is to locate a pharmacy that carries a specific drug in a specified city.",
                "input_params": {
                    "city": {
                        "description": "the city where the user is located",
                        "type": "String"
                    },
                    "drug": {
                        "description": "the name of the drug the user is looking for",
                        "type": "String"
                    }
                },
                "output_params": {
                    "pharmacy_name": {
                        "description": "the name of the pharmacy that carries the drug",
                        "type": "String"
                    }
                },
                "format": "LocatePharmacy(city, drug) -> pharmacy_name"
            },
            {
                "name": "ReserveMedicine",
                "Description": "This API is to reserve a specific drug at a specified pharmacy under a patient's name.",
                "input_params": {
                    "pharmacy_name": {
                        "description": "the name of the pharmacy",
                        "type": "String"
                    },
                    "drug": {
                        "description": "the name of the drug to be reserved",
                        "type": "String"
                    },
                    "patient_name": {
                        "description": "the name of the patient who will pick up the drug",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveMedicine(pharmacy_name, drug, patient_name) -> reservation_status"
            }
        ],
        "Query": "I am in Miami and I am searching for a pharmacy that carries ibuprofen. If they have it, please reserve it under my name, Mike Johnson.",
        "Label": "ReserveMedicine(pharmacy_name=LocatePharmacy(city='Miami', drug='ibuprofen'), drug='ibuprofen', patient_name='Mike Johnson')",
        "Index": 1197
    },
    {
        "APIs": [
            {
                "name": "LocatePharmacy",
                "Description": "This API is to find a pharmacy in a certain city that stocks a specific drug.",
                "input_params": {
                    "city": {
                        "description": "the name of the city where the user is located",
                        "type": "String"
                    },
                    "drug": {
                        "description": "the name of the drug that the user needs",
                        "type": "String"
                    }
                },
                "output_params": {
                    "pharmacy_name": {
                        "description": "the name of the pharmacy that stocks the specified drug",
                        "type": "String"
                    }
                },
                "format": "LocatePharmacy(city, drug) -> pharmacy_name"
            },
            {
                "name": "ReserveMedicine",
                "Description": "This API is to reserve a specific drug at a pharmacy under a patient's name.",
                "input_params": {
                    "pharmacy_name": {
                        "description": "the name of the pharmacy where the drug will be reserved",
                        "type": "String"
                    },
                    "drug": {
                        "description": "the name of the drug to be reserved",
                        "type": "String"
                    },
                    "patient_name": {
                        "description": "the name of the person under whom the drug will be reserved",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the drug reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveMedicine(pharmacy_name, drug, patient_name) -> reservation_status"
            }
        ],
        "Query": "I'm staying in Atlanta and I need to find a pharmacy stocking metformin. If available, could you reserve it under my name, Robert Brown?",
        "Label": "ReserveMedicine(pharmacy_name=LocatePharmacy(city='Atlanta', drug='metformin'), drug='metformin', patient_name='Robert Brown')",
        "Index": 1198
    },
    {
        "APIs": [
            {
                "name": "PersonName2ID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "person_name": {
                        "description": "the name of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "PersonName2ID(person_name) -> person_ID"
            },
            {
                "name": "GetFlightNumber",
                "Description": "This API is to get the flight number of a person.",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "flight_number": {
                        "description": "the flight number of the person",
                        "type": "String"
                    }
                },
                "format": "GetFlightNumber(person_ID) -> flight_number"
            },
            {
                "name": "FlightStatus",
                "Description": "This API is to check the flight status.",
                "input_params": {
                    "flight_number": {
                        "description": "the flight number",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_status": {
                        "description": "the status of flight",
                        "type": "String"
                    }
                },
                "format": "FlightStatus(flight_number) -> flight_status"
            }
        ],
        "Query": "What's the status of Michael's flight?",
        "Label": "FlightStatus(flight_number=GetFlightNumber(person_ID=PersonName2ID(person_name='Michael')))",
        "Index": 1199
    },
    {
        "APIs": [
            {
                "name": "PersonName2ID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "person_name": {
                        "description": "the name of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "PersonName2ID(person_name) -> person_ID"
            },
            {
                "name": "GetFlightNumber",
                "Description": "This API is to get flight number of a person.",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "flight_number": {
                        "description": "the flight number of the person",
                        "type": "String"
                    }
                },
                "format": "GetFlightNumber(person_ID) -> flight_number"
            },
            {
                "name": "FlightStatus",
                "Description": "This API is to get the flight status.",
                "input_params": {
                    "flight_number": {
                        "description": "the number of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_status": {
                        "description": "the status of the flight",
                        "type": "String"
                    }
                },
                "format": "FlightStatus(flight_number) -> flight_status"
            }
        ],
        "Query": "I want to know the status of Olivia's flight. Can you check it?",
        "Label": "FlightStatus(flight_number=GetFlightNumber(person_ID=PersonName2ID(person_name='Olivia')))",
        "Index": 1200
    },
    {
        "APIs": [
            {
                "name": "PersonName2ID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "person_name": {
                        "description": "the name of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "PersonName2ID(person_name) -> person_ID"
            },
            {
                "name": "GetFlightNumber",
                "Description": "This API is to get the flight number of a specific user's flight.",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "flight_number": {
                        "description": "the flight number of the person's flight",
                        "type": "String"
                    }
                },
                "format": "GetFlightNumber(person_ID) -> flight_number"
            },
            {
                "name": "FlightStatus",
                "Description": "This API is to check the status of a specific flight.",
                "input_params": {
                    "flight_number": {
                        "description": "the flight number of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_status": {
                        "description": "the status of the flight",
                        "type": "String"
                    }
                },
                "format": "FlightStatus(flight_number) -> flight_status"
            }
        ],
        "Query": "Is Ava's flight delayed? Can you check?",
        "Label": "FlightStatus(flight_number=GetFlightNumber(person_ID=PersonName2ID(person_name='Ava')))",
        "Index": 1201
    },
    {
        "APIs": [
            {
                "name": "GetFlightDetails",
                "Description": "This API is to get flight details based on city and date.",
                "input_params": {
                    "city": {
                        "description": "the destination city of the flight",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "airline": {
                        "description": "the airline of the flight",
                        "type": "String"
                    }
                },
                "format": "GetFlightDetails(city, date) -> airline"
            },
            {
                "name": "CheckBaggageAllowance",
                "Description": "This API is to check baggage allowance of a specific airline.",
                "input_params": {
                    "airline": {
                        "description": "the name of the airline",
                        "type": "String"
                    }
                },
                "output_params": {
                    "baggage_allowance": {
                        "description": "the baggage allowance of the airline",
                        "type": "String"
                    }
                },
                "format": "CheckBaggageAllowance(airline) -> baggage_allowance"
            },
            {
                "name": "SuggestLuggage",
                "Description": "This API is to suggest luggage based on baggage allowance and trip duration.",
                "input_params": {
                    "baggage_allowance": {
                        "description": "the baggage allowance of the airline",
                        "type": "String"
                    },
                    "trip_duration": {
                        "description": "the duration of the trip",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "luggage_suggestion": {
                        "description": "suggested luggage for the trip",
                        "type": "String"
                    }
                },
                "format": "SuggestLuggage(baggage_allowance, trip_duration) -> luggage_suggestion"
            }
        ],
        "Query": "What luggage should I take for my 3-day trip to Paris from San Francisco next week?",
        "Label": "SuggestLuggage(baggage_allowance=CheckBaggageAllowance(airline=GetFlightDetails(city='Paris', date='next week').airline), trip_duration=3)",
        "Index": 1202
    },
    {
        "APIs": [
            {
                "name": "GetFlightDetails",
                "Description": "This API is to get flight details for a specified city and date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "airline": {
                        "description": "the name of the airline",
                        "type": "String"
                    }
                },
                "format": "GetFlightDetails(city, date) -> airline"
            },
            {
                "name": "CheckBaggageAllowance",
                "Description": "This API is to check the baggage allowance for a specified airline.",
                "input_params": {
                    "airline": {
                        "description": "the name of the airline",
                        "type": "String"
                    }
                },
                "output_params": {
                    "baggage_allowance": {
                        "description": "the baggage allowance for the airline",
                        "type": "String"
                    }
                },
                "format": "CheckBaggageAllowance(airline) -> baggage_allowance"
            },
            {
                "name": "SuggestLuggage",
                "Description": "This API is to suggest the kind of luggage to pack based on the baggage allowance and trip duration.",
                "input_params": {
                    "baggage_allowance": {
                        "description": "the baggage allowance for the airline",
                        "type": "String"
                    },
                    "trip_duration": {
                        "description": "the duration of the trip",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "luggage_suggestion": {
                        "description": "the suggested kind of luggage to pack",
                        "type": "String"
                    }
                },
                "format": "SuggestLuggage(baggage_allowance, trip_duration) -> luggage_suggestion"
            }
        ],
        "Query": "What kind of luggage should I pack for my 7-day trip to Tokyo from Los Angeles next month?",
        "Label": "SuggestLuggage(baggage_allowance=CheckBaggageAllowance(airline=GetFlightDetails(city='Tokyo', date='next month').airline), trip_duration=7)",
        "Index": 1203
    },
    {
        "APIs": [
            {
                "name": "GetFlightDetails",
                "Description": "This API is to get flight details.",
                "input_params": {
                    "city": {
                        "description": "the city to travel",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of travel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "airline": {
                        "description": "the airline of the flight",
                        "type": "String"
                    }
                },
                "format": "GetFlightDetails(city, date) -> airline"
            },
            {
                "name": "CheckBaggageAllowance",
                "Description": "This API is to check baggage allowance.",
                "input_params": {
                    "airline": {
                        "description": "the airline to check for baggage allowance",
                        "type": "String"
                    }
                },
                "output_params": {
                    "baggage_allowance": {
                        "description": "the baggage allowance for the airline",
                        "type": "String"
                    }
                },
                "format": "CheckBaggageAllowance(airline) -> baggage_allowance"
            },
            {
                "name": "SuggestLuggage",
                "Description": "This API is to suggest luggage based on baggage allowance and trip duration.",
                "input_params": {
                    "baggage_allowance": {
                        "description": "the baggage allowance for the airline",
                        "type": "String"
                    },
                    "trip_duration": {
                        "description": "the duration of the trip",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "luggage": {
                        "description": "the suggested luggage",
                        "type": "String"
                    }
                },
                "format": "SuggestLuggage(baggage_allowance, trip_duration) -> luggage"
            }
        ],
        "Query": "What kind of luggage should I take for my 15-day trip to Berlin from Chicago next Friday?",
        "Label": "SuggestLuggage(baggage_allowance=CheckBaggageAllowance(airline=GetFlightDetails(city='Berlin', date='next Friday').airline), trip_duration=15)",
        "Index": 1204
    },
    {
        "APIs": [
            {
                "name": "GetFlightDetails",
                "Description": "This API is to get flight details.",
                "input_params": {
                    "city": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "airline": {
                        "description": "the airline of the flight",
                        "type": "String"
                    }
                },
                "format": "GetFlightDetails(city, date) -> airline"
            },
            {
                "name": "CheckBaggageAllowance",
                "Description": "This API is to check the baggage allowance of an airline.",
                "input_params": {
                    "airline": {
                        "description": "the name of the airline",
                        "type": "String"
                    }
                },
                "output_params": {
                    "baggage_allowance": {
                        "description": "the baggage allowance of the airline",
                        "type": "String"
                    }
                },
                "format": "CheckBaggageAllowance(airline) -> baggage_allowance"
            },
            {
                "name": "SuggestLuggage",
                "Description": "This API is to suggest luggage based on baggage allowance and trip duration.",
                "input_params": {
                    "baggage_allowance": {
                        "description": "the baggage allowance of the airline",
                        "type": "String"
                    },
                    "trip_duration": {
                        "description": "the duration of the trip",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "luggage_suggestion": {
                        "description": "suggested luggage based on baggage allowance and trip duration",
                        "type": "String"
                    }
                },
                "format": "SuggestLuggage(baggage_allowance, trip_duration) -> luggage_suggestion"
            }
        ],
        "Query": "What type of luggage should I carry for my 20-day trip to Rome from Seattle tomorrow?",
        "Label": "SuggestLuggage(baggage_allowance=CheckBaggageAllowance(airline=GetFlightDetails(city='Rome', date='tomorrow').airline), trip_duration=20)",
        "Index": 1205
    },
    {
        "APIs": [
            {
                "name": "GetProductPrice",
                "Description": "This API is to get the price of the product.",
                "input_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "price": {
                        "description": "the price of the product",
                        "type": "Float"
                    }
                },
                "format": "GetProductPrice(product_ID) -> price"
            },
            {
                "name": "GetExchangeRate",
                "Description": "This API is to get the exchange rate between two currencies.",
                "input_params": {
                    "from_currency": {
                        "description": "the original currency",
                        "type": "String"
                    },
                    "to_currency": {
                        "description": "the target currency",
                        "type": "String"
                    }
                },
                "output_params": {
                    "exchange_rate": {
                        "description": "the exchange rate between from_currency and to_currency",
                        "type": "Float"
                    }
                },
                "format": "GetExchangeRate(from_currency, to_currency) -> exchange_rate"
            },
            {
                "name": "CalculateCost",
                "Description": "This API is to calculate the cost in target currency.",
                "input_params": {
                    "price": {
                        "description": "the original price of the product",
                        "type": "Float"
                    },
                    "exchange_rate": {
                        "description": "the exchange rate between original currency and target currency",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "cost": {
                        "description": "the cost of the product in target currency",
                        "type": "Float"
                    }
                },
                "format": "CalculateCost(price, exchange_rate)-> cost."
            }
        ],
        "Query": "What is the price of the item with ID '98765' in Pounds if its cost is given in Yen?",
        "Label": "CalculateCost(price=GetProductPrice(product_ID='98765'), exchange_rate=GetExchangeRate(from_currency='Yen', to_currency='Pounds'))",
        "Index": 1206
    },
    {
        "APIs": [
            {
                "name": "GetProductPrice",
                "Description": "This API is to get the price of a product.",
                "input_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "price": {
                        "description": "the price of the product",
                        "type": "Float"
                    }
                },
                "format": "GetProductPrice(product_ID) -> price"
            },
            {
                "name": "GetExchangeRate",
                "Description": "This API is to get the exchange rate between two currencies.",
                "input_params": {
                    "from_currency": {
                        "description": "the currency to convert from",
                        "type": "String"
                    },
                    "to_currency": {
                        "description": "the currency to convert to",
                        "type": "String"
                    }
                },
                "output_params": {
                    "exchange_rate": {
                        "description": "the exchange rate from the 'from_currency' to the 'to_currency'",
                        "type": "Float"
                    }
                },
                "format": "GetExchangeRate(from_currency, to_currency) -> exchange_rate"
            },
            {
                "name": "CalculateCost",
                "Description": "This API is to calculate the cost of a product in a different currency.",
                "input_params": {
                    "price": {
                        "description": "the price of the product",
                        "type": "Float"
                    },
                    "exchange_rate": {
                        "description": "the exchange rate to the currency the price needs to be converted to",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "cost": {
                        "description": "the cost of the product in the 'to_currency'",
                        "type": "Float"
                    }
                },
                "format": "CalculateCost(price, exchange_rate) -> cost"
            }
        ],
        "Query": "How much would the product with ID '65432' cost in Indian Rupees if the price is mentioned in Australian Dollars?",
        "Label": "CalculateCost(price=GetProductPrice(product_ID='65432'), exchange_rate=GetExchangeRate(from_currency='Australian Dollars', to_currency='Indian Rupees'))",
        "Index": 1207
    },
    {
        "APIs": [
            {
                "name": "GetProductPrice",
                "Description": "This API is to get the price of a product.",
                "input_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "price": {
                        "description": "the price of the product",
                        "type": "Float"
                    }
                },
                "format": "GetProductPrice(product_ID) -> price"
            },
            {
                "name": "GetExchangeRate",
                "Description": "This API is to get the exchange rate from one currency to another.",
                "input_params": {
                    "from_currency": {
                        "description": "the currency to convert from",
                        "type": "String"
                    },
                    "to_currency": {
                        "description": "the currency to convert to",
                        "type": "String"
                    }
                },
                "output_params": {
                    "exchange_rate": {
                        "description": "the exchange rate from the from_currency to the to_currency",
                        "type": "Float"
                    }
                },
                "format": "GetExchangeRate(from_currency, to_currency) -> exchange_rate"
            },
            {
                "name": "CalculateCost",
                "Description": "This API is to calculate the cost of a product in a different currency.",
                "input_params": {
                    "price": {
                        "description": "the price of the product",
                        "type": "Float"
                    },
                    "exchange_rate": {
                        "description": "the exchange rate to convert the price to a different currency",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "converted_price": {
                        "description": "the price of the product in the converted currency",
                        "type": "Float"
                    }
                },
                "format": "CalculateCost(price, exchange_rate) -> converted_price"
            }
        ],
        "Query": "What's the price of the product with ID '11111' in Canadian Dollars if it's priced in Swiss Francs?",
        "Label": "CalculateCost(price=GetProductPrice(product_ID='11111'), exchange_rate=GetExchangeRate(from_currency='Swiss Francs', to_currency='Canadian Dollars'))",
        "Index": 1208
    },
    {
        "APIs": [
            {
                "name": "GetProductPrice",
                "Description": "This API is to get the price of a product by its ID.",
                "input_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "price": {
                        "description": "the price of the product",
                        "type": "Float"
                    }
                },
                "format": "GetProductPrice(product_ID) -> price"
            },
            {
                "name": "GetExchangeRate",
                "Description": "This API is to get the exchange rate between two currencies.",
                "input_params": {
                    "from_currency": {
                        "description": "the original currency",
                        "type": "String"
                    },
                    "to_currency": {
                        "description": "the currency to convert to",
                        "type": "String"
                    }
                },
                "output_params": {
                    "exchange_rate": {
                        "description": "the exchange rate from the original currency to the target currency",
                        "type": "Float"
                    }
                },
                "format": "GetExchangeRate(from_currency, to_currency) -> exchange_rate"
            },
            {
                "name": "CalculateCost",
                "Description": "This API is to calculate the cost of a product in a different currency.",
                "input_params": {
                    "price": {
                        "description": "the price of the product in the original currency",
                        "type": "Float"
                    },
                    "exchange_rate": {
                        "description": "the exchange rate from the original currency to the target currency",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "cost": {
                        "description": "the cost of the product in the target currency",
                        "type": "Float"
                    }
                },
                "format": "CalculateCost(price, exchange_rate) -> cost"
            }
        ],
        "Query": "How much is the product with ID '22222' in Chinese Yuan if the cost is listed in Brazilian Real?",
        "Label": "CalculateCost(price=GetProductPrice(product_ID='22222'), exchange_rate=GetExchangeRate(from_currency='Brazilian Real', to_currency='Chinese Yuan'))",
        "Index": 1209
    },
    {
        "APIs": [
            {
                "name": "GetProductPrice",
                "Description": "This API is to get the price of a product.",
                "input_params": {
                    "product_ID": {
                        "description": "the ID of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "price": {
                        "description": "the price of the product",
                        "type": "Float"
                    }
                },
                "format": "GetProductPrice(product_ID) -> price"
            },
            {
                "name": "GetExchangeRate",
                "Description": "This API is to get the exchange rate between two currencies.",
                "input_params": {
                    "from_currency": {
                        "description": "the currency to convert from",
                        "type": "String"
                    },
                    "to_currency": {
                        "description": "the currency to convert to",
                        "type": "String"
                    }
                },
                "output_params": {
                    "exchange_rate": {
                        "description": "the exchange rate between the two currencies",
                        "type": "Float"
                    }
                },
                "format": "GetExchangeRate(from_currency, to_currency) -> exchange_rate"
            },
            {
                "name": "CalculateCost",
                "Description": "This API is to calculate the cost of an item in a different currency.",
                "input_params": {
                    "price": {
                        "description": "the price of the item",
                        "type": "Float"
                    },
                    "exchange_rate": {
                        "description": "the exchange rate",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "cost": {
                        "description": "the cost of the item in the different currency",
                        "type": "Float"
                    }
                },
                "format": "CalculateCost(price, exchange_rate) -> cost"
            }
        ],
        "Query": "What is the cost of the item with ID '33333' in South African Rand if its cost is given in Euros?",
        "Label": "CalculateCost(price=GetProductPrice(product_ID='33333'), exchange_rate=GetExchangeRate(from_currency='Euros', to_currency='South African Rand'))",
        "Index": 1210
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the weather of a certain city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "GetClothingAdvice",
                "Description": "This API is to get clothing advice based on the weather and activity.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    },
                    "activity": {
                        "description": "the activity the user is going to do",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing advice": {
                        "description": "the advice of what to wear",
                        "type": "String"
                    }
                },
                "format": "GetClothingAdvice(weather, activity) -> clothing advice"
            }
        ],
        "Query": "What should I put on for a jog in New York if I start from Toronto now?",
        "Label": "GetClothingAdvice(weather=GetWeather(city='New York'), activity='jog')",
        "Index": 1211
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the weather of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "GetClothingAdvice",
                "Description": "This API is to get clothing advice for a specific activity in a specific weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    },
                    "activity": {
                        "description": "the type of activity",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing advice": {
                        "description": "the advice of clothing",
                        "type": "String"
                    }
                },
                "format": "GetClothingAdvice(weather, activity) -> clothing advice"
            }
        ],
        "Query": "What should I dress for a cycle in Berlin if I start from Paris now?",
        "Label": "GetClothingAdvice(weather=GetWeather(city='Berlin'), activity='cycle')",
        "Index": 1212
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the current weather of a specified city.",
                "input_params": {
                    "city": {
                        "description": "the city where you want to know the weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the current weather of the specified city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "GetClothingAdvice",
                "Description": "This API is to get clothing advice based on the weather and activity.",
                "input_params": {
                    "weather": {
                        "description": "the current weather of the specified city",
                        "type": "String"
                    },
                    "activity": {
                        "description": "the activity you plan to do",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing advice": {
                        "description": "the clothing advice based on the weather and activity",
                        "type": "String"
                    }
                },
                "format": "GetClothingAdvice(weather, activity) -> clothing advice"
            }
        ],
        "Query": "What should I gear up for a hike in Sydney if I start from Melbourne now?",
        "Label": "GetClothingAdvice(weather=GetWeather(city='Sydney'), activity='hike')",
        "Index": 1213
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the current weather of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the current weather of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "GetClothingAdvice",
                "Description": "This API is to provide clothing advice based on the weather and activity.",
                "input_params": {
                    "weather": {
                        "description": "the current weather",
                        "type": "String"
                    },
                    "activity": {
                        "description": "the type of activity",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing advice": {
                        "description": "the advice on what to wear",
                        "type": "String"
                    }
                },
                "format": "GetClothingAdvice(weather, activity) -> clothing advice"
            }
        ],
        "Query": "What should I put on for a run in Rome if I start from Milan now?",
        "Label": "GetClothingAdvice(weather=GetWeather(city='Rome'), activity='run')",
        "Index": 1214
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the weather of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the current weather of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "GetClothingAdvice",
                "Description": "This API provides clothing advice based on weather and activity.",
                "input_params": {
                    "weather": {
                        "description": "the weather conditions",
                        "type": "String"
                    },
                    "activity": {
                        "description": "the activity to be performed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing advice": {
                        "description": "advice on what to wear based on weather conditions and activity",
                        "type": "String"
                    }
                },
                "format": "GetClothingAdvice(weather, activity) -> clothing advice"
            }
        ],
        "Query": "What should I dress for a stroll in San Francisco if I start from Los Angeles now?",
        "Label": "GetClothingAdvice(weather=GetWeather(city='San Francisco'), activity='stroll')",
        "Index": 1215
    },
    {
        "APIs": [
            {
                "name": "SearchLocation",
                "Description": "This API is to find the location based on person's name.",
                "input_params": {
                    "person": {
                        "description": "the name of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location of the person",
                        "type": "String"
                    }
                },
                "format": "SearchLocation(person) -> location"
            },
            {
                "name": "CheckWeather",
                "Description": "This API is to check the weather status at a certain location.",
                "input_params": {
                    "location": {
                        "description": "the location where to check the weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the status of the weather at the location",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(location) -> weather_status"
            },
            {
                "name": "SuggestClothing",
                "Description": "This API is to suggest clothing based on the weather status.",
                "input_params": {
                    "weather_status": {
                        "description": "the status of the weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_suggestion": {
                        "description": "suggested clothing based on the weather status",
                        "type": "String"
                    }
                },
                "format": "SuggestClothing(weather_status) -> clothing_suggestion"
            }
        ],
        "Query": "What attire should Amelia choose today based on the weather conditions at her place?",
        "Label": "SuggestClothing(weather_status=CheckWeather(location=SearchLocation(person='Amelia')))",
        "Index": 1216
    },
    {
        "APIs": [
            {
                "name": "SearchLocation",
                "Description": "This API is to get the current location of a person.",
                "input_params": {
                    "person": {
                        "description": "the name of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the current location of the person",
                        "type": "String"
                    }
                },
                "format": "SearchLocation(person) -> location"
            },
            {
                "name": "CheckWeather",
                "Description": "This API is to check the current weather status of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the current weather status of the location",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(location) -> weather_status"
            },
            {
                "name": "SuggestClothing",
                "Description": "This API is to suggest clothing based on the current weather status.",
                "input_params": {
                    "weather_status": {
                        "description": "the current weather status",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_suggestion": {
                        "description": "suggested clothing based on the weather status",
                        "type": "String"
                    }
                },
                "format": "SuggestClothing(weather_status) -> clothing_suggestion"
            }
        ],
        "Query": "What kind of dress should Jennifer wear today based on her current area's climate?",
        "Label": "SuggestClothing(weather_status=CheckWeather(location=SearchLocation(person='Jennifer')))",
        "Index": 1217
    },
    {
        "APIs": [
            {
                "name": "SearchLocation",
                "Description": "This API is to find the current location of the person.",
                "input_params": {
                    "person": {
                        "description": "the name of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the current location of the person",
                        "type": "String"
                    }
                },
                "format": "SearchLocation(person) -> location"
            },
            {
                "name": "CheckWeather",
                "Description": "This API is to check the current weather of a location.",
                "input_params": {
                    "location": {
                        "description": "the location where the weather will be checked",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the current weather status of the location",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(location) -> weather_status"
            },
            {
                "name": "SuggestClothing",
                "Description": "This API is to suggest clothing based on the weather status.",
                "input_params": {
                    "weather_status": {
                        "description": "the current weather status",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_suggestion": {
                        "description": "the suggested clothing based on the weather status",
                        "type": "String"
                    }
                },
                "format": "SuggestClothing(weather_status) -> clothing_suggestion"
            }
        ],
        "Query": "What kind of clothes should Lisa choose to wear today according to the weather where she is now?",
        "Label": "SuggestClothing(weather_status=CheckWeather(location=SearchLocation(person='Lisa')))",
        "Index": 1218
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is used to get the current weather of a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the current weather of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "FindRestaurant",
                "Description": "This API is used to find a restaurant in a city based on the current weather.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "weather": {
                        "description": "the current weather of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(city, weather) -> restaurant"
            },
            {
                "name": "BookTable",
                "Description": "This API is used to reserve a table at a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant) -> booking status"
            }
        ],
        "Query": "Can you find a restaurant in London based on the current weather and reserve a table for me?",
        "Label": "BookTable(restaurant=FindRestaurant(city='London', weather=GetWeather(city='London')))",
        "Index": 1219
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the weather of a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant in a city depending on the weather.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "weather": {
                        "description": "the weather of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(city, weather) -> restaurant"
            },
            {
                "name": "BookTable",
                "Description": "This API is to make a reservation at a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reservation status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant) -> reservation status"
            }
        ],
        "Query": "Can you find a restaurant in Paris depending on today's weather and make a reservation for me?",
        "Label": "BookTable(restaurant=FindRestaurant(city='Paris', weather=GetWeather(city='Paris')))",
        "Index": 1220
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the current weather in a specified city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the current weather in the specified city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant in a specified city under current weather conditions.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "weather": {
                        "description": "the current weather in the specified city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(city, weather) -> restaurant"
            },
            {
                "name": "BookTable",
                "Description": "This API is to book a table in a specified restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant) -> booking status."
            }
        ],
        "Query": "Can you find a restaurant in Tokyo considering the current climatic conditions and reserve a table for me?",
        "Label": "BookTable(restaurant=FindRestaurant(city='Tokyo', weather=GetWeather(city='Tokyo')))",
        "Index": 1221
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant in a specific city considering the current weather",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "weather": {
                        "description": "the current weather of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(city, weather) -> restaurant"
            },
            {
                "name": "GetWeather",
                "Description": "This API is to get the current weather of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the current weather of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "BookTable",
                "Description": "This API is to book a table at a specific restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant)-> booking status."
            }
        ],
        "Query": "Can you find a restaurant in Rome considering the current weather and make a reservation for me?",
        "Label": "BookTable(restaurant=FindRestaurant(city='Rome', weather=GetWeather(city='Rome')))",
        "Index": 1222
    },
    {
        "APIs": [
            {
                "name": "SearchFlight",
                "Description": "This API is to search for a flight to a specific destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight": {
                        "description": "the flight to the destination",
                        "type": "String"
                    }
                },
                "format": "SearchFlight(destination) -> flight"
            },
            {
                "name": "CheckBaggageAllowance",
                "Description": "This API is to check the baggage allowance for a specific flight.",
                "input_params": {
                    "flight": {
                        "description": "the specific flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "baggage_allowance": {
                        "description": "the baggage allowance for the flight",
                        "type": "Integer"
                    }
                },
                "format": "CheckBaggageAllowance(flight) -> baggage_allowance"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a specific flight with a specific baggage allowance.",
                "input_params": {
                    "flight": {
                        "description": "the specific flight",
                        "type": "String"
                    },
                    "baggage_allowance": {
                        "description": "the baggage allowance for the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight, baggage_allowance) -> booking status."
            }
        ],
        "Query": "I want to arrange a flight to London that allows the maximum baggage.",
        "Label": "BookFlight(flight=SearchFlight(destination='London'), baggage_allowance=CheckBaggageAllowance(flight=SearchFlight(destination='London')))",
        "Index": 1223
    },
    {
        "APIs": [
            {
                "name": "SearchFlight",
                "Description": "This API is to search for a flight based on the destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight": {
                        "description": "the information of the flight",
                        "type": "String"
                    }
                },
                "format": "SearchFlight(destination) -> flight"
            },
            {
                "name": "CheckBaggageAllowance",
                "Description": "This API is to check the baggage allowance for a specific flight.",
                "input_params": {
                    "flight": {
                        "description": "the information of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "baggage_allowance": {
                        "description": "the baggage allowance for the flight",
                        "type": "Integer"
                    }
                },
                "format": "CheckBaggageAllowance(flight) -> baggage_allowance"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "flight": {
                        "description": "the information of the flight",
                        "type": "String"
                    },
                    "baggage_allowance": {
                        "description": "the baggage allowance for the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight, baggage_allowance) -> booking status"
            }
        ],
        "Query": "I need to schedule a flight to New York with the highest luggage allowance.",
        "Label": "BookFlight(flight=SearchFlight(destination='New York'), baggage_allowance=CheckBaggageAllowance(flight=SearchFlight(destination='New York')))",
        "Index": 1224
    },
    {
        "APIs": [
            {
                "name": "SearchFlight",
                "Description": "This API is to search for available flights to a specified destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight": {
                        "description": "the details of the flight",
                        "type": "Flight Object"
                    }
                },
                "format": "SearchFlight(destination) -> flight"
            },
            {
                "name": "CheckBaggageAllowance",
                "Description": "This API is to check the maximum baggage allowance for a specified flight.",
                "input_params": {
                    "flight": {
                        "description": "the flight to check baggage allowance for",
                        "type": "Flight Object"
                    }
                },
                "output_params": {
                    "baggage_allowance": {
                        "description": "the maximum baggage allowance for the flight",
                        "type": "Integer"
                    }
                },
                "format": "CheckBaggageAllowance(flight) -> baggage_allowance"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight with a specified baggage allowance.",
                "input_params": {
                    "flight": {
                        "description": "the flight to book",
                        "type": "Flight Object"
                    },
                    "baggage_allowance": {
                        "description": "the desired baggage allowance for the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the flight booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight, baggage_allowance) -> booking status"
            }
        ],
        "Query": "I need to reserve a flight to Tokyo with the maximum allowable luggage.",
        "Label": "BookFlight(flight=SearchFlight(destination='Tokyo'), baggage_allowance=CheckBaggageAllowance(flight=SearchFlight(destination='Tokyo')))",
        "Index": 1225
    },
    {
        "APIs": [
            {
                "name": "SearchBook",
                "Description": "This API is to search a book by its title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_information": {
                        "description": "the information of the book including author, publisher, etc.",
                        "type": "Object"
                    }
                },
                "format": "SearchBook(title) -> book_information"
            },
            {
                "name": "FindBookStore",
                "Description": "This API is to find a bookstore where a specific book is available.",
                "input_params": {
                    "book_information": {
                        "description": "the information of the book",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "bookstore_location": {
                        "description": "the location of the bookstore",
                        "type": "String"
                    }
                },
                "format": "FindBookStore(book_information) -> bookstore_location"
            },
            {
                "name": "GetDirections",
                "Description": "This API is to provide directions to a specific destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination to reach",
                        "type": "String"
                    }
                },
                "output_params": {
                    "directions": {
                        "description": "the directions to the destination",
                        "type": "String"
                    }
                },
                "format": "GetDirections(destination) -> directions"
            }
        ],
        "Query": "Can you help me find the way to the bookstore where 'Moby Dick' is available?",
        "Label": "GetDirections(destination=FindBookStore(book_information=SearchBook(title='Moby Dick')))",
        "Index": 1226
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API is to find a movie.",
                "input_params": {
                    "title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie": {
                        "description": "the movie found",
                        "type": "Object"
                    }
                },
                "format": "FindMovie(title) -> movie"
            },
            {
                "name": "GetShowtimes",
                "Description": "This API is to get the showtimes for a specific movie in a specific city.",
                "input_params": {
                    "movie": {
                        "description": "the movie to find the showtimes for",
                        "type": "Object"
                    },
                    "city": {
                        "description": "the city to find the showtimes in",
                        "type": "String"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "the showtimes for the movie in the city",
                        "type": "Object"
                    }
                },
                "format": "GetShowtimes(movie, city) -> showtime"
            },
            {
                "name": "BuyTickets",
                "Description": "This API is to purchase movie tickets.",
                "input_params": {
                    "showtime": {
                        "description": "the showtime to purchase tickets for",
                        "type": "Object"
                    },
                    "number_of_tickets": {
                        "description": "the number of tickets to purchase",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "tickets": {
                        "description": "the purchased tickets",
                        "type": "Object"
                    }
                },
                "format": "BuyTickets(showtime, number_of_tickets) -> tickets"
            }
        ],
        "Query": "Can you help me purchase 4 tickets for the movie 'Avengers' in Los Angeles?",
        "Label": "BuyTickets(showtime=GetShowtimes(movie=FindMovie(title='Avengers'), city='Los Angeles'), number_of_tickets=4)",
        "Index": 1227
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API is to find a movie by title.",
                "input_params": {
                    "title": {
                        "description": "The title of the movie.",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie": {
                        "description": "The information of the movie.",
                        "type": "String"
                    }
                },
                "format": "FindMovie(title) -> movie"
            },
            {
                "name": "GetShowtimes",
                "Description": "This API is to get the showtimes of a specific movie in a specific city.",
                "input_params": {
                    "movie": {
                        "description": "The information of the movie.",
                        "type": "String"
                    },
                    "city": {
                        "description": "The city where the movie is shown.",
                        "type": "String"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "The showtimes of the movie in the city.",
                        "type": "Time"
                    }
                },
                "format": "GetShowtimes(movie, city) -> showtime"
            },
            {
                "name": "BuyTickets",
                "Description": "This API is to buy tickets for a showtime.",
                "input_params": {
                    "showtime": {
                        "description": "The showtime for which the tickets are bought.",
                        "type": "Time"
                    },
                    "number_of_tickets": {
                        "description": "The number of tickets to buy.",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase status": {
                        "description": "The status of the ticket purchase.",
                        "type": "String"
                    }
                },
                "format": "BuyTickets(showtime, number_of_tickets) -> purchase status"
            }
        ],
        "Query": "Could you assist me in buying 5 tickets for the film 'Inception' in Chicago?",
        "Label": "BuyTickets(showtime=GetShowtimes(movie=FindMovie(title='Inception'), city='Chicago'), number_of_tickets=5)",
        "Index": 1228
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API is to find a movie by title.",
                "input_params": {
                    "title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "format": "FindMovie(title) -> movie"
            },
            {
                "name": "GetShowtimes",
                "Description": "This API is to get the showtimes of a specific movie in a specific city.",
                "input_params": {
                    "movie": {
                        "description": "the details of the movie",
                        "type": "Object"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "the showtimes of the movie",
                        "type": "Object"
                    }
                },
                "format": "GetShowtimes(movie, city) -> showtime"
            },
            {
                "name": "BuyTickets",
                "Description": "This API is to buy movie tickets.",
                "input_params": {
                    "showtime": {
                        "description": "the showtimes of the movie",
                        "type": "Object"
                    },
                    "number_of_tickets": {
                        "description": "the number of tickets to buy",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BuyTickets(showtime, number_of_tickets)-> booking status"
            }
        ],
        "Query": "I would like to buy 1 ticket for the film 'Interstellar' in San Francisco. Can you help?",
        "Label": "BuyTickets(showtime=GetShowtimes(movie=FindMovie(title='Interstellar'), city='San Francisco'), number_of_tickets=1)",
        "Index": 1229
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API is to find a movie by its title.",
                "input_params": {
                    "title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie": {
                        "description": "the movie information",
                        "type": "Object"
                    }
                },
                "format": "FindMovie(title) -> movie"
            },
            {
                "name": "GetShowtimes",
                "Description": "This API is to get the showtimes of a movie in a given city.",
                "input_params": {
                    "movie": {
                        "description": "the movie information",
                        "type": "Object"
                    },
                    "city": {
                        "description": "the city where the movie is showing",
                        "type": "String"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "the showtimes of the movie",
                        "type": "Time"
                    }
                },
                "format": "GetShowtimes(movie, city) -> showtime"
            },
            {
                "name": "BuyTickets",
                "Description": "This API is to buy a certain number of tickets for a movie at a given showtime.",
                "input_params": {
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "Time"
                    },
                    "number_of_tickets": {
                        "description": "the number of tickets to buy",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "ticket_status": {
                        "description": "the status of the ticket purchase",
                        "type": "String"
                    }
                },
                "format": "BuyTickets(showtime, number_of_tickets) -> ticket_status"
            }
        ],
        "Query": "Can you please secure 2 tickets for me for the movie 'Frozen' in Atlanta?",
        "Label": "BuyTickets(showtime=GetShowtimes(movie=FindMovie(title='Frozen'), city='Atlanta'), number_of_tickets=2)",
        "Index": 1230
    },
    {
        "APIs": [
            {
                "name": "SearchFlight",
                "Description": "This API is to search for the available flights from one city to another.",
                "input_params": {
                    "city_from": {
                        "description": "the departure city",
                        "type": "String"
                    },
                    "city_to": {
                        "description": "the arrival city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight": {
                        "description": "the flight details",
                        "type": "String"
                    }
                },
                "format": "SearchFlight(city_from, city_to) -> flight"
            },
            {
                "name": "ComparePrices",
                "Description": "This API is to compare the prices of the available flights and return the cheapest one.",
                "input_params": {
                    "flight": {
                        "description": "the flight details",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cheapest_flight": {
                        "description": "the details of the cheapest flight",
                        "type": "String"
                    }
                },
                "format": "ComparePrices(flight) -> cheapest_flight"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "cheapest_flight": {
                        "description": "the details of the cheapest flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the flight booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(cheapest_flight)-> booking_status."
            }
        ],
        "Query": "I need you to reserve the most affordable flight from New York to Paris for me.",
        "Label": "BookFlight(cheapest_flight=ComparePrices(flight=SearchFlight(city_from='New York', city_to='Paris')))",
        "Index": 1231
    },
    {
        "APIs": [
            {
                "name": "SearchFlight",
                "Description": "This API is to find available flights between two cities.",
                "input_params": {
                    "city_from": {
                        "description": "the city from which the flight will depart",
                        "type": "String"
                    },
                    "city_to": {
                        "description": "the destination city of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight": {
                        "description": "the available flights",
                        "type": "List"
                    }
                },
                "format": "SearchFlight(city_from, city_to) -> flight"
            },
            {
                "name": "ComparePrices",
                "Description": "This API is to compare the prices of the available flights and find the cheapest one.",
                "input_params": {
                    "flight": {
                        "description": "the available flights",
                        "type": "List"
                    }
                },
                "output_params": {
                    "cheapest_flight": {
                        "description": "the cheapest available flight",
                        "type": "String"
                    }
                },
                "format": "ComparePrices(flight) -> cheapest_flight"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "cheapest_flight": {
                        "description": "the cheapest available flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the flight booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(cheapest_flight)-> booking status."
            }
        ],
        "Query": "Could you book the least expensive flight from Tokyo to Sydney for me?",
        "Label": "BookFlight(cheapest_flight=ComparePrices(flight=SearchFlight(city_from='Tokyo', city_to='Sydney')))",
        "Index": 1232
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API is to convert restaurant name to restaurant ID.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantSearch(restaurant_name) -> restaurant_id"
            },
            {
                "name": "RestaurantReviews",
                "Description": "This API is to get the reviews of a restaurant.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "reviewScores": {
                        "description": "the scores of the reviews",
                        "type": "List"
                    }
                },
                "format": "RestaurantReviews(restaurant_id) -> reviewScores"
            },
            {
                "name": "AverageScore",
                "Description": "This API is to calculate the average score from a list of scores.",
                "input_params": {
                    "reviewScores": {
                        "description": "the scores of the reviews",
                        "type": "List"
                    }
                },
                "output_params": {
                    "average_score": {
                        "description": "the average score of the reviews",
                        "type": "Float"
                    }
                },
                "format": "AverageScore(reviewScores) -> average_score"
            }
        ],
        "Query": "What is the average review score for the restaurant 'Pizza Hut'?",
        "Label": "AverageScore(reviewScores=RestaurantReviews(restaurant_id=RestaurantSearch(restaurant_name='Pizza Hut')))",
        "Index": 1233
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API is to search the ID of the restaurant by name.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantSearch(restaurant_name) -> restaurant_id"
            },
            {
                "name": "RestaurantReviews",
                "Description": "This API is to retrieve the review scores of a restaurant by restaurant ID.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "reviewScores": {
                        "description": "the review scores of the restaurant",
                        "type": "List"
                    }
                },
                "format": "RestaurantReviews(restaurant_id) -> reviewScores"
            },
            {
                "name": "AverageScore",
                "Description": "This API is to calculate the average score of a list of scores.",
                "input_params": {
                    "reviewScores": {
                        "description": "the review scores of the restaurant",
                        "type": "List"
                    }
                },
                "output_params": {
                    "average_score": {
                        "description": "the average score of the reviews",
                        "type": "Float"
                    }
                },
                "format": "AverageScore(reviewScores) -> average_score"
            }
        ],
        "Query": "What is the average review score for the restaurant 'Starbucks'?",
        "Label": "AverageScore(reviewScores=RestaurantReviews(restaurant_id=RestaurantSearch(restaurant_name='Starbucks')))",
        "Index": 1234
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API is to convert restaurant name to restaurant ID.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantSearch(restaurant_name) -> restaurant_id"
            },
            {
                "name": "RestaurantReviews",
                "Description": "This API is to get review scores of the restaurant.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "reviewScores": {
                        "description": "the review scores of the restaurant",
                        "type": "List"
                    }
                },
                "format": "RestaurantReviews(restaurant_id) -> reviewScores"
            },
            {
                "name": "AverageScore",
                "Description": "This API is to calculate the average score from a list of scores.",
                "input_params": {
                    "reviewScores": {
                        "description": "the review scores of the restaurant",
                        "type": "List"
                    }
                },
                "output_params": {
                    "average_score": {
                        "description": "the average review score of the restaurant",
                        "type": "Float"
                    }
                },
                "format": "AverageScore(reviewScores) -> average_score"
            }
        ],
        "Query": "What is the average review score for the restaurant 'Dunkin Donuts'?",
        "Label": "AverageScore(reviewScores=RestaurantReviews(restaurant_id=RestaurantSearch(restaurant_name='Dunkin Donuts')))",
        "Index": 1235
    },
    {
        "APIs": [
            {
                "name": "BookSearch",
                "Description": "This API is to search for a book by title and author.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    },
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookSearch(title, author) -> book_id"
            },
            {
                "name": "BookAvailability",
                "Description": "This API is to check the availability of a book by its ID.",
                "input_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "availability": {
                        "description": "the availability status of the book",
                        "type": "String"
                    }
                },
                "format": "BookAvailability(book_id) -> availability"
            },
            {
                "name": "BookLocation",
                "Description": "This API is to find the location of a book in the library.",
                "input_params": {
                    "book_availability": {
                        "description": "the availability status of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location of the book in the library",
                        "type": "String"
                    }
                },
                "format": "BookLocation(book_availability) -> location"
            }
        ],
        "Query": "Where can I find '1984' by George Orwell in the library?",
        "Label": "BookLocation(book_availability=BookAvailability(book_id=BookSearch(title='1984', author='George Orwell')))",
        "Index": 1236
    },
    {
        "APIs": [
            {
                "name": "BookSearch",
                "Description": "This API is to search a book by title and author.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    },
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookSearch(title, author) -> book_id"
            },
            {
                "name": "BookAvailability",
                "Description": "This API is to check the availability of a book.",
                "input_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "availability_status": {
                        "description": "the availability status of the book",
                        "type": "String"
                    }
                },
                "format": "BookAvailability(book_id) -> availability_status"
            },
            {
                "name": "BookLocation",
                "Description": "This API is to locate the book in the library.",
                "input_params": {
                    "book_availability": {
                        "description": "the availability status of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location of the book in the library",
                        "type": "String"
                    }
                },
                "format": "BookLocation(book_availability) -> location"
            }
        ],
        "Query": "Where can I find 'The Catcher in the Rye' by J.D. Salinger in the library?",
        "Label": "BookLocation(book_availability=BookAvailability(book_id=BookSearch(title='The Catcher in the Rye', author='J.D. Salinger')))",
        "Index": 1237
    },
    {
        "APIs": [
            {
                "name": "BookSearch",
                "Description": "This API is to search a book by title and author.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    },
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookSearch(title, author) -> book_id"
            },
            {
                "name": "BookAvailability",
                "Description": "This API is to check the availability of the book.",
                "input_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "book_availability": {
                        "description": "the availability of the book",
                        "type": "String"
                    }
                },
                "format": "BookAvailability(book_id) -> book_availability"
            },
            {
                "name": "BookLocation",
                "Description": "This API is to find the location of the book.",
                "input_params": {
                    "book_availability": {
                        "description": "the availability of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location of the book",
                        "type": "String"
                    }
                },
                "format": "BookLocation(book_availability) -> location"
            }
        ],
        "Query": "Where can I find 'Pride and Prejudice' by Jane Austen in the library?",
        "Label": "BookLocation(book_availability=BookAvailability(book_id=BookSearch(title='Pride and Prejudice', author='Jane Austen')))",
        "Index": 1238
    },
    {
        "APIs": [
            {
                "name": "BookSearch",
                "Description": "This API is to search a book by its title and author.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    },
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookSearch(title, author) -> book_id"
            },
            {
                "name": "BookAvailability",
                "Description": "This API is to check the availability of a book by its ID.",
                "input_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "book_availability": {
                        "description": "the availability of the book",
                        "type": "Boolean"
                    }
                },
                "format": "BookAvailability(book_id) -> book_availability"
            },
            {
                "name": "BookLocation",
                "Description": "This API is to find the location of a book in the library.",
                "input_params": {
                    "book_availability": {
                        "description": "the availability of the book",
                        "type": "Boolean"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location of the book in the library",
                        "type": "String"
                    }
                },
                "format": "BookLocation(book_availability) -> location"
            }
        ],
        "Query": "Where can I find 'The Great Gatsby' by F. Scott Fitzgerald in the library?",
        "Label": "BookLocation(book_availability=BookAvailability(book_id=BookSearch(title='The Great Gatsby', author='F. Scott Fitzgerald')))",
        "Index": 1239
    },
    {
        "APIs": [
            {
                "name": "BookSearch",
                "Description": "This API is to search for a book based on its title and author.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    },
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookSearch(title, author) -> book_id"
            },
            {
                "name": "BookAvailability",
                "Description": "This API is to check the availability of the book in the library.",
                "input_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "availability": {
                        "description": "the availability of the book in the library",
                        "type": "String"
                    }
                },
                "format": "BookAvailability(book_id) -> availability"
            },
            {
                "name": "BookLocation",
                "Description": "This API is to find the location of the available book in the library.",
                "input_params": {
                    "book_availability": {
                        "description": "the availability status of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location of the book in the library",
                        "type": "String"
                    }
                },
                "format": "BookLocation(book_availability) -> location"
            }
        ],
        "Query": "Where can I find 'Moby Dick' by Herman Melville in the library?",
        "Label": "BookLocation(book_availability=BookAvailability(book_id=BookSearch(title='Moby Dick', author='Herman Melville')))",
        "Index": 1240
    },
    {
        "APIs": [
            {
                "name": "FilmFinder",
                "Description": "This API is to find the film ID based on genre and location.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the film",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location where film is played",
                        "type": "String"
                    }
                },
                "output_params": {
                    "film_id": {
                        "description": "the ID of the film",
                        "type": "Integer"
                    }
                },
                "format": "FilmFinder(genre, location) -> film_id"
            },
            {
                "name": "ShowTiming",
                "Description": "This API is to get the show time of a specific film.",
                "input_params": {
                    "film_id": {
                        "description": "the ID of the film",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "show_time": {
                        "description": "the time of the movie show",
                        "type": "Time"
                    }
                },
                "format": "ShowTiming(film_id) -> show_time"
            },
            {
                "name": "BookTickets",
                "Description": "This API is to book movie tickets.",
                "input_params": {
                    "show_time": {
                        "description": "the time of the movie show",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookTickets(show_time) -> booking status."
            }
        ],
        "Query": "Can you reserve tickets for a romantic movie this afternoon in New York?",
        "Label": "BookTickets(show_time=ShowTiming(film_id=FilmFinder(genre='romantic',location='New York')))",
        "Index": 1241
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API is to search restaurants based on name and city.",
                "input_params": {
                    "name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantSearch(name, city) -> restaurant_id"
            },
            {
                "name": "TableAvailability",
                "Description": "This API is to check table availability in a restaurant for a certain number of people.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    },
                    "no_of_people": {
                        "description": "the number of people for the reservation",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "table_id": {
                        "description": "the ID of the available table",
                        "type": "Integer"
                    }
                },
                "format": "TableAvailability(restaurant_id, no_of_people) -> table_id"
            },
            {
                "name": "Reservation",
                "Description": "This API is to book a reservation.",
                "input_params": {
                    "table_id": {
                        "description": "the ID of the table",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the reservation",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "Reservation(table_id, date, time) -> reservation_status"
            }
        ],
        "Query": "Can you book a table for 2 at 'Chez Panisse' in Berkeley on 20th October at 6 PM?",
        "Label": "Reservation(table_id=TableAvailability(restaurant_id=RestaurantSearch(name='Chez Panisse', city='Berkeley'), no_of_people=2), date='20th October', time='6 PM')",
        "Index": 1242
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API is to search for a restaurant by its name and location.",
                "input_params": {
                    "name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantSearch(name, city) -> restaurant_id"
            },
            {
                "name": "TableAvailability",
                "Description": "This API checks the availability of tables in a restaurant for a specific number of people.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    },
                    "no_of_people": {
                        "description": "the number of people for the reservation",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "table_id": {
                        "description": "the ID of the table available",
                        "type": "Integer"
                    }
                },
                "format": "TableAvailability(restaurant_id, no_of_people) -> table_id"
            },
            {
                "name": "Reservation",
                "Description": "This API makes a reservation for a table in a restaurant at a specific date and time.",
                "input_params": {
                    "table_id": {
                        "description": "the ID of the table",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the reservation",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "confirmation": {
                        "description": "the confirmation status of the reservation",
                        "type": "String"
                    }
                },
                "format": "Reservation(table_id, date, time) -> confirmation"
            }
        ],
        "Query": "I need a reservation for 5 at 'Eleven Madison Park' in New York on 30th December at 7:30 PM. Can you arrange that?",
        "Label": "Reservation(table_id=TableAvailability(restaurant_id=RestaurantSearch(name='Eleven Madison Park', city='New York'), no_of_people=5), date='30th December', time='7:30 PM')",
        "Index": 1243
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API is to search for the restaurant by its name and city.",
                "input_params": {
                    "name": {
                        "description": "The name of the restaurant",
                        "type": "String"
                    },
                    "city": {
                        "description": "The city where the restaurant is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_id": {
                        "description": "The ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantSearch(name, city) -> restaurant_id"
            },
            {
                "name": "TableAvailability",
                "Description": "This API is to check the table availability in the restaurant for the given number of people.",
                "input_params": {
                    "restaurant_id": {
                        "description": "The ID of the restaurant",
                        "type": "Integer"
                    },
                    "no_of_people": {
                        "description": "The number of people for the reservation",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "table_id": {
                        "description": "The ID of the available table",
                        "type": "Integer"
                    }
                },
                "format": "TableAvailability(restaurant_id, no_of_people) -> table_id"
            },
            {
                "name": "Reservation",
                "Description": "This API is to make a reservation for a table at a specific date and time.",
                "input_params": {
                    "table_id": {
                        "description": "The ID of the table",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "The date of the reservation",
                        "type": "Date"
                    },
                    "time": {
                        "description": "The time of the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "The status of the reservation",
                        "type": "String"
                    }
                },
                "format": "Reservation(table_id, date, time) -> reservation_status"
            }
        ],
        "Query": "Please book a table for 3 at 'Alinea' in Chicago on 1st January at 9 PM",
        "Label": "Reservation(table_id=TableAvailability(restaurant_id=RestaurantSearch(name='Alinea', city='Chicago'), no_of_people=3), date='1st January', time='9 PM')",
        "Index": 1244
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API is to search for a restaurant based on name and city.",
                "input_params": {
                    "name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantSearch(name, city) -> restaurant_id"
            },
            {
                "name": "TableAvailability",
                "Description": "This API is to check table availability in a restaurant for a specific number of people.",
                "input_params": {
                    "restaurant_id": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    },
                    "no_of_people": {
                        "description": "the number of people for the reservation",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "table_id": {
                        "description": "the ID of the available table",
                        "type": "Integer"
                    }
                },
                "format": "TableAvailability(restaurant_id, no_of_people) -> table_id"
            },
            {
                "name": "Reservation",
                "Description": "This API is to make a reservation.",
                "input_params": {
                    "table_id": {
                        "description": "the ID of the table",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the reservation",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation confirmation": {
                        "description": "the confirmation status of the reservation",
                        "type": "String"
                    }
                },
                "format": "Reservation(table_id, date, time)-> reservation confirmation."
            }
        ],
        "Query": "Please book a table for 3 at 'Alinea' in Chicago on 1st January at 9 PM.",
        "Label": "Reservation(table_id=TableAvailability(restaurant_id=RestaurantSearch(name='Alinea', city='Chicago'), no_of_people=3), date='1st January', time='9 PM')",
        "Index": 1245
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API is to search for a restaurant in a specific city.",
                "input_params": {
                    "name": {
                        "description": "The name of the restaurant",
                        "type": "String"
                    },
                    "city": {
                        "description": "The city in which the restaurant is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_id": {
                        "description": "The ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantSearch(name, city) -> restaurant_id"
            },
            {
                "name": "TableAvailability",
                "Description": "This API is to check the availability of tables in a restaurant for a specific number of people.",
                "input_params": {
                    "restaurant_id": {
                        "description": "The ID of the restaurant",
                        "type": "Integer"
                    },
                    "no_of_people": {
                        "description": "The number of people for the booking",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "table_id": {
                        "description": "The ID of the available table",
                        "type": "Integer"
                    }
                },
                "format": "TableAvailability(restaurant_id, no_of_people) -> table_id"
            },
            {
                "name": "Reservation",
                "Description": "This API is to book a table in a restaurant on a specific date and time.",
                "input_params": {
                    "table_id": {
                        "description": "The ID of the table",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "The date of the booking",
                        "type": "Date"
                    },
                    "time": {
                        "description": "The time of the booking",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "The status of the reservation",
                        "type": "String"
                    }
                },
                "format": "Reservation(table_id, date, time) -> reservation_status"
            }
        ],
        "Query": "I want to book a table for 2 at 'The Fat Duck' in Bray on 25th March at 7 PM. Can you do that?",
        "Label": "Reservation(table_id=TableAvailability(restaurant_id=RestaurantSearch(name='The Fat Duck', city='Bray'), no_of_people=2), date='25th March', time='7 PM')",
        "Index": 1246
    },
    {
        "APIs": [
            {
                "name": "GetFlightDetails",
                "Description": "This API is to get flight details for a specific city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the destination city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "Flight Details": {
                        "description": "the details of the flight",
                        "type": "String"
                    }
                },
                "format": "GetFlightDetails(city, date) -> Flight Details"
            },
            {
                "name": "GetHotelDetails",
                "Description": "This API is to get hotel details for a specific city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the destination city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the stay",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "Hotel Details": {
                        "description": "the details of the hotel",
                        "type": "String"
                    }
                },
                "format": "GetHotelDetails(city, date) -> Hotel Details"
            },
            {
                "name": "PlanTrip",
                "Description": "This API is to plan a trip which includes flight booking and hotel reservation.",
                "input_params": {
                    "flight": {
                        "description": "the details of the flight",
                        "type": "String"
                    },
                    "hotel": {
                        "description": "the details of the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Trip Details": {
                        "description": "the details of the planned trip",
                        "type": "String"
                    }
                },
                "format": "PlanTrip(flight, hotel) -> Trip Details"
            }
        ],
        "Query": "Can you organize a tour from Houston to Tokyo on the 15th of February?",
        "Label": "PlanTrip(flight=GetFlightDetails(city='Tokyo', date='15th of February'), hotel=GetHotelDetails(city='Tokyo', date='15th of February'))",
        "Index": 1247
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to forecast the weather.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weatherDetails": {
                        "description": "the forecasted weather details",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weatherDetails"
            },
            {
                "name": "EventSearch",
                "Description": "This API is to search for events.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    },
                    "weatherDetails": {
                        "description": "the weather conditions",
                        "type": "String"
                    }
                },
                "output_params": {
                    "eventDetails": {
                        "description": "the details of the event",
                        "type": "String"
                    }
                },
                "format": "EventSearch(city, date, weatherDetails) -> eventDetails"
            },
            {
                "name": "TicketBooking",
                "Description": "This API is to book tickets for an event.",
                "input_params": {
                    "eventDetails": {
                        "description": "the details of the event",
                        "type": "String"
                    },
                    "num_of_tickets": {
                        "description": "the number of tickets to book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking confirmation": {
                        "description": "the confirmation of the booking",
                        "type": "String"
                    }
                },
                "format": "TicketBooking(eventDetails, num_of_tickets) -> booking confirmation."
            }
        ],
        "Query": "Can you fetch me the weather in New York on 12th of June, find events on the same day keeping in mind the weather conditions and then help me book 2 tickets for the event?",
        "Label": "TicketBooking(eventDetails=EventSearch(city='New York', date='12th of June', weatherDetails=WeatherForecast(city='New York', date='12th of June')), num_of_tickets='2')",
        "Index": 1248
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast of a particular city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weatherDetails": {
                        "description": "the weather forecast details",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weatherDetails"
            },
            {
                "name": "EventSearch",
                "Description": "This API is to search events in a city on a specific date considering the weather.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    },
                    "weatherDetails": {
                        "description": "the weather forecast details",
                        "type": "String"
                    }
                },
                "output_params": {
                    "eventDetails": {
                        "description": "the details of the event",
                        "type": "String"
                    }
                },
                "format": "EventSearch(city, date, weatherDetails) -> eventDetails"
            },
            {
                "name": "TicketBooking",
                "Description": "This API is to book a specific number of tickets for an event.",
                "input_params": {
                    "eventDetails": {
                        "description": "the details of the event",
                        "type": "String"
                    },
                    "num_of_tickets": {
                        "description": "the number of tickets to be booked",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "TicketBooking(eventDetails, num_of_tickets) -> booking status"
            }
        ],
        "Query": "Can you let me know the weather in Berlin on 3rd of May, find events taking place on the same day given the weather and then book 3 tickets for the chosen event?",
        "Label": "TicketBooking(eventDetails=EventSearch(city='Berlin', date='3rd of May', weatherDetails=WeatherForecast(city='Berlin', date='3rd of May')), num_of_tickets='3')",
        "Index": 1249
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to fetch the weather forecast.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weatherDetails": {
                        "description": "the details of the weather",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weatherDetails"
            },
            {
                "name": "EventSearch",
                "Description": "This API is to search for events.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    },
                    "weatherDetails": {
                        "description": "the details of the weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "eventDetails": {
                        "description": "the details of the event",
                        "type": "String"
                    }
                },
                "format": "EventSearch(city, date, weatherDetails) -> eventDetails"
            },
            {
                "name": "TicketBooking",
                "Description": "This API is to book tickets for an event.",
                "input_params": {
                    "eventDetails": {
                        "description": "the details of the event",
                        "type": "String"
                    },
                    "num_of_tickets": {
                        "description": "the number of tickets to be booked",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "TicketBooking(eventDetails, num_of_tickets) -> booking status."
            }
        ],
        "Query": "Can you fetch me the weather in Sydney on 1st of January, search for events on the same day keeping the weather in mind and then help me book 1 ticket for the event?",
        "Label": "TicketBooking(eventDetails=EventSearch(city='Sydney', date='1st of January', weatherDetails=WeatherForecast(city='Sydney', date='1st of January')), num_of_tickets='1')",
        "Index": 1250
    },
    {
        "APIs": [
            {
                "name": "HotelSearch",
                "Description": "This API is to search for available hotels in a specific city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the city where the hotel is located",
                        "type": "String"
                    },
                    "date": {
                        "description": "the start date for the hotel booking",
                        "type": "Date"
                    },
                    "num_of_rooms": {
                        "description": "the number of rooms required",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "hotelResults": {
                        "description": "a list of available hotels",
                        "type": "List"
                    }
                },
                "format": "HotelSearch(city, date, num_of_rooms) -> hotelResults"
            },
            {
                "name": "CarRentalSearch",
                "Description": "This API is to search for available rental cars in a specific city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the city where the rental car is needed",
                        "type": "String"
                    },
                    "date": {
                        "description": "the start date for the car rental",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "rentalCarDetails": {
                        "description": "a list of available rental cars",
                        "type": "List"
                    }
                },
                "format": "CarRentalSearch(city, date) -> rentalCarDetails"
            },
            {
                "name": "PackageBooking",
                "Description": "This API is to book a package including hotel and rental car.",
                "input_params": {
                    "hotelResults": {
                        "description": "a list of selected hotels from the HotelSearch output",
                        "type": "List"
                    },
                    "rentalCarDetails": {
                        "description": "selected rental car details from the CarRentalSearch output",
                        "type": "List"
                    },
                    "num_of_people": {
                        "description": "the number of people for the package booking",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "bookingConfirmation": {
                        "description": "confirmation details of the booking",
                        "type": "String"
                    }
                },
                "format": "PackageBooking(hotelResults, rentalCarDetails, num_of_people) -> bookingConfirmation"
            }
        ],
        "Query": "Can you assist in searching for a car for rent and a hotel in Tokyo for 4 nights starting from 10th August for 1 person?",
        "Label": "PackageBooking(hotelResults=HotelSearch(city='Tokyo', date='10th August', num_of_rooms='1'), rentalCarDetails=CarRentalSearch(city='Tokyo', date='10th August'), num_of_people='1')",
        "Index": 1251
    },
    {
        "APIs": [
            {
                "name": "HotelSearch",
                "description": "This API is to search for available hotels in a given city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city where the hotel is located",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the hotel booking",
                        "type": "Date"
                    },
                    "num_of_rooms": {
                        "description": "the number of rooms to be booked",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "hotelResults": {
                        "description": "the search results of the hotels",
                        "type": "String"
                    }
                },
                "format": "HotelSearch(city, date, num_of_rooms) -> hotelResults"
            },
            {
                "name": "CarRentalSearch",
                "description": "This API is to search for available rental cars in a given city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city where the car rental service is located",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the car rental",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "rentalCarDetails": {
                        "description": "the search results of the rental cars",
                        "type": "String"
                    }
                },
                "format": "CarRentalSearch(city, date) -> rentalCarDetails"
            },
            {
                "name": "PackageBooking",
                "description": "This API is to book a package including hotel and rental car.",
                "input_params": {
                    "hotelResults": {
                        "description": "the search results of the hotels",
                        "type": "String"
                    },
                    "rentalCarDetails": {
                        "description": "the search results of the rental cars",
                        "type": "String"
                    },
                    "num_of_people": {
                        "description": "the number of people for the booking",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "PackageBooking(hotelResults, rentalCarDetails, num_of_people) -> booking status."
            }
        ],
        "Query": "I need your assistance in finding a car on hire and a hotel in Rome for 6 nights from 30th September for 2 people.",
        "Label": "PackageBooking(hotelResults=HotelSearch(city='Rome', date='30th September', num_of_rooms='1'), rentalCarDetails=CarRentalSearch(city='Rome', date='30th September'), num_of_people='2')",
        "Index": 1252
    },
    {
        "APIs": [
            {
                "name": "MovieSearch",
                "Description": "This API is to search for a movie by title and director.",
                "input_params": {
                    "title": {
                        "description": "the title of the movie",
                        "type": "String"
                    },
                    "director": {
                        "description": "the director of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "format": "MovieSearch(title, director) -> movieDetails"
            },
            {
                "name": "CinemaFinder",
                "Description": "This API is to find cinema locations that are showing a specific movie.",
                "input_params": {
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "cinemaLocations": {
                        "description": "the locations of the cinemas showing the movie",
                        "type": "Array"
                    }
                },
                "format": "CinemaFinder(movieDetails) -> cinemaLocations"
            },
            {
                "name": "ShowtimeCheck",
                "Description": "This API is to check the showtimes of a specific movie at various cinema locations.",
                "input_params": {
                    "cinemaLocations": {
                        "description": "the locations of the cinemas",
                        "type": "Array"
                    },
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "showtimes": {
                        "description": "the showtimes of the movie at the specified cinema locations",
                        "type": "Array"
                    }
                },
                "format": "ShowtimeCheck(cinemaLocations, movieDetails) -> showtimes"
            }
        ],
        "Query": "Can you find where the movie 'The Dark Knight' by Christopher Nolan is being shown and tell me the showtimes?",
        "Label": "ShowtimeCheck(cinemaLocations=CinemaFinder(movieDetails=MovieSearch(title='The Dark Knight', director='Christopher Nolan')), movieDetails=MovieSearch(title='The Dark Knight', director='Christopher Nolan'))",
        "Index": 1253
    },
    {
        "APIs": [
            {
                "name": "MovieSearch",
                "Description": "This API is to find the details of a movie.",
                "input_params": {
                    "title": {
                        "description": "the title of the movie",
                        "type": "String"
                    },
                    "director": {
                        "description": "the director of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "format": "MovieSearch(title, director) -> movieDetails"
            },
            {
                "name": "CinemaFinder",
                "Description": "This API is to find the cinema locations showing a particular movie.",
                "input_params": {
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "cinemaLocations": {
                        "description": "the locations of cinemas showing the movie",
                        "type": "Array"
                    }
                },
                "format": "CinemaFinder(movieDetails) -> cinemaLocations"
            },
            {
                "name": "ShowtimeCheck",
                "Description": "This API is to check the showtimes of a movie at certain cinema locations.",
                "input_params": {
                    "cinemaLocations": {
                        "description": "the locations of cinemas",
                        "type": "Array"
                    },
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "showtimes": {
                        "description": "the showtimes of the movie at the given cinema locations",
                        "type": "Array"
                    }
                },
                "format": "ShowtimeCheck(cinemaLocations, movieDetails) -> showtimes"
            }
        ],
        "Query": "Can you find where the movie 'Interstellar' by Christopher Nolan is being shown and tell me the showtimes?",
        "Label": "ShowtimeCheck(cinemaLocations=CinemaFinder(movieDetails=MovieSearch(title='Interstellar', director='Christopher Nolan')), movieDetails=MovieSearch(title='Interstellar', director='Christopher Nolan'))",
        "Index": 1254
    },
    {
        "APIs": [
            {
                "name": "MovieSearch",
                "Description": "This API is to search movie by title and director.",
                "input_params": {
                    "title": {
                        "description": "the title of the movie",
                        "type": "String"
                    },
                    "director": {
                        "description": "the director of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "format": "MovieSearch(title, director) -> movieDetails"
            },
            {
                "name": "CinemaFinder",
                "Description": "This API is to find cinemas showing a specific movie.",
                "input_params": {
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "cinemaLocations": {
                        "description": "the locations of cinemas showing the movie",
                        "type": "List"
                    }
                },
                "format": "CinemaFinder(movieDetails) -> cinemaLocations"
            },
            {
                "name": "ShowtimeCheck",
                "Description": "This API is to check the showtimes of a movie at specified cinemas.",
                "input_params": {
                    "cinemaLocations": {
                        "description": "the locations of cinemas",
                        "type": "List"
                    },
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "showtimes": {
                        "description": "the showtimes of the movie",
                        "type": "List"
                    }
                },
                "format": "ShowtimeCheck(cinemaLocations, movieDetails) -> showtimes"
            }
        ],
        "Query": "Can you find where the movie 'Dunkirk' by Christopher Nolan is being shown and tell me the showtimes?",
        "Label": "ShowtimeCheck(cinemaLocations=CinemaFinder(movieDetails=MovieSearch(title='Dunkirk', director='Christopher Nolan')), movieDetails=MovieSearch(title='Dunkirk', director='Christopher Nolan'))",
        "Index": 1255
    },
    {
        "APIs": [
            {
                "name": "MovieSearch",
                "Description": "This API is to search for a movie by its title and director.",
                "input_params": {
                    "title": {
                        "description": "the title of the movie",
                        "type": "String"
                    },
                    "director": {
                        "description": "the director of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movieDetails": {
                        "description": "details of the movie",
                        "type": "String"
                    }
                },
                "format": "MovieSearch(title, director) -> movieDetails"
            },
            {
                "name": "CinemaFinder",
                "Description": "This API is to find the cinema locations where a movie is being shown.",
                "input_params": {
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cinemaLocations": {
                        "description": "the locations of cinemas showing the movie",
                        "type": "String"
                    }
                },
                "format": "CinemaFinder(movieDetails) -> cinemaLocations"
            },
            {
                "name": "ShowtimeCheck",
                "Description": "This API is to check the showtimes of a movie in specific cinema locations.",
                "input_params": {
                    "cinemaLocations": {
                        "description": "the locations of cinemas",
                        "type": "String"
                    },
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "showtimes": {
                        "description": "the showtimes of the movie",
                        "type": "String"
                    }
                },
                "format": "ShowtimeCheck(cinemaLocations, movieDetails) -> showtimes"
            }
        ],
        "Query": "Can you find where the movie 'The Prestige' by Christopher Nolan is being shown and tell me the showtimes?",
        "Label": "ShowtimeCheck(cinemaLocations=CinemaFinder(movieDetails=MovieSearch(title='The Prestige', director='Christopher Nolan')), movieDetails=MovieSearch(title='The Prestige', director='Christopher Nolan'))",
        "Index": 1256
    },
    {
        "APIs": [
            {
                "name": "MovieSearch",
                "Description": "This API is to search movie details by title and director.",
                "input_params": {
                    "title": {
                        "description": "the title of the movie",
                        "type": "String"
                    },
                    "director": {
                        "description": "the director of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movieDetails": {
                        "description": "the details of the searched movie",
                        "type": "Object"
                    }
                },
                "format": "MovieSearch(title, director) -> movieDetails"
            },
            {
                "name": "CinemaFinder",
                "Description": "This API is to find cinema locations where a particular movie is being shown.",
                "input_params": {
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "cinemaLocations": {
                        "description": "the locations of cinemas where the movie is being shown",
                        "type": "Array"
                    }
                },
                "format": "CinemaFinder(movieDetails) -> cinemaLocations"
            },
            {
                "name": "ShowtimeCheck",
                "Description": "This API is to check the show times of a movie at certain cinema locations.",
                "input_params": {
                    "cinemaLocations": {
                        "description": "the locations of cinemas",
                        "type": "Array"
                    },
                    "movieDetails": {
                        "description": "the details of the movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "showtimes": {
                        "description": "the show times of the movie at given cinemas",
                        "type": "Array"
                    }
                },
                "format": "ShowtimeCheck(cinemaLocations, movieDetails) -> showtimes"
            }
        ],
        "Query": "Can you find where the movie 'Memento' by Christopher Nolan is being shown and tell me the showtimes?",
        "Label": "ShowtimeCheck(cinemaLocations=CinemaFinder(movieDetails=MovieSearch(title='Memento', director='Christopher Nolan')), movieDetails=MovieSearch(title='Memento', director='Christopher Nolan'))",
        "Index": 1257
    },
    {
        "APIs": [
            {
                "name": "HotelSearch",
                "Description": "This API is to search for hotels in a specific city and date.",
                "input_params": {
                    "city": {
                        "description": "the city where the hotel is located",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for booking the hotel",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotelDetails": {
                        "description": "the details of the hotel",
                        "type": "Object"
                    }
                },
                "format": "HotelSearch(city, date) -> hotelDetails"
            },
            {
                "name": "RestaurantLocator",
                "Description": "This API is to locate restaurants in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantLocations": {
                        "description": "the locations of the restaurants",
                        "type": "Object"
                    }
                },
                "format": "RestaurantLocator(city) -> restaurantLocations"
            },
            {
                "name": "ReservationBooking",
                "Description": "This API is to book a hotel and a restaurant.",
                "input_params": {
                    "hotelDetails": {
                        "description": "the details of the hotel",
                        "type": "Object"
                    },
                    "restaurantLocations": {
                        "description": "the locations of the restaurants",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "ReservationBooking(hotelDetails, restaurantLocations) -> booking status"
            }
        ],
        "Query": "Can you book a hotel and a restaurant in Los Angeles on June 7th?",
        "Label": "ReservationBooking(hotelDetails=HotelSearch(city='Los Angeles', date='June 7th'), restaurantLocations=RestaurantLocator(city='Los Angeles'))",
        "Index": 1258
    },
    {
        "APIs": [
            {
                "name": "HotelSearch",
                "Description": "This API is to search hotels in a city.",
                "input_params": {
                    "city": {
                        "description": "the city where the hotel is located",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date to book the hotel",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotelDetails": {
                        "description": "the details of the hotel",
                        "type": "String"
                    }
                },
                "format": "HotelSearch(city, date) -> hotelDetails"
            },
            {
                "name": "RestaurantLocator",
                "Description": "This API is to locate restaurants in a city.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantLocations": {
                        "description": "the locations of restaurants in the city",
                        "type": "String"
                    }
                },
                "format": "RestaurantLocator(city) -> restaurantLocations"
            },
            {
                "name": "ReservationBooking",
                "Description": "This API is to book a hotel and a restaurant.",
                "input_params": {
                    "hotelDetails": {
                        "description": "the details of the hotel",
                        "type": "String"
                    },
                    "restaurantLocations": {
                        "description": "the locations of restaurants",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "ReservationBooking(hotelDetails, restaurantLocations)-> booking status."
            }
        ],
        "Query": "Can you book a hotel and a restaurant in Miami on August 25th?",
        "Label": "ReservationBooking(hotelDetails=HotelSearch(city='Miami', date='August 25th'), restaurantLocations=RestaurantLocator(city='Miami'))",
        "Index": 1259
    },
    {
        "APIs": [
            {
                "name": "HotelSearch",
                "Description": "This API is to search for hotels in a particular city on a given date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city where the hotel is located",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the hotel booking",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotelDetails": {
                        "description": "the details of the hotel",
                        "type": "Object"
                    }
                },
                "format": "HotelSearch(city, date) -> hotelDetails"
            },
            {
                "name": "RestaurantLocator",
                "Description": "This API is to locate restaurants in a particular city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city where the restaurant is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantLocations": {
                        "description": "the locations of the restaurants",
                        "type": "Object"
                    }
                },
                "format": "RestaurantLocator(city) -> restaurantLocations"
            },
            {
                "name": "ReservationBooking",
                "Description": "This API is to book a hotel and restaurant.",
                "input_params": {
                    "hotelDetails": {
                        "description": "the details of the hotel",
                        "type": "Object"
                    },
                    "restaurantLocations": {
                        "description": "the locations of the restaurants",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "ReservationBooking(hotelDetails, restaurantLocations) -> booking status"
            }
        ],
        "Query": "Can you book a hotel and a restaurant in Chicago on September 30th?",
        "Label": "ReservationBooking(hotelDetails=HotelSearch(city='Chicago', date='September 30th'), restaurantLocations=RestaurantLocator(city='Chicago'))",
        "Index": 1260
    },
    {
        "APIs": [
            {
                "name": "HotelSearch",
                "Description": "This API is to search for hotels in a particular city.",
                "input_params": {
                    "city": {
                        "description": "the city where the user wants to book a hotel",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date when the user wants to book the hotel",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotelDetails": {
                        "description": "the details of the available hotels",
                        "type": "String"
                    }
                },
                "format": "HotelSearch(city, date) -> hotelDetails"
            },
            {
                "name": "RestaurantLocator",
                "Description": "This API is to locate restaurants in a particular city.",
                "input_params": {
                    "city": {
                        "description": "the city where the user wants to find a restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantLocations": {
                        "description": "the locations of the available restaurants",
                        "type": "String"
                    }
                },
                "format": "RestaurantLocator(city) -> restaurantLocations"
            },
            {
                "name": "ReservationBooking",
                "Description": "This API is to book a hotel and a restaurant.",
                "input_params": {
                    "hotelDetails": {
                        "description": "the details of the hotel to be booked",
                        "type": "String"
                    },
                    "restaurantLocations": {
                        "description": "the location of the restaurant to be booked",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "ReservationBooking(hotelDetails, restaurantLocations) -> booking status."
            }
        ],
        "Query": "Can you book a hotel and a restaurant in Las Vegas on October 10th?",
        "Label": "ReservationBooking(hotelDetails=HotelSearch(city='Las Vegas', date='October 10th'), restaurantLocations=RestaurantLocator(city='Las Vegas'))",
        "Index": 1261
    },
    {
        "APIs": [
            {
                "name": "ProductSearch",
                "Description": "This API is to search for a specified product.",
                "input_params": {
                    "productName": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "productDetails": {
                        "description": "the details of the product",
                        "type": "Object"
                    }
                },
                "format": "ProductSearch(productName) -> productDetails"
            },
            {
                "name": "StoreLocator",
                "Description": "This API is to find the store locations based on the product details.",
                "input_params": {
                    "productDetails": {
                        "description": "the details of the product",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "storeLocations": {
                        "description": "the locations of the stores that have the specified product",
                        "type": "Array"
                    }
                },
                "format": "StoreLocator(productDetails) -> storeLocations"
            },
            {
                "name": "StoreWorkingHours",
                "Description": "This API is to get the working hours of the stores based on their locations.",
                "input_params": {
                    "storeLocations": {
                        "description": "the locations of the stores",
                        "type": "Array"
                    }
                },
                "output_params": {
                    "storeHours": {
                        "description": "the working hours of the stores",
                        "type": "Array"
                    }
                },
                "format": "StoreWorkingHours(storeLocations) -> storeHours"
            }
        ],
        "Query": "Can you find a 'Huawei P40 Pro' for me, let me know the place where I can buy it and also the business hours of the store?",
        "Label": "StoreWorkingHours(storeLocations=StoreLocator(productDetails=ProductSearch(productName='Huawei P40 Pro')))",
        "Index": 1262
    },
    {
        "APIs": [
            {
                "name": "FlightSearch",
                "Description": "This API is to search for flights to a specified destination on a specified date.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    },
                    "departureDate": {
                        "description": "the departure date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flightDetails": {
                        "description": "the details of the available flight",
                        "type": "Object"
                    }
                },
                "format": "FlightSearch(destination, departureDate) -> flightDetails"
            },
            {
                "name": "HotelBooking",
                "Description": "This API is to book a hotel based on flight details.",
                "input_params": {
                    "flightDetails": {
                        "description": "the details of the booked flight",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "hotelBookingConfirmation": {
                        "description": "the confirmation details of the hotel booking",
                        "type": "Object"
                    }
                },
                "format": "HotelBooking(flightDetails) -> hotelBookingConfirmation"
            },
            {
                "name": "CarRentalService",
                "Description": "This API is to arrange a car rental service based on hotel booking confirmation.",
                "input_params": {
                    "hotelBookingConfirmation": {
                        "description": "the confirmation details of the hotel booking",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "carRentalConfirmation": {
                        "description": "the confirmation details of the car rental service",
                        "type": "Object"
                    }
                },
                "format": "CarRentalService(hotelBookingConfirmation) -> carRentalConfirmation"
            }
        ],
        "Query": "I need a flight to Miami on 20th February, along with a hotel reservation and car rental service. Can you arrange that for me?",
        "Label": "CarRentalService(hotelBookingConfirmation=HotelBooking(flightDetails=FlightSearch(destination='Miami', departureDate='20th February')))",
        "Index": 1263
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant near a cinema playing a specific movie at a certain time.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "ShowTime": {
                        "description": "the show time of the movie",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "RestaurantOptions": {
                        "description": "a list of restaurant options",
                        "type": "List"
                    }
                },
                "format": "FindRestaurant(movie_name, ShowTime) -> RestaurantOptions"
            },
            {
                "name": "GetMovieTime",
                "Description": "This API is to get the show time of a specific movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ShowTime": {
                        "description": "the show time of the movie",
                        "type": "Time"
                    }
                },
                "format": "GetMovieTime(movie_name) -> ShowTime"
            },
            {
                "name": "MakeReservation",
                "Description": "This API is to make a reservation at a restaurant.",
                "input_params": {
                    "RestaurantOptions": {
                        "description": "a list of restaurant options",
                        "type": "List"
                    },
                    "ShowTime": {
                        "description": "the show time of the movie",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "MakeReservation(RestaurantOptions, ShowTime)-> reservation status."
            }
        ],
        "Query": "Can I reserve a place in a restaurant near the cinema where 'The Dark Knight' is playing?",
        "Label": "MakeReservation(RestaurantOptions=FindRestaurant(movie_name='The Dark Knight', ShowTime=GetMovieTime(movie_name='The Dark Knight')), ShowTime=GetMovieTime(movie_name='The Dark Knight'))",
        "Index": 1264
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the current weather in a specified city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "WeatherStatus": {
                        "description": "the current weather status of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> WeatherStatus"
            },
            {
                "name": "FindClothing",
                "Description": "This API is to recommend an outfit based on the current weather.",
                "input_params": {
                    "WeatherStatus": {
                        "description": "the current weather status",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ClothingRecommendation": {
                        "description": "the recommended outfit based on the current weather",
                        "type": "String"
                    }
                },
                "format": "FindClothing(WeatherStatus) -> ClothingRecommendation"
            },
            {
                "name": "FindStore",
                "Description": "This API is to find a store where you can purchase the recommended outfit.",
                "input_params": {
                    "ClothingRecommendation": {
                        "description": "the recommended outfit",
                        "type": "String"
                    }
                },
                "output_params": {
                    "StoreLocation": {
                        "description": "the location of the store where you can purchase the recommended outfit",
                        "type": "String"
                    }
                },
                "format": "FindStore(ClothingRecommendation) -> StoreLocation"
            }
        ],
        "Query": "What outfit should I put on in Los Angeles today and where can I purchase it?",
        "Label": "FindStore(ClothingRecommendation=FindClothing(WeatherStatus=GetWeather(city='Los Angeles')))",
        "Index": 1265
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the current weather status of a specified city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "WeatherStatus": {
                        "description": "the current weather status of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> WeatherStatus"
            },
            {
                "name": "FindClothing",
                "Description": "This API is to recommend clothing based on the weather status.",
                "input_params": {
                    "WeatherStatus": {
                        "description": "the current weather status",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ClothingRecommendation": {
                        "description": "the recommended clothing based on the weather status",
                        "type": "String"
                    }
                },
                "format": "FindClothing(WeatherStatus) -> ClothingRecommendation"
            },
            {
                "name": "FindStore",
                "Description": "This API is to find a store that sells the recommended clothing.",
                "input_params": {
                    "ClothingRecommendation": {
                        "description": "the recommended clothing",
                        "type": "String"
                    }
                },
                "output_params": {
                    "StoreLocation": {
                        "description": "the location of the store that sells the recommended clothing",
                        "type": "String"
                    }
                },
                "format": "FindStore(ClothingRecommendation) -> StoreLocation"
            }
        ],
        "Query": "What apparel should I wear in San Francisco right now and where can I get it?",
        "Label": "FindStore(ClothingRecommendation=FindClothing(WeatherStatus=GetWeather(city='San Francisco')))",
        "Index": 1266
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the weather status of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "WeatherStatus": {
                        "description": "the weather status of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> WeatherStatus"
            },
            {
                "name": "FindClothing",
                "Description": "This API is to find the suitable clothing based on weather status.",
                "input_params": {
                    "WeatherStatus": {
                        "description": "the weather status of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ClothingRecommendation": {
                        "description": "the recommended type of clothing based on weather status",
                        "type": "String"
                    }
                },
                "format": "FindClothing(WeatherStatus) -> ClothingRecommendation"
            },
            {
                "name": "FindStore",
                "Description": "This API is to find a store where the recommended clothing can be bought.",
                "input_params": {
                    "ClothingRecommendation": {
                        "description": "the recommended type of clothing",
                        "type": "String"
                    }
                },
                "output_params": {
                    "StoreLocation": {
                        "description": "the location of the store where the recommended clothing can be bought",
                        "type": "String"
                    }
                },
                "format": "FindStore(ClothingRecommendation) -> StoreLocation"
            }
        ],
        "Query": "What kind of dress should I wear in Miami today and where can I buy that?",
        "Label": "FindStore(ClothingRecommendation=FindClothing(WeatherStatus=GetWeather(city='Miami')))",
        "Index": 1267
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the weather status of a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "WeatherStatus": {
                        "description": "the weather status of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> WeatherStatus"
            },
            {
                "name": "FindClothing",
                "Description": "This API is to recommend clothing based on weather status.",
                "input_params": {
                    "WeatherStatus": {
                        "description": "the weather status of a city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ClothingRecommendation": {
                        "description": "the recommended clothing based on the weather status",
                        "type": "String"
                    }
                },
                "format": "FindClothing(WeatherStatus) -> ClothingRecommendation"
            },
            {
                "name": "FindStore",
                "Description": "This API is to find a store which has the recommended clothing in stock.",
                "input_params": {
                    "ClothingRecommendation": {
                        "description": "the recommended clothing based on weather status",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Store": {
                        "description": "the store which has the recommended clothing in stock",
                        "type": "String"
                    }
                },
                "format": "FindStore(ClothingRecommendation) -> Store"
            }
        ],
        "Query": "What should I dress up in Seattle today and where can I find it?",
        "Label": "FindStore(ClothingRecommendation=FindClothing(WeatherStatus=GetWeather(city='Seattle')))",
        "Index": 1268
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the weather status of specified city.",
                "input_params": {
                    "city": {
                        "description": "The name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "WeatherStatus": {
                        "description": "Weather status of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> WeatherStatus"
            },
            {
                "name": "FindClothing",
                "Description": "This API is to get the clothing recommendation based on the weather status.",
                "input_params": {
                    "WeatherStatus": {
                        "description": "Weather status of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ClothingRecommendation": {
                        "description": "Recommended clothing based on the weather status",
                        "type": "String"
                    }
                },
                "format": "FindClothing(WeatherStatus) -> ClothingRecommendation"
            },
            {
                "name": "FindStore",
                "Description": "This API is to find the store where the recommended clothing can be purchased.",
                "input_params": {
                    "ClothingRecommendation": {
                        "description": "Recommended clothing based on the weather status",
                        "type": "String"
                    }
                },
                "output_params": {
                    "StoreLocation": {
                        "description": "Location of the store where the recommended clothing can be purchased",
                        "type": "String"
                    }
                },
                "format": "FindStore(ClothingRecommendation) -> StoreLocation"
            }
        ],
        "Query": "What should I wear in Chicago today and where can I purchase it?",
        "Label": "FindStore(ClothingRecommendation=FindClothing(WeatherStatus=GetWeather(city='Chicago')))",
        "Index": 1269
    },
    {
        "APIs": [
            {
                "name": "CheckFlight",
                "Description": "This API is to check the flight details.",
                "input_params": {
                    "flight_number": {
                        "description": "the number of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ArrivalTime": {
                        "description": "the arrival time of the flight",
                        "type": "Time"
                    }
                },
                "format": "CheckFlight(flight_number) -> ArrivalTime"
            },
            {
                "name": "FindTaxi",
                "Description": "This API is to find the taxi details.",
                "input_params": {
                    "ArrivalTime": {
                        "description": "the arrival time of the flight",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "TaxiInfo": {
                        "description": "Information of the taxi",
                        "type": "String"
                    }
                },
                "format": "FindTaxi(ArrivalTime) -> TaxiInfo"
            },
            {
                "name": "CalculateFare",
                "Description": "This API is to calculate the fare of the taxi ride.",
                "input_params": {
                    "TaxiInfo": {
                        "description": "the information of the taxi",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination of the ride",
                        "type": "String"
                    }
                },
                "output_params": {
                    "fare": {
                        "description": "the fare of the ride",
                        "type": "Float"
                    }
                },
                "format": "CalculateFare(TaxiInfo, destination) -> fare"
            }
        ],
        "Query": "How much will it cost for a cab from the airport to my home if my flight number is BA456?",
        "Label": "CalculateFare(TaxiInfo=FindTaxi(ArrivalTime=CheckFlight(flight_number='BA456')), destination='my home')",
        "Index": 1270
    },
    {
        "APIs": [
            {
                "name": "CheckFlight",
                "Description": "This API is to check the flight information.",
                "input_params": {
                    "flight_number": {
                        "description": "the number of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ArrivalTime": {
                        "description": "the arrival time of the flight",
                        "type": "Time"
                    }
                },
                "format": "CheckFlight(flight_number) -> ArrivalTime"
            },
            {
                "name": "FindTaxi",
                "Description": "This API is to find the taxi based on the given arrival time.",
                "input_params": {
                    "ArrivalTime": {
                        "description": "the arrival time of the flight",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "TaxiInfo": {
                        "description": "the information of the taxi",
                        "type": "String"
                    }
                },
                "format": "FindTaxi(ArrivalTime) -> TaxiInfo"
            },
            {
                "name": "CalculateFare",
                "Description": "This API is to calculate the fare for a taxi ride.",
                "input_params": {
                    "TaxiInfo": {
                        "description": "the information of the taxi",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination of the taxi ride",
                        "type": "String"
                    }
                },
                "output_params": {
                    "fare": {
                        "description": "the fare of the taxi ride",
                        "type": "Float"
                    }
                },
                "format": "CalculateFare(TaxiInfo, destination) -> fare"
            }
        ],
        "Query": "Can you tell me the fare for a taxi ride from the airport to my friend's house if my flight number is DL1234?",
        "Label": "CalculateFare(TaxiInfo=FindTaxi(ArrivalTime=CheckFlight(flight_number='DL1234')), destination='my friend's house')",
        "Index": 1271
    },
    {
        "APIs": [
            {
                "name": "CheckFlight",
                "Description": "This API is to check flight information.",
                "input_params": {
                    "flight_number": {
                        "description": "the flight number of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ArrivalTime": {
                        "description": "the arrival time of the flight",
                        "type": "Time"
                    }
                },
                "format": "CheckFlight(flight_number) -> ArrivalTime"
            },
            {
                "name": "FindTaxi",
                "Description": "This API is to find a taxi at the arrival time.",
                "input_params": {
                    "ArrivalTime": {
                        "description": "the arrival time of the flight",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "TaxiInfo": {
                        "description": "the information of the taxi",
                        "type": "String"
                    }
                },
                "format": "FindTaxi(ArrivalTime) -> TaxiInfo"
            },
            {
                "name": "CalculateFare",
                "Description": "This API is to calculate the fare for a taxi ride.",
                "input_params": {
                    "TaxiInfo": {
                        "description": "the information of the taxi",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination of the taxi ride",
                        "type": "String"
                    }
                },
                "output_params": {
                    "fare": {
                        "description": "the fare of the taxi ride",
                        "type": "Float"
                    }
                },
                "format": "CalculateFare(TaxiInfo, destination) -> fare"
            }
        ],
        "Query": "How much do I need to pay for a taxi from the airport to my villa if my flight number is EK9012?",
        "Label": "CalculateFare(TaxiInfo=FindTaxi(ArrivalTime=CheckFlight(flight_number='EK9012')), destination='my villa')",
        "Index": 1272
    },
    {
        "APIs": [
            {
                "name": "WeatherAPI",
                "Description": "This API is to get the current weather conditions of a specified city.",
                "input_params": {
                    "City": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "WeatherConditions": {
                        "description": "the current weather conditions of the city",
                        "type": "String"
                    }
                },
                "format": "WeatherAPI(City) -> WeatherConditions"
            },
            {
                "name": "ClothingSuggestion",
                "Description": "This API is to suggest the suitable clothes based on weather conditions.",
                "input_params": {
                    "WeatherConditions": {
                        "description": "the current weather conditions",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Clothes": {
                        "description": "the suggestion of clothes",
                        "type": "String"
                    }
                },
                "format": "ClothingSuggestion(WeatherConditions) -> Clothes"
            },
            {
                "name": "PackingListGenerator",
                "Description": "This API is to generate a packing list for a trip.",
                "input_params": {
                    "numberOfDays": {
                        "description": "the number of the days of the trip",
                        "type": "String"
                    },
                    "Clothes": {
                        "description": "the suggestion of clothes",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Packing List": {
                        "description": "the generated packing list for the trip",
                        "type": "String"
                    }
                },
                "format": "PackingListGenerator(numberOfDays, Clothes) -> Packing List"
            }
        ],
        "Query": "What should I include in my luggage for a 14 day trip to Tokyo based on the current weather?",
        "Label": "PackingListGenerator(numberOfDays='14', Clothes=ClothingSuggestion(WeatherConditions=WeatherAPI(City='Tokyo')))",
        "Index": 1273
    },
    {
        "APIs": [
            {
                "name": "BookSearch",
                "Description": "This API is to search for a book and return its ID",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "BookID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookSearch(title) -> BookID"
            },
            {
                "name": "BookPrice",
                "Description": "This API is to get the price of a book given its ID",
                "input_params": {
                    "BookID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "Price": {
                        "description": "the price of the book",
                        "type": "Float"
                    }
                },
                "format": "BookPrice(BookID) -> Price"
            },
            {
                "name": "ConvertToCurrency",
                "Description": "This API is to convert a given price to a specified currency",
                "input_params": {
                    "Price": {
                        "description": "the price to convert",
                        "type": "Float"
                    },
                    "Currency": {
                        "description": "the target currency",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Converted_Price": {
                        "description": "the converted price in the specified currency",
                        "type": "Float"
                    }
                },
                "format": "ConvertToCurrency(Price, Currency) -> Converted_Price"
            }
        ],
        "Query": "What is the price of 'The Great Gatsby' in Euros?",
        "Label": "ConvertToCurrency(Price=BookPrice(BookID=BookSearch(title='The Great Gatsby')), Currency='Euros')",
        "Index": 1274
    },
    {
        "APIs": [
            {
                "name": "BookSearch",
                "Description": "This API is to obtain the ID of a book by its title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "BookID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookSearch(title) -> BookID"
            },
            {
                "name": "BookPrice",
                "Description": "This API is to obtain the price of a book by its ID.",
                "input_params": {
                    "BookID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "Price": {
                        "description": "the price of the book",
                        "type": "Float"
                    }
                },
                "format": "BookPrice(BookID) -> Price"
            },
            {
                "name": "ConvertToCurrency",
                "Description": "This API is to convert a given price to a specified currency.",
                "input_params": {
                    "Price": {
                        "description": "the price to be converted",
                        "type": "Float"
                    },
                    "Currency": {
                        "description": "the currency to which the price needs to be converted",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ConvertedPrice": {
                        "description": "the converted price",
                        "type": "Float"
                    }
                },
                "format": "ConvertToCurrency(Price, Currency) -> ConvertedPrice"
            }
        ],
        "Query": "How much is 'Pride and Prejudice' in Australian dollars?",
        "Label": "ConvertToCurrency(Price=BookPrice(BookID=BookSearch(title='Pride and Prejudice')), Currency='Australian dollars')",
        "Index": 1275
    },
    {
        "APIs": [
            {
                "name": "BookSearch",
                "Description": "This API is to search for a book given its title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "BookID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookSearch(title) -> BookID"
            },
            {
                "name": "BookPrice",
                "Description": "This API is to get the price of a book given its ID.",
                "input_params": {
                    "BookID": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "Price": {
                        "description": "the price of the book",
                        "type": "Float"
                    }
                },
                "format": "BookPrice(BookID) -> Price"
            },
            {
                "name": "ConvertToCurrency",
                "Description": "This API is to convert a given price to a specified currency.",
                "input_params": {
                    "Price": {
                        "description": "the price to be converted",
                        "type": "Float"
                    },
                    "Currency": {
                        "description": "the currency to convert the price to",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ConvertedPrice": {
                        "description": "the converted price in the specified currency",
                        "type": "Float"
                    }
                },
                "format": "ConvertToCurrency(Price, Currency) -> ConvertedPrice"
            }
        ],
        "Query": "How much does 'War and Peace' cost in Indian rupees?",
        "Label": "ConvertToCurrency(Price=BookPrice(BookID=BookSearch(title='War and Peace')), Currency='Indian rupees')",
        "Index": 1276
    },
    {
        "APIs": [
            {
                "name": "Weather",
                "Description": "This API is to get the current weather condition in a specific city.",
                "input_params": {
                    "City": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "WeatherCondition": {
                        "description": "the current weather condition of the city",
                        "type": "String"
                    }
                },
                "format": "Weather(City) -> WeatherCondition"
            },
            {
                "name": "OutfitSuggestion",
                "Description": "This API is to suggest outfit based on the current weather condition.",
                "input_params": {
                    "WeatherCondition": {
                        "description": "the current weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Outfit": {
                        "description": "the suggested outfit based on the weather condition",
                        "type": "String"
                    }
                },
                "format": "OutfitSuggestion(WeatherCondition) -> Outfit"
            },
            {
                "name": "Shop",
                "Description": "This API is to find the shop that sells the suggested outfit.",
                "input_params": {
                    "Outfit": {
                        "description": "the suggested outfit",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ShopLocation": {
                        "description": "the location of the shop that sells the suggested outfit",
                        "type": "String"
                    }
                },
                "format": "Shop(Outfit) -> ShopLocation"
            }
        ],
        "Query": "Where can I find the right clothes for the current weather in New York?",
        "Label": "Shop(Outfit=OutfitSuggestion(WeatherCondition=Weather(City='New York')))",
        "Index": 1277
    },
    {
        "APIs": [
            {
                "name": "Weather",
                "Description": "This API is to get the weather condition of a specific city.",
                "input_params": {
                    "City": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "WeatherCondition": {
                        "description": "the weather condition of the city",
                        "type": "String"
                    }
                },
                "format": "Weather(City) -> WeatherCondition"
            },
            {
                "name": "OutfitSuggestion",
                "Description": "This API is to suggest an outfit suitable for a specific weather condition.",
                "input_params": {
                    "WeatherCondition": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Outfit": {
                        "description": "the suggested outfit for the specific weather condition",
                        "type": "String"
                    }
                },
                "format": "OutfitSuggestion(WeatherCondition) -> Outfit"
            },
            {
                "name": "Shop",
                "Description": "This API is to find a shop where the suggested outfit can be purchased.",
                "input_params": {
                    "Outfit": {
                        "description": "the suggested outfit",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Shop": {
                        "description": "the shop where the suggested outfit can be purchased",
                        "type": "String"
                    }
                },
                "format": "Shop(Outfit) -> Shop"
            }
        ],
        "Query": "Where can I purchase an outfit suitable for the weather in London today?",
        "Label": "Shop(Outfit=OutfitSuggestion(WeatherCondition=Weather(City='London')))",
        "Index": 1278
    },
    {
        "APIs": [
            {
                "name": "Weather",
                "Description": "This API is to get the weather condition of a city.",
                "input_params": {
                    "City": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "WeatherCondition": {
                        "description": "the weather condition of the city",
                        "type": "String"
                    }
                },
                "format": "Weather(City) -> WeatherCondition"
            },
            {
                "name": "OutfitSuggestion",
                "Description": "This API is to suggest an outfit based on weather condition.",
                "input_params": {
                    "WeatherCondition": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Outfit": {
                        "description": "the suggested outfit based on weather condition",
                        "type": "String"
                    }
                },
                "format": "OutfitSuggestion(WeatherCondition) -> Outfit"
            },
            {
                "name": "Shop",
                "Description": "This API is to get a shop where the suggested outfit can be purchased.",
                "input_params": {
                    "Outfit": {
                        "description": "the outfit suggestion",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ShopDetails": {
                        "description": "the details of the shop where the outfit can be purchased",
                        "type": "String"
                    }
                },
                "format": "Shop(Outfit) -> ShopDetails"
            }
        ],
        "Query": "Where can I purchase an outfit suitable for the weather in London today?",
        "Label": "Shop(Outfit=OutfitSuggestion(WeatherCondition=Weather(City='London')))",
        "Index": 1279
    },
    {
        "APIs": [
            {
                "name": "AlbumArtist",
                "Description": "This API is to get the artist of a specific album.",
                "input_params": {
                    "album_name": {
                        "description": "the name of the album",
                        "type": "String"
                    }
                },
                "output_params": {
                    "artist": {
                        "description": "the artist of the album",
                        "type": "String"
                    }
                },
                "format": "AlbumArtist(album_name) -> artist"
            },
            {
                "name": "MusicRecommend",
                "Description": "This API is to recommend a song based on the artist, genre and year.",
                "input_params": {
                    "artist": {
                        "description": "the artist of the song",
                        "type": "String"
                    },
                    "genre": {
                        "description": "the genre of the song",
                        "type": "String"
                    },
                    "year": {
                        "description": "the release year of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song": {
                        "description": "the recommended song",
                        "type": "String"
                    }
                },
                "format": "MusicRecommend(artist, genre, year) -> song"
            }
        ],
        "Query": "Can you recommend a blues song from 1980 by the artist of 'Texas Flood' album?",
        "Label": "MusicRecommend(artist=AlbumArtist(album_name='Texas Flood'), genre='blues', year='1980')",
        "Index": 1280
    },
    {
        "APIs": [
            {
                "name": "BookAuthor",
                "Description": "This API is to get the author of a book.",
                "input_params": {
                    "book_name": {
                        "description": "The name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author": {
                        "description": "The author of the book",
                        "type": "String"
                    }
                },
                "format": "BookAuthor(book_name) -> author"
            },
            {
                "name": "AuthorBirthplace",
                "Description": "This API is to get the birthplace of an author.",
                "input_params": {
                    "author": {
                        "description": "The name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "The birthplace of the author",
                        "type": "String"
                    }
                },
                "format": "AuthorBirthplace(author) -> city"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast.",
                "input_params": {
                    "city": {
                        "description": "The city where the weather forecast is required",
                        "type": "String"
                    },
                    "date": {
                        "description": "The date when the weather forecast is required",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather forecast": {
                        "description": "The weather forecast",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city,date) -> weather forecast"
            }
        ],
        "Query": "What will be the weather forecast in the hometown of the author who wrote 'The Great Gatsby' on 22nd December 2023?",
        "Label": "WeatherForecast(city=AuthorBirthplace(author=BookAuthor(book_name='The Great Gatsby')), date='22nd December 2023')",
        "Index": 1281
    },
    {
        "APIs": [
            {
                "name": "BookAuthor",
                "Description": "This API is to get the author of a book.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    }
                },
                "format": "BookAuthor(book_name) -> author"
            },
            {
                "name": "AuthorBirthplace",
                "Description": "This API is to get the birthplace of an author.",
                "input_params": {
                    "author": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "the birthplace of the author",
                        "type": "String"
                    }
                },
                "format": "AuthorBirthplace(author) -> city"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast for a specific city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather"
            }
        ],
        "Query": "Can you tell me the weather of the birthplace of 'Animal Farm' writer on 5th April 2024?",
        "Label": "WeatherForecast(city=AuthorBirthplace(author=BookAuthor(book_name='Animal Farm')), date='5th April 2024')",
        "Index": 1282
    },
    {
        "APIs": [
            {
                "name": "BookAuthor",
                "Description": "This API is to get the author of a book.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author": {
                        "description": "the name of the author of the book",
                        "type": "String"
                    }
                },
                "format": "BookAuthor(book_name) -> author"
            },
            {
                "name": "AuthorBirthplace",
                "Description": "This API is to get the birthplace of an author.",
                "input_params": {
                    "author": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "the birthplace of the author",
                        "type": "String"
                    }
                },
                "format": "AuthorBirthplace(author) -> city"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather prediction of a city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the weather prediction",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather prediction": {
                        "description": "the weather prediction of the city on the date",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather prediction"
            }
        ],
        "Query": "What's the weather prediction for the birth city of 'To Kill a Mockingbird' author on 1st January 2023?",
        "Label": "WeatherForecast(city=AuthorBirthplace(author=BookAuthor(book_name='To Kill a Mockingbird')), date='1st January 2023')",
        "Index": 1283
    },
    {
        "APIs": [
            {
                "name": "FoodCuisine",
                "Description": "This API is to find the cuisine of a particular food.",
                "input_params": {
                    "food_name": {
                        "description": "the name of the food",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cuisine": {
                        "description": "the cuisine of the food",
                        "type": "String"
                    }
                },
                "format": "FoodCuisine(food_name) -> cuisine"
            },
            {
                "name": "CuisineOrigin",
                "Description": "This API is to find the country of origin of a particular cuisine.",
                "input_params": {
                    "cuisine": {
                        "description": "the name of the cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "country": {
                        "description": "the country of origin of the cuisine",
                        "type": "String"
                    }
                },
                "format": "CuisineOrigin(cuisine) -> country"
            },
            {
                "name": "CountryCapital",
                "Description": "This API is to find the capital of a country.",
                "input_params": {
                    "country": {
                        "description": "the name of the country",
                        "type": "String"
                    }
                },
                "output_params": {
                    "capital": {
                        "description": "the capital of the country",
                        "type": "String"
                    }
                },
                "format": "CountryCapital(country) -> capital"
            }
        ],
        "Query": "What is the capital of the country where the cuisine of 'Pizza' originates?",
        "Label": "CountryCapital(country=CuisineOrigin(cuisine=FoodCuisine(food_name='Pizza')))",
        "Index": 1284
    },
    {
        "APIs": [
            {
                "name": "FoodCuisine",
                "Description": "This API is to return the cuisine type of a specific food.",
                "input_params": {
                    "food_name": {
                        "description": "the name of the food",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cuisine": {
                        "description": "the cuisine of the food",
                        "type": "String"
                    }
                },
                "format": "FoodCuisine(food_name) -> cuisine"
            },
            {
                "name": "CuisineOrigin",
                "Description": "This API is to return the country of origin of a specific cuisine.",
                "input_params": {
                    "cuisine": {
                        "description": "the name of the cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "country": {
                        "description": "the country of origin of the cuisine",
                        "type": "String"
                    }
                },
                "format": "CuisineOrigin(cuisine) -> country"
            },
            {
                "name": "CountryCapital",
                "Description": "This API is to return the capital city of a specific country.",
                "input_params": {
                    "country": {
                        "description": "the name of the country",
                        "type": "String"
                    }
                },
                "output_params": {
                    "capital": {
                        "description": "the capital city of the country",
                        "type": "String"
                    }
                },
                "format": "CountryCapital(country) -> capital"
            }
        ],
        "Query": "What is the capital of the country where the cuisine of 'Sushi' originates?",
        "Label": "CountryCapital(country=CuisineOrigin(cuisine=FoodCuisine(food_name='Sushi')))",
        "Index": 1285
    },
    {
        "APIs": [
            {
                "name": "FoodCuisine",
                "Description": "This API is to get the cuisine of a specific food.",
                "input_params": {
                    "food_name": {
                        "description": "the name of the food",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cuisine": {
                        "description": "the cuisine of the food",
                        "type": "String"
                    }
                },
                "format": "FoodCuisine(food_name) -> cuisine"
            },
            {
                "name": "CuisineOrigin",
                "Description": "This API is to get the origin country of a particular cuisine.",
                "input_params": {
                    "cuisine": {
                        "description": "the name of the cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "country": {
                        "description": "the origin country of the cuisine",
                        "type": "String"
                    }
                },
                "format": "CuisineOrigin(cuisine) -> country"
            },
            {
                "name": "CountryCapital",
                "Description": "This API is to get the capital city of a specific country.",
                "input_params": {
                    "country": {
                        "description": "the name of the country",
                        "type": "String"
                    }
                },
                "output_params": {
                    "capital": {
                        "description": "the capital city of the country",
                        "type": "String"
                    }
                },
                "format": "CountryCapital(country) -> capital"
            }
        ],
        "Query": "What is the capital of the country where the cuisine of 'Paella' originates?",
        "Label": "CountryCapital(country=CuisineOrigin(cuisine=FoodCuisine(food_name='Paella')))",
        "Index": 1286
    },
    {
        "APIs": [
            {
                "name": "FoodCuisine",
                "Description": "This API is to find the cuisine of a particular food.",
                "input_params": {
                    "food_name": {
                        "description": "the name of the food",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cuisine": {
                        "description": "the cuisine of the food",
                        "type": "String"
                    }
                },
                "format": "FoodCuisine(food_name) -> cuisine"
            },
            {
                "name": "CuisineOrigin",
                "Description": "This API is to find the country origin of a particular cuisine.",
                "input_params": {
                    "cuisine": {
                        "description": "the name of the cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "country": {
                        "description": "the origin country of the cuisine",
                        "type": "String"
                    }
                },
                "format": "CuisineOrigin(cuisine) -> country"
            },
            {
                "name": "CountryCapital",
                "Description": "This API is to find the capital of a particular country.",
                "input_params": {
                    "country": {
                        "description": "the name of the country",
                        "type": "String"
                    }
                },
                "output_params": {
                    "capital": {
                        "description": "the capital of the country",
                        "type": "String"
                    }
                },
                "format": "CountryCapital(country) -> capital"
            }
        ],
        "Query": "What is the capital of the country where the cuisine of 'Dim Sum' originates?",
        "Label": "CountryCapital(country=CuisineOrigin(cuisine=FoodCuisine(food_name='Dim Sum')))",
        "Index": 1287
    },
    {
        "APIs": [
            {
                "name": "FoodCuisine",
                "Description": "This API is to find the cuisine of a specific food.",
                "input_params": {
                    "food_name": {
                        "description": "the name of the food",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cuisine": {
                        "description": "the cuisine of the food",
                        "type": "String"
                    }
                },
                "format": "FoodCuisine(food_name) -> cuisine"
            },
            {
                "name": "CuisineOrigin",
                "Description": "This API is to find the country of origin of a specific cuisine.",
                "input_params": {
                    "cuisine": {
                        "description": "the name of the cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "country": {
                        "description": "the country of origin of the cuisine",
                        "type": "String"
                    }
                },
                "format": "CuisineOrigin(cuisine) -> country"
            },
            {
                "name": "CountryCapital",
                "Description": "This API is to find the capital of a specific country.",
                "input_params": {
                    "country": {
                        "description": "the name of the country",
                        "type": "String"
                    }
                },
                "output_params": {
                    "capital": {
                        "description": "the capital of the country",
                        "type": "String"
                    }
                },
                "format": "CountryCapital(country) -> capital"
            }
        ],
        "Query": "What is the capital of the country where the cuisine of 'Baguette' originates?",
        "Label": "CountryCapital(country=CuisineOrigin(cuisine=FoodCuisine(food_name='Baguette')))",
        "Index": 1288
    },
    {
        "APIs": [
            {
                "name": "UserSearch",
                "Description": "This API is to find the user ID based on the user's name.",
                "input_params": {
                    "username": {
                        "description": "The name of the user.",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_id": {
                        "description": "The ID of the user.",
                        "type": "Integer"
                    }
                },
                "format": "UserSearch(username) -> user_id"
            },
            {
                "name": "OrderHistory",
                "Description": "This API is to fetch the history of orders of a particular user.",
                "input_params": {
                    "user_id": {
                        "description": "The ID of the user.",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_id": {
                        "description": "The ID of the last order made by the user.",
                        "type": "Integer"
                    }
                },
                "format": "OrderHistory(user_id) -> order_id"
            },
            {
                "name": "OrderSearch",
                "Description": "This API is to fetch the details of a particular order.",
                "input_params": {
                    "order_id": {
                        "description": "The ID of the order.",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_details": {
                        "description": "The details of the order.",
                        "type": "String"
                    }
                },
                "format": "OrderSearch(order_id) -> order_details"
            }
        ],
        "Query": "What is the last order details of user 'TomCruise'?",
        "Label": "OrderSearch(order_id=OrderHistory(user_id=UserSearch(username='TomCruise')))",
        "Index": 1289
    },
    {
        "APIs": [
            {
                "name": "UserSearch",
                "Description": "This API is to search for user ID with the username.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserSearch(username) -> user_id"
            },
            {
                "name": "OrderHistory",
                "Description": "This API is to get the last order ID of a user.",
                "input_params": {
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_id": {
                        "description": "the ID of the last order of the user",
                        "type": "Integer"
                    }
                },
                "format": "OrderHistory(user_id) -> order_id"
            },
            {
                "name": "OrderSearch",
                "Description": "This API is to get the details of a specific order.",
                "input_params": {
                    "order_id": {
                        "description": "the ID of the order",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order_details": {
                        "description": "the details of the order",
                        "type": "String"
                    }
                },
                "format": "OrderSearch(order_id) -> order_details"
            }
        ],
        "Query": "What is the last order details of user 'JennySmith'?",
        "Label": "OrderSearch(order_id=OrderHistory(user_id=UserSearch(username='JennySmith')))",
        "Index": 1290
    },
    {
        "APIs": [
            {
                "name": "IPGeolocation",
                "Description": "This API is to get the location based on the IP address.",
                "input_params": {
                    "ip": {
                        "description": "the IP address",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location of the IP address",
                        "type": "String"
                    }
                },
                "format": "IPGeolocation(ip) -> location"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast for a specific location and date.",
                "input_params": {
                    "location": {
                        "description": "the location for which to get the weather forecast",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which to get the weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(location, date) -> weather"
            },
            {
                "name": "ActivitySuggestion",
                "Description": "This API is to suggest activities based on the weather and date.",
                "input_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which to suggest activities",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "activities": {
                        "description": "the suggested activities",
                        "type": "String"
                    }
                },
                "format": "ActivitySuggestion(weather, date) -> activities"
            }
        ],
        "Query": "What activities can I do on April 10th based on the weather forecast for the location of IP 172.16.254.1?",
        "Label": "ActivitySuggestion(weather=WeatherForecast(location=IPGeolocation(ip='172.16.254.1'), date='April 10th'), date='April 10th')",
        "Index": 1291
    },
    {
        "APIs": [
            {
                "name": "IPGeolocation",
                "Description": "This API is to get the location based on IP.",
                "input_params": {
                    "ip": {
                        "description": "the IP address",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location of the IP address",
                        "type": "String"
                    }
                },
                "format": "IPGeolocation(ip) -> location"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast for a specified location and date.",
                "input_params": {
                    "location": {
                        "description": "the location for which to get the weather forecast",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which to get the weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the forecasted weather",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(location, date) -> weather"
            },
            {
                "name": "ActivitySuggestion",
                "Description": "This API is to suggest activities based on the weather and date.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the activity",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "activity": {
                        "description": "the suggested activity",
                        "type": "String"
                    }
                },
                "format": "ActivitySuggestion(weather, date) -> activity"
            }
        ],
        "Query": "What activities can I do on May 5th based on the weather forecast for the location of IP 192.168.1.2?",
        "Label": "ActivitySuggestion(weather=WeatherForecast(location=IPGeolocation(ip='192.168.1.2'), date='May 5th'), date='May 5th')",
        "Index": 1292
    },
    {
        "APIs": [
            {
                "name": "IPGeolocation",
                "Description": "This API is to get the location based on IP address.",
                "input_params": {
                    "ip": {
                        "description": "the IP address",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location that the IP address corresponds to",
                        "type": "String"
                    }
                },
                "format": "IPGeolocation(ip) -> location"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast for a specific location and date.",
                "input_params": {
                    "location": {
                        "description": "the location to get the weather forecast",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date to get the weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the forecasted weather",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(location, date) -> weather"
            },
            {
                "name": "ActivitySuggestion",
                "Description": "This API is to suggest activities based on the weather and date.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date to suggest activities",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "activities": {
                        "description": "the suggested activities",
                        "type": "Array"
                    }
                },
                "format": "ActivitySuggestion(weather, date) -> activities"
            }
        ],
        "Query": "What activities can I do on June 15th based on the weather forecast for the location of IP 10.0.0.1?",
        "Label": "ActivitySuggestion(weather=WeatherForecast(location=IPGeolocation(ip='10.0.0.1'), date='June 15th'), date='June 15th')",
        "Index": 1293
    },
    {
        "APIs": [
            {
                "name": "IPGeolocation",
                "Description": "This API is to get location based on IP address.",
                "input_params": {
                    "ip": {
                        "description": "the ip address",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location of the IP address",
                        "type": "String"
                    }
                },
                "format": "IPGeolocation(ip) -> location"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get weather forecast based on location and date.",
                "input_params": {
                    "location": {
                        "description": "the location",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(location, date) -> weather"
            },
            {
                "name": "ActivitySuggestion",
                "Description": "This API is to suggest activities based on weather and date.",
                "input_params": {
                    "weather": {
                        "description": "the weather",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for activity",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "activities": {
                        "description": "the suggested activities",
                        "type": "Array of Strings"
                    }
                },
                "format": "ActivitySuggestion(weather, date) -> activities"
            }
        ],
        "Query": "What activities can I do on July 23rd based on the weather forecast for the location of IP 192.168.0.254?",
        "Label": "ActivitySuggestion(weather=WeatherForecast(location=IPGeolocation(ip='192.168.0.254'), date='July 23rd'), date='July 23rd')",
        "Index": 1294
    },
    {
        "APIs": [
            {
                "name": "BookSearch",
                "Description": "This API is to search the information of a book.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_details": {
                        "description": "the details of the book",
                        "type": "Object"
                    }
                },
                "format": "BookSearch(title) -> book_details"
            },
            {
                "name": "AuthorDetails",
                "Description": "This API is to get the details of an author from a book.",
                "input_params": {
                    "book_details": {
                        "description": "the details of the book",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "author_info": {
                        "description": "the information of the author",
                        "type": "Object"
                    }
                },
                "format": "AuthorDetails(book_details) -> author_info"
            },
            {
                "name": "TopBooks",
                "Description": "This API is to get the top rated books of an author.",
                "input_params": {
                    "author_info": {
                        "description": "the information of the author",
                        "type": "Object"
                    },
                    "num_of_books": {
                        "description": "the number of top rated books to retrieve",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "Top_Books": {
                        "description": "the list of top rated books of the author",
                        "type": "List"
                    }
                },
                "format": "TopBooks(author_info, num_of_books) -> Top_Books"
            }
        ],
        "Query": "What are the best two books by the writer of 'Pride and Prejudice'?",
        "Label": "TopBooks(author_info=AuthorDetails(book_details=BookSearch(title='Pride and Prejudice')), num_of_books='2')",
        "Index": 1295
    },
    {
        "APIs": [
            {
                "name": "MovieLookup",
                "Description": "This API is to look up the details of a movie by its title.",
                "input_params": {
                    "title": {
                        "description": "The title of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_info": {
                        "description": "The information about the movie, including director information",
                        "type": "Object"
                    }
                },
                "format": "MovieLookup(title) -> movie_info"
            },
            {
                "name": "DirectorDetails",
                "Description": "This API is to get the details about a director based on a movie's information.",
                "input_params": {
                    "movie_info": {
                        "description": "The information about the movie, including director information",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "director_info": {
                        "description": "The information about the director",
                        "type": "Object"
                    }
                },
                "format": "DirectorDetails(movie_info) -> director_info"
            },
            {
                "name": "TopMovies",
                "Description": "This API is to get the top movies directed by a specific director.",
                "input_params": {
                    "director_info": {
                        "description": "The information about the director",
                        "type": "Object"
                    },
                    "num_of_movies": {
                        "description": "The number of top movies to recommend",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "top_movies": {
                        "description": "A list of the top movies directed by the director",
                        "type": "List"
                    }
                },
                "format": "TopMovies(director_info, num_of_movies) -> top_movies"
            }
        ],
        "Query": "Can you recommend the top five movies directed by the director of the movie 'Titanic'?",
        "Label": "TopMovies(director_info=DirectorDetails(movie_info=MovieLookup(title='Titanic')), num_of_movies='5')",
        "Index": 1296
    },
    {
        "APIs": [
            {
                "name": "MovieLookup",
                "Description": "This API is to look up a movie and get its information.",
                "input_params": {
                    "title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_info": {
                        "description": "the information of the movie",
                        "type": "Object"
                    }
                },
                "format": "MovieLookup(title) -> movie_info"
            },
            {
                "name": "DirectorDetails",
                "Description": "This API is to look up a director and get their information.",
                "input_params": {
                    "movie_info": {
                        "description": "the information of the movie directed by the director",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "director_info": {
                        "description": "the information of the director",
                        "type": "Object"
                    }
                },
                "format": "DirectorDetails(movie_info) -> director_info"
            },
            {
                "name": "TopMovies",
                "Description": "This API is to get the top ranked movies directed by a specific director.",
                "input_params": {
                    "director_info": {
                        "description": "the information of the director",
                        "type": "Object"
                    },
                    "num_of_movies": {
                        "description": "the number of top movies to recommend",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "movies_list": {
                        "description": "the list of top movies directed by the director",
                        "type": "Array"
                    }
                },
                "format": "TopMovies(director_info, num_of_movies) -> movies_list"
            }
        ],
        "Query": "Can you recommend the top five movies directed by the director of the movie 'Avatar'?",
        "Label": "TopMovies(director_info=DirectorDetails(movie_info=MovieLookup(title='Avatar')), num_of_movies='5')",
        "Index": 1297
    },
    {
        "APIs": [
            {
                "name": "GetCurrentWeather",
                "Description": "This API is to retrieve the current weather at a given location.",
                "input_params": {
                    "location": {
                        "description": "the location to get the current weather of",
                        "type": "String"
                    }
                },
                "output_params": {
                    "current_weather": {
                        "description": "the current weather at the given location",
                        "type": "String"
                    }
                },
                "format": "GetCurrentWeather(location) -> current_weather"
            },
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to retrieve the weather forecast at a given location for the coming week.",
                "input_params": {
                    "location": {
                        "description": "the location to get the weather forecast of",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the weather forecast at the given location for the coming week",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(location) -> weather_forecast"
            },
            {
                "name": "CompareWeather",
                "Description": "This API is to compare the current weather with the forecast for the coming week.",
                "input_params": {
                    "current_weather": {
                        "description": "the current weather at a location",
                        "type": "String"
                    },
                    "weather_forecast": {
                        "description": "the forecasted weather for the coming week at a location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "comparison_result": {
                        "description": "the result of the comparison between current weather and forecasted weather",
                        "type": "String"
                    }
                },
                "format": "CompareWeather(current_weather, weather_forecast) -> comparison_result"
            }
        ],
        "Query": "What's the current weather in New York and how does it compare to the forecast for the coming week?",
        "Label": "CompareWeather(current_weather=GetCurrentWeather(location='New York'), weather_forecast=GetWeatherForecast(location='New York'))",
        "Index": 1298
    },
    {
        "APIs": [
            {
                "name": "GetCurrentWeather",
                "Description": "This API is to fetch the current weather of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location for which to fetch the current weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "current_weather": {
                        "description": "the current weather of the specified location",
                        "type": "String"
                    }
                },
                "format": "GetCurrentWeather(location) -> current_weather"
            },
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to fetch the weather forecast for a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location for which to fetch the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the weather forecast of the specified location",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(location) -> weather_forecast"
            },
            {
                "name": "CompareWeather",
                "Description": "This API is to compare the current weather with the weather forecast.",
                "input_params": {
                    "current_weather": {
                        "description": "the current weather of a specified location",
                        "type": "String"
                    },
                    "weather_forecast": {
                        "description": "the weather forecast of a specified location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "comparison": {
                        "description": "the result of the comparison between the current weather and the forecast",
                        "type": "String"
                    }
                },
                "format": "CompareWeather(current_weather, weather_forecast) -> comparison"
            }
        ],
        "Query": "How does the present weather in Paris compare to the weather predictions for the next seven days?",
        "Label": "CompareWeather(current_weather=GetCurrentWeather(location='Paris'), weather_forecast=GetWeatherForecast(location='Paris'))",
        "Index": 1299
    },
    {
        "APIs": [
            {
                "name": "GetCurrentWeather",
                "Description": "This API is to get the current weather of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location where you want to know the weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "current_weather": {
                        "description": "the current weather of the specified location",
                        "type": "String"
                    }
                },
                "format": "GetCurrentWeather(location) -> current_weather"
            },
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast of a specific location for the following week.",
                "input_params": {
                    "location": {
                        "description": "the location where you want to know the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the weather forecast of the specified location for the following week",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(location) -> weather_forecast"
            },
            {
                "name": "CompareWeather",
                "Description": "This API is to compare the current weather with the weather forecast.",
                "input_params": {
                    "current_weather": {
                        "description": "the current weather of the specified location",
                        "type": "String"
                    },
                    "weather_forecast": {
                        "description": "the weather forecast of the specified location for the following week",
                        "type": "String"
                    }
                },
                "output_params": {
                    "comparison_result": {
                        "description": "the comparison result between the current weather and the weather forecast",
                        "type": "String"
                    }
                },
                "format": "CompareWeather(current_weather, weather_forecast) -> comparison_result"
            }
        ],
        "Query": "What's the weather like in Tokyo right now and how does it compare to the forecast for the following week?",
        "Label": "CompareWeather(current_weather=GetCurrentWeather(location='Tokyo'), weather_forecast=GetWeatherForecast(location='Tokyo'))",
        "Index": 1300
    },
    {
        "APIs": [
            {
                "name": "GetCurrentWeather",
                "Description": "This API is to get the current weather of a certain location.",
                "input_params": {
                    "location": {
                        "description": "the location to get the current weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "current_weather": {
                        "description": "the current weather of the location",
                        "type": "String"
                    }
                },
                "format": "GetCurrentWeather(location) -> current_weather"
            },
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast of a certain location.",
                "input_params": {
                    "location": {
                        "description": "the location to get the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the weather forecast of the location",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(location) -> weather_forecast"
            },
            {
                "name": "CompareWeather",
                "Description": "This API is to compare the current weather with the forecasted weather.",
                "input_params": {
                    "current_weather": {
                        "description": "the current weather of the location",
                        "type": "String"
                    },
                    "weather_forecast": {
                        "description": "the weather forecast of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "comparison_result": {
                        "description": "the comparison result of current and forecasted weather",
                        "type": "String"
                    }
                },
                "format": "CompareWeather(current_weather, weather_forecast) -> comparison_result"
            }
        ],
        "Query": "Can you compare the current weather in Sydney with the expected weather over the next week?",
        "Label": "CompareWeather(current_weather=GetCurrentWeather(location='Sydney'), weather_forecast=GetWeatherForecast(location='Sydney'))",
        "Index": 1301
    },
    {
        "APIs": [
            {
                "name": "GetCurrentWeather",
                "Description": "This API is to get the current weather of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location where current weather is to be fetched",
                        "type": "String"
                    }
                },
                "output_params": {
                    "current_weather": {
                        "description": "the current weather of the specified location",
                        "type": "String"
                    }
                },
                "format": "GetCurrentWeather(location) -> current_weather"
            },
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast for the upcoming week of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location where weather forecast is to be fetched",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the weather forecast for the upcoming week of the specified location",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(location) -> weather_forecast"
            },
            {
                "name": "CompareWeather",
                "Description": "This API is to compare the current weather with the forecast for the upcoming week.",
                "input_params": {
                    "current_weather": {
                        "description": "the current weather of the specified location",
                        "type": "String"
                    },
                    "weather_forecast": {
                        "description": "the weather forecast for the upcoming week of the specified location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "comparison": {
                        "description": "the comparison between the current weather and the forecast",
                        "type": "String"
                    }
                },
                "format": "CompareWeather(current_weather, weather_forecast) -> comparison"
            }
        ],
        "Query": "What's the current weather in Madrid and how does it contrast with the forecast for the upcoming week?",
        "Label": "CompareWeather(current_weather=GetCurrentWeather(location='Madrid'), weather_forecast=GetWeatherForecast(location='Madrid'))",
        "Index": 1302
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast of a specific city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather"
            },
            {
                "name": "RestaurantRecommend",
                "Description": "This API is to recommend a restaurant based on the city, cuisine and weather.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    },
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommend(city, cuisine, weather) -> restaurant"
            }
        ],
        "Query": "I will be going from Dubai to Athens on December 25th. Could you recommend a Greek restaurant according to the weather that day?",
        "Label": "RestaurantRecommend(city='Athens', cuisine='Greek', weather=WeatherForecast(city='Athens', date='December 25th'))",
        "Index": 1303
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API is to search for a restaurant in a specific city with a specific cuisine.",
                "input_params": {
                    "city": {
                        "description": "the name of the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine the restaurant serves",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the name of the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantSearch(city, cuisine) -> restaurant"
            },
            {
                "name": "EventSearch",
                "Description": "This API is to search for events in a specific city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city where the event is located",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "event": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "format": "EventSearch(city, date) -> event"
            },
            {
                "name": "CityGuide",
                "Description": "This API is to provide a guide for a city including events and restaurant recommendations.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the recommended restaurant",
                        "type": "String"
                    },
                    "event": {
                        "description": "the name of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city guide": {
                        "description": "the guide for the city including events and restaurant recommendations",
                        "type": "String"
                    }
                },
                "format": "CityGuide(restaurant, event) -> city guide"
            }
        ],
        "Query": "What's going on in New York on April 15, and can you suggest a good French restaurant?",
        "Label": "CityGuide(restaurant = RestaurantSearch(city = 'New York', cuisine = 'French'), event = EventSearch(city = 'New York', date = 'April 15'))",
        "Index": 1304
    },
    {
        "APIs": [
            {
                "name": "StockPrice",
                "Description": "This API is to get the stock price of a company.",
                "input_params": {
                    "company": {
                        "description": "the name of the company",
                        "type": "String"
                    }
                },
                "output_params": {
                    "stockPrice": {
                        "description": "the stock price of the company",
                        "type": "Float"
                    }
                },
                "format": "StockPrice(company) -> stockPrice"
            },
            {
                "name": "NewsHeadlines",
                "Description": "This API is to get the latest news headlines about a company.",
                "input_params": {
                    "company": {
                        "description": "the name of the company",
                        "type": "String"
                    }
                },
                "output_params": {
                    "news": {
                        "description": "the latest news headlines about the company",
                        "type": "String"
                    }
                },
                "format": "NewsHeadlines(company) -> news"
            },
            {
                "name": "InvestmentStrategy",
                "Description": "This API is to provide an investment strategy based on the stock price and latest news of a company.",
                "input_params": {
                    "stockPrice": {
                        "description": "the stock price of the company",
                        "type": "Float"
                    },
                    "news": {
                        "description": "the latest news headlines about the company",
                        "type": "String"
                    }
                },
                "output_params": {
                    "strategy": {
                        "description": "the suggested investment strategy",
                        "type": "String"
                    }
                },
                "format": "InvestmentStrategy(stockPrice, news) -> strategy"
            }
        ],
        "Query": "I am thinking of investing in Microsoft, could you provide me with an investment strategy?",
        "Label": "InvestmentStrategy(stockPrice=StockPrice(company='Microsoft'), news=NewsHeadlines(company='Microsoft'))",
        "Index": 1305
    },
    {
        "APIs": [
            {
                "name": "StockPrice",
                "Description": "This API is to get the current stock price of the company.",
                "input_params": {
                    "company": {
                        "description": "the name of the company",
                        "type": "String"
                    }
                },
                "output_params": {
                    "stockPrice": {
                        "description": "the stock price of the company",
                        "type": "Float"
                    }
                },
                "format": "StockPrice(company) -> stockPrice"
            },
            {
                "name": "NewsHeadlines",
                "Description": "This API is to get the recent news headlines about the company.",
                "input_params": {
                    "company": {
                        "description": "the name of the company",
                        "type": "String"
                    }
                },
                "output_params": {
                    "news": {
                        "description": "the recent news headlines about the company",
                        "type": "String"
                    }
                },
                "format": "NewsHeadlines(company) -> news"
            },
            {
                "name": "InvestmentStrategy",
                "Description": "This API is to provide an investment strategy based on the current stock price and recent news of the company.",
                "input_params": {
                    "stockPrice": {
                        "description": "the current stock price of the company",
                        "type": "Float"
                    },
                    "news": {
                        "description": "the recent news headlines about the company",
                        "type": "String"
                    }
                },
                "output_params": {
                    "strategy": {
                        "description": "the proposed investment strategy",
                        "type": "String"
                    }
                },
                "format": "InvestmentStrategy(stockPrice, news) -> strategy"
            }
        ],
        "Query": "I am planning to invest in Amazon, can you assist me with an investment strategy?",
        "Label": "InvestmentStrategy(stockPrice=StockPrice(company='Amazon'), news=NewsHeadlines(company='Amazon'))",
        "Index": 1306
    },
    {
        "APIs": [
            {
                "name": "StockPrice",
                "Description": "This API is to get the stock price of a specific company.",
                "input_params": {
                    "company": {
                        "description": "The name of the company to get the stock price for",
                        "type": "String"
                    }
                },
                "output_params": {
                    "stockPrice": {
                        "description": "The current stock price of the company",
                        "type": "Float"
                    }
                },
                "format": "StockPrice(company) -> stockPrice"
            },
            {
                "name": "NewsHeadlines",
                "Description": "This API is to get the latest news headlines about a specific company.",
                "input_params": {
                    "company": {
                        "description": "The name of the company to get news about",
                        "type": "String"
                    }
                },
                "output_params": {
                    "news": {
                        "description": "The latest news headlines about the company",
                        "type": "String"
                    }
                },
                "format": "NewsHeadlines(company) -> news"
            },
            {
                "name": "InvestmentStrategy",
                "Description": "This API is to outline an investment strategy based on the stock price and news headlines for a specific company.",
                "input_params": {
                    "stockPrice": {
                        "description": "The current stock price of the company",
                        "type": "Float"
                    },
                    "news": {
                        "description": "The latest news headlines about the company",
                        "type": "String"
                    }
                },
                "output_params": {
                    "strategy": {
                        "description": "The investment strategy for the company",
                        "type": "String"
                    }
                },
                "format": "InvestmentStrategy(stockPrice, news) -> strategy"
            }
        ],
        "Query": "I'm looking to invest in Tesla, could you outline an investment strategy for me?",
        "Label": "InvestmentStrategy(stockPrice=StockPrice(company='Tesla'), news=NewsHeadlines(company='Tesla'))",
        "Index": 1307
    },
    {
        "APIs": [
            {
                "name": "StockPrice",
                "Description": "This API is to get the stock price of a company.",
                "input_params": {
                    "company": {
                        "description": "the name of the company",
                        "type": "String"
                    }
                },
                "output_params": {
                    "stockPrice": {
                        "description": "the stock price of the company",
                        "type": "Float"
                    }
                },
                "format": "StockPrice(company) -> stockPrice"
            },
            {
                "name": "NewsHeadlines",
                "Description": "This API is to get the recent news headlines of a company.",
                "input_params": {
                    "company": {
                        "description": "the name of the company",
                        "type": "String"
                    }
                },
                "output_params": {
                    "news": {
                        "description": "the recent news headlines of the company",
                        "type": "String"
                    }
                },
                "format": "NewsHeadlines(company) -> news"
            },
            {
                "name": "InvestmentStrategy",
                "Description": "This API is to outline an investment strategy for a company.",
                "input_params": {
                    "stockPrice": {
                        "description": "the stock price of the company",
                        "type": "Float"
                    },
                    "news": {
                        "description": "the recent news headlines of the company",
                        "type": "String"
                    }
                },
                "output_params": {
                    "strategy": {
                        "description": "the investment strategy for the company",
                        "type": "String"
                    }
                },
                "format": "InvestmentStrategy(stockPrice, news) -> strategy"
            }
        ],
        "Query": "I am mulling over investing in Apple, could you formulate an investment strategy for me?",
        "Label": "InvestmentStrategy(stockPrice=StockPrice(company='Apple'), news=NewsHeadlines(company='Apple'))",
        "Index": 1308
    },
    {
        "APIs": [
            {
                "name": "StockPrice",
                "Description": "This API is to get the stock price of a company.",
                "input_params": {
                    "company": {
                        "description": "the name of the company",
                        "type": "String"
                    }
                },
                "output_params": {
                    "stockPrice": {
                        "description": "the stock price of the company",
                        "type": "Float"
                    }
                },
                "format": "StockPrice(company) -> stockPrice"
            },
            {
                "name": "NewsHeadlines",
                "Description": "This API is to retrieve the latest news headlines of a company.",
                "input_params": {
                    "company": {
                        "description": "the name of the company",
                        "type": "String"
                    }
                },
                "output_params": {
                    "news": {
                        "description": "the latest news headlines of the company",
                        "type": "String"
                    }
                },
                "format": "NewsHeadlines(company) -> news"
            },
            {
                "name": "InvestmentStrategy",
                "Description": "This API is to devise an investment strategy based on stock price and news.",
                "input_params": {
                    "stockPrice": {
                        "description": "the stock price of the company",
                        "type": "Float"
                    },
                    "news": {
                        "description": "the latest news headlines of the company",
                        "type": "String"
                    }
                },
                "output_params": {
                    "strategy": {
                        "description": "the investment strategy",
                        "type": "String"
                    }
                },
                "format": "InvestmentStrategy(stockPrice, news) -> strategy"
            }
        ],
        "Query": "I am contemplating investing in Facebook, can you devise an investment strategy for me?",
        "Label": "InvestmentStrategy(stockPrice=StockPrice(company='Facebook'), news=NewsHeadlines(company='Facebook'))",
        "Index": 1309
    },
    {
        "APIs": [
            {
                "name": "RestaurantPriceRange",
                "Description": "This API is to get the price range of a restaurant in a certain city.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_price_range": {
                        "description": "the price range of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantPriceRange(city, restaurant) -> restaurant_price_range"
            },
            {
                "name": "TransportFare",
                "Description": "This API is to calculate the transport fare from a certain city to a certain destination.",
                "input_params": {
                    "city": {
                        "description": "the city from where the user will start the journey",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination of the journey",
                        "type": "String"
                    }
                },
                "output_params": {
                    "transport_fare": {
                        "description": "the transport fare from the city to the destination",
                        "type": "Integer"
                    }
                },
                "format": "TransportFare(city, destination) -> transport_fare"
            },
            {
                "name": "TotalDinnerCost",
                "Description": "This API is to calculate the total dinner cost, including the restaurant price and the transport fare.",
                "input_params": {
                    "restaurantPriceRange": {
                        "description": "the price range of the restaurant",
                        "type": "Integer"
                    },
                    "transportFare": {
                        "description": "the transport fare from the city to the destination",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "total_dinner_cost": {
                        "description": "the total cost of the dinner, including the restaurant price and the transport fare",
                        "type": "Integer"
                    }
                },
                "format": "TotalDinnerCost(restaurantPriceRange, transportFare) -> total_dinner_cost"
            }
        ],
        "Query": "I am thinking about dining at \"The French Laundry\" in California and I'm considering getting a cab. Could you calculate the overall cost for me?",
        "Label": "TotalDinnerCost(restaurantPriceRange=RestaurantPriceRange(city='California', restaurant='The French Laundry'), transportFare=TransportFare(city='California', destination='The French Laundry'))",
        "Index": 1310
    },
    {
        "APIs": [
            {
                "name": "RestaurantPriceRange",
                "Description": "This API is to get the price range of a specific restaurant in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city where the restaurant is located",
                        "type": "String"
                    },
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantPriceRange": {
                        "description": "the price range of the restaurant",
                        "type": "Float"
                    }
                },
                "format": "RestaurantPriceRange(city, restaurant) -> restaurantPriceRange"
            },
            {
                "name": "TransportFare",
                "Description": "This API is to get the transport fare for a taxi in a specific city to a specific destination.",
                "input_params": {
                    "city": {
                        "description": "the name of the city where the transport is needed",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the name of the destination",
                        "type": "String"
                    }
                },
                "output_params": {
                    "transportFare": {
                        "description": "the fare for transporting to the destination",
                        "type": "Float"
                    }
                },
                "format": "TransportFare(city, destination) -> transportFare"
            },
            {
                "name": "TotalDinnerCost",
                "Description": "This API is to estimate the total expenditure for having a meal at a certain restaurant and taking a taxi there.",
                "input_params": {
                    "restaurantPriceRange": {
                        "description": "the price range of the restaurant",
                        "type": "Float"
                    },
                    "transportFare": {
                        "description": "the fare for transporting to the restaurant",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "totalExpenditure": {
                        "description": "the total expenditure estimated",
                        "type": "Float"
                    }
                },
                "format": "TotalDinnerCost(restaurantPriceRange, transportFare) -> totalExpenditure"
            }
        ],
        "Query": "I'm preparing to have a meal at 'Noma' in Copenhagen and I will be taking a taxi, can you estimate my total expenditure?",
        "Label": "TotalDinnerCost(restaurantPriceRange=RestaurantPriceRange(city='Copenhagen', restaurant='Noma'), transportFare=TransportFare(city='Copenhagen', destination='Noma'))",
        "Index": 1311
    },
    {
        "APIs": [
            {
                "name": "RestaurantPriceRange",
                "Description": "This API is to receive the price range of a specific restaurant in a certain city.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_price_range": {
                        "description": "the price range of the specified restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantPriceRange(city, restaurant) -> restaurant_price_range"
            },
            {
                "name": "TransportFare",
                "Description": "This API is to estimate the fare of the transportation to a specific destination in a certain city.",
                "input_params": {
                    "city": {
                        "description": "the city where the destination is located",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the name of the destination",
                        "type": "String"
                    }
                },
                "output_params": {
                    "transport_fare": {
                        "description": "the estimated fare of the transportation to the specified destination",
                        "type": "Float"
                    }
                },
                "format": "TransportFare(city, destination) -> transport_fare"
            },
            {
                "name": "TotalDinnerCost",
                "Description": "This API is to calculate the total cost of dinner, including the restaurant price range and the transportation fare.",
                "input_params": {
                    "restaurant_price_range": {
                        "description": "the price range of the chosen restaurant",
                        "type": "Integer"
                    },
                    "transport_fare": {
                        "description": "the estimated fare of the transportation to the restaurant",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "total_dinner_cost": {
                        "description": "the total cost of the dinner",
                        "type": "Float"
                    }
                },
                "format": "TotalDinnerCost(restaurant_price_range, transport_fare) -> total_dinner_cost"
            }
        ],
        "Query": "I plan to eat at \"El Celler de Can Roca\" in Spain and I'll need a taxi to get there. Can you give me an estimate of how much it will cost?",
        "Label": "TotalDinnerCost(restaurantPriceRange=RestaurantPriceRange(city='Spain', restaurant='El Celler de Can Roca'), transportFare=TransportFare(city='Spain', destination='El Celler de Can Roca'))",
        "Index": 1312
    },
    {
        "APIs": [
            {
                "name": "RestaurantPriceRange",
                "Description": "This API is to get the price range of a restaurant.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_price_range": {
                        "description": "the price range of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "RestaurantPriceRange(city, restaurant) -> restaurant_price_range"
            },
            {
                "name": "TransportFare",
                "Description": "This API is to get the transport fare to a destination in a city.",
                "input_params": {
                    "city": {
                        "description": "the city where the transportation takes place",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination to travel to",
                        "type": "String"
                    }
                },
                "output_params": {
                    "transport_fare": {
                        "description": "the cost of transportation to the destination",
                        "type": "Float"
                    }
                },
                "format": "TransportFare(city, destination) -> transport_fare"
            },
            {
                "name": "TotalDinnerCost",
                "Description": "This API is to calculate the total cost for dinner and transportation.",
                "input_params": {
                    "restaurantPriceRange": {
                        "description": "the price range of the restaurant",
                        "type": "Integer"
                    },
                    "transportFare": {
                        "description": "the cost of transportation to the restaurant",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "total_cost": {
                        "description": "the total cost for dinner and transportation",
                        "type": "Float"
                    }
                },
                "format": "TotalDinnerCost(restaurantPriceRange, transportFare) -> total_cost"
            }
        ],
        "Query": "I'm intending to have dinner at \"Osteria Francescana\" in Italy and I will be travelling by taxi. Can you help me estimate the total cost?",
        "Label": "TotalDinnerCost(restaurantPriceRange=RestaurantPriceRange(city='Italy', restaurant='Osteria Francescana'), transportFare=TransportFare(city='Italy', destination='Osteria Francescana'))",
        "Index": 1313
    },
    {
        "APIs": [
            {
                "name": "RestaurantPriceRange",
                "Description": "This API is to estimate the price range of a restaurant in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_Price_Range": {
                        "description": "the estimated price range of the restaurant",
                        "type": "Float"
                    }
                },
                "format": "RestaurantPriceRange(city, restaurant) -> restaurant_Price_Range"
            },
            {
                "name": "TransportFare",
                "Description": "This API is to estimate the transport fare to a destination in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the city where the destination is located",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the name of the destination",
                        "type": "String"
                    }
                },
                "output_params": {
                    "transport_Fare": {
                        "description": "the estimated fare of the transport",
                        "type": "Float"
                    }
                },
                "format": "TransportFare(city, destination) -> transport_Fare"
            },
            {
                "name": "TotalDinnerCost",
                "Description": "This API is to calculate the total cost of dinner including the transport fare.",
                "input_params": {
                    "restaurantPriceRange": {
                        "description": "the estimated price range of the restaurant",
                        "type": "Float"
                    },
                    "transportFare": {
                        "description": "the estimated fare of the transport",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "total_Cost": {
                        "description": "the total cost of the dinner including the transport fare",
                        "type": "Float"
                    }
                },
                "format": "TotalDinnerCost(restaurantPriceRange, transportFare) -> total_Cost"
            }
        ],
        "Query": "I'm planning to dine at \"Eleven Madison Park\" in New York and I'll be taking a taxi there. Can you help me estimate the total cost?",
        "Label": "TotalDinnerCost(restaurantPriceRange=RestaurantPriceRange(city='New York', restaurant='Eleven Madison Park'), transportFare=TransportFare(city='New York', destination='Eleven Madison Park'))",
        "Index": 1314
    },
    {
        "APIs": [
            {
                "name": "RealEstatePrice",
                "Description": "This API is to get the price of a specific type of property in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the city where the property is located",
                        "type": "String"
                    },
                    "propertyType": {
                        "description": "the type of the property",
                        "type": "String"
                    }
                },
                "output_params": {
                    "propertyPrice": {
                        "description": "the price of the specific property",
                        "type": "Float"
                    }
                },
                "format": "RealEstatePrice(city, propertyType) -> propertyPrice"
            },
            {
                "name": "MortgageCalculator",
                "Description": "This API is to calculate the mortgage payment based on property price, down payment, interest rate and term.",
                "input_params": {
                    "propertyPrice": {
                        "description": "the price of the property",
                        "type": "Float"
                    },
                    "downPayment": {
                        "description": "the down payment for the property",
                        "type": "Float"
                    },
                    "interestRate": {
                        "description": "the interest rate of the mortgage",
                        "type": "Float"
                    },
                    "term": {
                        "description": "the term of the mortgage",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "mortgagePayment": {
                        "description": "the mortgage payment",
                        "type": "Float"
                    }
                },
                "format": "MortgageCalculator(propertyPrice, downPayment, interestRate, term) -> mortgagePayment"
            },
            {
                "name": "TaxEstimator",
                "Description": "This API is to estimate the tax based on property price and city.",
                "input_params": {
                    "propertyPrice": {
                        "description": "the price of the property",
                        "type": "Float"
                    },
                    "city": {
                        "description": "the city where the property is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "tax": {
                        "description": "the estimated tax",
                        "type": "Float"
                    }
                },
                "format": "TaxEstimator(propertyPrice, city) -> tax"
            },
            {
                "name": "PropertyOwnershipCost",
                "Description": "This API is to calculate the overall cost of property ownership including mortgage payment and tax.",
                "input_params": {
                    "mortgagePayment": {
                        "description": "the mortgage payment",
                        "type": "Float"
                    },
                    "tax": {
                        "description": "the property tax",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "ownershipCost": {
                        "description": "the overall cost of property ownership",
                        "type": "Float"
                    }
                },
                "format": "PropertyOwnershipCost(mortgagePayment, tax) -> ownershipCost"
            }
        ],
        "Query": "I am planning to buy an apartment in Los Angeles with a down payment of 200000, an interest rate of 2.5 percent, and a term of 20 years. Can you calculate the overall cost for this for me?",
        "Label": "PropertyOwnershipCost(mortgagePayment=MortgageCalculator(propertyPrice=RealEstatePrice(city='Los Angeles', propertyType='apartment'), downPayment=200000, interestRate=2.5, term=20), tax=TaxEstimator(propertyPrice=RealEstatePrice(city='Los Angeles', propertyType='apartment'), city='Los Angeles'))",
        "Index": 1315
    },
    {
        "APIs": [
            {
                "name": "RealEstatePrice",
                "Description": "This API is to retrieve the price of a real estate property.",
                "input_params": {
                    "city": {
                        "description": "the name of the city where the property is located",
                        "type": "String"
                    },
                    "propertyType": {
                        "description": "the type of the property",
                        "type": "String"
                    }
                },
                "output_params": {
                    "propertyPrice": {
                        "description": "the price of the real estate property",
                        "type": "Float"
                    }
                },
                "format": "RealEstatePrice(city, propertyType) -> propertyPrice"
            },
            {
                "name": "MortgageCalculator",
                "Description": "This API is to calculate the mortgage payment.",
                "input_params": {
                    "propertyPrice": {
                        "description": "the price of the property",
                        "type": "Float"
                    },
                    "downPayment": {
                        "description": "the initial payment for the property",
                        "type": "Float"
                    },
                    "interestRate": {
                        "description": "the interest rate of the mortgage",
                        "type": "Float"
                    },
                    "term": {
                        "description": "the term of the mortgage",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "mortgagePayment": {
                        "description": "the monthly mortgage payment",
                        "type": "Float"
                    }
                },
                "format": "MortgageCalculator(propertyPrice, downPayment, interestRate, term) -> mortgagePayment"
            },
            {
                "name": "TaxEstimator",
                "Description": "This API is to estimate the tax of a property.",
                "input_params": {
                    "propertyPrice": {
                        "description": "the price of the property",
                        "type": "Float"
                    },
                    "city": {
                        "description": "the city where the property is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "tax": {
                        "description": "the estimated tax of the property",
                        "type": "Float"
                    }
                },
                "format": "TaxEstimator(propertyPrice, city) -> tax"
            },
            {
                "name": "PropertyOwnershipCost",
                "Description": "This API is to estimate the total cost of owning a property.",
                "input_params": {
                    "mortgagePayment": {
                        "description": "the monthly mortgage payment",
                        "type": "Float"
                    },
                    "tax": {
                        "description": "the estimated tax of the property",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "totalCost": {
                        "description": "the total cost of owning the property",
                        "type": "Float"
                    }
                },
                "format": "PropertyOwnershipCost(mortgagePayment, tax) -> totalCost"
            }
        ],
        "Query": "I'm thinking of purchasing a townhouse in Miami with an initial payment of 150000, an interest rate of 3 percent, and a term of 25 years. Can you provide me with a total cost estimation?",
        "Label": "PropertyOwnershipCost(mortgagePayment=MortgageCalculator(propertyPrice=RealEstatePrice(city='Miami', propertyType='townhouse'), downPayment=150000, interestRate=3, term=25), tax=TaxEstimator(propertyPrice=RealEstatePrice(city='Miami', propertyType='townhouse'), city='Miami'))",
        "Index": 1316
    },
    {
        "APIs": [
            {
                "name": "RealEstatePrice",
                "Description": "This API is to get the price of a real estate property.",
                "input_params": {
                    "city": {
                        "description": "the city where the property is located",
                        "type": "String"
                    },
                    "propertyType": {
                        "description": "the type of the property",
                        "type": "String"
                    }
                },
                "output_params": {
                    "propertyPrice": {
                        "description": "the price of the property",
                        "type": "Float"
                    }
                },
                "format": "RealEstatePrice(city, propertyType) -> propertyPrice"
            },
            {
                "name": "MortgageCalculator",
                "Description": "This API is to calculate the total mortgage payment.",
                "input_params": {
                    "propertyPrice": {
                        "description": "the price of the property",
                        "type": "Float"
                    },
                    "downPayment": {
                        "description": "the down payment for the property",
                        "type": "Float"
                    },
                    "interestRate": {
                        "description": "the interest rate of the loan",
                        "type": "Float"
                    },
                    "term": {
                        "description": "the term of the loan in years",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "mortgagePayment": {
                        "description": "the total mortgage payment",
                        "type": "Float"
                    }
                },
                "format": "MortgageCalculator(propertyPrice, downPayment, interestRate, term) -> mortgagePayment"
            },
            {
                "name": "TaxEstimator",
                "Description": "This API is to estimate the tax for a property.",
                "input_params": {
                    "propertyPrice": {
                        "description": "the price of the property",
                        "type": "Float"
                    },
                    "city": {
                        "description": "the city where the property is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "tax": {
                        "description": "the estimated tax for the property",
                        "type": "Float"
                    }
                },
                "format": "TaxEstimator(propertyPrice, city) -> tax"
            },
            {
                "name": "PropertyOwnershipCost",
                "Description": "This API is to calculate the total cost of owning a property including mortgage payments and tax.",
                "input_params": {
                    "mortgagePayment": {
                        "description": "the total mortgage payment",
                        "type": "Float"
                    },
                    "tax": {
                        "description": "the estimated tax for the property",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "totalCost": {
                        "description": "the total cost of owning the property",
                        "type": "Float"
                    }
                },
                "format": "PropertyOwnershipCost(mortgagePayment, tax) -> totalCost"
            }
        ],
        "Query": "I plan to buy a duplex in Seattle with a down payment of 250000, an interest rate of 3.2 percent, and a term of 30 years. Could you calculate the total cost for me?",
        "Label": "PropertyOwnershipCost(mortgagePayment=MortgageCalculator(propertyPrice=RealEstatePrice(city='Seattle', propertyType='duplex'), downPayment=250000, interestRate=3.2, term=30), tax=TaxEstimator(propertyPrice=RealEstatePrice(city='Seattle', propertyType='duplex'), city='Seattle'))",
        "Index": 1317
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get weather forecast for a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location to get the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast for the specified location",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(location) -> weather"
            },
            {
                "name": "ClothingSuggestion",
                "Description": "This API is to suggest clothes based on weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather to suggest clothes",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothes": {
                        "description": "the suitable clothes for the specified weather",
                        "type": "String"
                    }
                },
                "format": "ClothingSuggestion(weather) -> clothes"
            },
            {
                "name": "FashionStore",
                "Description": "This API is to get the cost of the suggested clothes from a fashion store in the specified location.",
                "input_params": {
                    "clothes": {
                        "description": "the clothes to get the cost",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location of the fashion store",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cost": {
                        "description": "the cost of the suggested clothes",
                        "type": "Float"
                    }
                },
                "format": "FashionStore(clothes, location) -> cost"
            }
        ],
        "Query": "What should I wear in Miami this weekend and how much would it cost?",
        "Label": "FashionStore(clothes=ClothingSuggestion(weather=WeatherForecast(location='Miami')), location='Miami')",
        "Index": 1318
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to forecast the weather of a location.",
                "input_params": {
                    "location": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the forecasted weather of the location",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(location) -> weather"
            },
            {
                "name": "ClothingSuggestion",
                "Description": "This API is to suggest clothing based on the weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothes": {
                        "description": "the suggested clothing",
                        "type": "String"
                    }
                },
                "format": "ClothingSuggestion(weather) -> clothes"
            },
            {
                "name": "FashionStore",
                "Description": "This API is to provide the cost of the suggested clothing from a location.",
                "input_params": {
                    "clothes": {
                        "description": "the suggested clothing",
                        "type": "String"
                    },
                    "location": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cost": {
                        "description": "the cost of the clothing",
                        "type": "Float"
                    }
                },
                "format": "FashionStore(clothes,location) -> cost"
            }
        ],
        "Query": "What should I wear in Chicago tomorrow and how much would it cost?",
        "Label": "FashionStore(clothes=ClothingSuggestion(weather=WeatherForecast(location='Chicago')), location='Chicago')",
        "Index": 1319
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast for a specific location.",
                "input_params": {
                    "location": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast of the location",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(location) -> weather"
            },
            {
                "name": "ClothingSuggestion",
                "Description": "This API is to suggest clothing based on the weather.",
                "input_params": {
                    "weather": {
                        "description": "the forecasted weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothes": {
                        "description": "the suggested clothes",
                        "type": "String"
                    }
                },
                "format": "ClothingSuggestion(weather) -> clothes"
            },
            {
                "name": "FashionStore",
                "Description": "This API is to get the price of the suggested clothes from a specific location.",
                "input_params": {
                    "clothes": {
                        "description": "the suggested clothes",
                        "type": "String"
                    },
                    "location": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cost": {
                        "description": "the cost of the suggested clothes",
                        "type": "Float"
                    }
                },
                "format": "FashionStore(clothes, location) -> cost"
            }
        ],
        "Query": "What should I wear in Denver next Tuesday and how much would it cost?",
        "Label": "FashionStore(clothes=ClothingSuggestion(weather=WeatherForecast(location='Denver')), location='Denver')",
        "Index": 1320
    },
    {
        "APIs": [
            {
                "name": "DistanceCalculator",
                "Description": "This API is to calculate the distance between two locations.",
                "input_params": {
                    "origin": {
                        "description": "the starting point of the travel",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the ending point of the travel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "the distance between the origin and the destination",
                        "type": "Float"
                    }
                },
                "format": "DistanceCalculator(origin, destination) -> distance"
            },
            {
                "name": "TrafficEstimator",
                "Description": "This API is to estimate the traffic situation based on the distance.",
                "input_params": {
                    "distance": {
                        "description": "the distance to be traveled",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "traffic": {
                        "description": "the traffic situation",
                        "type": "String"
                    }
                },
                "format": "TrafficEstimator(distance) -> traffic"
            },
            {
                "name": "TimeCalculator",
                "Description": "This API is to calculate the time required for the travel based on the traffic situation and the mode of transport.",
                "input_params": {
                    "traffic": {
                        "description": "the traffic situation",
                        "type": "String"
                    },
                    "modeOfTransport": {
                        "description": "the mode of transport",
                        "type": "String"
                    }
                },
                "output_params": {
                    "time": {
                        "description": "the time required for the travel",
                        "type": "Time"
                    }
                },
                "format": "TimeCalculator(traffic, modeOfTransport) -> time"
            }
        ],
        "Query": "How much time does it take to drive from Dallas to Houston?",
        "Label": "TimeCalculator(traffic=TrafficEstimator(distance=DistanceCalculator(origin='Dallas', destination='Houston')), modeOfTransport='drive')",
        "Index": 1321
    },
    {
        "APIs": [
            {
                "name": "CalculateDistance",
                "Description": "This API is to calculate the distance between two locations.",
                "input_params": {
                    "origin": {
                        "description": "The starting point of the journey",
                        "type": "String"
                    },
                    "destination": {
                        "description": "The ending point of the journey",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "The distance between two locations",
                        "type": "Float"
                    }
                },
                "format": "CalculateDistance(origin, destination) -> distance"
            },
            {
                "name": "CalculateTime",
                "Description": "This API is to calculate the time it would take to travel a certain distance at a certain speed.",
                "input_params": {
                    "distance": {
                        "description": "The distance to be travelled",
                        "type": "Float"
                    },
                    "speed": {
                        "description": "The speed at which to travel",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "time": {
                        "description": "The time it would take to travel the given distance at the given speed",
                        "type": "Time"
                    }
                },
                "format": "CalculateTime(distance, speed) -> time"
            },
            {
                "name": "RoutePlanner",
                "Description": "This API is to provide the route and time for a journey.",
                "input_params": {
                    "origin": {
                        "description": "The starting point of the journey",
                        "type": "String"
                    },
                    "destination": {
                        "description": "The ending point of the journey",
                        "type": "String"
                    },
                    "distance": {
                        "description": "The distance between the origin and destination",
                        "type": "Float"
                    },
                    "time": {
                        "description": "The time it would take to travel the distance",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "route": {
                        "description": "The route for the journey",
                        "type": "String"
                    },
                    "travel_time": {
                        "description": "The time it would take to travel the route",
                        "type": "Time"
                    }
                },
                "format": "RoutePlanner(origin, destination, distance, time) -> route, travel_time"
            }
        ],
        "Query": "I'm currently in San Francisco and I plan to drive to Los Angeles. Could you provide me with the route and the time it would take if I maintain an average speed of 55 miles per hour?",
        "Label": "RoutePlanner(origin='San Francisco', destination='Los Angeles', distance=CalculateDistance(origin='San Francisco', destination='Los Angeles'), time=CalculateTime(distance=CalculateDistance(origin='San Francisco', destination='Los Angeles'), speed=55))",
        "Index": 1322
    },
    {
        "APIs": [
            {
                "name": "CalculateDistance",
                "Description": "This API is to calculate the distance between two locations.",
                "input_params": {
                    "origin": {
                        "description": "the starting location",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the ending location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "the distance between the origin and the destination",
                        "type": "Float"
                    }
                },
                "format": "CalculateDistance(origin, destination) -> distance"
            },
            {
                "name": "CalculateTime",
                "Description": "This API is to calculate the time it takes to travel a certain distance at a certain speed.",
                "input_params": {
                    "distance": {
                        "description": "the distance to be traveled",
                        "type": "Float"
                    },
                    "speed": {
                        "description": "the speed of travel",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "time": {
                        "description": "the time it takes to travel the distance at the given speed",
                        "type": "Time"
                    }
                },
                "format": "CalculateTime(distance, speed) -> time"
            },
            {
                "name": "RoutePlanner",
                "Description": "This API is to plan a route from one location to another.",
                "input_params": {
                    "origin": {
                        "description": "the starting location",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the ending location",
                        "type": "String"
                    },
                    "distance": {
                        "description": "the distance between the origin and the destination",
                        "type": "Float"
                    },
                    "time": {
                        "description": "the time it takes to travel the distance",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "route": {
                        "description": "the planned route from the origin to the destination",
                        "type": "String"
                    }
                },
                "format": "RoutePlanner(origin, destination, distance, time) -> route"
            }
        ],
        "Query": "I'm in Seattle and I'm thinking of driving to Portland. Can you tell me the route and how long it will take if I drive at an average speed of 50 miles per hour?",
        "Label": "RoutePlanner(origin='Seattle', destination='Portland', distance=CalculateDistance(origin='Seattle', destination='Portland'), time=CalculateTime(distance=CalculateDistance(origin='Seattle', destination='Portland'), speed=50))",
        "Index": 1323
    },
    {
        "APIs": [
            {
                "name": "CalculateDistance",
                "Description": "This API is to calculate the distance between two locations.",
                "input_params": {
                    "origin": {
                        "description": "The starting point of the journey",
                        "type": "String"
                    },
                    "destination": {
                        "description": "The end point of the journey",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "The distance between the origin and the destination",
                        "type": "Float"
                    }
                },
                "format": "CalculateDistance(origin, destination) -> distance"
            },
            {
                "name": "CalculateTime",
                "Description": "This API is to calculate the time required to travel a certain distance at a given speed.",
                "input_params": {
                    "distance": {
                        "description": "The distance to be travelled",
                        "type": "Float"
                    },
                    "speed": {
                        "description": "The average speed of travel",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "time": {
                        "description": "The calculated time of travel",
                        "type": "Time"
                    }
                },
                "format": "CalculateTime(distance, speed) -> time"
            },
            {
                "name": "RoutePlanner",
                "Description": "This API is to plan a route between two locations and estimate the time required based on a given average speed.",
                "input_params": {
                    "origin": {
                        "description": "The starting point of the journey",
                        "type": "String"
                    },
                    "destination": {
                        "description": "The end point of the journey",
                        "type": "String"
                    },
                    "distance": {
                        "description": "The distance between the origin and the destination",
                        "type": "Float"
                    },
                    "time": {
                        "description": "The estimated time to travel the distance",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "route": {
                        "description": "The planned route from origin to destination",
                        "type": "String"
                    },
                    "estimated_time": {
                        "description": "The estimated time to travel from origin to destination",
                        "type": "Time"
                    }
                },
                "format": "RoutePlanner(origin, destination, distance, time) -> (route, estimated_time)"
            }
        ],
        "Query": "I'm in Denver and planning to drive to Las Vegas. Can you provide me with the route and the estimated time it'll take if I drive with an average speed of 60 miles per hour?",
        "Label": "RoutePlanner(origin='Denver', destination='Las Vegas', distance=CalculateDistance(origin='Denver', destination='Las Vegas'), time=CalculateTime(distance=CalculateDistance(origin='Denver', destination='Las Vegas'), speed=60))",
        "Index": 1324
    },
    {
        "APIs": [
            {
                "name": "CalculateDistance",
                "Description": "This API is to calculate the distance between two locations.",
                "input_params": {
                    "origin": {
                        "description": "the starting location of the trip",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the end location of the trip",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "the distance between the origin and the destination",
                        "type": "Float"
                    }
                },
                "format": "CalculateDistance(origin, destination) -> distance"
            },
            {
                "name": "CalculateTime",
                "Description": "This API is to calculate the time it takes from origin to destination at a certain speed.",
                "input_params": {
                    "distance": {
                        "description": "the distance of the trip",
                        "type": "Float"
                    },
                    "speed": {
                        "description": "the average speed during the trip",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "time": {
                        "description": "the estimated time of the trip",
                        "type": "Time"
                    }
                },
                "format": "CalculateTime(distance, speed) -> time"
            },
            {
                "name": "RoutePlanner",
                "Description": "This API is to provide the route and estimated time from origin to destination.",
                "input_params": {
                    "origin": {
                        "description": "the starting location of the trip",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the end location of the trip",
                        "type": "String"
                    },
                    "distance": {
                        "description": "the distance of the trip",
                        "type": "Float"
                    },
                    "time": {
                        "description": "the estimated time of the trip",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "route": {
                        "description": "the route from origin to destination",
                        "type": "String"
                    },
                    "time": {
                        "description": "the estimated time of the trip",
                        "type": "Time"
                    }
                },
                "format": "RoutePlanner(origin, destination, distance, time) -> route, time"
            }
        ],
        "Query": "I'm currently in Boston and I plan to drive to Philadelphia. Could you tell me the route and the time it would take if I drive at an average speed of 65 miles per hour?",
        "Label": "RoutePlanner(origin='Boston', destination='Philadelphia', distance=CalculateDistance(origin='Boston', destination='Philadelphia'), time=CalculateTime(distance=CalculateDistance(origin='Boston', destination='Philadelphia'), speed=65))",
        "Index": 1325
    },
    {
        "APIs": [
            {
                "name": "CalculateDistance",
                "Description": "This API is to calculate the distance between the origin and the destination.",
                "input_params": {
                    "origin": {
                        "description": "the starting location of the journey",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination location of the journey",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "the calculated distance between origin and destination",
                        "type": "Float"
                    }
                },
                "format": "CalculateDistance(origin, destination) -> distance"
            },
            {
                "name": "CalculateTime",
                "Description": "This API is to calculate the time it takes to travel a distance at a certain speed.",
                "input_params": {
                    "distance": {
                        "description": "the distance to be traveled",
                        "type": "Float"
                    },
                    "speed": {
                        "description": "the average speed of the journey",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "time": {
                        "description": "the calculated time it takes to travel the distance at the given speed",
                        "type": "Float"
                    }
                },
                "format": "CalculateTime(distance, speed) -> time"
            },
            {
                "name": "RoutePlanner",
                "Description": "This API is to provide the route and the time it takes to travel from the origin to the destination at a certain speed.",
                "input_params": {
                    "origin": {
                        "description": "the starting location of the journey",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination location of the journey",
                        "type": "String"
                    },
                    "distance": {
                        "description": "the distance between the origin and the destination",
                        "type": "Float"
                    },
                    "time": {
                        "description": "the calculated time it takes to travel the distance at the given speed",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "route": {
                        "description": "the route from the origin to the destination",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time it takes to travel from the origin to the destination at a certain speed",
                        "type": "Float"
                    }
                },
                "format": "RoutePlanner(origin, destination, distance, time) -> route, time"
            }
        ],
        "Query": "I'm in Miami and I'm planning on driving to Orlando. Can you provide me with the route and how long it will take if I maintain an average speed of 70 miles per hour?",
        "Label": "RoutePlanner(origin='Miami', destination='Orlando', distance=CalculateDistance(origin='Miami', destination='Orlando'), time=CalculateTime(distance=CalculateDistance(origin='Miami', destination='Orlando'), speed=70))",
        "Index": 1326
    },
    {
        "APIs": [
            {
                "name": "UserLocation",
                "Description": "This API is to get user's location by user ID.",
                "input_params": {
                    "userID": {
                        "description": "the ID of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location of the user",
                        "type": "String"
                    }
                },
                "format": "UserLocation(userID) -> location"
            },
            {
                "name": "WeatherCheck",
                "Description": "This API is to get the weather of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location to check weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather of the location",
                        "type": "String"
                    }
                },
                "format": "WeatherCheck(location) -> weather"
            },
            {
                "name": "DressSuggestion",
                "Description": "This API is to suggest a suitable outfit based on the weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather to base the outfit suggestion on",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the suggested outfit based on the weather",
                        "type": "String"
                    }
                },
                "format": "DressSuggestion(weather) -> outfit"
            }
        ],
        "Query": "What kind of outfit is suitable for me today? My ID is 123456.",
        "Label": "DressSuggestion(weather=WeatherCheck(location=UserLocation(userID='123456')))",
        "Index": 1327
    },
    {
        "APIs": [
            {
                "name": "UserLocation",
                "Description": "This API is to find location based on user ID.",
                "input_params": {
                    "userID": {
                        "description": "the ID of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location of the user",
                        "type": "String"
                    }
                },
                "format": "UserLocation(userID) -> location"
            },
            {
                "name": "WeatherCheck",
                "Description": "This API is to check the weather.",
                "input_params": {
                    "location": {
                        "description": "the location to check weather for",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the current weather",
                        "type": "String"
                    }
                },
                "format": "WeatherCheck(location) -> weather"
            },
            {
                "name": "DressSuggestion",
                "Description": "This API is to suggest clothing based on weather.",
                "input_params": {
                    "weather": {
                        "description": "the current weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing": {
                        "description": "the suggested clothing",
                        "type": "String"
                    }
                },
                "format": "DressSuggestion(weather) -> clothing"
            }
        ],
        "Query": "What type of clothing should I put on today? My user ID is 246810.",
        "Label": "DressSuggestion(weather=WeatherCheck(location=UserLocation(userID='246810')))",
        "Index": 1328
    },
    {
        "APIs": [
            {
                "name": "UserLocation",
                "Description": "This API is to get the location of the user based on their userID.",
                "input_params": {
                    "userID": {
                        "description": "The unique identification number of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "The location of the user",
                        "type": "String"
                    }
                },
                "format": "UserLocation(userID) -> location"
            },
            {
                "name": "WeatherCheck",
                "Description": "This API is to check the current weather of the location.",
                "input_params": {
                    "location": {
                        "description": "The location where to check the weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "The current weather of the location",
                        "type": "String"
                    }
                },
                "format": "WeatherCheck(location) -> weather"
            },
            {
                "name": "DressSuggestion",
                "Description": "This API is to suggest attire based on the weather.",
                "input_params": {
                    "weather": {
                        "description": "The current weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "attire suggestion": {
                        "description": "The suggested attire based on the weather",
                        "type": "String"
                    }
                },
                "format": "DressSuggestion(weather) -> attire suggestion"
            }
        ],
        "Query": "Can you suggest what attire I should go for today? My user ID is 135790.",
        "Label": "DressSuggestion(weather=WeatherCheck(location=UserLocation(userID='135790')))",
        "Index": 1329
    },
    {
        "APIs": [
            {
                "name": "UserLocation",
                "Description": "This API is to get the location of the user.",
                "input_params": {
                    "userID": {
                        "description": "the ID of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location of the user",
                        "type": "String"
                    }
                },
                "format": "UserLocation(userID) -> location"
            },
            {
                "name": "WeatherCheck",
                "Description": "This API is to check the weather at a certain location.",
                "input_params": {
                    "location": {
                        "description": "the location to check the weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather at the location",
                        "type": "String"
                    }
                },
                "format": "WeatherCheck(location) -> weather"
            },
            {
                "name": "DressSuggestion",
                "Description": "This API is to suggest a dress based on the weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather to suggest a dress",
                        "type": "String"
                    }
                },
                "output_params": {
                    "suggestion": {
                        "description": "the suggested dress",
                        "type": "String"
                    }
                },
                "format": "DressSuggestion(weather) -> suggestion"
            }
        ],
        "Query": "What should be my dress code for today? I am user 864209.",
        "Label": "DressSuggestion(weather=WeatherCheck(location=UserLocation(userID='864209')))",
        "Index": 1330
    },
    {
        "APIs": [
            {
                "name": "UserLocation",
                "Description": "This API is to locate the user base on user ID.",
                "input_params": {
                    "userID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location of the user",
                        "type": "String"
                    }
                },
                "format": "UserLocation(userID) -> location"
            },
            {
                "name": "WeatherCheck",
                "Description": "This API is to check the weather of a location.",
                "input_params": {
                    "location": {
                        "description": "the name of the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather of the location",
                        "type": "String"
                    }
                },
                "format": "WeatherCheck(location) -> weather"
            },
            {
                "name": "DressSuggestion",
                "Description": "This API is to suggest an ensemble based on the weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ensemble": {
                        "description": "the suggested ensemble",
                        "type": "String"
                    }
                },
                "format": "DressSuggestion(weather) -> ensemble"
            }
        ],
        "Query": "What ensemble should I choose for today? My user ID is 111213.",
        "Label": "DressSuggestion(weather=WeatherCheck(location=UserLocation(userID='111213')))",
        "Index": 1331
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast for a specified city and date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast of the city on the specified date",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather"
            },
            {
                "name": "OutdoorActivityRecommend",
                "Description": "This API is to recommend an outdoor activity based on the city and weather.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "weather": {
                        "description": "the weather in the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity": {
                        "description": "the recommended outdoor activity",
                        "type": "String"
                    }
                },
                "format": "OutdoorActivityRecommend(city, weather) -> activity"
            },
            {
                "name": "BookActivity",
                "Description": "This API is to book an activity in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "activity": {
                        "description": "the outdoor activity to be booked",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookActivity(city, activity) -> booking status"
            }
        ],
        "Query": "Can you help me book an outdoor activity in New York for coming Saturday?",
        "Label": "BookActivity(city='New York', activity=OutdoorActivityRecommend(city='New York', weather=WeatherForecast(city='New York', date='coming Saturday')))",
        "Index": 1332
    },
    {
        "APIs": [
            {
                "name": "BookActivity",
                "Description": "This API is to book an activity.",
                "input_params": {
                    "city": {
                        "description": "the city where the activity will take place",
                        "type": "String"
                    },
                    "activity": {
                        "description": "the activity to book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookActivity(city, activity) -> booking status."
            },
            {
                "name": "OutdoorActivityRecommend",
                "Description": "This API is to provide recommendations for outdoor activities in a given city.",
                "input_params": {
                    "city": {
                        "description": "the city where the activity will take place",
                        "type": "String"
                    },
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity": {
                        "description": "the recommended activity",
                        "type": "String"
                    }
                },
                "format": "OutdoorActivityRecommend(city, weather) -> activity"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast for a specific city and date.",
                "input_params": {
                    "city": {
                        "description": "the city for the weather forecast",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather"
            }
        ],
        "Query": "I want to book an outdoor activity in Paris next Wednesday. Can you assist?",
        "Label": "BookActivity(city='Paris', activity=OutdoorActivityRecommend(city='Paris', weather=WeatherForecast(city='Paris', date='next Wednesday')))",
        "Index": 1333
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast of a specific city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for forecasting",
                        "type": "Dates"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather of the city on the specific date",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather"
            },
            {
                "name": "OutdoorActivityRecommend",
                "Description": "This API is to get a recommended outdoor activity based on the city and the weather.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "weather": {
                        "description": "the weather of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity": {
                        "description": "a recommended outdoor activity",
                        "type": "String"
                    }
                },
                "format": "OutdoorActivityRecommend(city, weather) -> activity"
            },
            {
                "name": "BookActivity",
                "Description": "This API is to book an activity in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "activity": {
                        "description": "the activity to be booked",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookActivity(city, activity) -> booking status."
            }
        ],
        "Query": "Can you organize and book an outdoor activity for me in Tokyo for the next Friday?",
        "Label": "BookActivity(city='Tokyo', activity=OutdoorActivityRecommend(city='Tokyo', weather=WeatherForecast(city='Tokyo', date='next Friday')))",
        "Index": 1334
    },
    {
        "APIs": [
            {
                "name": "OutdoorActivityRecommend",
                "Description": "This API is to recommend outdoor activities based on location and weather.",
                "input_params": {
                    "city": {
                        "description": "the city where the activity will be held",
                        "type": "String"
                    },
                    "weather": {
                        "description": "the weather forecast of the city on the specific date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity": {
                        "description": "the recommended outdoor activity",
                        "type": "String"
                    }
                },
                "format": "OutdoorActivityRecommend(city, weather) -> activity"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast of a specific city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date for the weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast of the city on the specific date",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather"
            },
            {
                "name": "BookActivity",
                "Description": "This API is to book an activity.",
                "input_params": {
                    "city": {
                        "description": "the city where the activity will be held",
                        "type": "String"
                    },
                    "activity": {
                        "description": "the activity to be booked",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookActivity(city, activity) -> booking status."
            }
        ],
        "Query": "Could you book an outdoor activity in Toronto for me for the upcoming Monday?",
        "Label": "BookActivity(city='Toronto', activity=OutdoorActivityRecommend(city='Toronto', weather=WeatherForecast(city='Toronto', date='upcoming Monday')))",
        "Index": 1335
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast for a specific city and date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the forecasted weather details",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather"
            },
            {
                "name": "OutdoorActivityRecommend",
                "Description": "This API is to recommend an outdoor activity based on the city and weather.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "weather": {
                        "description": "the weather in the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity": {
                        "description": "the recommended outdoor activity",
                        "type": "String"
                    }
                },
                "format": "OutdoorActivityRecommend(city, weather) -> activity"
            },
            {
                "name": "BookActivity",
                "Description": "This API is to book an activity in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "activity": {
                        "description": "the activity to book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookActivity(city, activity) -> booking status"
            }
        ],
        "Query": "I need to book an outdoor activity in Berlin for this Sunday. Can you help?",
        "Label": "BookActivity(city='Berlin', activity=OutdoorActivityRecommend(city='Berlin', weather=WeatherForecast(city='Berlin', date='this Sunday')))",
        "Index": 1336
    },
    {
        "APIs": [
            {
                "name": "FlightSchedule",
                "Description": "This API is to get the flight schedule to a specific city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the city to which the flight is scheduled",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight": {
                        "description": "the scheduled flight",
                        "type": "String"
                    }
                },
                "format": "FlightSchedule(city, date) -> flight"
            },
            {
                "name": "HotelAvailability",
                "Description": "This API is to check the availability of hotels in a specific city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the city where the hotel is located",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for checking the hotel availability",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotel": {
                        "description": "the available hotels",
                        "type": "String"
                    }
                },
                "format": "HotelAvailability(city, date) -> hotel"
            },
            {
                "name": "BookTrip",
                "Description": "This API is to book a trip including flight and hotel.",
                "input_params": {
                    "flight": {
                        "description": "the flight to be booked",
                        "type": "String"
                    },
                    "hotel": {
                        "description": "the hotel to be booked",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookTrip(flight, hotel) -> booking status."
            }
        ],
        "Query": "I'm visiting my family in Sydney on 30th December, could you assist in booking the flight and hotel?",
        "Label": "BookTrip(flight=FlightSchedule(city='Sydney', date='30th December'), hotel=HotelAvailability(city='Sydney', date='30th December'))",
        "Index": 1337
    },
    {
        "APIs": [
            {
                "name": "FlightSchedule",
                "Description": "This API is to get flight schedule.",
                "input_params": {
                    "city": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight": {
                        "description": "the details of the flight",
                        "type": "String"
                    }
                },
                "format": "FlightSchedule(city, date) -> flight"
            },
            {
                "name": "HotelAvailability",
                "Description": "This API is to check hotel availability.",
                "input_params": {
                    "city": {
                        "description": "the city where the hotel is located",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the hotel stay",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotel": {
                        "description": "the availability of the hotel",
                        "type": "String"
                    }
                },
                "format": "HotelAvailability(city, date) -> hotel"
            },
            {
                "name": "BookTrip",
                "Description": "This API is to book a trip.",
                "input_params": {
                    "flight": {
                        "description": "the details of the flight",
                        "type": "String"
                    },
                    "hotel": {
                        "description": "the availability of the hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookTrip(flight, hotel) -> booking status."
            }
        ],
        "Query": "I'm going to Tokyo on 10th January for a research project, can you arrange the flight and hotel?",
        "Label": "BookTrip(flight=FlightSchedule(city='Tokyo', date='10th January'), hotel=HotelAvailability(city='Tokyo', date='10th January'))",
        "Index": 1338
    },
    {
        "APIs": [
            {
                "name": "FindFlights",
                "Description": "This API is to find flights between two cities on a specific date.",
                "input_params": {
                    "city1": {
                        "description": "the departure city",
                        "type": "String"
                    },
                    "city2": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight": {
                        "description": "the flight details",
                        "type": "String"
                    }
                },
                "format": "FindFlights(city1, city2, date) -> flight"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "flight": {
                        "description": "the flight to be booked",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the flight booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight) -> booking status."
            }
        ],
        "Query": "I want to fly from Chicago to Florida this Friday, can you assist me in booking the flight?",
        "Label": "BookFlight(flight=FindFlights(city1='Chicago', city2='Florida', date='this Friday'))",
        "Index": 1339
    },
    {
        "APIs": [
            {
                "name": "FindFlights",
                "Description": "This API is to find flights based on departure city, destination city, and date.",
                "input_params": {
                    "city1": {
                        "description": "the departure city",
                        "type": "String"
                    },
                    "city2": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight": {
                        "description": "the flight details",
                        "type": "String"
                    }
                },
                "format": "FindFlights(city1, city2, date) -> flight"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "flight": {
                        "description": "the flight to be booked",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the flight booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight) -> booking status."
            }
        ],
        "Query": "I need to go from Dallas to Seattle next Wednesday, can you help me reserve a flight?",
        "Label": "BookFlight(flight=FindFlights(city1='Dallas', city2='Seattle', date='next Wednesday'))",
        "Index": 1340
    },
    {
        "APIs": [
            {
                "name": "FindFlights",
                "Description": "This API is to find available flights between two cities on a specific date",
                "input_params": {
                    "city1": {
                        "description": "The departure city",
                        "type": "String"
                    },
                    "city2": {
                        "description": "The arrival city",
                        "type": "String"
                    },
                    "date": {
                        "description": "The date of travel",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight": {
                        "description": "Available flights",
                        "type": "String"
                    }
                },
                "format": "FindFlights(city1, city2, date) -> flight"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a specific flight",
                "input_params": {
                    "flight": {
                        "description": "The flight to book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "The status of the flight booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight) -> booking status"
            }
        ],
        "Query": "I am planning to travel from Paris to Rome this Sunday, can you help me with the flight booking?",
        "Label": "BookFlight(flight=FindFlights(city1='Paris', city2='Rome', date='this Sunday'))",
        "Index": 1341
    },
    {
        "APIs": [
            {
                "name": "FindFlights",
                "Description": "This API is to find flights between two cities on a specific date.",
                "input_params": {
                    "city1": {
                        "description": "the departure city",
                        "type": "String"
                    },
                    "city2": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of departure",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight": {
                        "description": "the details of the found flight",
                        "type": "String"
                    }
                },
                "format": "FindFlights(city1, city2, date) -> flight"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight with specific flight details.",
                "input_params": {
                    "flight": {
                        "description": "the details of the flight to be booked",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the flight booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight) -> booking status"
            }
        ],
        "Query": "I need to get from Tokyo to Sydney next Tuesday, can you assist in flight booking?",
        "Label": "BookFlight(flight=FindFlights(city1='Tokyo', city2='Sydney', date='next Tuesday'))",
        "Index": 1342
    },
    {
        "APIs": [
            {
                "name": "FindFlights",
                "Description": "This API is to find available flights based on source, destination and date.",
                "input_params": {
                    "city1": {
                        "description": "the departure city",
                        "type": "String"
                    },
                    "city2": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight": {
                        "description": "Available flight options based on the input parameters",
                        "type": "String"
                    }
                },
                "format": "FindFlights(city1, city2, date) -> flight"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a particular flight.",
                "input_params": {
                    "flight": {
                        "description": "the chosen flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight) -> booking status."
            }
        ],
        "Query": "I want to travel from Boston to Denver this Saturday, can you help me book a flight?",
        "Label": "BookFlight(flight=FindFlights(city1='Boston', city2='Denver', date='this Saturday'))",
        "Index": 1343
    },
    {
        "APIs": [
            {
                "name": "BusSchedule",
                "Description": "This API is to get the city where the bus terminates.",
                "input_params": {
                    "bus_number": {
                        "description": "the number of the bus",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "the city where the bus terminates",
                        "type": "String"
                    }
                },
                "format": "BusSchedule(bus_number) -> city"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast of a city at a specific date.",
                "input_params": {
                    "city": {
                        "description": "the city where the weather forecast is needed",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast of the city",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather"
            },
            {
                "name": "ParkRecommend",
                "Description": "This API is to get park recommendation based on the city and weather.",
                "input_params": {
                    "city": {
                        "description": "the city where the park recommendation is needed",
                        "type": "String"
                    },
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "parks": {
                        "description": "the recommended parks",
                        "type": "List of Strings"
                    }
                },
                "format": "ParkRecommend(city, weather) -> parks"
            }
        ],
        "Query": "I want to take bus 72 on Sunday. Can you tell me some good parks to visit based on the weather in the city where the bus terminates?",
        "Label": "ParkRecommend(city=BusSchedule(bus_number='72'), weather=WeatherForecast(city=BusSchedule(bus_number='72'), date='Sunday'))",
        "Index": 1344
    },
    {
        "APIs": [
            {
                "name": "BusSchedule",
                "Description": "This API is to get the city where the bus ends.",
                "input_params": {
                    "bus_number": {
                        "description": "the number of the bus",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "the city where the bus ends",
                        "type": "String"
                    }
                },
                "format": "BusSchedule(bus_number) -> city"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast of a city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast of the city on the specific date",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather"
            },
            {
                "name": "ParkRecommend",
                "Description": "This API is to recommend some parks to visit depending on the climate of a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "weather": {
                        "description": "the weather of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "parks": {
                        "description": "the list of recommended parks",
                        "type": "Array of Strings"
                    }
                },
                "format": "ParkRecommend(city, weather) -> parks"
            }
        ],
        "Query": "I'm thinking of catching the bus number 15 next Tuesday. Could you suggest some parks to visit depending on the climate of the city where the bus ends?",
        "Label": "ParkRecommend(city=BusSchedule(bus_number='15'), weather=WeatherForecast(city=BusSchedule(bus_number='15'), date='next Tuesday'))",
        "Index": 1345
    },
    {
        "APIs": [
            {
                "name": "BusSchedule",
                "Description": "This API is to get the city where the bus route ends.",
                "input_params": {
                    "bus_number": {
                        "description": "the number of the bus",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "the city where the bus route ends",
                        "type": "String"
                    }
                },
                "format": "BusSchedule(bus_number) -> city"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast in a specific city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the city to get the weather forecast",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date to get the weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather"
            },
            {
                "name": "ParkRecommend",
                "Description": "This API is to recommend parks based on city and weather.",
                "input_params": {
                    "city": {
                        "description": "the city to recommend parks",
                        "type": "String"
                    },
                    "weather": {
                        "description": "the weather to recommend parks",
                        "type": "String"
                    }
                },
                "output_params": {
                    "parks": {
                        "description": "recommended parks",
                        "type": "String"
                    }
                },
                "format": "ParkRecommend(city, weather) -> parks"
            }
        ],
        "Query": "I intend to board the bus number 45 on the upcoming Friday. Can you recommend some parks to explore considering the weather forecast in the city where the bus route ends?",
        "Label": "ParkRecommend(city=BusSchedule(bus_number='45'), weather=WeatherForecast(city=BusSchedule(bus_number='45'), date='upcoming Friday'))",
        "Index": 1346
    },
    {
        "APIs": [
            {
                "name": "BusSchedule",
                "Description": "This API provides information about the bus schedule and its route.",
                "input_params": {
                    "bus_number": {
                        "description": "the number of the bus",
                        "type": "String"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "the city where the bus route ends",
                        "type": "String"
                    }
                },
                "format": "BusSchedule(bus_number) -> city"
            },
            {
                "name": "WeatherForecast",
                "Description": "This API provides weather information for a specific city on a given date.",
                "input_params": {
                    "city": {
                        "description": "the city to get the weather forecast",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date to get the weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather"
            },
            {
                "name": "ParkRecommend",
                "Description": "This API recommends parks based on the city and weather.",
                "input_params": {
                    "city": {
                        "description": "the city to get the park recommendations",
                        "type": "String"
                    },
                    "weather": {
                        "description": "the weather condition in the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recommendations": {
                        "description": "the list of recommended parks",
                        "type": "List"
                    }
                },
                "format": "ParkRecommend(city, weather) -> recommendations"
            }
        ],
        "Query": "I am planning to get on the bus number 10 this Saturday. Can you guide me to some parks to visit according to the weather in the city where the bus stops?",
        "Label": "ParkRecommend(city=BusSchedule(bus_number='10'), weather=WeatherForecast(city=BusSchedule(bus_number='10'), date='this Saturday'))",
        "Index": 1347
    },
    {
        "APIs": [
            {
                "name": "RestaurantFinder",
                "Description": "This API is to find a restaurant based on given city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the information of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantFinder(city, cuisine) -> restaurant"
            },
            {
                "name": "MenuGetter",
                "Description": "This API is to find the menu of a specific restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the information of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the detailed menu of the restaurant",
                        "type": "String"
                    }
                },
                "format": "MenuGetter(restaurant) -> menu"
            },
            {
                "name": "OrderFood",
                "Description": "This API is to order food from a specific restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the information of the restaurant",
                        "type": "String"
                    },
                    "menu": {
                        "description": "the detailed menu of the restaurant",
                        "type": "String"
                    },
                    "item": {
                        "description": "the selected food item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order status": {
                        "description": "the status of the food order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(restaurant, menu, item) -> order status"
            }
        ],
        "Query": "I'd like to get a chicken tikka masala from an Indian restaurant in Seattle.",
        "Label": "OrderFood(restaurant=RestaurantFinder(city='Seattle', cuisine='Indian'), menu=MenuGetter(restaurant=RestaurantFinder(city='Seattle', cuisine='Indian')), item='Chicken Tikka Masala')",
        "Index": 1348
    },
    {
        "APIs": [
            {
                "name": "RestaurantFinder",
                "Description": "This API is to find a restaurant in a specific city with a specific cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine the restaurant offers",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the restaurant that matches the criteria",
                        "type": "String"
                    }
                },
                "format": "RestaurantFinder(city, cuisine) -> restaurant"
            },
            {
                "name": "MenuGetter",
                "Description": "This API is to get the menu from a specific restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the restaurant to get the menu from",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "String"
                    }
                },
                "format": "MenuGetter(restaurant) -> menu"
            },
            {
                "name": "OrderFood",
                "Description": "This API is to order food from a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the restaurant to order food from",
                        "type": "String"
                    },
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "String"
                    },
                    "item": {
                        "description": "the item to order from the menu",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order confirmation": {
                        "description": "the confirmation of the order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(restaurant, menu, item) -> order confirmation"
            }
        ],
        "Query": "I want to order a vegetarian sushi from a Japanese restaurant in San Francisco.",
        "Label": "OrderFood(restaurant=RestaurantFinder(city='San Francisco', cuisine='Japanese'), menu=MenuGetter(restaurant=RestaurantFinder(city='San Francisco', cuisine='Japanese')), item='Vegetarian Sushi')",
        "Index": 1349
    },
    {
        "APIs": [
            {
                "name": "RestaurantFinder",
                "Description": "This API is used to find a restaurant based on the provided city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the user wants to find a restaurant",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the kind of cuisine the user is looking for",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the name of the restaurant found",
                        "type": "String"
                    }
                },
                "format": "RestaurantFinder(city, cuisine) -> restaurant"
            },
            {
                "name": "MenuGetter",
                "Description": "This API is used to retrieve the menu of a specific restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the restaurant for which the user wants to find the menu",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "String"
                    }
                },
                "format": "MenuGetter(restaurant) -> menu"
            },
            {
                "name": "OrderFood",
                "Description": "This API is used to place an order for a specific item from a specific restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the restaurant from which the user wants to order food",
                        "type": "String"
                    },
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "String"
                    },
                    "item": {
                        "description": "the item the user wants to order",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order status": {
                        "description": "the status of the food order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(restaurant, menu, item) -> order status"
            }
        ],
        "Query": "I'm craving for a steak from an American restaurant in New York City",
        "Label": "OrderFood(restaurant=RestaurantFinder(city='New York City', cuisine='American'), menu=MenuGetter(restaurant=RestaurantFinder(city='New York City', cuisine='American')), item='Steak')",
        "Index": 1350
    },
    {
        "APIs": [
            {
                "name": "RestaurantFinder",
                "Description": "This API is to find a restaurant based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine the restaurant serves",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the restaurant found based on input city and cuisine",
                        "type": "String"
                    }
                },
                "format": "RestaurantFinder(city, cuisine) -> restaurant"
            },
            {
                "name": "MenuGetter",
                "Description": "This API is to get the menu of a specific restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the restaurant to get the menu from",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "String"
                    }
                },
                "format": "MenuGetter(restaurant) -> menu"
            },
            {
                "name": "OrderFood",
                "Description": "This API is to order a specific food item from a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the restaurant to order food from",
                        "type": "String"
                    },
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "String"
                    },
                    "item": {
                        "description": "the food item to order",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order confirmation": {
                        "description": "the confirmation of the order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(restaurant, menu, item) -> order confirmation"
            }
        ],
        "Query": "I'm craving for a steak from an American restaurant in New York City.",
        "Label": "OrderFood(restaurant=RestaurantFinder(city='New York City', cuisine='American'), menu=MenuGetter(restaurant=RestaurantFinder(city='New York City', cuisine='American')), item='Steak')",
        "Index": 1351
    },
    {
        "APIs": [
            {
                "name": "RestaurantFinder",
                "Description": "This API is to find a restaurant based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the restaurant which fits the criteria",
                        "type": "String"
                    }
                },
                "format": "RestaurantFinder(city, cuisine) -> restaurant"
            },
            {
                "name": "MenuGetter",
                "Description": "This API is to get the menu of a specific restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the specified restaurant",
                        "type": "Array"
                    }
                },
                "format": "MenuGetter(restaurant) -> menu"
            },
            {
                "name": "OrderFood",
                "Description": "This API is to order a specific item from a restaurant.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "Array"
                    },
                    "item": {
                        "description": "the food item to be ordered",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order confirmation": {
                        "description": "the confirmation of the placed order",
                        "type": "String"
                    }
                },
                "format": "OrderFood(restaurant, menu, item) -> order confirmation."
            }
        ],
        "Query": "I want to have a paella from a Spanish restaurant in Miami.",
        "Label": "OrderFood(restaurant=RestaurantFinder(city='Miami', cuisine='Spanish'), menu=MenuGetter(restaurant=RestaurantFinder(city='Miami', cuisine='Spanish')), item='Paella')",
        "Index": 1352
    },
    {
        "APIs": [
            {
                "name": "FootballTeamInfo",
                "Description": "This API is to get the team information.",
                "input_params": {
                    "team_name": {
                        "description": "the name of the football team",
                        "type": "String"
                    }
                },
                "output_params": {
                    "team_info": {
                        "description": "the information of the team",
                        "type": "Object"
                    }
                },
                "format": "FootballTeamInfo(team_name) -> team_info"
            },
            {
                "name": "GameSchedule",
                "Description": "This API is to get the game schedule of a team.",
                "input_params": {
                    "team_info": {
                        "description": "the information of the team",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "game_schedule": {
                        "description": "the schedule of the team's game",
                        "type": "Object"
                    }
                },
                "format": "GameSchedule(team_info) -> game_schedule"
            },
            {
                "name": "TicketPrice",
                "Description": "This API is to get the ticket price for a game.",
                "input_params": {
                    "game_schedule": {
                        "description": "the schedule of the team's game",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "ticket_price": {
                        "description": "the price of the ticket",
                        "type": "Float"
                    }
                },
                "format": "TicketPrice(game_schedule) -> ticket_price"
            }
        ],
        "Query": "How much does it cost to watch a Chelsea FC match?",
        "Label": "TicketPrice(game_schedule=GameSchedule(team_info=FootballTeamInfo(team_name='Chelsea FC')))",
        "Index": 1353
    },
    {
        "APIs": [
            {
                "name": "FootballTeamInfo",
                "Description": "This API is to get information about the football team.",
                "input_params": {
                    "team_name": {
                        "description": "the name of the football team",
                        "type": "String"
                    }
                },
                "output_params": {
                    "team_info": {
                        "description": "the information of the football team",
                        "type": "Object"
                    }
                },
                "format": "FootballTeamInfo(team_name) -> team_info"
            },
            {
                "name": "GameSchedule",
                "Description": "This API is to get the schedule of the games for the specified football team.",
                "input_params": {
                    "team_info": {
                        "description": "the information of the football team",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "game_schedule": {
                        "description": "the schedule of the games for the specified football team",
                        "type": "Object"
                    }
                },
                "format": "GameSchedule(team_info) -> game_schedule"
            },
            {
                "name": "TicketPrice",
                "Description": "This API is to get the ticket price for a specific game.",
                "input_params": {
                    "game_schedule": {
                        "description": "the schedule of the game",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "ticket_price": {
                        "description": "the price of the ticket for the specified game",
                        "type": "Float"
                    }
                },
                "format": "TicketPrice(game_schedule) -> ticket_price"
            }
        ],
        "Query": "Can you tell me the cost of seeing a FC Barcelona game?",
        "Label": "TicketPrice(game_schedule=GameSchedule(team_info=FootballTeamInfo(team_name='FC Barcelona')))",
        "Index": 1354
    },
    {
        "APIs": [
            {
                "name": "FootballTeamInfo",
                "Description": "This API is to get information about a football team.",
                "input_params": {
                    "team_name": {
                        "description": "the name of the football team",
                        "type": "String"
                    }
                },
                "output_params": {
                    "team_info": {
                        "description": "the information of the football team",
                        "type": "Object"
                    }
                },
                "format": "FootballTeamInfo(team_name) -> team_info"
            },
            {
                "name": "GameSchedule",
                "Description": "This API is to get the game schedule of a specific team.",
                "input_params": {
                    "team_info": {
                        "description": "the information of the team",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "game_schedule": {
                        "description": "the game schedule of the team",
                        "type": "Object"
                    }
                },
                "format": "GameSchedule(team_info) -> game_schedule"
            },
            {
                "name": "TicketPrice",
                "Description": "This API is to get the ticket price for a specific game.",
                "input_params": {
                    "game_schedule": {
                        "description": "the schedule of the game",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "ticket_price": {
                        "description": "the price of the ticket for the game",
                        "type": "Float"
                    }
                },
                "format": "TicketPrice(game_schedule) -> ticket_price"
            }
        ],
        "Query": "What's the price for a Liverpool FC game ticket?",
        "Label": "TicketPrice(game_schedule=GameSchedule(team_info=FootballTeamInfo(team_name='Liverpool FC')))",
        "Index": 1355
    },
    {
        "APIs": [
            {
                "name": "FootballTeamInfo",
                "Description": "This API is to get information about a football team.",
                "input_params": {
                    "team_name": {
                        "description": "the name of the football team",
                        "type": "String"
                    }
                },
                "output_params": {
                    "team_info": {
                        "description": "the information of the football team",
                        "type": "Object"
                    }
                },
                "format": "FootballTeamInfo(team_name) -> team_info"
            },
            {
                "name": "GameSchedule",
                "Description": "This API is to get the game schedule of a specific football team.",
                "input_params": {
                    "team_info": {
                        "description": "the information of the football team",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "game_schedule": {
                        "description": "the game schedule of the football team",
                        "type": "Object"
                    }
                },
                "format": "GameSchedule(team_info) -> game_schedule"
            },
            {
                "name": "TicketPrice",
                "Description": "This API is to get the ticket price for a specific game.",
                "input_params": {
                    "game_schedule": {
                        "description": "the game schedule of the football team",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "ticket_price": {
                        "description": "the ticket price for the specific game",
                        "type": "Float"
                    }
                },
                "format": "TicketPrice(game_schedule) -> ticket_price"
            }
        ],
        "Query": "How much do I need to pay for watching a Paris Saint-Germain match?",
        "Label": "TicketPrice(game_schedule=GameSchedule(team_info=FootballTeamInfo(team_name='Paris Saint-Germain')))",
        "Index": 1356
    },
    {
        "APIs": [
            {
                "name": "FlightDetails",
                "Description": "This API is to get the flight details.",
                "input_params": {
                    "destination": {
                        "description": "The destination of the trip",
                        "type": "String"
                    },
                    "departure_date": {
                        "description": "The departure date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight_info": {
                        "description": "Information of the flight to the destination on the specified date",
                        "type": "Object"
                    }
                },
                "format": "FlightDetails(destination, departure_date) -> flight_info"
            },
            {
                "name": "HotelBooking",
                "Description": "This API is to book a hotel.",
                "input_params": {
                    "flight_info": {
                        "description": "Information of the flight",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "hotel_reservation": {
                        "description": "Information of the hotel reservation",
                        "type": "Object"
                    }
                },
                "format": "HotelBooking(flight_info) -> hotel_reservation"
            },
            {
                "name": "ActivityPlanning",
                "Description": "This API is to plan activities.",
                "input_params": {
                    "hotel_reservation": {
                        "description": "Information of the hotel reservation",
                        "type": "Object"
                    },
                    "destination": {
                        "description": "The destination of the trip",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity_plan": {
                        "description": "Plan of activities at the destination",
                        "type": "Object"
                    }
                },
                "format": "ActivityPlanning(hotel_reservation, destination) -> activity_plan"
            }
        ],
        "Query": "Can you help me plan a trip to Rome on 20th July? I need help with flight, hotel and activity planning.",
        "Label": "ActivityPlanning(hotel_reservation=HotelBooking(flight_info=FlightDetails(destination='Rome', departure_date='20th July')), destination='Rome')",
        "Index": 1357
    },
    {
        "APIs": [
            {
                "name": "FlightDetails",
                "Description": "This API is to get the flight details.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    },
                    "departure_date": {
                        "description": "the departure date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight_info": {
                        "description": "information of the flight",
                        "type": "Object"
                    }
                },
                "format": "FlightDetails(destination, departure_date) -> flight_info"
            },
            {
                "name": "HotelBooking",
                "Description": "This API is to book a hotel.",
                "input_params": {
                    "flight_info": {
                        "description": "information of the flight",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "hotel_reservation": {
                        "description": "information of the hotel reservation",
                        "type": "Object"
                    }
                },
                "format": "HotelBooking(flight_info) -> hotel_reservation"
            },
            {
                "name": "ActivityPlanning",
                "Description": "This API is to plan activities.",
                "input_params": {
                    "hotel_reservation": {
                        "description": "information of the hotel reservation",
                        "type": "Object"
                    },
                    "destination": {
                        "description": "the destination of the activities",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity_plan": {
                        "description": "the plan for the activities",
                        "type": "Object"
                    }
                },
                "format": "ActivityPlanning(hotel_reservation, destination) -> activity_plan"
            }
        ],
        "Query": "Can you help me plan a trip to Rome on 20th July? I need help with flight, hotel and activity planning.",
        "Label": "ActivityPlanning(hotel_reservation=HotelBooking(flight_info=FlightDetails(destination='Rome', departure_date='20th July')), destination='Rome')",
        "Index": 1358
    },
    {
        "APIs": [
            {
                "name": "FlightDetails",
                "Description": "This API is to get flight details.",
                "input_params": {
                    "destination": {
                        "description": "destination of the flight",
                        "type": "String"
                    },
                    "departure_date": {
                        "description": "departure date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight_info": {
                        "description": "the information of the flight",
                        "type": "JSON"
                    }
                },
                "format": "FlightDetails(destination, departure_date) -> flight_info"
            },
            {
                "name": "HotelBooking",
                "Description": "This API is to book a hotel.",
                "input_params": {
                    "flight_info": {
                        "description": "the information of the flight",
                        "type": "JSON"
                    }
                },
                "output_params": {
                    "hotel_reservation": {
                        "description": "the reservation confirmation of the hotel",
                        "type": "JSON"
                    }
                },
                "format": "HotelBooking(flight_info) -> hotel_reservation"
            },
            {
                "name": "ActivityPlanning",
                "Description": "This API is to plan activities.",
                "input_params": {
                    "hotel_reservation": {
                        "description": "the reservation confirmation of the hotel",
                        "type": "JSON"
                    },
                    "destination": {
                        "description": "destination of the activity",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity_plan": {
                        "description": "activity plan",
                        "type": "JSON"
                    }
                },
                "format": "ActivityPlanning(hotel_reservation, destination) -> activity_plan"
            }
        ],
        "Query": "I am planning to visit Tokyo on 15th September. Can you assist me with flight, hotel and activity plan?",
        "Label": "ActivityPlanning(hotel_reservation=HotelBooking(flight_info=FlightDetails(destination='Tokyo', departure_date='15th September')), destination='Tokyo')",
        "Index": 1359
    },
    {
        "APIs": [
            {
                "name": "FindMovieGenre",
                "Description": "This API is to find the genre of a given movie.",
                "input_params": {
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovieGenre(movie) -> genre"
            },
            {
                "name": "GetMovieRatings",
                "Description": "This API is to get the ratings of a given movie.",
                "input_params": {
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "rating": {
                        "description": "the ratings of the movie",
                        "type": "Float"
                    }
                },
                "format": "GetMovieRatings(movie) -> rating"
            },
            {
                "name": "SuggestSimilarMovies",
                "Description": "This API is to recommend movies that are similar to a given movie.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "rating": {
                        "description": "the ratings of the movie",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "similar_movies": {
                        "description": "a list of movies that are similar to the given movie",
                        "type": "List"
                    }
                },
                "format": "SuggestSimilarMovies(genre, rating) -> similar_movies"
            }
        ],
        "Query": "I just finished watching \"Inception\" and I thought it was amazing. Can you recommend similar movies?",
        "Label": "SuggestSimilarMovies(genre=FindMovieGenre(movie='Inception'), rating=GetMovieRatings(movie='Inception'))",
        "Index": 1360
    },
    {
        "APIs": [
            {
                "name": "FindMovieGenre",
                "Description": "This API is to find movie genre by the movie name.",
                "input_params": {
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovieGenre(movie) -> genre"
            },
            {
                "name": "GetMovieRatings",
                "Description": "This API is to get movie rating by movie name.",
                "input_params": {
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "rating": {
                        "description": "the rating of the movie",
                        "type": "Float"
                    }
                },
                "format": "GetMovieRatings(movie) -> rating"
            },
            {
                "name": "SuggestSimilarMovies",
                "Description": "This API is to suggest similar movies based on genre and rating.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "rating": {
                        "description": "the rating of the movie",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "similar movies": {
                        "description": "the list of similar movies",
                        "type": "List of Strings"
                    }
                },
                "format": "SuggestSimilarMovies(genre, rating) -> similar movies"
            }
        ],
        "Query": "I recently saw 'Avatar' and really enjoyed it. Could you suggest similar movies?",
        "Label": "SuggestSimilarMovies(genre=FindMovieGenre(movie='Avatar'), rating=GetMovieRatings(movie='Avatar'))",
        "Index": 1361
    },
    {
        "APIs": [
            {
                "name": "FindMovieGenre",
                "Description": "This API is to find the genre of a movie.",
                "input_params": {
                    "movie": {
                        "description": "The name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "genre": {
                        "description": "The genre of the movie",
                        "type": "String"
                    }
                },
                "format": "FindMovieGenre(movie) -> genre"
            },
            {
                "name": "GetMovieRatings",
                "Description": "This API is to get the rating of a movie.",
                "input_params": {
                    "movie": {
                        "description": "The name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "rating": {
                        "description": "The rating of the movie",
                        "type": "Float"
                    }
                },
                "format": "GetMovieRatings(movie) -> rating"
            },
            {
                "name": "SuggestSimilarMovies",
                "Description": "This API is to suggest similar movies based on genre and rating.",
                "input_params": {
                    "genre": {
                        "description": "The genre of a movie",
                        "type": "String"
                    },
                    "rating": {
                        "description": "The rating of a movie",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "similar_movies": {
                        "description": "A list of similar movies",
                        "type": "List"
                    }
                },
                "format": "SuggestSimilarMovies(genre, rating) -> similar_movies"
            }
        ],
        "Query": "I just watched \"The Godfather\" and absolutely loved it. Could you suggest similar movies?",
        "Label": "SuggestSimilarMovies(genre=FindMovieGenre(movie='The Godfather'), rating=GetMovieRatings(movie='The Godfather'))",
        "Index": 1362
    },
    {
        "APIs": [
            {
                "name": "WeatherAPI",
                "Description": "This API is to get the weather of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather of the city",
                        "type": "String"
                    }
                },
                "format": "WeatherAPI(city) -> weather"
            },
            {
                "name": "ClothingSuggestionAPI",
                "Description": "This API is to recommend clothing based on the weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing_info": {
                        "description": "the information of recommended clothing",
                        "type": "String"
                    }
                },
                "format": "ClothingSuggestionAPI(weather) -> clothing_info"
            },
            {
                "name": "StoreSearchAPI",
                "Description": "This API is to find the store based on city and recommended clothing.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "clothing_info": {
                        "description": "the information of recommended clothing",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store_info": {
                        "description": "the information of the store",
                        "type": "String"
                    }
                },
                "format": "StoreSearchAPI(city, clothing_info) -> store_info"
            },
            {
                "name": "BuyOnlineAPI",
                "Description": "This API is to purchase clothing online from the recommended store.",
                "input_params": {
                    "store_info": {
                        "description": "the information of the store",
                        "type": "String"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "BuyOnlineAPI(store_info) -> purchase_status"
            }
        ],
        "Query": "What's the current weather in Sydney? What clothes are recommended and where can I buy them? Can I do it online?",
        "Label": "BuyOnlineAPI(store_info=StoreSearchAPI(city='Sydney', clothing_info=ClothingSuggestionAPI(weather=WeatherAPI(city='Sydney'))))",
        "Index": 1363
    },
    {
        "APIs": [
            {
                "name": "BookDetails",
                "Description": "This API is to get details about a specific book.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bookInfo": {
                        "description": "the detailed information about the book",
                        "type": "Object"
                    }
                },
                "format": "BookDetails(title) -> bookInfo"
            },
            {
                "name": "AuthorInformation",
                "Description": "This API is to get detailed information about a specific author.",
                "input_params": {
                    "author": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "authorBio": {
                        "description": "the biography of the author",
                        "type": "Object"
                    }
                },
                "format": "AuthorInformation(author) -> authorBio"
            },
            {
                "name": "ReadingSuggestion",
                "Description": "This API is to propose a reading schedule based on the book and author information.",
                "input_params": {
                    "bookInfo": {
                        "description": "the detailed information about the book",
                        "type": "Object"
                    },
                    "authorBio": {
                        "description": "the biography of the author",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "reading schedule": {
                        "description": "the proposed reading schedule",
                        "type": "String"
                    }
                },
                "format": "ReadingSuggestion(bookInfo, authorBio)-> reading schedule."
            }
        ],
        "Query": "Can you propose a reading schedule for 'Wuthering Heights' by Emily Bronte?",
        "Label": "ReadingSuggestion(bookInfo=BookDetails(title='Wuthering Heights'), authorBio=AuthorInformation(author='Emily Bronte'))",
        "Index": 1364
    },
    {
        "APIs": [
            {
                "name": "RestaurantRecommendation",
                "Description": "This API provides restaurant recommendations based on city, hotel information and events happening.",
                "input_params": {
                    "city": {
                        "description": "the city where the user is traveling to",
                        "type": "String"
                    },
                    "hotelInfo": {
                        "description": "Information about the hotel where the user is staying",
                        "type": "Object"
                    },
                    "eventDetails": {
                        "description": "Detailed information about the events the user will attend",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "Recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommendation(city, hotelInfo, eventDetails) -> restaurant"
            },
            {
                "name": "HotelReservation",
                "Description": "This API is to get the hotel reservation details.",
                "input_params": {
                    "city": {
                        "description": "the city where the hotel is located",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the hotel reservation",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotelInfo": {
                        "description": "the information of the hotel reservation",
                        "type": "Object"
                    }
                },
                "format": "HotelReservation(city, date) -> hotelInfo"
            },
            {
                "name": "EventSuggestions",
                "Description": "This API is to get the event suggestions based on the city and date.",
                "input_params": {
                    "city": {
                        "description": "the city where the user is going to",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the events",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "eventDetails": {
                        "description": "the details of the suggested events",
                        "type": "Object"
                    }
                },
                "format": "EventSuggestions(city, date) -> eventDetails"
            }
        ],
        "Query": "I'm traveling to New York City next month. I've booked a room at the Marriott and I'm going to watch a Broadway show. Could you recommend a good dining place?",
        "Label": "RestaurantRecommendation(city='New York City', hotelInfo=HotelReservation(city='New York City', date='next month'), eventDetails=EventSuggestions(city='New York City', date='next month'))",
        "Index": 1365
    },
    {
        "APIs": [
            {
                "name": "HotelReservation",
                "Description": "This API is to check the reservation of the hotel.",
                "input_params": {
                    "city": {
                        "description": "the city where the hotel located",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the reservation",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotelInfo": {
                        "description": "information about the hotel reservation",
                        "type": "String"
                    }
                },
                "format": "HotelReservation(city, date) -> hotelInfo"
            },
            {
                "name": "EventSuggestions",
                "Description": "This API is to provide suggestions for events.",
                "input_params": {
                    "city": {
                        "description": "the city where the event located",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "eventDetails": {
                        "description": "details about the event",
                        "type": "String"
                    }
                },
                "format": "EventSuggestions(city, date) -> eventDetails"
            },
            {
                "name": "RestaurantRecommendation",
                "Description": "This API is to recommend restaurants.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant located",
                        "type": "String"
                    },
                    "hotelInfo": {
                        "description": "information about the hotel reservation",
                        "type": "String"
                    },
                    "eventDetails": {
                        "description": "details about the event",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommendation(city, hotelInfo, eventDetails) -> restaurant"
            }
        ],
        "Query": "I'm heading to Paris in two weeks. I have a reservation at Ritz Paris and I'll be visiting an art exhibition at the Louvre. Where should I eat?",
        "Label": "RestaurantRecommendation(city='Paris', hotelInfo=HotelReservation(city='Paris', date='in two weeks'), eventDetails=EventSuggestions(city='Paris', date='in two weeks'))",
        "Index": 1366
    },
    {
        "APIs": [
            {
                "name": "HotelReservation",
                "Description": "This API retrieves hotel reservation information based on city and date.",
                "input_params": {
                    "city": {
                        "description": "the city where the hotel is located",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the hotel reservation",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotelInfo": {
                        "description": "the information of the hotel reservation",
                        "type": "Object"
                    }
                },
                "format": "HotelReservation(city, date) -> hotelInfo"
            },
            {
                "name": "EventSuggestions",
                "Description": "This API generates event suggestions based on city and date.",
                "input_params": {
                    "city": {
                        "description": "the city where the event is located",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the event",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "eventDetails": {
                        "description": "the details of the event suggestions",
                        "type": "Object"
                    }
                },
                "format": "EventSuggestions(city, date) -> eventDetails"
            },
            {
                "name": "RestaurantRecommendation",
                "Description": "This API recommends restaurants based on city, hotel information and event details.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "hotelInfo": {
                        "description": "the information of the hotel reservation",
                        "type": "Object"
                    },
                    "eventDetails": {
                        "description": "the details of the event",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "restaurant recommendation": {
                        "description": "the recommendation of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommendation(city, hotelInfo, eventDetails) -> restaurant recommendation"
            }
        ],
        "Query": "I'll be in Tokyo next weekend. I'm staying at the Park Hyatt and I'm planning to see a sumo match. Can you recommend a restaurant?",
        "Label": "RestaurantRecommendation(city='Tokyo', hotelInfo=HotelReservation(city='Tokyo', date='next weekend'), eventDetails=EventSuggestions(city='Tokyo', date='next weekend'))",
        "Index": 1367
    },
    {
        "APIs": [
            {
                "name": "FindFlight",
                "Description": "This API is to find the flight based on origin and destination.",
                "input_params": {
                    "origin": {
                        "description": "The origin city of the flight",
                        "type": "String"
                    },
                    "destination": {
                        "description": "The destination city of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flightID": {
                        "description": "The ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FindFlight(origin, destination) -> flightID"
            },
            {
                "name": "CalculateDistance",
                "Description": "This API is to calculate the distance between two cities.",
                "input_params": {
                    "origin": {
                        "description": "The origin city",
                        "type": "String"
                    },
                    "destination": {
                        "description": "The destination city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "The distance between the two cities",
                        "type": "Float"
                    }
                },
                "format": "CalculateDistance(origin, destination) -> distance"
            },
            {
                "name": "FuelConsumption",
                "Description": "This API is to calculate the fuel consumption for a flight.",
                "input_params": {
                    "flightID": {
                        "description": "The ID of the flight",
                        "type": "Integer"
                    },
                    "distance": {
                        "description": "The distance of the flight",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "fuel consumption": {
                        "description": "The fuel consumption for the flight",
                        "type": "Float"
                    }
                },
                "format": "FuelConsumption(flightID, distance) -> fuel consumption"
            }
        ],
        "Query": "What is the fuel consumption for a flight from Paris to Cairo?",
        "Label": "FuelConsumption(flightID=FindFlight(origin='Paris', destination='Cairo'), distance=CalculateDistance(origin='Paris', destination='Cairo'))",
        "Index": 1368
    },
    {
        "APIs": [
            {
                "name": "FindFlight",
                "Description": "This API is used to find flight based on origin and destination.",
                "input_params": {
                    "origin": {
                        "description": "The origin place of the flight",
                        "type": "String"
                    },
                    "destination": {
                        "description": "The destination place of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flightID": {
                        "description": "The ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FindFlight(origin, destination) -> flightID"
            },
            {
                "name": "CalculateDistance",
                "Description": "This API is to calculate distance between origin and destination.",
                "input_params": {
                    "origin": {
                        "description": "The origin place",
                        "type": "String"
                    },
                    "destination": {
                        "description": "The destination place",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "The distance between origin and destination",
                        "type": "Float"
                    }
                },
                "format": "CalculateDistance(origin, destination) -> distance"
            },
            {
                "name": "FuelConsumption",
                "Description": "This API is to calculate fuel consumption for a flight.",
                "input_params": {
                    "flightID": {
                        "description": "The ID of the flight",
                        "type": "Integer"
                    },
                    "distance": {
                        "description": "The distance the flight will travel",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "fuel consumption": {
                        "description": "The amount of fuel the flight will consume",
                        "type": "Float"
                    }
                },
                "format": "FuelConsumption(flightID, distance) -> fuel consumption"
            }
        ],
        "Query": "How much fuel will a flight from Berlin to Moscow consume?",
        "Label": "FuelConsumption(flightID=FindFlight(origin='Berlin', destination='Moscow'), distance=CalculateDistance(origin='Berlin', destination='Moscow'))",
        "Index": 1369
    },
    {
        "APIs": [
            {
                "name": "FindFlight",
                "Description": "This API is to find a flight based on origin and destination.",
                "input_params": {
                    "origin": {
                        "description": "the origin of the flight",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flightID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FindFlight(origin, destination) -> flightID"
            },
            {
                "name": "CalculateDistance",
                "Description": "This API is to calculate the distance between two locations.",
                "input_params": {
                    "origin": {
                        "description": "the origin location",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "the distance between origin and destination",
                        "type": "Float"
                    }
                },
                "format": "CalculateDistance(origin, destination) -> distance"
            },
            {
                "name": "FuelConsumption",
                "Description": "This API is to calculate the fuel consumption for a specific flight.",
                "input_params": {
                    "flightID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "distance": {
                        "description": "the distance of the flight",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "fuel consumption": {
                        "description": "the fuel consumption for the flight",
                        "type": "Float"
                    }
                },
                "format": "FuelConsumption(flightID, distance) -> fuel consumption"
            }
        ],
        "Query": "What is the fuel consumption for a flight from Tokyo to Sydney?",
        "Label": "FuelConsumption(flightID=FindFlight(origin='Tokyo', destination='Sydney'), distance=CalculateDistance(origin='Tokyo', destination='Sydney'))",
        "Index": 1370
    },
    {
        "APIs": [
            {
                "name": "FindFlight",
                "Description": "This API is to find a flight based on the origin and destination",
                "input_params": {
                    "origin": {
                        "description": "the origin city of the flight",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination city of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flightID": {
                        "description": "the ID of the found flight",
                        "type": "Integer"
                    }
                },
                "format": "FindFlight(origin, destination) -> flightID"
            },
            {
                "name": "CalculateDistance",
                "Description": "This API is to calculate the distance between two cities.",
                "input_params": {
                    "origin": {
                        "description": "the origin city",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "the calculated distance between the two cities",
                        "type": "Float"
                    }
                },
                "format": "CalculateDistance(origin, destination) -> distance"
            },
            {
                "name": "FuelConsumption",
                "Description": "This API is to calculate the fuel consumption for a specific flight and distance.",
                "input_params": {
                    "flightID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "distance": {
                        "description": "the distance of the flight",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "fuel consumption": {
                        "description": "the fuel consumption for the flight",
                        "type": "Float"
                    }
                },
                "format": "FuelConsumption(flightID, distance) -> fuel consumption"
            }
        ],
        "Query": "How much fuel will a flight from Madrid to Beijing consume?",
        "Label": "FuelConsumption(flightID=FindFlight(origin='Madrid', destination='Beijing'), distance=CalculateDistance(origin='Madrid', destination='Beijing'))",
        "Index": 1371
    },
    {
        "APIs": [
            {
                "name": "FindFlight",
                "Description": "This API is to find a flight.",
                "input_params": {
                    "origin": {
                        "description": "the starting point of the flight",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination point of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flightID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FindFlight(origin, destination) -> flightID"
            },
            {
                "name": "CalculateDistance",
                "Description": "This API is to calculate the distance between two points based on longitude and latitude.",
                "input_params": {
                    "origin": {
                        "description": "the starting point",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination point",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance": {
                        "description": "the calculated distance",
                        "type": "Float"
                    }
                },
                "format": "CalculateDistance(origin, destination) -> distance"
            },
            {
                "name": "FuelConsumption",
                "Description": "This API is to get the fuel consumption for a flight.",
                "input_params": {
                    "flightID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "distance": {
                        "description": "the distance of the flight",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "fuel consumption": {
                        "description": "the fuel consumption for the flight",
                        "type": "Float"
                    }
                },
                "format": "FuelConsumption(flightID, distance) -> fuel consumption"
            }
        ],
        "Query": "What is the fuel consumption for a flight from Rome to Buenos Aires?",
        "Label": "FuelConsumption(flightID=FindFlight(origin='Rome', destination='Buenos Aires'), distance=CalculateDistance(origin='Rome', destination='Buenos Aires'))",
        "Index": 1372
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to provide weather forecast for a specific city and date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the forecasted weather",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather"
            },
            {
                "name": "ClothingRecommendation",
                "Description": "This API recommends suitable clothing for the given weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather for which clothing is needed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing": {
                        "description": "the recommended clothing",
                        "type": "String"
                    }
                },
                "format": "ClothingRecommendation(weather) -> clothing"
            },
            {
                "name": "OutfitStoreSearch",
                "Description": "This API is to find a shop with the suitable attire for the given clothing and city.",
                "input_params": {
                    "clothing": {
                        "description": "the attire for which a shop is needed",
                        "type": "String"
                    },
                    "city": {
                        "description": "the city where the shop is needed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "shop": {
                        "description": "the shop with the suitable attire",
                        "type": "String"
                    }
                },
                "format": "OutfitStoreSearch(clothing, city) -> shop"
            }
        ],
        "Query": "I am looking for a shop where I can find the suitable attire for the weather in London on March 20th.",
        "Label": "OutfitStoreSearch(clothing=ClothingRecommendation(weather=WeatherForecast(city='London', date='March 20th')),city='London')",
        "Index": 1373
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast of a specific city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather condition of the city on the specific date",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather"
            },
            {
                "name": "ClothingRecommendation",
                "Description": "This API is to recommend suitable clothing based on the weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing": {
                        "description": "the suitable clothing for the weather",
                        "type": "String"
                    }
                },
                "format": "ClothingRecommendation(weather) -> clothing"
            },
            {
                "name": "OutfitStoreSearch",
                "Description": "This API is to search for stores selling the recommended clothing in a specific city.",
                "input_params": {
                    "clothing": {
                        "description": "the recommended clothing",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store": {
                        "description": "the store selling the recommended clothing",
                        "type": "String"
                    }
                },
                "format": "OutfitStoreSearch(clothing, city) -> store"
            }
        ],
        "Query": "Where can I get the appropriate clothes for the climate in New York on July 4th?",
        "Label": "OutfitStoreSearch(clothing=ClothingRecommendation(weather=WeatherForecast(city='New York', date='July 4th')), city='New York')",
        "Index": 1374
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get weather forecast for the given city and date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for the weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather"
            },
            {
                "name": "ClothingRecommendation",
                "Description": "This API is to recommend suitable clothing based on the weather condition.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing": {
                        "description": "the recommended clothing",
                        "type": "String"
                    }
                },
                "format": "ClothingRecommendation(weather) -> clothing"
            },
            {
                "name": "OutfitStoreSearch",
                "Description": "This API is to search stores that sell the recommended outfit in the given city.",
                "input_params": {
                    "clothing": {
                        "description": "the recommended clothing",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store": {
                        "description": "the store that sells the recommended clothing",
                        "type": "String"
                    }
                },
                "format": "OutfitStoreSearch(clothing, city) -> store"
            }
        ],
        "Query": "I want to purchase the right outfit for the weather in Tokyo on April 30th. Where can I find it?",
        "Label": "OutfitStoreSearch(clothing=ClothingRecommendation(weather=WeatherForecast(city='Tokyo', date='April 30th')), city='Tokyo')",
        "Index": 1375
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get weather forecast for a specific city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date for the weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the forecasted weather of the city at the specific date",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather"
            },
            {
                "name": "ClothingRecommendation",
                "Description": "This API is to recommend clothing based on the weather.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing": {
                        "description": "the recommended clothing for the given weather",
                        "type": "String"
                    }
                },
                "format": "ClothingRecommendation(weather) -> clothing"
            },
            {
                "name": "OutfitStoreSearch",
                "Description": "This API is to search for stores selling the recommended clothing in a specific city.",
                "input_params": {
                    "clothing": {
                        "description": "the recommended clothing",
                        "type": "String"
                    },
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "store": {
                        "description": "the store selling the recommended clothing",
                        "type": "String"
                    }
                },
                "format": "OutfitStoreSearch(clothing, city) -> store"
            }
        ],
        "Query": "I am interested in purchasing clothing that matches the weather in Rome on May 1st. Where can I find it?",
        "Label": "OutfitStoreSearch(clothing=ClothingRecommendation(weather=WeatherForecast(city='Rome', date='May 1st')), city='Rome')",
        "Index": 1376
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the current weather of a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the current weather of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "CityPopulation",
                "Description": "This API is to get the population of a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityPopulation(city) -> population"
            },
            {
                "name": "WeatherImpactOnPopulation",
                "Description": "This API is to estimate the effect of the weather on the population.",
                "input_params": {
                    "weather": {
                        "description": "the current weather",
                        "type": "String"
                    },
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "impact": {
                        "description": "the estimated effect of the weather on the population",
                        "type": "String"
                    }
                },
                "format": "WeatherImpactOnPopulation(weather, population) -> impact"
            }
        ],
        "Query": "What could be the effect of the current weather on the population in New York?",
        "Label": "WeatherImpactOnPopulation(weather=GetWeather(city='New York'), population=CityPopulation(city='New York'))",
        "Index": 1377
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the current weather of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the current weather of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "CityPopulation",
                "Description": "This API is to get the population of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityPopulation(city) -> population"
            },
            {
                "name": "WeatherImpactOnPopulation",
                "Description": "This API is to find out the impact of weather on the population.",
                "input_params": {
                    "weather": {
                        "description": "the current weather",
                        "type": "String"
                    },
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "weather_impact": {
                        "description": "the influence of weather on the population",
                        "type": "String"
                    }
                },
                "format": "WeatherImpactOnPopulation(weather, population) -> weather_impact"
            }
        ],
        "Query": "What could be the influence of the current weather on the population in London?",
        "Label": "WeatherImpactOnPopulation(weather=GetWeather(city='London'), population=CityPopulation(city='London'))",
        "Index": 1378
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the current weather of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the current weather of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "CityPopulation",
                "Description": "This API is to get the population of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityPopulation(city) -> population"
            },
            {
                "name": "WeatherImpactOnPopulation",
                "Description": "This API is to determine the potential impact of a specific weather condition on a city's population.",
                "input_params": {
                    "weather": {
                        "description": "the current weather condition",
                        "type": "String"
                    },
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "consequence": {
                        "description": "the potential impact of the weather on the population",
                        "type": "String"
                    }
                },
                "format": "WeatherImpactOnPopulation(weather, population) -> consequence"
            }
        ],
        "Query": "What could be the consequence of the current weather on the population in San Francisco?",
        "Label": "WeatherImpactOnPopulation(weather=GetWeather(city='San Francisco'), population=CityPopulation(city='San Francisco'))",
        "Index": 1379
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the current weather of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the current weather of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "CityPopulation",
                "Description": "This API is to get the population of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityPopulation(city) -> population"
            },
            {
                "name": "WeatherImpactOnPopulation",
                "Description": "This API is to estimate the impact of a specific weather condition on a city's population.",
                "input_params": {
                    "weather": {
                        "description": "the current weather of the city",
                        "type": "String"
                    },
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "impact": {
                        "description": "the estimated impact of the weather on the city's population",
                        "type": "String"
                    }
                },
                "format": "WeatherImpactOnPopulation(weather, population) -> impact"
            }
        ],
        "Query": "What could be the repercussion of the current weather on the population in Tokyo?",
        "Label": "WeatherImpactOnPopulation(weather=GetWeather(city='Tokyo'), population=CityPopulation(city='Tokyo'))",
        "Index": 1380
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API is to get the current weather of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the current weather of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            },
            {
                "name": "CityPopulation",
                "Description": "This API is to get the population of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "format": "CityPopulation(city) -> population"
            },
            {
                "name": "WeatherImpactOnPopulation",
                "Description": "This API is to predict the aftermath of a specific weather on the population.",
                "input_params": {
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    },
                    "population": {
                        "description": "the population of the city",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "aftermath": {
                        "description": "the predicted aftermath of the weather on the population",
                        "type": "String"
                    }
                },
                "format": "WeatherImpactOnPopulation(weather, population) -> aftermath"
            }
        ],
        "Query": "What could be the aftermath of the current weather on the population in Sydney?",
        "Label": "WeatherImpactOnPopulation(weather=GetWeather(city='Sydney'), population=CityPopulation(city='Sydney'))",
        "Index": 1381
    },
    {
        "APIs": [
            {
                "name": "AuthorDetails",
                "Description": "This API is to get the details of the author.",
                "input_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author_details": {
                        "description": "the details of the author",
                        "type": "String"
                    }
                },
                "format": "AuthorDetails(author_name) -> author_details"
            },
            {
                "name": "BookValue",
                "Description": "This API is to get the value of a book.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    },
                    "authorDetails": {
                        "description": "the details of the author of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_value": {
                        "description": "the value of the book",
                        "type": "Float"
                    }
                },
                "format": "BookValue(ISBN, authorDetails) -> book_value"
            }
        ],
        "Query": "What is the value of the book with ISBN '987654321' written by Stephen King?",
        "Label": "BookValue(ISBN='987654321', authorDetails=AuthorDetails(author_name='Stephen King'))",
        "Index": 1382
    },
    {
        "APIs": [
            {
                "name": "AuthorDetails",
                "Description": "This API is to get the details of the author.",
                "input_params": {
                    "author_name": {
                        "description": "The name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "authorDetails": {
                        "description": "The details of the author",
                        "type": "Object"
                    }
                },
                "format": "AuthorDetails(author_name) -> authorDetails"
            },
            {
                "name": "BookValue",
                "Description": "This API is to get the value of the book.",
                "input_params": {
                    "ISBN": {
                        "description": "The ISBN number of the book",
                        "type": "String"
                    },
                    "authorDetails": {
                        "description": "The details of the author of the book",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "Book_Value": {
                        "description": "The value of the book",
                        "type": "Float"
                    }
                },
                "format": "BookValue(ISBN, authorDetails) -> Book_Value"
            }
        ],
        "Query": "What is the value of the book with ISBN '5647382910' written by George R.R. Martin?",
        "Label": "BookValue(ISBN='5647382910', authorDetails=AuthorDetails(author_name='George R.R. Martin'))",
        "Index": 1383
    },
    {
        "APIs": [
            {
                "name": "AuthorDetails",
                "Description": "This API is to fetch author details using the author's name.",
                "input_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "authorDetails": {
                        "description": "Details of the author",
                        "type": "String"
                    }
                },
                "format": "AuthorDetails(author_name) -> authorDetails"
            },
            {
                "name": "BookValue",
                "Description": "This API is to fetch the value of a book by its ISBN number and the author details.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    },
                    "authorDetails": {
                        "description": "Details of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book value": {
                        "description": "the value of the book",
                        "type": "Float"
                    }
                },
                "format": "BookValue(ISBN, authorDetails) -> book value"
            }
        ],
        "Query": "What is the value of the book with ISBN '1029384756' written by J.R.R. Tolkien?",
        "Label": "BookValue(ISBN='1029384756', authorDetails=AuthorDetails(author_name='J.R.R. Tolkien'))",
        "Index": 1384
    },
    {
        "APIs": [
            {
                "name": "AuthorDetails",
                "Description": "This API is to get the details of the author.",
                "input_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author_details": {
                        "description": "the details of the author",
                        "type": "String"
                    }
                },
                "format": "AuthorDetails(author_name) -> author_details"
            },
            {
                "name": "BookValue",
                "Description": "This API is to get the value of the book.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN number of the book",
                        "type": "String"
                    },
                    "authorDetails": {
                        "description": "the details of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_value": {
                        "description": "the value of the book",
                        "type": "Float"
                    }
                },
                "format": "BookValue(ISBN, authorDetails) -> book_value"
            }
        ],
        "Query": "What is the value of the book with ISBN '1357924680' written by Arthur Conan Doyle?",
        "Label": "BookValue(ISBN='1357924680', authorDetails=AuthorDetails(author_name='Arthur Conan Doyle'))",
        "Index": 1385
    },
    {
        "APIs": [
            {
                "name": "MovieRecommendation",
                "Description": "This API is to recommend a movie based on genre.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_name": {
                        "description": "the name of the recommended movie",
                        "type": "String"
                    }
                },
                "format": "MovieRecommendation(genre) -> movie_name"
            },
            {
                "name": "RestaurantRecommendation",
                "Description": "This API is to recommend restaurant based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommendation(city, cuisine) -> restaurant_name"
            },
            {
                "name": "ReservationMaker",
                "Description": "This API is to make a reservation at a specific restaurant and time.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "time": {
                        "description": "the reservation time",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReservationMaker(restaurant_name, time) -> reservation_status"
            }
        ],
        "Query": "Can you suggest a romantic comedy for me? And locate an Italian restaurant in New York? Also, book a table for 7 pm.",
        "Label": "ReservationMaker(restaurant_name=RestaurantRecommendation(city='New York', cuisine='Italian'), time='7 pm')",
        "Index": 1386
    },
    {
        "APIs": [
            {
                "name": "MovieRecommendation",
                "Description": "This API is to recommend a movie based on genre.",
                "input_params": {
                    "genre": {
                        "description": "The genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_name": {
                        "description": "The name of the recommended movie",
                        "type": "String"
                    }
                },
                "format": "MovieRecommendation(genre) -> movie_name"
            },
            {
                "name": "RestaurantRecommendation",
                "Description": "This API is to recommend a restaurant based on city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "The city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "The cuisine of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "The name of the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommendation(city, cuisine) -> restaurant_name"
            },
            {
                "name": "ReservationMaker",
                "Description": "This API is to make a reservation at a restaurant at a specific time.",
                "input_params": {
                    "restaurant_name": {
                        "description": "The name of the restaurant",
                        "type": "String"
                    },
                    "time": {
                        "description": "The time of the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "The status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReservationMaker(restaurant_name, time) -> reservation_status"
            }
        ],
        "Query": "Can you recommend a action movie for me? And locate a Indian restaurant in Seattle? Also, make a reservation for 9 pm.",
        "Label": "ReservationMaker(restaurant_name=RestaurantRecommendation(city='Seattle', cuisine='Indian'), time='9 pm')",
        "Index": 1387
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to provide the weather forecast of the specified city on a specified date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast of the city on the specified date",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather"
            },
            {
                "name": "RestaurantRecommendation",
                "Description": "This API is to recommend a restaurant of the specified cuisine in the specified city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of the cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommendation(city, cuisine) -> restaurant_name"
            },
            {
                "name": "TableBooking",
                "Description": "This API is to book a table at a specified restaurant for a specified number of persons at a specified date and time.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "number_of_persons": {
                        "description": "the number of persons for the booking",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time of the booking",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "TableBooking(restaurant_name, number_of_persons, date, time) -> booking_status"
            }
        ],
        "Query": "Can you provide the weather in Moscow on 30th April and suggest a Russian restaurant where I can reserve a table for five at 7:30 pm?",
        "Label": "TableBooking(restaurant_name=RestaurantRecommendation(city='Moscow', cuisine='Russian'), number_of_persons='5', date='30th April', time='7:30 pm')",
        "Index": 1388
    },
    {
        "APIs": [
            {
                "name": "BookDetails",
                "Description": "This API is to fetch details of a book.",
                "input_params": {
                    "book_title": {
                        "description": "The title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "The ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookDetails(book_title) -> book_id"
            },
            {
                "name": "BookReviews",
                "Description": "This API is to fetch reviews of a book.",
                "input_params": {
                    "book_id": {
                        "description": "The ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "reviews": {
                        "description": "The reviews of the book",
                        "type": "String"
                    }
                },
                "format": "BookReviews(book_id) -> reviews"
            },
            {
                "name": "SentimentAnalysis",
                "Description": "This API is to analyze the sentiment of the text.",
                "input_params": {
                    "reviews": {
                        "description": "The reviews to be analyzed",
                        "type": "String"
                    }
                },
                "output_params": {
                    "sentiment": {
                        "description": "The sentiment of the reviews",
                        "type": "String"
                    }
                },
                "format": "SentimentAnalysis(reviews) -> sentiment"
            }
        ],
        "Query": "What is the public opinion about the book 'To Kill a Mockingbird'?",
        "Label": "SentimentAnalysis(reviews=BookReviews(book_id=BookDetails(book_title='To Kill a Mockingbird')))",
        "Index": 1389
    },
    {
        "APIs": [
            {
                "name": "GameDetails",
                "Description": "This API is to get the details of a game using the game title.",
                "input_params": {
                    "game_title": {
                        "description": "The title of the video game",
                        "type": "String"
                    }
                },
                "output_params": {
                    "game_id": {
                        "description": "The unique identifier of the game",
                        "type": "Integer"
                    }
                },
                "format": "GameDetails(game_title) -> game_id"
            },
            {
                "name": "GameReviews",
                "Description": "This API is to get the reviews of a game using the game id.",
                "input_params": {
                    "game_id": {
                        "description": "The unique identifier of the game",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "reviews": {
                        "description": "The reviews of the game",
                        "type": "String"
                    }
                },
                "format": "GameReviews(game_id) -> reviews"
            },
            {
                "name": "SentimentAnalysis",
                "Description": "This API is to get the sentiment analysis of the reviews.",
                "input_params": {
                    "reviews": {
                        "description": "The reviews of a game",
                        "type": "String"
                    }
                },
                "output_params": {
                    "sentiment": {
                        "description": "The sentiment of the reviews",
                        "type": "String"
                    }
                },
                "format": "SentimentAnalysis(reviews) -> sentiment"
            }
        ],
        "Query": "How do people feel about the video game 'Grand Theft Auto V'?",
        "Label": "SentimentAnalysis(reviews=GameReviews(game_id=GameDetails(game_title='Grand Theft Auto V')))",
        "Index": 1390
    },
    {
        "APIs": [
            {
                "name": "DocumentaryDetails",
                "Description": "This API is to get details of a documentary.",
                "input_params": {
                    "doc_title": {
                        "description": "the title of the documentary",
                        "type": "String"
                    }
                },
                "output_params": {
                    "doc_id": {
                        "description": "the ID of the documentary",
                        "type": "Integer"
                    }
                },
                "format": "DocumentaryDetails(doc_title) -> doc_id"
            },
            {
                "name": "DocumentaryReviews",
                "Description": "This API is to retrieve reviews of a documentary.",
                "input_params": {
                    "doc_id": {
                        "description": "the ID of the documentary",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "reviews": {
                        "description": "the reviews of the documentary",
                        "type": "String"
                    }
                },
                "format": "DocumentaryReviews(doc_id) -> reviews"
            },
            {
                "name": "SentimentAnalysis",
                "Description": "This API is to analyze the sentiment of given text.",
                "input_params": {
                    "reviews": {
                        "description": "reviews for sentiment analysis",
                        "type": "String"
                    }
                },
                "output_params": {
                    "sentiment": {
                        "description": "the sentiment of the reviews",
                        "type": "String"
                    }
                },
                "format": "SentimentAnalysis(reviews) -> sentiment"
            }
        ],
        "Query": "How is the public opinion about the documentary 'Planet Earth'?",
        "Label": "SentimentAnalysis(reviews=DocumentaryReviews(doc_id=DocumentaryDetails(doc_title='Planet Earth')))",
        "Index": 1391
    },
    {
        "APIs": [
            {
                "name": "BookName",
                "Description": "This API is to find the name of the book by ISBN.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "format": "BookName(ISBN) -> title"
            },
            {
                "name": "AuthorName",
                "Description": "This API is to find the author's name by book title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    }
                },
                "format": "AuthorName(title) -> author"
            },
            {
                "name": "Publisher",
                "Description": "This API is to find the publisher of the book by author's name.",
                "input_params": {
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "publisher": {
                        "description": "the publisher of the book",
                        "type": "String"
                    }
                },
                "format": "Publisher(author) -> publisher"
            }
        ],
        "Query": "Can you tell me the publisher of the book with ISBN 978-1-56619-909-4?",
        "Label": "Publisher(author=AuthorName(title=BookName(ISBN='978-1-56619-909-4')))",
        "Index": 1392
    },
    {
        "APIs": [
            {
                "name": "BookName",
                "Description": "This API is to retrieve the title of the book based on its ISBN.",
                "input_params": {
                    "ISBN": {
                        "description": "ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "title": {
                        "description": "Title of the book",
                        "type": "String"
                    }
                },
                "format": "BookName(ISBN) -> title"
            },
            {
                "name": "AuthorName",
                "Description": "This API is to retrieve the author of a particular book by its title.",
                "input_params": {
                    "title": {
                        "description": "Title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author": {
                        "description": "Author of the book",
                        "type": "String"
                    }
                },
                "format": "AuthorName(title) -> author"
            },
            {
                "name": "Publisher",
                "Description": "This API is to retrieve the publisher of a book by the author.",
                "input_params": {
                    "author": {
                        "description": "Author of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "publisher": {
                        "description": "Publisher of the book",
                        "type": "String"
                    }
                },
                "format": "Publisher(author) -> publisher"
            }
        ],
        "Query": "Who is the publisher of the book with ISBN 978-3-16-148410-5?",
        "Label": "Publisher(author=AuthorName(title=BookName(ISBN='978-3-16-148410-5')))",
        "Index": 1393
    },
    {
        "APIs": [
            {
                "name": "BookName",
                "Description": "This API is to get the title of the book by ISBN.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "format": "BookName(ISBN) -> title"
            },
            {
                "name": "AuthorName",
                "Description": "This API is to get the author of the book by title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    }
                },
                "format": "AuthorName(title) -> author"
            },
            {
                "name": "Publisher",
                "Description": "This API is to get the publisher of the book by author.",
                "input_params": {
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "publisher": {
                        "description": "the publisher of the book",
                        "type": "String"
                    }
                },
                "format": "Publisher(author) -> publisher"
            }
        ],
        "Query": "I'd like to know the publisher of the book with ISBN 978-0-201-53082-4?",
        "Label": "Publisher(author=AuthorName(title=BookName(ISBN='978-0-201-53082-4')))",
        "Index": 1394
    },
    {
        "APIs": [
            {
                "name": "BookName",
                "Description": "This API is to retrieve the title of the book by ISBN.",
                "input_params": {
                    "ISBN": {
                        "description": "The unique identifier of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "title": {
                        "description": "The title of the book",
                        "type": "String"
                    }
                },
                "format": "BookName(ISBN) -> title"
            },
            {
                "name": "AuthorName",
                "Description": "This API is to retrieve the author of the book by its title.",
                "input_params": {
                    "title": {
                        "description": "The title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "author": {
                        "description": "The author of the book",
                        "type": "String"
                    }
                },
                "format": "AuthorName(title) -> author"
            },
            {
                "name": "Publisher",
                "Description": "This API is to retrieve the publisher of the book by the author.",
                "input_params": {
                    "author": {
                        "description": "The author of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "publisher": {
                        "description": "The publisher of the book",
                        "type": "String"
                    }
                },
                "format": "Publisher(author) -> publisher"
            }
        ],
        "Query": "I'm interested in knowing the publisher of the book with ISBN 978-3-540-66214-8?",
        "Label": "Publisher(author=AuthorName(title=BookName(ISBN='978-3-540-66214-8')))",
        "Index": 1395
    },
    {
        "APIs": [
            {
                "name": "WeatherInfo",
                "Description": "This API is to get the current weather conditions of a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_conditions": {
                        "description": "the current weather conditions of the city",
                        "type": "String"
                    }
                },
                "format": "WeatherInfo(city) -> weather_conditions"
            },
            {
                "name": "OutfitSuggestion",
                "Description": "This API is to suggest an outfit based on the weather conditions.",
                "input_params": {
                    "weather_conditions": {
                        "description": "the current weather conditions",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit_suggestion": {
                        "description": "the suggested outfit based on the weather conditions",
                        "type": "String"
                    }
                },
                "format": "OutfitSuggestion(weather_conditions) -> outfit_suggestion"
            }
        ],
        "Query": "Could you suggest what outfit I should choose for my trip to Moscow on Trans-Siberian railway today?",
        "Label": "OutfitSuggestion(weather_conditions=WeatherInfo(city=\"Moscow\"))",
        "Index": 1396
    },
    {
        "APIs": [
            {
                "name": "WeatherInfo",
                "Description": "This API is to get the weather information of the specific location.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_conditions": {
                        "description": "the weather conditions of the city",
                        "type": "String"
                    }
                },
                "format": "WeatherInfo(city) -> weather_conditions"
            },
            {
                "name": "OutfitSuggestion",
                "Description": "This API is to suggest outfit according to the weather conditions.",
                "input_params": {
                    "weather_conditions": {
                        "description": "the weather conditions in the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit_suggestion": {
                        "description": "the suggested outfit according to the weather",
                        "type": "String"
                    }
                },
                "format": "OutfitSuggestion(weather_conditions) -> outfit_suggestion"
            }
        ],
        "Query": "I am planning to take the Shinkansen from Tokyo today, what should I wear?",
        "Label": "OutfitSuggestion(weather_conditions=WeatherInfo(city='Tokyo'))",
        "Index": 1397
    },
    {
        "APIs": [
            {
                "name": "WeatherInfo",
                "Description": "This API is to get the current weather conditions in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_conditions": {
                        "description": "the current weather conditions in the city",
                        "type": "String"
                    }
                },
                "format": "WeatherInfo(city) -> weather_conditions"
            },
            {
                "name": "OutfitSuggestion",
                "Description": "This API is to recommend an outfit based on the current weather conditions.",
                "input_params": {
                    "weather_conditions": {
                        "description": "the current weather conditions",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Outfit": {
                        "description": "the suggested outfit based on the weather conditions",
                        "type": "String"
                    }
                },
                "format": "OutfitSuggestion(weather_conditions) -> Outfit"
            }
        ],
        "Query": "What clothes should I wear if I am travelling from Beijing by high-speed train today?",
        "Label": "OutfitSuggestion(weather_conditions=WeatherInfo(city='Beijing'))",
        "Index": 1398
    },
    {
        "APIs": [
            {
                "name": "WeatherInfo",
                "Description": "This API is to get the weather information of a certain city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_conditions": {
                        "description": "the weather conditions of the city",
                        "type": "Dictionary"
                    }
                },
                "format": "WeatherInfo(city) -> weather_conditions"
            },
            {
                "name": "OutfitSuggestion",
                "Description": "This API is to suggest outfit based on the weather conditions.",
                "input_params": {
                    "weather_conditions": {
                        "description": "the weather conditions of the city",
                        "type": "Dictionary"
                    }
                },
                "output_params": {
                    "outfit_suggestion": {
                        "description": "the suggested outfit based on the weather conditions",
                        "type": "String"
                    }
                },
                "format": "OutfitSuggestion(weather_conditions) -> outfit_suggestion"
            }
        ],
        "Query": "I am going to Paris by TGV today, can you recommend what to wear?",
        "Label": "OutfitSuggestion(weather_conditions=WeatherInfo(city='Paris'))",
        "Index": 1399
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast of a certain city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_condition": {
                        "description": "the weather condition of the city",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city) -> weather_condition"
            },
            {
                "name": "BestTravelTime",
                "Description": "This API is to get the most favourable time to visit a certain attraction given the weather condition.",
                "input_params": {
                    "weather_condition": {
                        "description": "the weather condition of the city where the attraction is located",
                        "type": "String"
                    },
                    "attraction": {
                        "description": "the name of the attraction",
                        "type": "String"
                    }
                },
                "output_params": {
                    "best_time": {
                        "description": "the most favourable time to visit the attraction",
                        "type": "String"
                    }
                },
                "format": "BestTravelTime(weather_condition, attraction) -> best_time"
            }
        ],
        "Query": "When is the most favourable time to visit the Statue of Liberty in New York given the weather?",
        "Label": "BestTravelTime(weather_condition=WeatherForecast(city='New York'), attraction='Statue of Liberty')",
        "Index": 1400
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API is to find a restaurant based on the city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of the cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantSearch(city, cuisine) -> restaurant_name"
            },
            {
                "name": "BookReservation",
                "Description": "This API is to reserve a table at a specific restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "party_size": {
                        "description": "the number of people for the reservation",
                        "type": "Integer"
                    },
                    "date_time": {
                        "description": "the date and time of the reservation",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "BookReservation(restaurant_name, party_size, date_time) -> reservation_status"
            }
        ],
        "Query": "Is it possible to reserve a table for 2 at the top Chinese restaurant in San Francisco on September 5th at 7 PM?",
        "Label": "BookReservation(restaurant_name=RestaurantSearch(city='San Francisco', cuisine='Chinese'), party_size=2, date_time='September 5th at 7 PM')",
        "Index": 1401
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API is to search for a restaurant based on the city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine the restaurant serves",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantSearch(city, cuisine) -> restaurant_name"
            },
            {
                "name": "BookReservation",
                "Description": "This API is to make a reservation at a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "party_size": {
                        "description": "the number of people in the party",
                        "type": "Integer"
                    },
                    "date_time": {
                        "description": "the date and time of the reservation",
                        "type": "Datetime"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "BookReservation(restaurant_name, party_size, date_time) -> reservation_status"
            }
        ],
        "Query": "Can I make a reservation for 6 at the best Indian restaurant in Los Angeles on November 20th at 6 PM?",
        "Label": "BookReservation(restaurant_name=RestaurantSearch(city='Los Angeles', cuisine='Indian'), party_size=6, date_time='November 20th at 6 PM')",
        "Index": 1402
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API is used to search for a restaurant based on the city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine the restaurant serves",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the top-rated restaurant of the specified cuisine in the specified city",
                        "type": "String"
                    }
                },
                "format": "RestaurantSearch(city, cuisine) -> restaurant_name"
            },
            {
                "name": "BookReservation",
                "Description": "This API is used to book a reservation at a specified restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant where the reservation is being made",
                        "type": "String"
                    },
                    "party_size": {
                        "description": "the number of people for the reservation",
                        "type": "Integer"
                    },
                    "date_time": {
                        "description": "the date and time of the reservation",
                        "type": "DateTime"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "BookReservation(restaurant_name, party_size, date_time) -> reservation_status"
            }
        ],
        "Query": "May I book a table for 3 at the top-rated Mexican restaurant in Miami on December 15th at 9 PM?",
        "Label": "BookReservation(restaurant_name=RestaurantSearch(city='Miami', cuisine='Mexican'), party_size=3, date_time='December 15th at 9 PM')",
        "Index": 1403
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API is to search for the top-rated restaurant in a city according to the cuisine type.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of the cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the top-rated restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantSearch(city, cuisine) -> restaurant_name"
            },
            {
                "name": "BookReservation",
                "Description": "This API is to book a table at a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "party_size": {
                        "description": "the number of people for the booking",
                        "type": "Integer"
                    },
                    "date_time": {
                        "description": "the date and time of the reservation",
                        "type": "DateTime"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "BookReservation(restaurant_name, party_size, date_time) -> reservation_status"
            }
        ],
        "Query": "Can I reserve a table for 5 at the best Thai restaurant in Chicago on January 10th at 8 PM?",
        "Label": "BookReservation(restaurant_name=RestaurantSearch(city='Chicago', cuisine='Thai'), party_size=5, date_time='January 10th at 8 PM')",
        "Index": 1404
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API is to search for a restaurant based on the city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantSearch(city, cuisine) -> restaurant_name"
            },
            {
                "name": "BookReservation",
                "Description": "This API is to book a reservation at a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "party_size": {
                        "description": "the number of people for the reservation",
                        "type": "Integer"
                    },
                    "date_time": {
                        "description": "the date and time of the reservation",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "BookReservation(restaurant_name, party_size, date_time) -> reservation_status."
            }
        ],
        "Query": "Is it possible to book a table for 7 at the top French restaurant in Boston on February 14th at 7:30 PM?",
        "Label": "BookReservation(restaurant_name=RestaurantSearch(city='Boston', cuisine='French'), party_size=7, date_time='February 14th at 7:30 PM')",
        "Index": 1405
    },
    {
        "APIs": [
            {
                "name": "ConnectivityCheck",
                "Description": "This API is to check the connection status between two locations.",
                "input_params": {
                    "origin": {
                        "description": "the origin location",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "connection_status": {
                        "description": "the status of the connection",
                        "type": "String"
                    }
                },
                "format": "ConnectivityCheck(origin, destination) -> connection_status"
            },
            {
                "name": "SpeedTest",
                "Description": "This API is to test the speed of the connection.",
                "input_params": {
                    "connection_status": {
                        "description": "the status of the connection",
                        "type": "String"
                    }
                },
                "output_params": {
                    "speed_details": {
                        "description": "the details of the speed",
                        "type": "String"
                    }
                },
                "format": "SpeedTest(connection_status) -> speed_details"
            },
            {
                "name": "FileTransfer",
                "Description": "This API is to calculate the time to transmit a file.",
                "input_params": {
                    "speed_details": {
                        "description": "the details of the speed",
                        "type": "String"
                    },
                    "file_size": {
                        "description": "the size of the file",
                        "type": "String"
                    }
                },
                "output_params": {
                    "transfer_duration": {
                        "description": "the duration to transmit the file",
                        "type": "Time"
                    }
                },
                "format": "FileTransfer(speed_details, file_size) -> transfer_duration"
            }
        ],
        "Query": "What is the duration to transmit a 3GB file from New York to Tokyo?",
        "Label": "FileTransfer(speed_details=SpeedTest(connection_status=ConnectivityCheck(origin='New York', destination='Tokyo')), file_size='3GB')",
        "Index": 1406
    },
    {
        "APIs": [
            {
                "name": "ConnectivityCheck",
                "Description": "This API is to check connectivity between origin and destination.",
                "input_params": {
                    "origin": {
                        "description": "the origin location",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "connection_status": {
                        "description": "the status of the connection",
                        "type": "String"
                    }
                },
                "format": "ConnectivityCheck(origin, destination) -> connection_status"
            },
            {
                "name": "SpeedTest",
                "Description": "This API is to test the speed of the connection.",
                "input_params": {
                    "connection_status": {
                        "description": "the status of the connection",
                        "type": "String"
                    }
                },
                "output_params": {
                    "speed_details": {
                        "description": "the details of the speed",
                        "type": "Object"
                    }
                },
                "format": "SpeedTest(connection_status) -> speed_details"
            },
            {
                "name": "FileTransfer",
                "Description": "This API is to calculate the time required to transfer a file.",
                "input_params": {
                    "speed_details": {
                        "description": "the details of the speed",
                        "type": "Object"
                    },
                    "file_size": {
                        "description": "the size of the file",
                        "type": "String"
                    }
                },
                "output_params": {
                    "transfer_time": {
                        "description": "the time required to transfer the file",
                        "type": "String"
                    }
                },
                "format": "FileTransfer(speed_details, file_size) -> transfer_time"
            }
        ],
        "Query": "How long would it take to transmit an 8GB file from Sydney to Mumbai?",
        "Label": "FileTransfer(speed_details=SpeedTest(connection_status=ConnectivityCheck(origin='Sydney', destination='Mumbai')), file_size='8GB')",
        "Index": 1407
    },
    {
        "APIs": [
            {
                "name": "ConnectivityCheck",
                "Description": "This API is to check the connectivity between two locations.",
                "input_params": {
                    "origin": {
                        "description": "the origin of the connection",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination of the connection",
                        "type": "String"
                    }
                },
                "output_params": {
                    "connection_status": {
                        "description": "the status of the connection between two locations",
                        "type": "String"
                    }
                },
                "format": "ConnectivityCheck(origin, destination) -> connection_status"
            },
            {
                "name": "SpeedTest",
                "Description": "This API is to test the speed of the connection.",
                "input_params": {
                    "connection_status": {
                        "description": "the status of the connection",
                        "type": "String"
                    }
                },
                "output_params": {
                    "speed_details": {
                        "description": "the details of the speed test",
                        "type": "String"
                    }
                },
                "format": "SpeedTest(connection_status) -> speed_details"
            },
            {
                "name": "FileTransfer",
                "Description": "This API is to estimate the time to transfer a file based on the speed test and the size of the file.",
                "input_params": {
                    "speed_details": {
                        "description": "the details of the speed test",
                        "type": "String"
                    },
                    "file_size": {
                        "description": "the size of the file to be transferred",
                        "type": "String"
                    }
                },
                "output_params": {
                    "estimated_time": {
                        "description": "the estimated time to transfer the file",
                        "type": "Time"
                    }
                },
                "format": "FileTransfer(speed_details, file_size) -> estimated_time"
            }
        ],
        "Query": "What is the estimated time to send a 6GB file from Toronto to Dubai?",
        "Label": "FileTransfer(speed_details=SpeedTest(connection_status=ConnectivityCheck(origin='Toronto',destination='Dubai')), file_size='6GB')",
        "Index": 1408
    },
    {
        "APIs": [
            {
                "name": "BookFinder",
                "Description": "This API is to find the book's ID by the book's name.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookFinder(book_name) -> book_id"
            },
            {
                "name": "AuthorOfBook",
                "Description": "This API is to find the author's ID by the book's ID.",
                "input_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "author_id": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "format": "AuthorOfBook(book_id) -> author_id"
            },
            {
                "name": "BooksByAuthor",
                "Description": "This API is to find the books written by the author.",
                "input_params": {
                    "author_id": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "book_list": {
                        "description": "the list of books written by the author",
                        "type": "List of Strings"
                    }
                },
                "format": "BooksByAuthor(author_id) -> book_list"
            }
        ],
        "Query": "Who else has written books by the author of '1984'?",
        "Label": "BooksByAuthor(author_id=AuthorOfBook(book_id=BookFinder(book_name='1984')))",
        "Index": 1409
    },
    {
        "APIs": [
            {
                "name": "BookFinder",
                "Description": "This API is to find the book ID by book name.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "BookFinder(book_name) -> book_id"
            },
            {
                "name": "AuthorOfBook",
                "Description": "This API is to find the author ID by book ID.",
                "input_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "author_id": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "format": "AuthorOfBook(book_id) -> author_id"
            },
            {
                "name": "BooksByAuthor",
                "Description": "This API is to find the books written by a particular author by author ID.",
                "input_params": {
                    "author_id": {
                        "description": "the ID of the author",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "books": {
                        "description": "the books written by the author",
                        "type": "Array"
                    }
                },
                "format": "BooksByAuthor(author_id) -> books"
            }
        ],
        "Query": "Can you name other books written by the author of 'The Hobbit'?",
        "Label": "BooksByAuthor(author_id=AuthorOfBook(book_id=BookFinder(book_name='The Hobbit')))",
        "Index": 1410
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the current weather condition of a specific city.",
                "input_params": {
                    "city": {
                        "description": "The name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_condition": {
                        "description": "The current weather condition of the city",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city) -> weather_condition"
            },
            {
                "name": "ActivitySuggestion",
                "Description": "This API is to suggest a type of activity suitable for a specific weather condition.",
                "input_params": {
                    "weather_condition": {
                        "description": "The weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity_type": {
                        "description": "The type of activity suitable for the weather condition",
                        "type": "String"
                    }
                },
                "format": "ActivitySuggestion(weather_condition) -> activity_type"
            },
            {
                "name": "PlacesRecommender",
                "Description": "This API is to recommend places to visit in a city that are suitable for a specific type of activity.",
                "input_params": {
                    "city": {
                        "description": "The name of the city",
                        "type": "String"
                    },
                    "activity_type": {
                        "description": "The type of activity",
                        "type": "String"
                    }
                },
                "output_params": {
                    "places": {
                        "description": "The recommended places to visit",
                        "type": "List of Strings"
                    }
                },
                "format": "PlacesRecommender(city, activity_type) -> places"
            }
        ],
        "Query": "What are the best places to visit in Paris that are suitable for the current weather?",
        "Label": "PlacesRecommender(city='Paris', activity_type=ActivitySuggestion(weather_condition=WeatherForecast(city='Paris')))",
        "Index": 1411
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the current weather condition of a city.",
                "input_params": {
                    "city": {
                        "description": "the city where you want to know the weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_condition": {
                        "description": "the current weather condition of the city",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city) -> weather_condition"
            },
            {
                "name": "ActivitySuggestion",
                "Description": "This API is to suggest the suitable activity for the current weather condition.",
                "input_params": {
                    "weather_condition": {
                        "description": "the current weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity_type": {
                        "description": "the type of activity that is suitable for the current weather",
                        "type": "String"
                    }
                },
                "format": "ActivitySuggestion(weather_condition) -> activity_type"
            },
            {
                "name": "PlacesRecommender",
                "Description": "This API is to recommend places to visit in a city based on the activity type.",
                "input_params": {
                    "city": {
                        "description": "the city where you want to visit",
                        "type": "String"
                    },
                    "activity_type": {
                        "description": "the type of activity you want to do",
                        "type": "String"
                    }
                },
                "output_params": {
                    "places": {
                        "description": "the places recommended to visit",
                        "type": "String"
                    }
                },
                "format": "PlacesRecommender(city, activity_type) -> places"
            }
        ],
        "Query": "Which places in Tokyo should I visit considering the current weather?",
        "Label": "PlacesRecommender(city='Tokyo', activity_type=ActivitySuggestion(weather_condition=WeatherForecast(city='Tokyo')))",
        "Index": 1412
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the current weather condition in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_condition": {
                        "description": "the current weather condition in the city",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city) -> weather_condition"
            },
            {
                "name": "ActivitySuggestion",
                "Description": "This API is to suggest activities based on the current weather condition.",
                "input_params": {
                    "weather_condition": {
                        "description": "the current weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity_type": {
                        "description": "the type of activity suggested based on the weather condition",
                        "type": "String"
                    }
                },
                "format": "ActivitySuggestion(weather_condition) -> activity_type"
            },
            {
                "name": "PlacesRecommender",
                "Description": "This API is to recommend places to visit in a city based on a suggested activity type.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "activity_type": {
                        "description": "the type of activity",
                        "type": "String"
                    }
                },
                "output_params": {
                    "place_list": {
                        "description": "the list of recommended places to visit",
                        "type": "String Array"
                    }
                },
                "format": "PlacesRecommender(city, activity_type) -> place_list"
            }
        ],
        "Query": "Which places in Tokyo should I visit considering the current weather?",
        "Label": "PlacesRecommender(city='Tokyo', activity_type=ActivitySuggestion(weather_condition=WeatherForecast(city='Tokyo')))",
        "Index": 1413
    },
    {
        "APIs": [
            {
                "name": "MovieTheaterLocator",
                "Description": "This API locates the movie theaters in a given city.",
                "input_params": {
                    "city": {
                        "description": "the city where the user wants to find a movie theater",
                        "type": "String"
                    }
                },
                "output_params": {
                    "theater_address": {
                        "description": "the address of the located movie theater in the given city",
                        "type": "String"
                    }
                },
                "format": "MovieTheaterLocator(city) -> theater_address"
            },
            {
                "name": "ShowTimes",
                "Description": "This API provides the show times at a given movie theater.",
                "input_params": {
                    "theater_address": {
                        "description": "the address of the movie theater",
                        "type": "String"
                    }
                },
                "output_params": {
                    "show_time": {
                        "description": "the show times at the given movie theater",
                        "type": "Time"
                    }
                },
                "format": "ShowTimes(theater_address) -> show_time"
            },
            {
                "name": "MovieRecommender",
                "Description": "This API recommends a movie based on the show time.",
                "input_params": {
                    "show_time": {
                        "description": "the show time when the user plans to watch a movie",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "movie_name": {
                        "description": "the name of the recommended movie",
                        "type": "String"
                    }
                },
                "format": "MovieRecommender(show_time) -> movie_name"
            }
        ],
        "Query": "Which film should I see if I plan to visit the theater in New York tonight?",
        "Label": "MovieRecommender(show_time=ShowTimes(theater_address=MovieTheaterLocator(city='New York')))",
        "Index": 1414
    },
    {
        "APIs": [
            {
                "name": "MovieTheaterLocator",
                "Description": "This API is to get the address of the movie theater in the specified city.",
                "input_params": {
                    "city": {
                        "description": "the city where the theater is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "theater_address": {
                        "description": "the address of the movie theater",
                        "type": "String"
                    }
                },
                "format": "MovieTheaterLocator(city) -> theater_address"
            },
            {
                "name": "ShowTimes",
                "Description": "This API is to get the show times at a specified theater address.",
                "input_params": {
                    "theater_address": {
                        "description": "the address of the movie theater",
                        "type": "String"
                    }
                },
                "output_params": {
                    "show_time": {
                        "description": "the show times at the specified theater",
                        "type": "String"
                    }
                },
                "format": "ShowTimes(theater_address) -> show_time"
            },
            {
                "name": "MovieRecommender",
                "Description": "This API recommends a movie based on the show time.",
                "input_params": {
                    "show_time": {
                        "description": "the show times at a specified theater",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie": {
                        "description": "the recommended movie",
                        "type": "String"
                    }
                },
                "format": "MovieRecommender(show_time) -> movie"
            }
        ],
        "Query": "What movie is recommended for a cinema visit in Chicago this afternoon?",
        "Label": "MovieRecommender(show_time=ShowTimes(theater_address=MovieTheaterLocator(city='Chicago')))",
        "Index": 1415
    },
    {
        "APIs": [
            {
                "name": "MovieTheaterLocator",
                "Description": "This API is to locate movie theaters in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the city where the user wants to find a movie theater",
                        "type": "String"
                    }
                },
                "output_params": {
                    "theater_address": {
                        "description": "the address of the movie theater",
                        "type": "String"
                    }
                },
                "format": "MovieTheaterLocator(city) -> theater_address"
            },
            {
                "name": "ShowTimes",
                "Description": "This API is to find show times in a specific movie theater.",
                "input_params": {
                    "theater_address": {
                        "description": "the address of the movie theater",
                        "type": "String"
                    }
                },
                "output_params": {
                    "show_time": {
                        "description": "the show times at the movie theater",
                        "type": "Time"
                    }
                },
                "format": "ShowTimes(theater_address) -> show_time"
            },
            {
                "name": "MovieRecommender",
                "Description": "This API is to recommend a suitable movie based on the show time.",
                "input_params": {
                    "show_time": {
                        "description": "the show time",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "movie": {
                        "description": "the recommended movie",
                        "type": "String"
                    }
                },
                "format": "MovieRecommender(show_time) -> movie"
            }
        ],
        "Query": "What's a suitable film to see in a Dallas theater this evening?",
        "Label": "MovieRecommender(show_time=ShowTimes(theater_address=MovieTheaterLocator(city='Dallas')))",
        "Index": 1416
    },
    {
        "APIs": [
            {
                "name": "FindBook",
                "Description": "This API is to find a book by its title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book found",
                        "type": "Integer"
                    }
                },
                "format": "FindBook(title) -> book_id"
            },
            {
                "name": "GetAuthor",
                "Description": "This API is to get the author of a book by its ID.",
                "input_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "author_name": {
                        "description": "the name of the author of the book",
                        "type": "String"
                    }
                },
                "format": "GetAuthor(book_id) -> author_name"
            },
            {
                "name": "CheckAvailability",
                "Description": "This API is to check if a book by a certain author is available in a specified library.",
                "input_params": {
                    "author_name": {
                        "description": "the name of the author of the book",
                        "type": "String"
                    },
                    "library_name": {
                        "description": "the name of the library",
                        "type": "String"
                    }
                },
                "output_params": {
                    "availability": {
                        "description": "the availability status of the book",
                        "type": "String"
                    }
                },
                "format": "CheckAvailability(author_name, library_name) -> availability"
            }
        ],
        "Query": "I wish to find the book 'The Catcher in the Rye' and need to know if it's accessible in the 'Downtown Library' by the same author.",
        "Label": "CheckAvailability(author_name=GetAuthor(book_id=FindBook(title='The Catcher in the Rye')), library_name='Downtown Library')",
        "Index": 1417
    },
    {
        "APIs": [
            {
                "name": "FindBook",
                "Description": "This API is to find the book by title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "FindBook(title) -> book_id"
            },
            {
                "name": "GetAuthor",
                "Description": "This API is to get the author of the book by book ID.",
                "input_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "format": "GetAuthor(book_id) -> author_name"
            },
            {
                "name": "CheckAvailability",
                "Description": "This API is to check the availability of the book by author name in a specified library.",
                "input_params": {
                    "author_name": {
                        "description": "the name of the author",
                        "type": "String"
                    },
                    "library_name": {
                        "description": "the name of the library",
                        "type": "String"
                    }
                },
                "output_params": {
                    "availability": {
                        "description": "the availability of the book",
                        "type": "String"
                    }
                },
                "format": "CheckAvailability(author_name, library_name) -> availability"
            }
        ],
        "Query": "I am in search of the book 'Pride and Prejudice' and want to check if it's available in the 'Uptown Library' by the same author.",
        "Label": "CheckAvailability(author_name=GetAuthor(book_id=FindBook(title='Pride and Prejudice')), library_name='Uptown Library')",
        "Index": 1418
    },
    {
        "APIs": [
            {
                "name": "GetFlightDetails",
                "Description": "This API is to get flight details based on the destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "GetFlightDetails(destination) -> flight_id"
            },
            {
                "name": "CheckWeather",
                "Description": "This API is to check the weather of a specific location.",
                "input_params": {
                    "destination": {
                        "description": "the location to check the weather of",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the status of the weather at the specified location",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(destination) -> weather_status"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "weather_status": {
                        "description": "the status of the weather at the destination",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_id, weather_status) -> booking status."
            }
        ],
        "Query": "I need to book a flight to London and also want to know what's the weather like there.",
        "Label": "BookFlight(flight_id=GetFlightDetails(destination='London'), weather_status=CheckWeather(destination='London'))",
        "Index": 1419
    },
    {
        "APIs": [
            {
                "name": "GetFlightDetails",
                "Description": "This API is to get flight details based on the destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "GetFlightDetails(destination) -> flight_id"
            },
            {
                "name": "CheckWeather",
                "Description": "This API is to get the weather status of a specific location.",
                "input_params": {
                    "destination": {
                        "description": "the location to check the weather",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the weather status of the location",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(destination) -> weather_status"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "weather_status": {
                        "description": "the weather status of the destination",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the flight booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_id, weather_status) -> booking_status"
            }
        ],
        "Query": "I want to book a flight to Tokyo and also get information about the weather there.",
        "Label": "BookFlight(flight_id=GetFlightDetails(destination='Tokyo'), weather_status=CheckWeather(destination='Tokyo'))",
        "Index": 1420
    },
    {
        "APIs": [
            {
                "name": "GetFlightDetails",
                "Description": "This API is to get flight details based on destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "String"
                    }
                },
                "format": "GetFlightDetails(destination) -> flight_id"
            },
            {
                "name": "CheckWeather",
                "Description": "This API is to check the weather status at the destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination to check the weather of",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the status of the weather at the destination",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(destination) -> weather_status"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight based on flight_id.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight to book",
                        "type": "String"
                    },
                    "weather_status": {
                        "description": "the weather status at the destination",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_id, weather_status)-> booking status."
            }
        ],
        "Query": "I require to book a flight to Madrid and also want to know the weather situation there.",
        "Label": "BookFlight(flight_id=GetFlightDetails(destination='Madrid'), weather_status=CheckWeather(destination='Madrid'))",
        "Index": 1421
    },
    {
        "APIs": [
            {
                "name": "CheckWeather",
                "Description": "This API is to check the weather in a specific city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the weather status of the city",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(city_name) -> weather_status"
            },
            {
                "name": "SearchFlight",
                "Description": "This API is to search flights between two cities.",
                "input_params": {
                    "departure_city": {
                        "description": "the departure city of the flight",
                        "type": "String"
                    },
                    "destination_city": {
                        "description": "the destination city of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_options": {
                        "description": "the flight options between the two cities",
                        "type": "List"
                    }
                },
                "format": "SearchFlight(departure_city, destination_city) -> flight_options"
            },
            {
                "name": "GetFlightID",
                "Description": "This API is to get the ID of a selected flight.",
                "input_params": {
                    "flight_options": {
                        "description": "the flight options between two cities",
                        "type": "List"
                    },
                    "weather_status": {
                        "description": "the weather status of the destination city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the selected flight",
                        "type": "Integer"
                    }
                },
                "format": "GetFlightID(flight_options, weather_status) -> flight_id"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a selected flight.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the selected flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the flight booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_id) -> booking_status"
            }
        ],
        "Query": "I want to check the weather in Paris and then book a flight from Chicago to Paris",
        "Label": "BookFlight(flight_id=GetFlightID(flight_options=SearchFlight(departure_city='Chicago', destination_city='Paris'), weather_status=CheckWeather(city_name='Paris')))",
        "Index": 1422
    },
    {
        "APIs": [
            {
                "name": "CheckWeather",
                "Description": "This API is to check the weather of a specific city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the weather status of the city",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(city_name) -> weather_status"
            },
            {
                "name": "SearchFlight",
                "Description": "This API is to search for flights between two cities.",
                "input_params": {
                    "departure_city": {
                        "description": "the departure city of the flight",
                        "type": "String"
                    },
                    "destination_city": {
                        "description": "the destination city of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_options": {
                        "description": "the flight options between the two cities",
                        "type": "List"
                    }
                },
                "format": "SearchFlight(departure_city, destination_city) -> flight_options"
            },
            {
                "name": "GetFlightID",
                "Description": "This API is to get the ID of a flight based on flight options and weather status.",
                "input_params": {
                    "flight_options": {
                        "description": "the flight options between two cities",
                        "type": "List"
                    },
                    "weather_status": {
                        "description": "the weather status of destination city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the selected flight",
                        "type": "Integer"
                    }
                },
                "format": "GetFlightID(flight_options, weather_status) -> flight_id"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight with a specific ID.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight to be booked",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the flight booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_id) -> booking status"
            }
        ],
        "Query": "I want to know the weather in Tokyo and then reserve a flight from Los Angeles to Tokyo",
        "Label": "BookFlight(flight_id=GetFlightID(flight_options=SearchFlight(departure_city='Los Angeles', destination_city='Tokyo'), weather_status=CheckWeather(city_name='Tokyo')))",
        "Index": 1423
    },
    {
        "APIs": [
            {
                "name": "CheckWeather",
                "Description": "This API is to check the weather in a specific city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the current weather status of the city",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(city_name) -> weather_status"
            },
            {
                "name": "SearchFlight",
                "Description": "This API is to search available flights between two cities.",
                "input_params": {
                    "departure_city": {
                        "description": "the name of the departure city",
                        "type": "String"
                    },
                    "destination_city": {
                        "description": "the name of the destination city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_options": {
                        "description": "the available flight options",
                        "type": "Array"
                    }
                },
                "format": "SearchFlight(departure_city, destination_city) -> flight_options"
            },
            {
                "name": "GetFlightID",
                "Description": "This API is to get the flight ID based on flight options and weather conditions.",
                "input_params": {
                    "flight_options": {
                        "description": "the available flight options",
                        "type": "Array"
                    },
                    "weather_status": {
                        "description": "the weather status of the destination city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the selected flight",
                        "type": "String"
                    }
                },
                "format": "GetFlightID(flight_options, weather_status) -> flight_id"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a specific flight.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_id) -> booking_status"
            }
        ],
        "Query": "I want to look at the weather in Madrid and then book a flight from Houston to Madrid",
        "Label": "BookFlight(flight_id=GetFlightID(flight_options=SearchFlight(departure_city='Houston', destination_city='Madrid'), weather_status=CheckWeather(city_name='Madrid')))",
        "Index": 1424
    },
    {
        "APIs": [
            {
                "name": "SearchFare",
                "Description": "This API is to search the fare from source to destination.",
                "input_params": {
                    "src": {
                        "description": "the source city",
                        "type": "String"
                    },
                    "dest": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of travel",
                        "type": "Dates"
                    }
                },
                "output_params": {
                    "fare_id": {
                        "description": "the ID of the fare",
                        "type": "Integer"
                    }
                },
                "format": "SearchFare(src, dest, date) -> fare_id"
            },
            {
                "name": "CheckDiscount",
                "Description": "This API is to check the discount amount for a given coupon and fare ID.",
                "input_params": {
                    "coupon": {
                        "description": "the discount coupon code",
                        "type": "String"
                    },
                    "fare_id": {
                        "description": "the ID of the fare",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "discount_amount": {
                        "description": "the amount of discount",
                        "type": "Float"
                    }
                },
                "format": "CheckDiscount(coupon, fare_id) -> discount_amount"
            },
            {
                "name": "CalculateFinalFare",
                "Description": "This API is to calculate the final fare after applying discount.",
                "input_params": {
                    "fare_id": {
                        "description": "the ID of the fare",
                        "type": "Integer"
                    },
                    "discount_amount": {
                        "description": "the amount of discount",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "final_fare": {
                        "description": "the final fare after applying discount",
                        "type": "Float"
                    }
                },
                "format": "CalculateFinalFare(fare_id, discount_amount) -> final_fare"
            }
        ],
        "Query": "I want to travel from New York to Los Angeles on 13th June. I have a discount code \"SUMMER50\" and I want to know how much it will cost me after the discount.",
        "Label": "CalculateFinalFare(fare_id=SearchFare(src='New York', dest='Los Angeles', date='13th June'), discount_amount=CheckDiscount(coupon='SUMMER50', fare_id=SearchFare(src='New York', dest='Los Angeles', date='13th June')))",
        "Index": 1425
    },
    {
        "APIs": [
            {
                "name": "SearchFare",
                "Description": "This API is to search the fare between source and destination on a specific date.",
                "input_params": {
                    "src": {
                        "description": "the source city of the journey",
                        "type": "String"
                    },
                    "dest": {
                        "description": "the destination city of the journey",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the journey",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "fare_id": {
                        "description": "the ID of the fare",
                        "type": "Integer"
                    }
                },
                "format": "SearchFare(src, dest, date) -> fare_id"
            },
            {
                "name": "CheckDiscount",
                "Description": "This API is to check the discount amount for a specific coupon and fare.",
                "input_params": {
                    "coupon": {
                        "description": "the coupon code",
                        "type": "String"
                    },
                    "fare_id": {
                        "description": "the ID of the fare",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "discount_amount": {
                        "description": "the discount amount for the fare",
                        "type": "Float"
                    }
                },
                "format": "CheckDiscount(coupon, fare_id) -> discount_amount"
            },
            {
                "name": "CalculateFinalFare",
                "Description": "This API is to calculate the final fare after applying the discount.",
                "input_params": {
                    "fare_id": {
                        "description": "the ID of the fare",
                        "type": "Integer"
                    },
                    "discount_amount": {
                        "description": "the discount amount for the fare",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "final_fare": {
                        "description": "the final fare after discount",
                        "type": "Float"
                    }
                },
                "format": "CalculateFinalFare(fare_id, discount_amount) -> final_fare"
            }
        ],
        "Query": "I am planning a trip from Tokyo to Seoul on 27th August. I want to apply my coupon 'FLYASIA30' and calculate the final fare.",
        "Label": "CalculateFinalFare(fare_id=SearchFare(src='Tokyo', dest='Seoul', date='27th August'), discount_amount=CheckDiscount(coupon='FLYASIA30', fare_id=SearchFare(src='Tokyo', dest='Seoul', date='27th August')))",
        "Index": 1426
    },
    {
        "APIs": [
            {
                "name": "SearchFare",
                "Description": "This API is to search for a fare between two locations on a specific date.",
                "input_params": {
                    "src": {
                        "description": "the starting location of the journey",
                        "type": "String"
                    },
                    "dest": {
                        "description": "the destination of the journey",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the journey",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "fare_id": {
                        "description": "the ID of the fare",
                        "type": "Integer"
                    }
                },
                "format": "SearchFare(src, dest, date) -> fare_id"
            },
            {
                "name": "CheckDiscount",
                "Description": "This API is to check the discount amount for a specific coupon and fare.",
                "input_params": {
                    "coupon": {
                        "description": "the code of the coupon",
                        "type": "String"
                    },
                    "fare_id": {
                        "description": "the ID of the fare",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "discount_amount": {
                        "description": "the discount amount for the coupon",
                        "type": "Float"
                    }
                },
                "format": "CheckDiscount(coupon, fare_id) -> discount_amount"
            },
            {
                "name": "CalculateFinalFare",
                "Description": "This API is to calculate the final fare after a discount.",
                "input_params": {
                    "fare_id": {
                        "description": "the ID of the fare",
                        "type": "Integer"
                    },
                    "discount_amount": {
                        "description": "the discount amount for the fare",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "final_fare": {
                        "description": "the final fare after the discount",
                        "type": "Float"
                    }
                },
                "format": "CalculateFinalFare(fare_id, discount_amount) -> final_fare"
            }
        ],
        "Query": "I would like to fly from Paris to Rome on 10th October. I have a voucher 'EUROTRIP20' and I need to know the final fare after the voucher discount.",
        "Label": "CalculateFinalFare(fare_id=SearchFare(src='Paris', dest='Rome', date='10th October'), discount_amount=CheckDiscount(coupon='EUROTRIP20', fare_id=SearchFare(src='Paris', dest='Rome', date='10th October')))",
        "Index": 1427
    },
    {
        "APIs": [
            {
                "name": "SearchFare",
                "Description": "This API is to search the fare from source to destination on a specific date.",
                "input_params": {
                    "src": {
                        "description": "the source location",
                        "type": "String"
                    },
                    "dest": {
                        "description": "the destination location",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of travel",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "fare_id": {
                        "description": "the ID of the fare",
                        "type": "Integer"
                    }
                },
                "format": "SearchFare(src, dest, date) -> fare_id"
            },
            {
                "name": "CheckDiscount",
                "Description": "This API is to check the discount amount by using a coupon for a specific fare.",
                "input_params": {
                    "coupon": {
                        "description": "the coupon code",
                        "type": "String"
                    },
                    "fare_id": {
                        "description": "the ID of the fare",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "discount_amount": {
                        "description": "the discount amount",
                        "type": "Float"
                    }
                },
                "format": "CheckDiscount(coupon, fare_id) -> discount_amount"
            },
            {
                "name": "CalculateFinalFare",
                "Description": "This API is to calculate the final fare after discount.",
                "input_params": {
                    "fare_id": {
                        "description": "the ID of the fare",
                        "type": "Integer"
                    },
                    "discount_amount": {
                        "description": "the discount amount",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "final_fare": {
                        "description": "the final fare after discount",
                        "type": "Float"
                    }
                },
                "format": "CalculateFinalFare(fare_id, discount_amount) -> final_fare"
            }
        ],
        "Query": "I'm planning to travel from Sydney to Melbourne on 1st December. I have a discount code 'AUSFLY10' and I want to calculate the final fare.",
        "Label": "CalculateFinalFare(fare_id=SearchFare(src='Sydney', dest='Melbourne', date='1st December'), discount_amount=CheckDiscount(coupon='AUSFLY10', fare_id=SearchFare(src='Sydney', dest='Melbourne', date='1st December')))",
        "Index": 1428
    },
    {
        "APIs": [
            {
                "name": "SearchFare",
                "Description": "This API is to search fare from source to destination on a specific date.",
                "input_params": {
                    "src": {
                        "description": "the source city of the travel",
                        "type": "String"
                    },
                    "dest": {
                        "description": "the destination city of the travel",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of travel",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "fare_id": {
                        "description": "the ID of the fare",
                        "type": "Integer"
                    }
                },
                "format": "SearchFare(src, dest, date) -> fare_id"
            },
            {
                "name": "CheckDiscount",
                "Description": "This API is to check the discount amount for a specific coupon and fare.",
                "input_params": {
                    "coupon": {
                        "description": "the coupon code",
                        "type": "String"
                    },
                    "fare_id": {
                        "description": "the ID of the fare",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "discount_amount": {
                        "description": "the discount amount for the fare",
                        "type": "Float"
                    }
                },
                "format": "CheckDiscount(coupon, fare_id) -> discount_amount"
            },
            {
                "name": "CalculateFinalFare",
                "Description": "This API is to calculate the final fare after applying the discount.",
                "input_params": {
                    "fare_id": {
                        "description": "the ID of the fare",
                        "type": "Integer"
                    },
                    "discount_amount": {
                        "description": "the discount amount for the fare",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "final_fare": {
                        "description": "the final fare after applying the discount",
                        "type": "Float"
                    }
                },
                "format": "CalculateFinalFare(fare_id, discount_amount) -> final_fare"
            }
        ],
        "Query": "I am considering a trip from Berlin to Amsterdam on 15th November. I have a coupon 'FALLTRAVEL25' and I want to know my total fare after applying the discount.",
        "Label": "CalculateFinalFare(fare_id=SearchFare(src='Berlin', dest='Amsterdam', date='15th November'), discount_amount=CheckDiscount(coupon='FALLTRAVEL25', fare_id=SearchFare(src='Berlin', dest='Amsterdam', date='15th November')))",
        "Index": 1429
    },
    {
        "APIs": [
            {
                "name": "SearchProduct",
                "Description": "This API is to find product details by product ID.",
                "input_params": {
                    "productId": {
                        "description": "the ID of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product": {
                        "description": "the full details of the product",
                        "type": "Object"
                    }
                },
                "format": "SearchProduct(productId) -> product"
            },
            {
                "name": "GetLocation",
                "Description": "This API is to get the location of a product.",
                "input_params": {
                    "product": {
                        "description": "the full details of the product",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "the city where the product is located",
                        "type": "String"
                    }
                },
                "format": "GetLocation(product) -> city"
            },
            {
                "name": "GetWeather",
                "Description": "This API is to get the current weather of a place.",
                "input_params": {
                    "city": {
                        "description": "the city for which weather is to be fetched",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the current weather of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            }
        ],
        "Query": "I am interested in purchasing a dress with product id 'DRESS456'. Can you find out if the climate at the place where the product is located is suitable for wearing a dress?",
        "Label": "GetWeather(city=GetLocation(product=SearchProduct(productId='DRESS456')))",
        "Index": 1430
    },
    {
        "APIs": [
            {
                "name": "SearchProduct",
                "Description": "This API is to search for product details using product ID.",
                "input_params": {
                    "productId": {
                        "description": "the ID of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product": {
                        "description": "the details of the product",
                        "type": "object"
                    }
                },
                "format": "SearchProduct(productId) -> product"
            },
            {
                "name": "GetLocation",
                "Description": "This API is to get the location of a product.",
                "input_params": {
                    "product": {
                        "description": "the details of the product",
                        "type": "object"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "the location of the product",
                        "type": "String"
                    }
                },
                "format": "GetLocation(product) -> city"
            },
            {
                "name": "GetWeather",
                "Description": "This API is to get the weather of a location.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            }
        ],
        "Query": "I want to buy a raincoat with product id 'RAIN654'. Can you tell me if the weather where the product is located is suitable for wearing a raincoat?",
        "Label": "GetWeather(city=GetLocation(product=SearchProduct(productId='RAIN654')))",
        "Index": 1431
    },
    {
        "APIs": [
            {
                "name": "SearchProduct",
                "Description": "This API is used to search the product by the product id.",
                "input_params": {
                    "productId": {
                        "description": "the id of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product": {
                        "description": "the details of the product",
                        "type": "Object"
                    }
                },
                "format": "SearchProduct(productId) -> product"
            },
            {
                "name": "GetLocation",
                "Description": "This API is used to get the location where the product is available.",
                "input_params": {
                    "product": {
                        "description": "the details of the product",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "the city where the product is available",
                        "type": "String"
                    }
                },
                "format": "GetLocation(product) -> city"
            },
            {
                "name": "GetWeather",
                "Description": "This API is used to get the weather of a specific location.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather condition of the city",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city) -> weather"
            }
        ],
        "Query": "I'm planning to buy a bikini with product id 'BIK987'. Could you check if the weather at the location where the product is available is suitable for wearing a bikini?",
        "Label": "GetWeather(city=GetLocation(product=SearchProduct(productId='BIK987')))",
        "Index": 1432
    },
    {
        "APIs": [
            {
                "name": "CheckWeather",
                "Description": "This API is to check the weather forecast for a specific location and date.",
                "input_params": {
                    "location": {
                        "description": "the location where to check the weather",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date when to check the weather",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the weather forecast of the specific location and date",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(location, date) -> weather_forecast"
            },
            {
                "name": "GetOutdoorActivity",
                "Description": "This API is to get an exciting outdoor activity based on the weather forecast.",
                "input_params": {
                    "weather_forecast": {
                        "description": "the weather forecast of a specific location and date",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity": {
                        "description": "an exciting outdoor activity",
                        "type": "String"
                    }
                },
                "format": "GetOutdoorActivity(weather_forecast) -> activity"
            },
            {
                "name": "BookActivity",
                "Description": "This API is to book an activity.",
                "input_params": {
                    "activity": {
                        "description": "the activity to book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookActivity(activity) -> booking status"
            }
        ],
        "Query": "I am looking forward to having some fun outside in Seattle this Wednesday.",
        "Label": "BookActivity(activity=GetOutdoorActivity(weather_forecast=CheckWeather(location='Seattle', date='this Wednesday')))",
        "Index": 1433
    },
    {
        "APIs": [
            {
                "name": "CheckWeather",
                "Description": "This API is to check the weather forecast for a specific location and date.",
                "input_params": {
                    "location": {
                        "description": "the location where to check the weather",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date when to check the weather",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the weather forecast of the location on the specific date",
                        "type": "String"
                    }
                },
                "format": "CheckWeather(location, date) -> weather_forecast"
            },
            {
                "name": "GetOutdoorActivity",
                "Description": "This API is to recommend outdoor activities based on the weather forecast.",
                "input_params": {
                    "weather_forecast": {
                        "description": "the weather forecast for the activity",
                        "type": "String"
                    }
                },
                "output_params": {
                    "activity": {
                        "description": "the recommended outdoor activity",
                        "type": "String"
                    }
                },
                "format": "GetOutdoorActivity(weather_forecast) -> activity"
            },
            {
                "name": "BookActivity",
                "Description": "This API is to book an activity.",
                "input_params": {
                    "activity": {
                        "description": "the activity to be booked",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookActivity(activity) -> booking status."
            }
        ],
        "Query": "I'd like to enjoy something fun outside in Boston this Monday.",
        "Label": "BookActivity(activity=GetOutdoorActivity(weather_forecast=CheckWeather(location='Boston', date='this Monday')))",
        "Index": 1434
    },
    {
        "APIs": [
            {
                "name": "FindBook",
                "Description": "This API is to find the book ID by its title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "FindBook(title) -> book_id"
            },
            {
                "name": "BuyBook",
                "Description": "This API is to purchase a book by its ID.",
                "input_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "BuyBook(book_id) -> purchase_status"
            }
        ],
        "Query": "I need to purchase 'To Kill a Mockingbird' from the book shop.",
        "Label": "BuyBook(book_id=FindBook(title='To Kill a Mockingbird'))",
        "Index": 1435
    },
    {
        "APIs": [
            {
                "name": "FindBook",
                "Description": "This API is to find the book ID by its title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "the ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "FindBook(title) -> book_id"
            },
            {
                "name": "BuyBook",
                "Description": "This API is to purchase a book from the outlet.",
                "input_params": {
                    "book_id": {
                        "description": "the ID of the book to be purchased",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "BuyBook(book_id) -> purchase status"
            }
        ],
        "Query": "I would like to acquire '1984' from the book outlet.",
        "Label": "BuyBook(book_id=FindBook(title='1984'))",
        "Index": 1436
    },
    {
        "APIs": [
            {
                "name": "FindBook",
                "Description": "This API is to find a book by its title.",
                "input_params": {
                    "title": {
                        "description": "The title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "The ID of the book",
                        "type": "Integer"
                    }
                },
                "format": "FindBook(title) -> book_id"
            },
            {
                "name": "BuyBook",
                "Description": "This API is to purchase a book.",
                "input_params": {
                    "book_id": {
                        "description": "The ID of the book",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "The status of the purchase",
                        "type": "String"
                    }
                },
                "format": "BuyBook(book_id) -> purchase_status"
            }
        ],
        "Query": "I need to buy 'The Great Gatsby' from the book store.",
        "Label": "BuyBook(book_id=FindBook(title='The Great Gatsby'))",
        "Index": 1437
    },
    {
        "APIs": [
            {
                "name": "FindBook",
                "Description": "This API is to find a book by its title.",
                "input_params": {
                    "title": {
                        "description": "The title of the book.",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_id": {
                        "description": "The unique identifier of the book.",
                        "type": "Integer"
                    }
                },
                "format": "FindBook(title) -> book_id"
            },
            {
                "name": "BuyBook",
                "Description": "This API is to purchase a book by its ID.",
                "input_params": {
                    "book_id": {
                        "description": "The unique identifier of the book.",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "The status of the purchase.",
                        "type": "String"
                    }
                },
                "format": "BuyBook(book_id) -> purchase_status"
            }
        ],
        "Query": "I want to purchase 'A Tale of Two Cities' from the bookstore.",
        "Label": "BuyBook(book_id=FindBook(title='A Tale of Two Cities'))",
        "Index": 1438
    },
    {
        "APIs": [
            {
                "name": "SearchFilm",
                "Description": "This API is to search a film ID by its title.",
                "input_params": {
                    "title": {
                        "description": "the title of the film",
                        "type": "String"
                    }
                },
                "output_params": {
                    "film_id": {
                        "description": "the ID of the film",
                        "type": "Integer"
                    }
                },
                "format": "SearchFilm(title) -> film_id"
            },
            {
                "name": "BookMovie",
                "Description": "This API is to book a movie.",
                "input_params": {
                    "film_id": {
                        "description": "the ID of the film",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "String"
                    },
                    "show_time": {
                        "description": "the show time of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookMovie(film_id, date, show_time) -> booking status"
            }
        ],
        "Query": "I want to watch 'The Dark Knight' on Saturday evening.",
        "Label": "BookMovie(film_id=SearchFilm(title='The Dark Knight'), date='Saturday', show_time='evening')",
        "Index": 1439
    },
    {
        "APIs": [
            {
                "name": "SearchFilm",
                "Description": "This API is to search for a film by its title.",
                "input_params": {
                    "title": {
                        "description": "the title of the film",
                        "type": "String"
                    }
                },
                "output_params": {
                    "film_id": {
                        "description": "the ID of the film",
                        "type": "Integer"
                    }
                },
                "format": "SearchFilm(title) -> film_id"
            },
            {
                "name": "BookMovie",
                "Description": "This API is to book a movie ticket.",
                "input_params": {
                    "film_id": {
                        "description": "the ID of the film",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date to watch the movie",
                        "type": "String"
                    },
                    "show_time": {
                        "description": "the time to watch the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookMovie(film_id, date, show_time) -> booking status"
            }
        ],
        "Query": "I'm planning to watch 'Avengers: Endgame' on Tuesday afternoon.",
        "Label": "BookMovie(film_id=SearchFilm(title='Avengers: Endgame'), date='Tuesday', show_time='afternoon')",
        "Index": 1440
    },
    {
        "APIs": [
            {
                "name": "SearchFilm",
                "Description": "This API is to search a film by its title.",
                "input_params": {
                    "title": {
                        "description": "The title of the film",
                        "type": "String"
                    }
                },
                "output_params": {
                    "film_id": {
                        "description": "The ID of the film",
                        "type": "Integer"
                    }
                },
                "format": "SearchFilm(title) -> film_id"
            },
            {
                "name": "BookMovie",
                "Description": "This API is to book a movie.",
                "input_params": {
                    "film_id": {
                        "description": "The ID of the film",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "The date to watch the movie",
                        "type": "String"
                    },
                    "show_time": {
                        "description": "The time to watch the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "The status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookMovie(film_id, date, show_time) -> booking status"
            }
        ],
        "Query": "Want to catch 'Jurassic Park' on Monday evening.",
        "Label": "BookMovie(film_id=SearchFilm(title='Jurassic Park'), date='Monday', show_time='evening')",
        "Index": 1441
    },
    {
        "APIs": [
            {
                "name": "GetBookISBN",
                "Description": "This API is to get the ISBN of a book based on the book title.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "format": "GetBookISBN(book_title) -> ISBN"
            },
            {
                "name": "BuyBook",
                "Description": "This API is to purchase a book.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity of the book to purchase",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "BuyBook(ISBN, quantity) -> purchase status"
            }
        ],
        "Query": "I want to purchase 2 copies of 'The Great Gatsby'.",
        "Label": "BuyBook(ISBN=GetBookISBN(book_title='The Great Gatsby'), quantity=2)",
        "Index": 1442
    },
    {
        "APIs": [
            {
                "name": "GetBookISBN",
                "Description": "This API is to convert book title to book ISBN.",
                "input_params": {
                    "book_title": {
                        "description": "The title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ISBN": {
                        "description": "The ISBN of the book",
                        "type": "String"
                    }
                },
                "format": "GetBookISBN(book_title) -> ISBN"
            },
            {
                "name": "BuyBook",
                "Description": "This API is to buy a certain quantity of a book via its ISBN.",
                "input_params": {
                    "ISBN": {
                        "description": "The ISBN of the book",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "The quantity of the book to buy",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "The status of the purchase",
                        "type": "String"
                    }
                },
                "format": "BuyBook(ISBN, quantity) -> purchase_status"
            }
        ],
        "Query": "I need to get 10 copies of \"To Kill a Mockingbird\".",
        "Label": "BuyBook(ISBN=GetBookISBN(book_title='To Kill a Mockingbird'), quantity=10)",
        "Index": 1443
    },
    {
        "APIs": [
            {
                "name": "GetBookISBN",
                "Description": "This API is to get the ISBN of a book by its title.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "format": "GetBookISBN(book_title) -> ISBN"
            },
            {
                "name": "BuyBook",
                "Description": "This API is to order a book by its ISBN and quantity.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity of the book to order",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "order status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "BuyBook(ISBN, quantity) -> order status."
            }
        ],
        "Query": "I would like to order 3 copies of \"Pride and Prejudice\".",
        "Label": "BuyBook(ISBN=GetBookISBN(book_title='Pride and Prejudice'), quantity=3)",
        "Index": 1444
    },
    {
        "APIs": [
            {
                "name": "GetBookISBN",
                "Description": "This API is to get the ISBN of a book using the book title.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "format": "GetBookISBN(book_title) -> ISBN"
            },
            {
                "name": "BuyBook",
                "Description": "This API is to buy a certain quantity of a book using the book's ISBN.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity of the book to buy",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "BuyBook(ISBN, quantity) -> purchase status"
            }
        ],
        "Query": "I want to buy 4 copies of '1984'.",
        "Label": "BuyBook(ISBN=GetBookISBN(book_title='1984'), quantity=4)",
        "Index": 1445
    },
    {
        "APIs": [
            {
                "name": "GetBookISBN",
                "Description": "This API is to get the ISBN of a book by its title.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "format": "GetBookISBN(book_title) -> ISBN"
            },
            {
                "name": "BuyBook",
                "Description": "This API is to purchase a book by its ISBN and quantity.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity of the book to be purchased",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "BuyBook(ISBN, quantity) -> purchase status"
            }
        ],
        "Query": "I need to purchase 6 copies of 'Moby Dick'",
        "Label": "BuyBook(ISBN=GetBookISBN(book_title='Moby Dick'), quantity=6)",
        "Index": 1446
    },
    {
        "APIs": [
            {
                "name": "FetchStockData",
                "Description": "This API is to fetch the stock data.",
                "input_params": {
                    "stock_symbol": {
                        "description": "the stock symbol",
                        "type": "String"
                    }
                },
                "output_params": {
                    "stock_data": {
                        "description": "the data of the stock",
                        "type": "Object"
                    }
                },
                "format": "FetchStockData(stock_symbol) -> stock_data"
            },
            {
                "name": "BasicDataAnalysis",
                "Description": "This API is to analyze the stock data.",
                "input_params": {
                    "stock_data": {
                        "description": "the data of the stock",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "analyzed_data": {
                        "description": "the analyzed result of the stock data",
                        "type": "Object"
                    }
                },
                "format": "BasicDataAnalysis(stock_data) -> analyzed_data"
            },
            {
                "name": "GenerateReport",
                "Description": "This API is to generate a report with the analyzed data and a specific template.",
                "input_params": {
                    "analyzed_data": {
                        "description": "the analyzed result of the stock data",
                        "type": "Object"
                    },
                    "template": {
                        "description": "the template used to generate the report",
                        "type": "String"
                    }
                },
                "output_params": {
                    "report": {
                        "description": "the generated report",
                        "type": "Object"
                    }
                },
                "format": "GenerateReport(analyzed_data, template) -> report"
            }
        ],
        "Query": "I need to examine the stock data for 'GOOGL' and create a report using the 'advanced_analysis' template.",
        "Label": "GenerateReport(analyzed_data=BasicDataAnalysis(stock_data=FetchStockData(stock_symbol='GOOGL')), template='advanced_analysis')",
        "Index": 1447
    },
    {
        "APIs": [
            {
                "name": "FetchStockData",
                "Description": "This API is to fetch the stock data.",
                "input_params": {
                    "stock_symbol": {
                        "description": "the symbol of the stock",
                        "type": "String"
                    }
                },
                "output_params": {
                    "stock_data": {
                        "description": "the fetched data of the stock",
                        "type": "Object"
                    }
                },
                "format": "FetchStockData(stock_symbol) -> stock_data"
            },
            {
                "name": "BasicDataAnalysis",
                "Description": "This API is to analyze the fetched stock data.",
                "input_params": {
                    "stock_data": {
                        "description": "the fetched data of the stock",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "analyzed_data": {
                        "description": "the analyzed result of the stock data",
                        "type": "Object"
                    }
                },
                "format": "BasicDataAnalysis(stock_data) -> analyzed_data"
            },
            {
                "name": "GenerateReport",
                "Description": "This API is to generate a report with the analyzed data.",
                "input_params": {
                    "analyzed_data": {
                        "description": "the analyzed result of the stock data",
                        "type": "Object"
                    },
                    "template": {
                        "description": "the template of the report",
                        "type": "String"
                    }
                },
                "output_params": {
                    "report": {
                        "description": "the generated report",
                        "type": "Object"
                    }
                },
                "format": "GenerateReport(analyzed_data, template) -> report"
            }
        ],
        "Query": "I want to study the stock data of 'MSFT' and produce a report with the 'statistical_analysis' model.",
        "Label": "GenerateReport(analyzed_data=BasicDataAnalysis(stock_data=FetchStockData(stock_symbol='MSFT')), template='statistical_analysis')",
        "Index": 1448
    },
    {
        "APIs": [
            {
                "name": "FetchStockData",
                "Description": "This API is to fetch the stock data.",
                "input_params": {
                    "stock_symbol": {
                        "description": "the symbol of the stock",
                        "type": "String"
                    }
                },
                "output_params": {
                    "stock_data": {
                        "description": "the data of the stock",
                        "type": "Object"
                    }
                },
                "format": "FetchStockData(stock_symbol) -> stock_data"
            },
            {
                "name": "BasicDataAnalysis",
                "Description": "This API is to analyze the stock data.",
                "input_params": {
                    "stock_data": {
                        "description": "the data of the stock",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "analyzed_data": {
                        "description": "the result of data analysis",
                        "type": "Object"
                    }
                },
                "format": "BasicDataAnalysis(stock_data) -> analyzed_data"
            },
            {
                "name": "GenerateReport",
                "Description": "This API is to generate a report based on the analyzed data.",
                "input_params": {
                    "analyzed_data": {
                        "description": "the result of data analysis",
                        "type": "Object"
                    },
                    "template": {
                        "description": "the template of the report",
                        "type": "String"
                    }
                },
                "output_params": {
                    "report": {
                        "description": "the generated report",
                        "type": "Object"
                    }
                },
                "format": "GenerateReport(analyzed_data, template) -> report"
            }
        ],
        "Query": "I want to review the stock data of 'TSLA' and create a report with the 'technical_analysis' template.",
        "Label": "GenerateReport(analyzed_data=BasicDataAnalysis(stock_data=FetchStockData(stock_symbol='TSLA')), template='technical_analysis')",
        "Index": 1449
    },
    {
        "APIs": [
            {
                "name": "FetchProductDetails",
                "Description": "This API is to fetch the details of the product.",
                "input_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_info": {
                        "description": "the details of the product",
                        "type": "Object"
                    }
                },
                "format": "FetchProductDetails(product_id) -> product_info"
            },
            {
                "name": "CreateShoppingCart",
                "Description": "This API is to create a shopping cart and add products into the cart.",
                "input_params": {
                    "user_id": {
                        "description": "the ID of the user who wants to create the shopping cart",
                        "type": "String"
                    },
                    "product_info": {
                        "description": "the details of the product to be added to the cart",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "shopping_cart_id": {
                        "description": "the ID of the created shopping cart",
                        "type": "String"
                    }
                },
                "format": "CreateShoppingCart(user_id, product_info) -> shopping_cart_id"
            },
            {
                "name": "CheckoutShoppingCart",
                "Description": "This API is to checkout the created shopping cart.",
                "input_params": {
                    "shopping_cart_id": {
                        "description": "the ID of the shopping cart to be checked out",
                        "type": "String"
                    }
                },
                "output_params": {
                    "checkout_status": {
                        "description": "the status of the checkout",
                        "type": "String"
                    }
                },
                "format": "CheckoutShoppingCart(shopping_cart_id) -> checkout_status"
            }
        ],
        "Query": "I want to add product with id '45678' to my shopping cart having user id '90123' and then checkout the cart.",
        "Label": "CheckoutShoppingCart(shopping_cart_id=CreateShoppingCart(user_id='90123', product_info=FetchProductDetails(product_id='45678')))",
        "Index": 1450
    },
    {
        "APIs": [
            {
                "name": "FindFlight",
                "Description": "This API is to find a flight based on the origin, destination and date.",
                "input_params": {
                    "origin": {
                        "description": "the origin of the flight",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FindFlight(origin, destination, date) -> flight_id"
            },
            {
                "name": "GetPassengerId",
                "Description": "This API is to get passenger ID based on the name and date of birth.",
                "input_params": {
                    "name": {
                        "description": "the name of the passenger",
                        "type": "String"
                    },
                    "dob": {
                        "description": "the date of birth of the passenger",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "passenger_id": {
                        "description": "the ID of the passenger",
                        "type": "Integer"
                    }
                },
                "format": "GetPassengerId(name, dob) -> passenger_id"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "passenger_id": {
                        "description": "the ID of the passenger",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_id, passenger_id) -> booking status."
            }
        ],
        "Query": "I need to book a flight from Los Angeles to Tokyo on 5th April. My name is Jane Smith and my date of birth is 02/02/1990.",
        "Label": "BookFlight(flight_id=FindFlight(origin='Los Angeles', destination='Tokyo', date='5th April'), passenger_id=GetPassengerId(name='Jane Smith', dob='02/02/1990'))",
        "Index": 1451
    },
    {
        "APIs": [
            {
                "name": "FindFlight",
                "Description": "This API is to find a flight based on origin, destination and date.",
                "input_params": {
                    "origin": {
                        "description": "the origin city of the flight",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination city of the flight",
                        "type": "String"
                    },
                    "date": {
                        "description": "the departure date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the found flight",
                        "type": "Integer"
                    }
                },
                "format": "FindFlight(origin, destination, date) -> flight_id"
            },
            {
                "name": "GetPassengerId",
                "Description": "This API is to get the ID of a passenger based on their name and date of birth.",
                "input_params": {
                    "name": {
                        "description": "the full name of the passenger",
                        "type": "String"
                    },
                    "dob": {
                        "description": "the date of birth of the passenger",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "passenger_id": {
                        "description": "the ID of the passenger",
                        "type": "Integer"
                    }
                },
                "format": "GetPassengerId(name, dob) -> passenger_id"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "passenger_id": {
                        "description": "the ID of the passenger",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_id, passenger_id)-> booking_status."
            }
        ],
        "Query": "I am looking to book a flight from Sydney to Paris on 10th December. My name is Michael Brown and my date of birth is 03/03/2000.",
        "Label": "BookFlight(flight_id=FindFlight(origin='Sydney', destination='Paris', date='10th December'), passenger_id=GetPassengerId(name='Michael Brown', dob='03/03/2000'))",
        "Index": 1452
    },
    {
        "APIs": [
            {
                "name": "FindFlight",
                "Description": "This API is to find a flight according to the origin, destination and date.",
                "input_params": {
                    "origin": {
                        "description": "The departure city of the flight",
                        "type": "String"
                    },
                    "destination": {
                        "description": "The destination city of the flight",
                        "type": "String"
                    },
                    "date": {
                        "description": "The departure date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "The id of the found flight",
                        "type": "Integer"
                    }
                },
                "format": "FindFlight(origin, destination, date) -> flight_id"
            },
            {
                "name": "GetPassengerId",
                "Description": "This API is to get the passenger id according to the name and date of birth.",
                "input_params": {
                    "name": {
                        "description": "The name of the passenger",
                        "type": "String"
                    },
                    "dob": {
                        "description": "The date of birth of the passenger",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "passenger_id": {
                        "description": "The id of the passenger",
                        "type": "Integer"
                    }
                },
                "format": "GetPassengerId(name, dob) -> passenger_id"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight for a passenger",
                "input_params": {
                    "flight_id": {
                        "description": "The id of the flight to be booked",
                        "type": "Integer"
                    },
                    "passenger_id": {
                        "description": "The id of the passenger who wants to book the flight",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "The status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_id, passenger_id) -> booking status"
            }
        ],
        "Query": "I want to arrange a flight from Moscow to Beijing on 15th March. My name is Anastasia Ivanova and my date of birth is 04/04/1970.",
        "Label": "BookFlight(flight_id=FindFlight(origin='Moscow', destination='Beijing', date='15th March'), passenger_id=GetPassengerId(name='Anastasia Ivanova', dob='04/04/1970'))",
        "Index": 1453
    },
    {
        "APIs": [
            {
                "name": "FindFlight",
                "Description": "This API is to find a flight.",
                "input_params": {
                    "origin": {
                        "description": "the origin of the flight",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FindFlight(origin, destination, date) -> flight_id"
            },
            {
                "name": "GetPassengerId",
                "Description": "This API is to get the passenger ID by name and date of birth.",
                "input_params": {
                    "name": {
                        "description": "the name of the passenger",
                        "type": "String"
                    },
                    "dob": {
                        "description": "the date of birth of the passenger",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "passenger_id": {
                        "description": "the ID of the passenger",
                        "type": "Integer"
                    }
                },
                "format": "GetPassengerId(name, dob) -> passenger_id"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "passenger_id": {
                        "description": "the ID of the passenger",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_id, passenger_id)-> booking status."
            }
        ],
        "Query": "I'm looking to book a flight from Rome to New Delhi on 20th September. My name is Francesco Rossi and my date of birth is 05/05/1985.",
        "Label": "BookFlight(flight_id=FindFlight(origin='Rome', destination='New Delhi', date='20th September'), passenger_id=GetPassengerId(name='Francesco Rossi', dob='05/05/1985'))",
        "Index": 1454
    },
    {
        "APIs": [
            {
                "name": "FindFlight",
                "Description": "This API is to find a flight based on origin, destination and date.",
                "input_params": {
                    "origin": {
                        "description": "the city where the flight originates from",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the city where the flight is headed to",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "String"
                    }
                },
                "format": "FindFlight(origin, destination, date) -> flight_id"
            },
            {
                "name": "GetPassengerId",
                "Description": "This API is to get the passenger ID based on name and date of birth.",
                "input_params": {
                    "name": {
                        "description": "the name of the passenger",
                        "type": "String"
                    },
                    "dob": {
                        "description": "the date of birth of the passenger",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "passenger_id": {
                        "description": "the ID of the passenger",
                        "type": "Integer"
                    }
                },
                "format": "GetPassengerId(name, dob) -> passenger_id"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book a flight.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the flight",
                        "type": "String"
                    },
                    "passenger_id": {
                        "description": "the ID of the passenger",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking confirmation": {
                        "description": "the confirmation of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_id, passenger_id)-> booking confirmation."
            }
        ],
        "Query": "I need to arrange a flight from Madrid to Cairo on 25th November. My name is Maria Garcia and my date of birth is 06/06/1995.",
        "Label": "BookFlight(flight_id=FindFlight(origin='Madrid', destination='Cairo', date='25th November'), passenger_id=GetPassengerId(name='Maria Garcia', dob='06/06/1995'))",
        "Index": 1455
    },
    {
        "APIs": [
            {
                "name": "MovieSearch",
                "Description": "This API is to search for movies in a specific city and genre.",
                "input_params": {
                    "city": {
                        "description": "the city in which the movie is searched",
                        "type": "String"
                    },
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "format": "MovieSearch(city, genre) -> movie_name"
            },
            {
                "name": "GetMovieTheater",
                "Description": "This API is to get the theater where the movie is showing.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "theater_name": {
                        "description": "the name of the theater",
                        "type": "String"
                    }
                },
                "format": "GetMovieTheater(movie_name) -> theater_name"
            },
            {
                "name": "GetTheaterLocation",
                "Description": "This API is to get the location of the theater.",
                "input_params": {
                    "theater_name": {
                        "description": "the name of the theater",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the location of the theater",
                        "type": "String"
                    }
                },
                "format": "GetTheaterLocation(theater_name) -> location"
            }
        ],
        "Query": "Could you help me find a sci-fi movie showing in Seattle and let me know where the theater is located?",
        "Label": "GetTheaterLocation(theater_name=GetMovieTheater(movie_name=MovieSearch(city='Seattle', genre='sci-fi')))",
        "Index": 1456
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on location and cuisine type.",
                "input_params": {
                    "city": {
                        "description": "the city where the user is located",
                        "type": "String"
                    },
                    "cuisine_type": {
                        "description": "the type of cuisine the user wants to eat",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(city, cuisine_type) -> restaurant_name"
            },
            {
                "name": "ReserveTable",
                "Description": "This API is to reserve a table at a given restaurant and time.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant where the user wants to book a table",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time when the user wants to have the reservation",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveTable(restaurant_name, time) -> reservation_status"
            }
        ],
        "Query": "I'm in New York and fancy some Indian food. Could you find a suitable place and book a table for 6pm?",
        "Label": "ReserveTable(restaurant_name=FindRestaurant(city='New York', cuisine_type='Indian'), time='6pm')",
        "Index": 1457
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on city and cuisine type.",
                "input_params": {
                    "city": {
                        "description": "the city where the user is",
                        "type": "String"
                    },
                    "cuisine_type": {
                        "description": "the type of cuisine the user fancies",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(city, cuisine_type) -> restaurant_name"
            },
            {
                "name": "ReserveTable",
                "Description": "This API is to reserve a table at a specified restaurant and time.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time the user wants to reserve a table",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveTable(restaurant_name, time) -> reservation status"
            }
        ],
        "Query": "I am in Boston and fancy some Lebanese food. Can you find a restaurant and make a reservation for 11am?",
        "Label": "ReserveTable(restaurant_name=FindRestaurant(city='Boston', cuisine_type='Lebanese'), time='11am')",
        "Index": 1458
    },
    {
        "APIs": [
            {
                "name": "CheckFlights",
                "Description": "This API is to search for flights.",
                "input_params": {
                    "source": {
                        "description": "the departure city",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight": {
                        "description": "the flight details",
                        "type": "Flight"
                    }
                },
                "format": "CheckFlights(source, destination) -> flight"
            },
            {
                "name": "BookHotel",
                "Description": "This API is to book a hotel.",
                "input_params": {
                    "location": {
                        "description": "the location of the hotel",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotel": {
                        "description": "the hotel details",
                        "type": "Hotel"
                    }
                },
                "format": "BookHotel(location, date) -> hotel"
            },
            {
                "name": "PlanItinerary",
                "Description": "This API is to create an itinerary based on user's interests.",
                "input_params": {
                    "location": {
                        "description": "the destination location",
                        "type": "String"
                    },
                    "interests": {
                        "description": "the user's interests",
                        "type": "String"
                    },
                    "flight": {
                        "description": "the flight details",
                        "type": "Flight"
                    },
                    "hotel": {
                        "description": "the hotel details",
                        "type": "Hotel"
                    }
                },
                "output_params": {
                    "itinerary": {
                        "description": "the created itinerary",
                        "type": "Itinerary"
                    }
                },
                "format": "PlanItinerary(location, interests, flight, hotel) -> itinerary"
            }
        ],
        "Query": "I'm thinking of going to Tokyo. Can you locate a flight from Chicago, book a hotel and make a schedule that is aligned with my fascination in technology?",
        "Label": "PlanItinerary(location='Tokyo', interests='technology', flight=CheckFlights(source='Chicago', destination='Tokyo'), hotel=BookHotel(location='Tokyo', date='flight.date'))",
        "Index": 1459
    },
    {
        "APIs": [
            {
                "name": "CalculateDistance",
                "Description": "This API is to calculate the distance between two locations.",
                "input_params": {
                    "StartLocation": {
                        "description": "the starting location",
                        "type": "String"
                    },
                    "EndLocation": {
                        "description": "the ending location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Distance": {
                        "description": "the distance between the two locations",
                        "type": "Float"
                    }
                },
                "format": "CalculateDistance(StartLocation, EndLocation) -> Distance"
            },
            {
                "name": "EstimateDeliveryTime",
                "Description": "This API is to estimate the delivery time.",
                "input_params": {
                    "Distance": {
                        "description": "the distance between the two locations",
                        "type": "Float"
                    },
                    "TransportMode": {
                        "description": "the mode of transportation",
                        "type": "String"
                    }
                },
                "output_params": {
                    "EstimatedTime": {
                        "description": "the estimated time of delivery",
                        "type": "Time"
                    }
                },
                "format": "EstimateDeliveryTime(Distance, TransportMode) -> EstimatedTime"
            }
        ],
        "Query": "I am looking to purchase ProductID 'B5678' in a quantity of 1. The delivery needs to be done from Los Angeles to Miami through a motorcycle courier. Can you provide the estimated time of delivery?",
        "Label": "EstimateDeliveryTime(Distance=CalculateDistance(StartLocation='Los Angeles', EndLocation='Miami'), TransportMode='Motorcycle')",
        "Index": 1460
    },
    {
        "APIs": [
            {
                "name": "ItemPrice",
                "Description": "This API is to get the price of an item.",
                "input_params": {
                    "item_id": {
                        "description": "the ID of the item",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "price": {
                        "description": "the price of the item",
                        "type": "Float"
                    }
                },
                "format": "ItemPrice(item_id) -> price"
            },
            {
                "name": "CurrencyConversion",
                "Description": "This API is to convert currency from one type to another.",
                "input_params": {
                    "from_currency": {
                        "description": "the currency to convert from",
                        "type": "String"
                    },
                    "to_currency": {
                        "description": "the currency to convert to",
                        "type": "String"
                    }
                },
                "output_params": {
                    "conversion_rate": {
                        "description": "the conversion rate between the two currencies",
                        "type": "Float"
                    }
                },
                "format": "CurrencyConversion(from_currency, to_currency) -> conversion_rate"
            }
        ],
        "Query": "What is the cost of item ID: 789 in British Pounds if its price is listed in Canadian dollars?",
        "Label": "CalculatePrice(price=ItemPrice(item_id='789'), conversion_rate=CurrencyConversion(from_currency='CAD', to_currency='GBP'))",
        "Index": 1461
    },
    {
        "APIs": [
            {
                "name": "ItemPrice",
                "Description": "This API is to get the price of an item.",
                "input_params": {
                    "item_id": {
                        "description": "the ID of the item",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "price": {
                        "description": "the price of the item",
                        "type": "Float"
                    }
                },
                "format": "ItemPrice(item_id) -> price"
            },
            {
                "name": "CurrencyConversion",
                "Description": "This API is to convert currency from one type to another.",
                "input_params": {
                    "from_currency": {
                        "description": "the original currency",
                        "type": "String"
                    },
                    "to_currency": {
                        "description": "the target currency",
                        "type": "String"
                    }
                },
                "output_params": {
                    "conversion_rate": {
                        "description": "the conversion rate from original currency to target currency",
                        "type": "Float"
                    }
                },
                "format": "CurrencyConversion(from_currency, to_currency) -> conversion_rate"
            },
            {
                "name": "CalculatePrice",
                "Description": "This API is to calculate the price of an item in a different currency.",
                "input_params": {
                    "price": {
                        "description": "the original price of the item",
                        "type": "Float"
                    },
                    "conversion_rate": {
                        "description": "the conversion rate from original currency to target currency",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "converted_price": {
                        "description": "the price of the item in the target currency",
                        "type": "Float"
                    }
                },
                "format": "CalculatePrice(price, conversion_rate) -> converted_price"
            }
        ],
        "Query": "What would be the price of item ID: 567 in Canadian Dollars if its original price is in British Pounds?",
        "Label": "CalculatePrice(price=ItemPrice(item_id='567'), conversion_rate=CurrencyConversion(from_currency='GBP', to_currency='CAD'))",
        "Index": 1462
    },
    {
        "APIs": [
            {
                "name": "WeatherInCity",
                "Description": "This API is to determine the weather in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather condition in the city",
                        "type": "String"
                    }
                },
                "format": "WeatherInCity(city, date) -> weather"
            },
            {
                "name": "RestaurantSelection",
                "Description": "This API is to discover a restaurant based on cuisine and location.",
                "input_params": {
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantDetails": {
                        "description": "the details of the selected restaurant",
                        "type": "Object"
                    }
                },
                "format": "RestaurantSelection(cuisine, location) -> restaurantDetails"
            },
            {
                "name": "TableReservation",
                "Description": "This API is to book a table at a restaurant.",
                "input_params": {
                    "restaurantDetails": {
                        "description": "the details of the restaurant",
                        "type": "Object"
                    },
                    "num_of_people": {
                        "description": "the number of people for the reservation",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date for the reservation",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "TableReservation(restaurantDetails, num_of_people, date) -> reservation_status"
            }
        ],
        "Query": "Can you determine the weather in Rome on 1st of May, discover a pizza place there and book a table for 6 for dinner?",
        "Label": "TableReservation(restaurantDetails=RestaurantSelection(cuisine='Pizza', location='Rome'), num_of_people='6', date='1st of May')",
        "Index": 1463
    },
    {
        "APIs": [
            {
                "name": "FindTransport",
                "Description": "This API is to find transportation to a destination.",
                "input_params": {
                    "BusStation": {
                        "description": "the name of the bus station",
                        "type": "String"
                    },
                    "Destination": {
                        "description": "the destination to reach",
                        "type": "String"
                    }
                },
                "output_params": {
                    "transportation": {
                        "description": "the mode of transportation to reach the destination",
                        "type": "String"
                    }
                },
                "format": "FindTransport(BusStation, Destination) -> transportation"
            },
            {
                "name": "RestaurantFinder",
                "Description": "This API is to find a restaurant based on city name and cuisine type.",
                "input_params": {
                    "CityName": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "CuisineType": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantFinder(CityName, CuisineType) -> restaurant_name"
            }
        ],
        "Query": "How can I reach the Mexican restaurant in New York City after I arrive at the Greyhound Bus Terminal?",
        "Label": "FindTransport(BusStation='Greyhound Bus Terminal', Destination=RestaurantFinder(CityName='New York City', CuisineType='Mexican'))",
        "Index": 1464
    },
    {
        "APIs": [
            {
                "name": "NearbyHospitalQuery",
                "Description": "This API is to find a hospital near a given location.",
                "input_params": {
                    "coordinate_position": {
                        "description": "the coordinates of the location",
                        "type": "Coordinate"
                    }
                },
                "output_params": {
                    "hospital": {
                        "description": "the name of the nearby hospital",
                        "type": "String"
                    }
                },
                "format": "NearbyHospitalQuery(coordinate_position) -> hospital"
            },
            {
                "name": "DoctorAvailabilityQuery",
                "Description": "This API is to check the availability of a doctor at a given hospital.",
                "input_params": {
                    "hospital": {
                        "description": "the name of the hospital",
                        "type": "String"
                    },
                    "specialty": {
                        "description": "the specialty of the doctor",
                        "type": "String"
                    }
                },
                "output_params": {
                    "availability": {
                        "description": "the availability of the doctor",
                        "type": "Boolean"
                    }
                },
                "format": "DoctorAvailabilityQuery(hospital, specialty) -> availability"
            }
        ],
        "Query": "Is there a pediatrician available at a hospital near the bistro 'Le Bouchon' in Chicago?",
        "Label": "DoctorAvailabilityQuery(hospital=NearbyHospitalQuery(coordinate_position=RestaurantDetail(restaurant_name='Le Bouchon', city='Chicago')), specialty='pediatrician')",
        "Index": 1465
    },
    {
        "APIs": [
            {
                "name": "NearbyFarmersMarketQuery",
                "Description": "This API is to find a nearby farmers market based on the coordinate position of a grocery store.",
                "input_params": {
                    "coordinate_position": {
                        "description": "the coordinate position of the grocery store",
                        "type": "CoordinatePosition"
                    }
                },
                "output_params": {
                    "farmers_market": {
                        "description": "the nearby farmers market",
                        "type": "FarmersMarket"
                    }
                },
                "format": "NearbyFarmersMarketQuery(coordinate_position) -> farmers_market"
            },
            {
                "name": "GroceryStoreDetail",
                "Description": "This API is to get the details of a grocery store.",
                "input_params": {
                    "store_name": {
                        "description": "the name of the grocery store",
                        "type": "String"
                    },
                    "city": {
                        "description": "the city where the grocery store is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "coordinate_position": {
                        "description": "the coordinate position of the grocery store",
                        "type": "CoordinatePosition"
                    }
                },
                "format": "GroceryStoreDetail(store_name, city) -> coordinate_position"
            },
            {
                "name": "ProduceAvailabilityQuery",
                "Description": "This API is to check the availability of a produce at a farmers market.",
                "input_params": {
                    "farmers_market": {
                        "description": "the farmers market to check",
                        "type": "FarmersMarket"
                    },
                    "produce_type": {
                        "description": "the type of produce to check",
                        "type": "String"
                    }
                },
                "output_params": {
                    "availability_status": {
                        "description": "the availability status of the produce",
                        "type": "String"
                    }
                },
                "format": "ProduceAvailabilityQuery(farmers_market, produce_type) -> availability_status"
            }
        ],
        "Query": "Is there fresh radish available at a farmers market near the grocery store 'Walmart' in Dallas?",
        "Label": "ProduceAvailabilityQuery(farmers_market=NearbyFarmersMarketQuery(coordinate_position=GroceryStoreDetail(store_name='Walmart', city='Dallas')), produce_type='fresh radish')",
        "Index": 1466
    },
    {
        "APIs": [
            {
                "name": "SearchMovie",
                "Description": "This API is to search for movies based on genre and location.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "location": {
                        "description": "the location where the movie is playing",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "format": "SearchMovie(genre, location) -> movie_name"
            },
            {
                "name": "CheckShowtimes",
                "Description": "This API is to check the showtimes of a movie on a specific date.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which showtimes need to be checked",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "the showtime of the movie on the specified date",
                        "type": "Time"
                    }
                },
                "format": "CheckShowtimes(movie_name, date) -> showtime"
            },
            {
                "name": "BookTickets",
                "Description": "This API is to book tickets for a movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    },
                    "showtime": {
                        "description": "the showtime of the movie",
                        "type": "Time"
                    },
                    "number_of_tickets": {
                        "description": "the number of tickets to be booked",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the ticket booking",
                        "type": "String"
                    }
                },
                "format": "BookTickets(movie_name, showtime, number_of_tickets) -> booking_status"
            }
        ],
        "Query": "Book 3 tickets for a romance movie in San Francisco tomorrow at 8pm.",
        "Label": "BookTickets(movie_name=SearchMovie(genre='romance', location='San Francisco'), showtime=CheckShowtimes(movie_name=SearchMovie(genre='romance', location='San Francisco'), date='tomorrow'), number_of_tickets=3)",
        "Index": 1467
    },
    {
        "APIs": [
            {
                "name": "GetLocalWeather",
                "Description": "This API is to get the local weather of a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather information of the city",
                        "type": "String"
                    }
                },
                "format": "GetLocalWeather(city) -> weather"
            },
            {
                "name": "RecommendClothing",
                "Description": "This API is to recommend clothing based on weather conditions.",
                "input_params": {
                    "weather": {
                        "description": "the weather information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing": {
                        "description": "the recommended clothing",
                        "type": "String"
                    }
                },
                "format": "RecommendClothing(weather) -> clothing"
            },
            {
                "name": "FindTrendingFashion",
                "Description": "This API is to find trending fashion based on city and season.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "season": {
                        "description": "the current season",
                        "type": "String"
                    }
                },
                "output_params": {
                    "fashion": {
                        "description": "the trending fashion",
                        "type": "String"
                    }
                },
                "format": "FindTrendingFashion(city, season) -> fashion"
            },
            {
                "name": "GenerateOutfit",
                "Description": "This API is to generate an outfit based on weather and fashion trends.",
                "input_params": {
                    "clothing": {
                        "description": "the recommended clothing",
                        "type": "String"
                    },
                    "fashion": {
                        "description": "the trending fashion",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the generated outfit",
                        "type": "String"
                    }
                },
                "format": "GenerateOutfit(clothing, fashion) -> outfit"
            }
        ],
        "Query": "I have a dinner date in Rome this weekend. What should I put on considering the weather and the current fashion trends?",
        "Label": "GenerateOutfit(clothing=RecommendClothing(weather=GetLocalWeather(city='Rome')), fashion=FindTrendingFashion(city='Rome', season='current'))",
        "Index": 1468
    },
    {
        "APIs": [
            {
                "name": "GetLocalWeather",
                "Description": "This API is to get the local weather of a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather information of the city",
                        "type": "String"
                    }
                },
                "format": "GetLocalWeather(city) -> weather"
            },
            {
                "name": "RecommendClothing",
                "Description": "This API is to recommend clothing based on weather conditions.",
                "input_params": {
                    "weather": {
                        "description": "the weather information",
                        "type": "String"
                    }
                },
                "output_params": {
                    "clothing": {
                        "description": "the recommended clothing",
                        "type": "String"
                    }
                },
                "format": "RecommendClothing(weather) -> clothing"
            },
            {
                "name": "FindTrendingFashion",
                "Description": "This API is to find the trending fashion in a city during a specific season.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "season": {
                        "description": "the current season",
                        "type": "String"
                    }
                },
                "output_params": {
                    "fashion": {
                        "description": "the trending fashion",
                        "type": "String"
                    }
                },
                "format": "FindTrendingFashion(city, season) -> fashion"
            },
            {
                "name": "GenerateOutfit",
                "Description": "This API is to generate an outfit recommendation based on weather and fashion trends.",
                "input_params": {
                    "clothing": {
                        "description": "the recommended clothing",
                        "type": "String"
                    },
                    "fashion": {
                        "description": "the trending fashion",
                        "type": "String"
                    }
                },
                "output_params": {
                    "outfit": {
                        "description": "the generated outfit",
                        "type": "String"
                    }
                },
                "format": "GenerateOutfit(clothing, fashion) -> outfit"
            }
        ],
        "Query": "I have a conference in Tokyo next week. What should I wear considering the weather and the latest fashion trends?",
        "Label": "GenerateOutfit(clothing=RecommendClothing(weather=GetLocalWeather(city='Tokyo')), fashion=FindTrendingFashion(city='Tokyo', season='current'))",
        "Index": 1469
    },
    {
        "APIs": [
            {
                "name": "RoomAvailability",
                "Description": "This API is to check the availability of rooms in a hotel.",
                "input_params": {
                    "hotel_id": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    },
                    "city": {
                        "description": "the city where the hotel is located",
                        "type": "String"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "rooms": {
                        "description": "a list of available rooms",
                        "type": "List"
                    }
                },
                "format": "RoomAvailability(hotel_id, city, check_in_date, check_out_date) -> rooms"
            },
            {
                "name": "BestRoom",
                "Description": "This API is to find the best room among the available rooms.",
                "input_params": {
                    "rooms": {
                        "description": "a list of available rooms",
                        "type": "List"
                    }
                },
                "output_params": {
                    "best_room": {
                        "description": "the best room",
                        "type": "String"
                    }
                },
                "format": "BestRoom(rooms) -> best_room"
            },
            {
                "name": "HotelSearch",
                "Description": "This API is to search for hotels in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the city where the hotel is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_id": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    }
                },
                "format": "HotelSearch(city) -> hotel_id"
            }
        ],
        "Query": "I need to find the best room in Tokyo from April 10 to April 17.",
        "Label": "BestRoom(rooms=RoomAvailability(hotel_id=HotelSearch(city='Tokyo', check_in_date='April 10', check_out_date='April 17')))",
        "Index": 1470
    },
    {
        "APIs": [
            {
                "name": "OpenVenues",
                "Description": "This API is to get a list of open venues in a specific city at the current time.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "time": {
                        "description": "the current time in the city",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "venues": {
                        "description": "a list of open venues in the city",
                        "type": "List"
                    }
                },
                "format": "OpenVenues(city, time) -> venues"
            },
            {
                "name": "MusicConcert",
                "Description": "This API is to get a list of music concerts happening in specific venues.",
                "input_params": {
                    "venue": {
                        "description": "the name of the venue",
                        "type": "String"
                    }
                },
                "output_params": {
                    "concerts": {
                        "description": "a list of music concerts happening in the venue",
                        "type": "List"
                    }
                },
                "format": "MusicConcert(venue) -> concerts"
            }
        ],
        "Query": "What music concerts are happening in open venues in New York?",
        "Label": "MusicConcert(venue=OpenVenues(city='New York', time=CurrentTime(city='New York')))",
        "Index": 1471
    },
    {
        "APIs": [
            {
                "name": "CheckPantry",
                "Description": "This API is to check the pantry inventory.",
                "input_params": {},
                "output_params": {
                    "available_ingredients": {
                        "description": "the list of available ingredients in the pantry",
                        "type": "List"
                    }
                },
                "format": "CheckPantry() -> available_ingredients"
            },
            {
                "name": "FindRecipe",
                "Description": "This API is to find a recipe for a specific dish.",
                "input_params": {
                    "dish": {
                        "description": "the name of the dish",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recipe": {
                        "description": "the recipe for the specified dish",
                        "type": "String"
                    }
                },
                "format": "FindRecipe(dish) -> recipe"
            },
            {
                "name": "GroceryList",
                "Description": "This API is to create a grocery list for a recipe considering pantry inventory.",
                "input_params": {
                    "available_ingredients": {
                        "description": "the list of available ingredients in the pantry",
                        "type": "List"
                    },
                    "recipe": {
                        "description": "the recipe for the dish",
                        "type": "String"
                    }
                },
                "output_params": {
                    "grocery_list": {
                        "description": "the grocery list for making the dish",
                        "type": "List"
                    }
                },
                "format": "GroceryList(available_ingredients, recipe) -> grocery_list"
            }
        ],
        "Query": "Can you help me create a shopping list for making lasagna considering my pantry inventory?",
        "Label": "GroceryList(available_ingredients=CheckPantry(recipe=FindRecipe(dish='lasagna')), recipe=FindRecipe(dish='lasagna'))",
        "Index": 1472
    },
    {
        "APIs": [
            {
                "name": "GetRecipe",
                "Description": "This API is to get a recipe based on diet type and meal type.",
                "input_params": {
                    "diet_type": {
                        "description": "the type of diet the user follows",
                        "type": "String"
                    },
                    "meal_type": {
                        "description": "the type of meal the user wants to make",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recipe_name": {
                        "description": "the name of the recipe",
                        "type": "String"
                    }
                },
                "format": "GetRecipe(diet_type, meal_type) -> recipe_name"
            },
            {
                "name": "GetIngredients",
                "Description": "This API is to get the ingredients of a specific recipe.",
                "input_params": {
                    "recipe_name": {
                        "description": "the name of the recipe",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ingredients": {
                        "description": "the ingredients of the recipe",
                        "type": "List<String>"
                    }
                },
                "format": "GetIngredients(recipe_name) -> ingredients"
            },
            {
                "name": "CheckPantry",
                "Description": "This API is to check if the user has all the necessary ingredients for a recipe in their pantry.",
                "input_params": {
                    "ingredients": {
                        "description": "the ingredients needed for the recipe",
                        "type": "List<String>"
                    }
                },
                "output_params": {
                    "available_ingredients": {
                        "description": "the available ingredients in the user's pantry",
                        "type": "List<String>"
                    }
                },
                "format": "CheckPantry(ingredients) -> available_ingredients"
            }
        ],
        "Query": "I'm lactose intolerant and I want to make a dessert, what can I make using the ingredients I have?",
        "Label": "CheckPantry(ingredients=GetIngredients(recipe_name=GetRecipe(diet_type='lactose_free', meal_type='dessert')))",
        "Index": 1473
    },
    {
        "APIs": [
            {
                "name": "GetRecipe",
                "Description": "This API is to get a recipe based on diet type and meal type.",
                "input_params": {
                    "diet_type": {
                        "description": "the type of the diet",
                        "type": "String"
                    },
                    "meal_type": {
                        "description": "the type of the meal",
                        "type": "String"
                    }
                },
                "output_params": {
                    "recipe_name": {
                        "description": "the name of the recipe",
                        "type": "String"
                    }
                },
                "format": "GetRecipe(diet_type, meal_type) -> recipe_name"
            },
            {
                "name": "GetIngredients",
                "Description": "This API is to get ingredients of a specific recipe.",
                "input_params": {
                    "recipe_name": {
                        "description": "the name of the recipe",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ingredients": {
                        "description": "the list of ingredients required for the recipe",
                        "type": "List"
                    }
                },
                "format": "GetIngredients(recipe_name) -> ingredients"
            },
            {
                "name": "CheckPantry",
                "Description": "This API is to check if the pantry has the required ingredients.",
                "input_params": {
                    "ingredients": {
                        "description": "the list of ingredients required for the recipe",
                        "type": "List"
                    }
                },
                "output_params": {
                    "availability_status": {
                        "description": "the status of ingredient availability in the pantry",
                        "type": "String"
                    }
                },
                "format": "CheckPantry(ingredients) -> availability_status"
            }
        ],
        "Query": "I'm on a ketogenic diet and I want to cook supper, what can I make using the ingredients I have?",
        "Label": "CheckPantry(ingredients=GetIngredients(recipe_name=GetRecipe(diet_type='keto', meal_type='supper')))",
        "Index": 1474
    },
    {
        "APIs": [
            {
                "name": "SearchBook",
                "Description": "This API is to search a book by title or author.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    },
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_information": {
                        "description": "the information of the book",
                        "type": "String"
                    }
                },
                "format": "SearchBook(title, author) -> book_information"
            },
            {
                "name": "FindBookStore",
                "Description": "This API is to find a bookstore that contains the specific book.",
                "input_params": {
                    "book_information": {
                        "description": "the information of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bookstore_location": {
                        "description": "the location of the bookstore",
                        "type": "String"
                    }
                },
                "format": "FindBookStore(book_information) -> bookstore_location"
            },
            {
                "name": "GetDirections",
                "Description": "This API is to get directions to a specific destination.",
                "input_params": {
                    "destination": {
                        "description": "the destination location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "directions": {
                        "description": "the directions to the destination",
                        "type": "String"
                    }
                },
                "format": "GetDirections(destination) -> directions"
            }
        ],
        "Query": "I need directions to the bookstore where I could find '1984' by George Orwell. Can you help?",
        "Label": "GetDirections(destination=FindBookStore(book_information=SearchBook(title='1984')))",
        "Index": 1475
    },
    {
        "APIs": [
            {
                "name": "FindMovie",
                "Description": "This API is to find a movie by title.",
                "input_params": {
                    "title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie": {
                        "description": "the movie object found",
                        "type": "Object"
                    }
                },
                "format": "FindMovie(title) -> movie"
            },
            {
                "name": "GetShowtimes",
                "Description": "This API is to get showtimes for a specific movie in a specific city.",
                "input_params": {
                    "movie": {
                        "description": "the movie object",
                        "type": "Object"
                    },
                    "city": {
                        "description": "the city where the movie is showing",
                        "type": "String"
                    }
                },
                "output_params": {
                    "showtime": {
                        "description": "the showtimes of the movie in the specified city",
                        "type": "Object"
                    }
                },
                "format": "GetShowtimes(movie, city) -> showtime"
            },
            {
                "name": "BuyTickets",
                "Description": "This API is to buy tickets for a movie at a specific showtime.",
                "input_params": {
                    "showtime": {
                        "description": "the specific showtime for the movie",
                        "type": "Object"
                    },
                    "number_of_tickets": {
                        "description": "the number of tickets to buy",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "ticket": {
                        "description": "the ticket for the movie",
                        "type": "Object"
                    }
                },
                "format": "BuyTickets(showtime, number_of_tickets) -> ticket"
            }
        ],
        "Query": "I would like to buy 1 ticket for the film 'Interstellar' in San Francisco. Can you help?",
        "Label": "BuyTickets(showtime=GetShowtimes(movie=FindMovie(title='Interstellar'), city='San Francisco'), number_of_tickets=1)",
        "Index": 1476
    },
    {
        "APIs": [
            {
                "name": "GetFlightDetails",
                "Description": "This API is to get flight details from one city to another.",
                "input_params": {
                    "city": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight": {
                        "description": "the flight details",
                        "type": "Object"
                    }
                },
                "format": "GetFlightDetails(city, date) -> flight"
            },
            {
                "name": "GetHotelDetails",
                "Description": "This API is to get hotel details in a city.",
                "input_params": {
                    "city": {
                        "description": "the city of the hotel",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the hotel booking",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotel": {
                        "description": "the hotel details",
                        "type": "Object"
                    }
                },
                "format": "GetHotelDetails(city, date) -> hotel"
            },
            {
                "name": "PlanTrip",
                "Description": "This API is to plan a trip.",
                "input_params": {
                    "flight": {
                        "description": "the flight details",
                        "type": "Object"
                    },
                    "hotel": {
                        "description": "the hotel details",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "trip_plan": {
                        "description": "the trip plan",
                        "type": "Object"
                    }
                },
                "format": "PlanTrip(flight, hotel) -> trip_plan"
            }
        ],
        "Query": "Can you arrange a journey from Los Angeles to Miami on the 24th of December?",
        "Label": "PlanTrip(flight=GetFlightDetails(city='Miami', date='24th of December'), hotel=GetHotelDetails(city='Miami', date='24th of December'))",
        "Index": 1477
    },
    {
        "APIs": [
            {
                "name": "GetFlightDetails",
                "Description": "This API is to get flight details.",
                "input_params": {
                    "city": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the journey",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight": {
                        "description": "the details of the flight",
                        "type": "String"
                    }
                },
                "format": "GetFlightDetails(city, date) -> flight"
            },
            {
                "name": "GetHotelDetails",
                "Description": "This API is to get hotel details.",
                "input_params": {
                    "city": {
                        "description": "the city where the hotel is located",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the stay",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotel": {
                        "description": "the details of the hotel booking",
                        "type": "String"
                    }
                },
                "format": "GetHotelDetails(city, date) -> hotel"
            },
            {
                "name": "PlanTrip",
                "Description": "This API is to plan a trip.",
                "input_params": {
                    "flight": {
                        "description": "the flight details",
                        "type": "String"
                    },
                    "hotel": {
                        "description": "the hotel details",
                        "type": "String"
                    }
                },
                "output_params": {
                    "trip": {
                        "description": "the details of the planned trip",
                        "type": "String"
                    }
                },
                "format": "PlanTrip(flight, hotel) -> trip"
            }
        ],
        "Query": "Can you set up a journey from San Francisco to Rome on the 20th of April?",
        "Label": "PlanTrip(flight=GetFlightDetails(city='Rome', date='20th of April'), hotel=GetHotelDetails(city='Rome', date='20th of April'))",
        "Index": 1478
    },
    {
        "APIs": [
            {
                "name": "FlightSearch",
                "Description": "This API is to search for flights.",
                "input_params": {
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    },
                    "departureDate": {
                        "description": "the departure date of the flight",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flightDetails": {
                        "description": "the details of the flight",
                        "type": "String"
                    }
                },
                "format": "FlightSearch(destination, departureDate) -> flightDetails"
            },
            {
                "name": "HotelBooking",
                "Description": "This API is to book a hotel.",
                "input_params": {
                    "flightDetails": {
                        "description": "the details of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotelBookingConfirmation": {
                        "description": "the confirmation of the hotel booking",
                        "type": "String"
                    }
                },
                "format": "HotelBooking(flightDetails) -> hotelBookingConfirmation"
            },
            {
                "name": "CarRentalService",
                "Description": "This API is to arrange a car rental service.",
                "input_params": {
                    "hotelBookingConfirmation": {
                        "description": "the confirmation of the hotel booking",
                        "type": "String"
                    }
                },
                "output_params": {
                    "carRentalConfirmation": {
                        "description": "the confirmation of the car rental service",
                        "type": "String"
                    }
                },
                "format": "CarRentalService(hotelBookingConfirmation) -> carRentalConfirmation"
            }
        ],
        "Query": "I need a flight to Miami on 20th February, along with a hotel reservation and car rental service. Can you arrange that for me?",
        "Label": "CarRentalService(hotelBookingConfirmation=HotelBooking(flightDetails=FlightSearch(destination='Miami', departureDate='20th February')))",
        "Index": 1479
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant near the theatre showing a specific movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "RestaurantOptions": {
                        "description": "the options of the restaurants",
                        "type": "List"
                    }
                },
                "format": "FindRestaurant(movie_name) -> RestaurantOptions"
            },
            {
                "name": "GetMovieTime",
                "Description": "This API is to get the showtime of a specific movie.",
                "input_params": {
                    "movie_name": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ShowTime": {
                        "description": "the showtime of the movie",
                        "type": "Time"
                    }
                },
                "format": "GetMovieTime(movie_name) -> ShowTime"
            },
            {
                "name": "MakeReservation",
                "Description": "This API is to make a reservation at a restaurant.",
                "input_params": {
                    "RestaurantOptions": {
                        "description": "the options of the restaurants",
                        "type": "List"
                    },
                    "ShowTime": {
                        "description": "the showtime of the movie",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "ReservationStatus": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "MakeReservation(RestaurantOptions, ShowTime) -> ReservationStatus"
            }
        ],
        "Query": "Can I book a table at a restaurant near the theatre showing 'Interstellar'?",
        "Label": "MakeReservation(RestaurantOptions=FindRestaurant(movie_name='Interstellar', ShowTime=GetMovieTime(movie_name='Interstellar')), ShowTime=GetMovieTime(movie_name='Interstellar'))",
        "Index": 1480
    },
    {
        "APIs": [
            {
                "name": "MovieFinderAPI",
                "Description": "This API is to find the list of movies based on the genre and the year.",
                "input_params": {
                    "Genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "Year": {
                        "description": "the release year of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "MovieList": {
                        "description": "the list of movies",
                        "type": "List"
                    }
                },
                "format": "MovieFinderAPI(Genre, Year) -> MovieList"
            },
            {
                "name": "MovieRatingAPI",
                "Description": "This API is to get the rating of the movie.",
                "input_params": {
                    "MovieName": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "MovieRating": {
                        "description": "the rating of the movie",
                        "type": "Float"
                    }
                },
                "format": "MovieRatingAPI(MovieName) -> MovieRating"
            },
            {
                "name": "MovieSuggestionAPI",
                "Description": "This API is to get the highest rated movie from the list.",
                "input_params": {
                    "MovieList": {
                        "description": "the list of movies",
                        "type": "List"
                    },
                    "MovieRating": {
                        "description": "the rating of the movie",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "HighestRatedMovie": {
                        "description": "the highest rated movie",
                        "type": "String"
                    }
                },
                "format": "MovieSuggestionAPI(MovieList, MovieRating) -> HighestRatedMovie"
            }
        ],
        "Query": "What is the highest rated comedy movie that came out in 2020?",
        "Label": "MovieSuggestionAPI(MovieList=MovieFinderAPI(Genre='comedy', Year='2020'), MovieRating=MovieRatingAPI(MovieName=MovieFinderAPI(Genre='comedy', Year='2020')))",
        "Index": 1481
    },
    {
        "APIs": [
            {
                "name": "MovieFinderAPI",
                "Description": "This API is to find movies by genre and year.",
                "input_params": {
                    "Genre": {
                        "description": "the genre of the movie",
                        "type": "String"
                    },
                    "Year": {
                        "description": "the year of the movie release",
                        "type": "String"
                    }
                },
                "output_params": {
                    "MovieList": {
                        "description": "the list of movies matching the given genre and year",
                        "type": "List"
                    }
                },
                "format": "MovieFinderAPI(Genre, Year) -> MovieList"
            },
            {
                "name": "MovieRatingAPI",
                "Description": "This API is to get the rating of a particular movie.",
                "input_params": {
                    "MovieName": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "MovieRating": {
                        "description": "the rating of the movie",
                        "type": "Float"
                    }
                },
                "format": "MovieRatingAPI(MovieName) -> MovieRating"
            },
            {
                "name": "MovieSuggestionAPI",
                "Description": "This API is to suggest the movie with the highest rating.",
                "input_params": {
                    "MovieList": {
                        "description": "the list of movies",
                        "type": "List"
                    },
                    "MovieRating": {
                        "description": "the rating of the movie",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "BestRatedMovie": {
                        "description": "the highest rated movie",
                        "type": "String"
                    }
                },
                "format": "MovieSuggestionAPI(MovieList, MovieRating) -> BestRatedMovie"
            }
        ],
        "Query": "Which is the highest rated romantic film released in 2021?",
        "Label": "MovieSuggestionAPI(MovieList=MovieFinderAPI(Genre='romantic', Year='2021'), MovieRating=MovieRatingAPI(MovieName=MovieFinderAPI(Genre='romantic', Year='2021')))",
        "Index": 1482
    },
    {
        "APIs": [
            {
                "name": "HotelInformation",
                "Description": "This API provides information about hotels in a given city.",
                "input_params": {
                    "city": {
                        "description": "The city where the user wants to find a hotel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotelDetails": {
                        "description": "Details of selected hotels in the specified city",
                        "type": "String"
                    }
                },
                "format": "HotelInformation(city) -> hotelDetails"
            },
            {
                "name": "RestaurantRecommendations",
                "Description": "This API provides restaurant recommendations based on city and dietary restrictions.",
                "input_params": {
                    "city": {
                        "description": "The city where the user wants to find a restaurant",
                        "type": "String"
                    },
                    "dietaryRestrictions": {
                        "description": "The dietary restrictions of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurantChoices": {
                        "description": "List of restaurants in the specified city that match the user's dietary restrictions",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommendations(city, dietaryRestrictions) -> restaurantChoices"
            },
            {
                "name": "TravelItinerary",
                "Description": "This API creates a travel itinerary based on hotel details and restaurant choices.",
                "input_params": {
                    "hotelDetails": {
                        "description": "Details of the selected hotels",
                        "type": "String"
                    },
                    "restaurantChoices": {
                        "description": "List of selected restaurants",
                        "type": "String"
                    }
                },
                "output_params": {
                    "itinerary": {
                        "description": "A travel itinerary based on the provided hotel details and restaurant choices",
                        "type": "String"
                    }
                },
                "format": "TravelItinerary(hotelDetails, restaurantChoices) -> itinerary"
            }
        ],
        "Query": "I'm going on a trip to San Diego and I'm a raw foodist. Could you help me plan my travel itinerary?",
        "Label": "TravelItinerary(hotelDetails=HotelInformation(city='San Diego'), restaurantChoices=RestaurantRecommendations(city='San Diego', dietaryRestrictions='raw food'))",
        "Index": 1483
    },
    {
        "APIs": [
            {
                "name": "WeatherQuery",
                "Description": "This API is to provide the weather in a specific city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date to check the weather",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather of the city on the specific date",
                        "type": "String"
                    }
                },
                "format": "WeatherQuery(city, date) -> weather"
            },
            {
                "name": "RestaurantRecommendation",
                "Description": "This API is to recommend a restaurant based on the city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the city where the user wants to eat",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine type the user prefers",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommendation(city, cuisine) -> restaurant_name"
            },
            {
                "name": "TableBooking",
                "Description": "This API is to book a table at a specific restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "number_of_persons": {
                        "description": "the number of persons for the booking",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the booking time",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "TableBooking(restaurant_name, number_of_persons, date, time)-> booking status."
            }
        ],
        "Query": "Can you provide the weather in New York on 1st January and recommend a Chinese restaurant where I can reserve a table for two at 9 pm?",
        "Label": "TableBooking(restaurant_name=RestaurantRecommendation(city='New York', cuisine='Chinese'), number_of_persons='2', date='1st January', time='9 pm')",
        "Index": 1484
    },
    {
        "APIs": [
            {
                "name": "WeatherInformation",
                "Description": "This API is to provide weather information for a specific city and date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date for which weather information is required",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather_info": {
                        "description": "the weather information for the specified city and date",
                        "type": "String"
                    }
                },
                "format": "WeatherInformation(city, date) -> weather_info"
            },
            {
                "name": "RestaurantRecommendation",
                "Description": "This API is to recommend a restaurant based on the specified city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the name of the city where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine preferred",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommendation(city, cuisine) -> restaurant_name"
            },
            {
                "name": "TableBooking",
                "Description": "This API is to book a table at a restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant where the table is to be booked",
                        "type": "String"
                    },
                    "number_of_persons": {
                        "description": "the number of persons for whom the table is to be booked",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date on which the table is to be booked",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the time at which the table is to be booked",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "TableBooking(restaurant_name, number_of_persons, date, time) -> reservation_status"
            }
        ],
        "Query": "Can you inform me about the weather in London on 15th February and suggest a French restaurant where I can make a reservation for six at 8 pm?",
        "Label": "TableBooking(restaurant_name=RestaurantRecommendation(city='London', cuisine='French'), number_of_persons='6', date='15th February', time='8 pm')",
        "Index": 1485
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to provide the weather forecast of a given city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_condition": {
                        "description": "the forecasted weather condition of the city",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city) -> weather_condition"
            },
            {
                "name": "BestTravelTime",
                "Description": "This API is to provide the best time to visit a given attraction considering the weather condition.",
                "input_params": {
                    "weather_condition": {
                        "description": "the forecasted weather condition of the city",
                        "type": "String"
                    },
                    "attraction": {
                        "description": "the name of the attraction",
                        "type": "String"
                    }
                },
                "output_params": {
                    "best_time": {
                        "description": "the most favourable time to visit the given attraction considering the weather condition",
                        "type": "Time"
                    }
                },
                "format": "BestTravelTime(weather_condition, attraction) -> best_time"
            }
        ],
        "Query": "What is the best time to visit the Sydney Opera House considering the weather conditions?",
        "Label": "BestTravelTime(weather_condition=WeatherForecast(city='Sydney'), attraction='Sydney Opera House')",
        "Index": 1486
    },
    {
        "APIs": [
            {
                "name": "LocateLibrary",
                "Description": "This API is to locate the library in a particular city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city where the library is located",
                        "type": "String"
                    },
                    "book_title": {
                        "description": "the title of the book to be located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "library_location": {
                        "description": "the location of the library",
                        "type": "String"
                    }
                },
                "format": "LocateLibrary(city, book_title) -> library_location"
            },
            {
                "name": "IdentifyBook",
                "Description": "This API is to identify the details of the book by its title.",
                "input_params": {
                    "title": {
                        "description": "the title of the book to be identified",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_details": {
                        "description": "the details of the book",
                        "type": "String"
                    }
                },
                "format": "IdentifyBook(title) -> book_details"
            },
            {
                "name": "ReserveBook",
                "Description": "This API is to reserve a book in a specific library on a specific date.",
                "input_params": {
                    "library_location": {
                        "description": "the location of the library where the book is to be reserved",
                        "type": "String"
                    },
                    "book_details": {
                        "description": "the details of the book to be reserved",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date on which the book is to be reserved",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveBook(library_location, book_details, date) -> reservation_status"
            }
        ],
        "Query": "Can I reserve 'The Great Gatsby' in the Chicago library for next Friday?",
        "Label": "ReserveBook(library_location=LocateLibrary(city='Chicago', book_title='The Great Gatsby'), book_details=IdentifyBook(title='The Great Gatsby'), date='next Friday')",
        "Index": 1487
    },
    {
        "APIs": [
            {
                "name": "FindRestaurant",
                "Description": "This API is to find a restaurant based on city and cuisine type.",
                "input_params": {
                    "city": {
                        "description": "the city where the user wants to find a restaurant",
                        "type": "String"
                    },
                    "cuisine_type": {
                        "description": "the type of cuisine the user prefers",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(city, cuisine_type) -> restaurant_name"
            },
            {
                "name": "ReserveTable",
                "Description": "This API is to reserve a table at a specific restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant where the user wants to reserve a table",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time when the user wants to reserve a table",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the status of the reservation",
                        "type": "String"
                    }
                },
                "format": "ReserveTable(restaurant_name, time) -> reservation_status"
            }
        ],
        "Query": "I am in San Francisco and I'm in mood for sushi. Can you find a Japanese restaurant and secure a table for 7pm?",
        "Label": "ReserveTable(restaurant_name=FindRestaurant(city='San Francisco', cuisine_type='Japanese'), time='7pm')",
        "Index": 1488
    },
    {
        "APIs": [
            {
                "name": "AlbumArtist",
                "Description": "This API is to get the artist of a specific album.",
                "input_params": {
                    "album_name": {
                        "description": "the name of the album",
                        "type": "String"
                    }
                },
                "output_params": {
                    "artist": {
                        "description": "the artist of the album",
                        "type": "String"
                    }
                },
                "format": "AlbumArtist(album_name) -> artist"
            },
            {
                "name": "MusicRecommend",
                "Description": "This API is to recommend a song based on the artist, genre and year.",
                "input_params": {
                    "artist": {
                        "description": "the artist of the song",
                        "type": "String"
                    },
                    "genre": {
                        "description": "the genre of the song",
                        "type": "String"
                    },
                    "year": {
                        "description": "the release year of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song": {
                        "description": "the recommended song",
                        "type": "String"
                    }
                },
                "format": "MusicRecommend(artist, genre, year) -> song"
            }
        ],
        "Query": "Can you suggest a rock song from 2000 by the artist of 'Hybrid Theory' album?",
        "Label": "MusicRecommend(artist=AlbumArtist(album_name='Hybrid Theory'), genre='rock', year='2000')",
        "Index": 1489
    },
    {
        "APIs": [
            {
                "name": "AlbumArtist",
                "Description": "This API is to get the artist of a specific album.",
                "input_params": {
                    "album_name": {
                        "description": "the name of the album",
                        "type": "String"
                    }
                },
                "output_params": {
                    "artist": {
                        "description": "the artist of the album",
                        "type": "String"
                    }
                },
                "format": "AlbumArtist(album_name) -> artist"
            },
            {
                "name": "MusicRecommend",
                "Description": "This API is to recommend a song based on the artist, genre, and year.",
                "input_params": {
                    "artist": {
                        "description": "the artist of the song",
                        "type": "String"
                    },
                    "genre": {
                        "description": "the genre of the song",
                        "type": "String"
                    },
                    "year": {
                        "description": "the release year of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song": {
                        "description": "the recommended song",
                        "type": "String"
                    }
                },
                "format": "MusicRecommend(artist, genre, year) -> song"
            }
        ],
        "Query": "Can you recommend a rap song from 2005 by the artist of 'The College Dropout' album?",
        "Label": "MusicRecommend(artist=AlbumArtist(album_name='The College Dropout'), genre='rap', year='2005')",
        "Index": 1490
    },
    {
        "APIs": [
            {
                "name": "AlbumArtist",
                "Description": "This API is to obtain the artist of a specific album.",
                "input_params": {
                    "album_name": {
                        "description": "the name of the album",
                        "type": "String"
                    }
                },
                "output_params": {
                    "artist": {
                        "description": "the artist of the album",
                        "type": "String"
                    }
                },
                "format": "AlbumArtist(album_name) -> artist"
            },
            {
                "name": "MusicRecommend",
                "Description": "This API is to recommend music based on artist, genre and year.",
                "input_params": {
                    "artist": {
                        "description": "the artist of the song",
                        "type": "String"
                    },
                    "genre": {
                        "description": "the genre of the song",
                        "type": "String"
                    },
                    "year": {
                        "description": "the year of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song": {
                        "description": "the recommended song",
                        "type": "String"
                    }
                },
                "format": "MusicRecommend(artist, genre, year) -> song"
            }
        ],
        "Query": "Can you suggest a country song from 2015 by the artist of 'Fearless' album?",
        "Label": "MusicRecommend(artist=AlbumArtist(album_name='Fearless'), genre='country', year='2015')",
        "Index": 1491
    },
    {
        "APIs": [
            {
                "name": "AlbumArtist",
                "Description": "This API is to get the artist of a specific album.",
                "input_params": {
                    "album_name": {
                        "description": "the name of the album",
                        "type": "String"
                    }
                },
                "output_params": {
                    "artist": {
                        "description": "the artist of the album",
                        "type": "String"
                    }
                },
                "format": "AlbumArtist(album_name) -> artist"
            },
            {
                "name": "MusicRecommend",
                "Description": "This API is to recommend a song according to the artist, genre and year.",
                "input_params": {
                    "artist": {
                        "description": "the artist of the song",
                        "type": "String"
                    },
                    "genre": {
                        "description": "the genre of the song",
                        "type": "String"
                    },
                    "year": {
                        "description": "the year of the song's release",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song": {
                        "description": "the recommended song",
                        "type": "String"
                    }
                },
                "format": "MusicRecommend(artist, genre, year) -> song"
            }
        ],
        "Query": "Can you suggest a jazz song from 1990 by the artist of 'The Lady in Satin' album?",
        "Label": "MusicRecommend(artist=AlbumArtist(album_name='The Lady in Satin'), genre='jazz', year='1990')",
        "Index": 1492
    },
    {
        "APIs": [
            {
                "name": "CalculateCalorie",
                "Description": "This API is to calculate the calorie content of a meal.",
                "input_params": {
                    "food": {
                        "description": "the name of the food",
                        "type": "String"
                    }
                },
                "output_params": {
                    "calorie": {
                        "description": "the calorie content of the food",
                        "type": "Integer"
                    }
                },
                "format": "CalculateCalorie(food) -> calorie"
            },
            {
                "name": "MealSuggestion",
                "Description": "This API is to suggest a meal based on dietary restrictions and calorie intake.",
                "input_params": {
                    "calorie": {
                        "description": "the calorie content of the previous meal",
                        "type": "Integer"
                    },
                    "dietary_restrictions": {
                        "description": "the dietary restrictions of the person",
                        "type": "String"
                    }
                },
                "output_params": {
                    "meal": {
                        "description": "the suggested meal",
                        "type": "String"
                    }
                },
                "format": "MealSuggestion(calorie, dietary_restrictions) -> meal"
            }
        ],
        "Query": "I am lactose intolerant and I had a turkey sandwich for lunch. Can you suggest a dinner for me?",
        "Label": "MealSuggestion(calorie=CalculateCalorie(food='turkey sandwich'), dietary_restrictions='lactose')",
        "Index": 1493
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to fetch the weather forecast for a specific city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the city name to get weather forecast",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date to get weather forecast",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the forecasted weather of the city on the date",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather"
            },
            {
                "name": "RestaurantRecommend",
                "Description": "This API is to recommend a restaurant based on city, cuisine, and weather.",
                "input_params": {
                    "city": {
                        "description": "the city name where the restaurant is located",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine the restaurant serves",
                        "type": "String"
                    },
                    "weather": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommend(city, cuisine, weather) -> restaurant"
            }
        ],
        "Query": "I have a trip from Boston to Tokyo on March 10th. Could you recommend a Japanese restaurant according to the weather that day?",
        "Label": "RestaurantRecommend(city='Tokyo', cuisine='Japanese', weather=WeatherForecast(city='Tokyo', date='March 10th'))",
        "Index": 1494
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is to get the weather forecast of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the weather forecast of the city",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city) -> weather"
            },
            {
                "name": "RestaurantRecommendation",
                "Description": "This API is to recommend a restaurant based on the city and cuisine.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the recommended restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantRecommendation(city, cuisine) -> restaurant"
            }
        ],
        "Query": "I'm thinking of a day trip to London and would like to eat French cuisine, can you assist with the plan?",
        "Label": "TravelPlan(weather=WeatherForecast(city='London'), restaurant=RestaurantRecommendation(city='London', cuisine='French'))",
        "Index": 1495
    },
    {
        "APIs": [
            {
                "name": "BookStoreLocator",
                "Description": "This API is to find the closest bookstore in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the city where the user is currently located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bookstore_address": {
                        "description": "the address of the nearest bookstore",
                        "type": "String"
                    }
                },
                "format": "BookStoreLocator(city) -> bookstore_address"
            },
            {
                "name": "BookRecommender",
                "Description": "This API is to recommend books based on the bookstore location.",
                "input_params": {
                    "bookstore_address": {
                        "description": "the address of the bookstore",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_genre": {
                        "description": "the genre of the books",
                        "type": "String"
                    }
                },
                "format": "BookRecommender(bookstore_address) -> book_genre"
            },
            {
                "name": "BestSeller",
                "Description": "This API is to find the most popular book in a specific genre.",
                "input_params": {
                    "book_genre": {
                        "description": "the genre of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "best_selling_book": {
                        "description": "the most popular book in a specific genre",
                        "type": "String"
                    }
                },
                "format": "BestSeller(book_genre) -> best_selling_book"
            }
        ],
        "Query": "What is the most popular romance book at the closest bookstore in Chicago?",
        "Label": "BestSeller(book_genre=BookRecommender(bookstore_address=BookStoreLocator(city='Chicago')))",
        "Index": 1496
    },
    {
        "APIs": [
            {
                "name": "Username2Id",
                "Description": "This API converts username to user id.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_id": {
                        "description": "the id of the user",
                        "type": "Integer"
                    }
                },
                "format": "Username2Id(username) -> user_id"
            },
            {
                "name": "Id2AllergyList",
                "Description": "This API finds the allergy list of a user based on its Id.",
                "input_params": {
                    "user_id": {
                        "description": "the id of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "allergy_list": {
                        "description": "the list of allergies of the user",
                        "type": "List"
                    }
                },
                "format": "Id2AllergyList(user_id) -> allergy_list"
            },
            {
                "name": "ProductName2Ingredients",
                "Description": "This API finds the ingredients of a product.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ingredients": {
                        "description": "the list of ingredients of the product",
                        "type": "List"
                    }
                },
                "format": "ProductName2Ingredients(product_name) -> ingredients"
            }
        ],
        "Query": "I need to check if the ingredients of the product 'Peanut Butter' are safe for the user 'JohnDoe'.",
        "Label": "If(AllergyList=Id2AllergyList(user_id=Username2Id(username='JohnDoe')), Ingredients=ProductName2Ingredients(product_name='Peanut Butter'), Check=AllergyList\u2229Ingredients, Check=[])",
        "Index": 1497
    },
    {
        "APIs": [
            {
                "name": "Disease2Symptoms",
                "Description": "This API is to convert a disease name to its symptom list.",
                "input_params": {
                    "disease_name": {
                        "description": "the name of the disease",
                        "type": "String"
                    }
                },
                "output_params": {
                    "symptoms_list": {
                        "description": "a list of symptoms related to the disease",
                        "type": "List"
                    }
                },
                "format": "Disease2Symptoms(disease_name) -> symptoms_list"
            },
            {
                "name": "Symptoms2Diagnosis",
                "Description": "This API is to convert a list of symptoms to potential related diseases.",
                "input_params": {
                    "symptoms": {
                        "description": "a list of symptoms",
                        "type": "List"
                    }
                },
                "output_params": {
                    "potential_diseases": {
                        "description": "a list of potential diseases related to the symptoms",
                        "type": "List"
                    }
                },
                "format": "Symptoms2Diagnosis(symptoms) -> potential_diseases"
            },
            {
                "name": "Diagnosis2Treatment",
                "Description": "This API is to convert a disease name to its treatment plan.",
                "input_params": {
                    "disease": {
                        "description": "the name of the disease",
                        "type": "String"
                    }
                },
                "output_params": {
                    "treatment_plan": {
                        "description": "the treatment plan for the disease",
                        "type": "String"
                    }
                },
                "format": "Diagnosis2Treatment(disease) -> treatment_plan"
            }
        ],
        "Query": "What's the treatment plan for the disease that has similar symptoms to flu?",
        "Label": "Diagnosis2Treatment(disease=Symptoms2Diagnosis(symptoms=Disease2Symptoms(disease_name='flu')))",
        "Index": 1498
    },
    {
        "APIs": [
            {
                "name": "FindBook",
                "Description": "This API finds a book based on the genre and author.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the book",
                        "type": "String"
                    },
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bookName": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "format": "FindBook(genre, author) -> bookName"
            },
            {
                "name": "GetReview",
                "Description": "This API gets the review of a book.",
                "input_params": {
                    "bookName": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "review": {
                        "description": "the review of the book",
                        "type": "String"
                    }
                },
                "format": "GetReview(bookName) -> review"
            },
            {
                "name": "BuyBook",
                "Description": "This API is to purchase a specific book.",
                "input_params": {
                    "bookName": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "purchaseStatus": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "BuyBook(bookName) -> purchaseStatus"
            }
        ],
        "Query": "I want to buy a mystery book by Agatha Christie, but I want to see the review first",
        "Label": "BuyBook(bookName=FindBook(genre='mystery', author='Agatha Christie'), review=GetReview(bookName=FindBook(genre='mystery', author='Agatha Christie')))",
        "Index": 1499
    },
    {
        "APIs": [
            {
                "name": "ISBN2BookTitle",
                "Description": "This API is to convert an ISBN to its corresponding book title.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "format": "ISBN2BookTitle(ISBN) -> book_title"
            },
            {
                "name": "BookPrice",
                "Description": "This API is to get the current price of the book.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_price": {
                        "description": "the price of the book",
                        "type": "Float"
                    }
                },
                "format": "BookPrice(book_title) -> book_price"
            },
            {
                "name": "NotifyUser",
                "Description": "This API is to send a notification to the user.",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    },
                    "message": {
                        "description": "the notification message",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Notification status": {
                        "description": "the status of the notification",
                        "type": "String"
                    }
                },
                "format": "NotifyUser(person_ID, message) -> Notification status"
            },
            {
                "name": "Username2ID",
                "Description": "This API is to convert a user's username to user ID.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "Username2ID(username) -> person_ID"
            }
        ],
        "Query": "Could you send a notification to the user with the username 'booklover' about the price of the book with ISBN 978-3-16-148410-0?",
        "Label": "NotifyUser(person_ID=Username2ID(username='booklover'), message=BookPrice(book_title=ISBN2BookTitle(ISBN='978-3-16-148410-0')))",
        "Index": 1500
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API returns the weather status for a specific date and city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the weather status",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city, date) -> weather_status"
            },
            {
                "name": "ReserveHotel",
                "Description": "This API allows the user to reserve a hotel in a certain city considering the weather status on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "Date"
                    },
                    "weather_status": {
                        "description": "the weather status",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the reservation status",
                        "type": "String"
                    }
                },
                "format": "ReserveHotel(city, date, weather_status) -> reservation_status"
            },
            {
                "name": "PlanTrip",
                "Description": "This API assists the user in planning a trip to a specific city on a given date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "trip_plan": {
                        "description": "the trip plan",
                        "type": "String"
                    }
                },
                "format": "PlanTrip(city, date) -> trip_plan"
            }
        ],
        "Query": "Can you help me to plan a trip to Paris on the 1st of January and also book a hotel considering the weather?",
        "Label": "PlanTrip(city='Paris', date='1st of January', ReserveHotel(city='Paris', date='1st of January', weather_status=GetWeather(city='Paris', date='1st of January')))",
        "Index": 1501
    },
    {
        "APIs": [
            {
                "name": "FlightSearch",
                "Description": "This API searches for a flight based on the departure location, arrival location, and date of travel.",
                "input_params": {
                    "departure": {
                        "description": "the departure location",
                        "type": "String"
                    },
                    "arrival": {
                        "description": "the arrival location",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of travel",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight": {
                        "description": "the flight details",
                        "type": "Object"
                    }
                },
                "format": "FlightSearch(departure, arrival, date) -> flight"
            },
            {
                "name": "HotelSearch",
                "Description": "This API searches for a hotel in a specific city between check-in and check-out dates.",
                "input_params": {
                    "city": {
                        "description": "the city to search for a hotel",
                        "type": "String"
                    },
                    "check_in": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "check_out": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotel": {
                        "description": "the hotel details",
                        "type": "Object"
                    }
                },
                "format": "HotelSearch(city, check_in, check_out) -> hotel"
            },
            {
                "name": "RestaurantRecommend",
                "Description": "This API recommends a restaurant in a specific city, cuisine type, and date.",
                "input_params": {
                    "city": {
                        "description": "the city to recommend a restaurant",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine type",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the recommended restaurant details",
                        "type": "Object"
                    }
                },
                "format": "RestaurantRecommend(city, cuisine, date) -> restaurant"
            }
        ],
        "Query": "Can you book me a flight from Los Angeles to London on 1st Jan, find me a hotel from 1st Jan to 7th Jan, and recommend an Italian restaurant on 2nd Jan?",
        "Label": "RestaurantRecommend(city=HotelSearch(city=FlightSearch(departure='Los Angeles', arrival='London', date='1st Jan'), check_in='1st Jan', check_out='7th Jan'), cuisine='Italian', date='2nd Jan')",
        "Index": 1502
    },
    {
        "APIs": [
            {
                "name": "GetCountryCurrency",
                "Description": "This API provides the official currency of a specific country.",
                "input_params": {
                    "country": {
                        "description": "the name of the country",
                        "type": "String"
                    }
                },
                "output_params": {
                    "currency": {
                        "description": "the official currency of the country",
                        "type": "String"
                    }
                },
                "format": "GetCountryCurrency(country) -> currency"
            },
            {
                "name": "CurrencyConverter",
                "Description": "This API provides a conversion tool from one currency to another.",
                "input_params": {
                    "base_currency": {
                        "description": "the base currency to convert from",
                        "type": "String"
                    },
                    "target_currency": {
                        "description": "the target currency to convert to",
                        "type": "String"
                    },
                    "amount": {
                        "description": "the amount to convert",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "converted_amount": {
                        "description": "the converted amount in the target currency",
                        "type": "Float"
                    }
                },
                "format": "CurrencyConverter(base_currency, target_currency, amount) -> converted_amount"
            },
            {
                "name": "CountryBudgetPlanner",
                "Description": "This API helps to generate a budget plan for a country based on the provided budget in the country's currency.",
                "input_params": {
                    "country": {
                        "description": "the name of the country",
                        "type": "String"
                    },
                    "budget": {
                        "description": "the budget for the trip",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "plan": {
                        "description": "the budget plan for the trip",
                        "type": "String"
                    }
                },
                "format": "CountryBudgetPlanner(country, budget) -> plan"
            }
        ],
        "Query": "Can you help me plan a budget for my trip to Japan if I have $5000?",
        "Label": "CountryBudgetPlanner(country='Japan', budget=CurrencyConverter(base_currency='USD', target_currency=GetCountryCurrency(country='Japan'), amount=5000))",
        "Index": 1503
    },
    {
        "APIs": [
            {
                "name": "RestaurantDetail",
                "Description": "This API is to query the restaurant information of a specific cuisine type in a city.",
                "input_params": {
                    "city_name": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "cuisine_type": {
                        "description": "the type of cuisine",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_list": {
                        "description": "a list of restaurants",
                        "type": "List"
                    }
                },
                "format": "RestaurantDetail(city_name, cuisine_type) -> restaurant_list"
            },
            {
                "name": "MealPlan",
                "Description": "This API provides a meal plan based on the restaurant list and user preferences.",
                "input_params": {
                    "restaurant_list": {
                        "description": "a list of restaurants",
                        "type": "List"
                    },
                    "preferences": {
                        "description": "user preferences",
                        "type": "String"
                    }
                },
                "output_params": {
                    "meal_plan": {
                        "description": "a meal plan",
                        "type": "List"
                    }
                },
                "format": "MealPlan(restaurant_list, preferences) -> meal_plan"
            },
            {
                "name": "BookingMake",
                "Description": "This API makes a booking based on the meal plan and the preferred date and time.",
                "input_params": {
                    "meal_plan": {
                        "description": "a meal plan",
                        "type": "List"
                    },
                    "date_time": {
                        "description": "preferred date and time",
                        "type": "DateTime"
                    }
                },
                "output_params": {
                    "booking_confirmation": {
                        "description": "booking confirmation",
                        "type": "String"
                    }
                },
                "format": "BookingMake(meal_plan, date_time) -> booking_confirmation"
            }
        ],
        "Query": "I am craving Italian food in New York City. Can you make a meal plan for me next weekend?",
        "Label": "BookingMake(meal_plan=MealPlan(restaurant_list=RestaurantDetail(city_name='New York City', cuisine_type='Italian'), preferences='user preferences'), date_time='next weekend')",
        "Index": 1504
    },
    {
        "APIs": [
            {
                "name": "BookDetails",
                "Description": "This API returns information about a certain book.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bookInformation": {
                        "description": "information about the book",
                        "type": "String"
                    }
                },
                "format": "BookDetails(title) -> bookInformation"
            },
            {
                "name": "AuthorInformation",
                "Description": "This API provides information about a certain author.",
                "input_params": {
                    "authorName": {
                        "description": "the name of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "authorBio": {
                        "description": "biography of the author",
                        "type": "String"
                    }
                },
                "format": "AuthorInformation(authorName) -> authorBio"
            },
            {
                "name": "BookReviewRating",
                "Description": "This API generates a review and rating based on the book's information and author's bio.",
                "input_params": {
                    "bookInformation": {
                        "description": "information about the book",
                        "type": "String"
                    },
                    "authorBio": {
                        "description": "biography of the author",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reviewRating": {
                        "description": "review and rating of the book",
                        "type": "String"
                    }
                },
                "format": "BookReviewRating(bookInformation, authorBio) -> reviewRating"
            }
        ],
        "Query": "Could you give me a review and rating of the book 'The Catcher in the Rye'?",
        "Label": "BookReviewRating(bookInformation=BookDetails(title='The Catcher in the Rye'), authorBio=AuthorInformation(authorName=BookDetails(title='The Catcher in the Rye')))",
        "Index": 1505
    },
    {
        "APIs": [
            {
                "name": "MovieInfo",
                "Description": "This API retrieves detailed information about a movie.",
                "input_params": {
                    "title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movieDetails": {
                        "description": "detailed information about the movie",
                        "type": "Object"
                    }
                },
                "format": "MovieInfo(title) -> movieDetails"
            },
            {
                "name": "CinemaShowtimes",
                "Description": "This API retrieves the showtimes of a movie in a specific cinema.",
                "input_params": {
                    "cinema": {
                        "description": "the name of the cinema",
                        "type": "String"
                    },
                    "movieDetails": {
                        "description": "detailed information about the movie",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "showtimes": {
                        "description": "the showtimes of the movie in the cinema",
                        "type": "List"
                    }
                },
                "format": "CinemaShowtimes(cinema, movieDetails) -> showtimes"
            },
            {
                "name": "TicketAvailability",
                "Description": "This API checks the availability of tickets for a showtime in a cinema.",
                "input_params": {
                    "cinema": {
                        "description": "the name of the cinema",
                        "type": "String"
                    },
                    "showtimes": {
                        "description": "the showtimes of the movie in the cinema",
                        "type": "List"
                    }
                },
                "output_params": {
                    "ticketStatus": {
                        "description": "the availability status of tickets",
                        "type": "String"
                    }
                },
                "format": "TicketAvailability(cinema, showtimes) -> ticketStatus"
            }
        ],
        "Query": "Can I watch 'The Lord of the Rings' at the IMAX cinema tonight?",
        "Label": "TicketAvailability(cinema='IMAX', showtimes=CinemaShowtimes(cinema='IMAX', movieDetails=MovieInfo(title='The Lord of the Rings')))",
        "Index": 1506
    },
    {
        "APIs": [
            {
                "name": "HotelFinder",
                "Description": "This API finds all hotels in a particular city with the specified star rating.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "star_rating": {
                        "description": "the star rating of the hotel",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    }
                },
                "format": "HotelFinder(city, star_rating) -> hotel_name"
            },
            {
                "name": "RoomBooking",
                "Description": "This API books the specified number of rooms in the given hotel for the duration of stay.",
                "input_params": {
                    "hotel_name": {
                        "description": "the name of the hotel",
                        "type": "String"
                    },
                    "number_of_rooms": {
                        "description": "the number of rooms to book",
                        "type": "Integer"
                    },
                    "check_in_date": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "check_out_date": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_confirmation": {
                        "description": "the booking confirmation",
                        "type": "String"
                    }
                },
                "format": "RoomBooking(hotel_name, number_of_rooms, check_in_date, check_out_date) -> booking_confirmation"
            },
            {
                "name": "FlightBooking",
                "Description": "This API books a flight from the origin to the destination for the given dates.",
                "input_params": {
                    "origin": {
                        "description": "the origin of the flight",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination of the flight",
                        "type": "String"
                    },
                    "departure_date": {
                        "description": "the departure date",
                        "type": "Date"
                    },
                    "return_date": {
                        "description": "the return date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight_details": {
                        "description": "the details of the flight",
                        "type": "String"
                    }
                },
                "format": "FlightBooking(origin, destination, departure_date, return_date) -> flight_details"
            }
        ],
        "Query": "Book a 5-star hotel in Paris for 3 nights starting from 10th June and return flight tickets from London to Paris.",
        "Label": "FlightBooking(origin='London', destination='Paris', departure_date='10th June', return_date=RoomBooking(hotel_name=HotelFinder(city='Paris', star_rating=5), number_of_rooms=1, check_in_date='10th June', check_out_date='13th June'))",
        "Index": 1507
    },
    {
        "APIs": [
            {
                "name": "RestaurantSearch",
                "Description": "This API is to retrieve the name of a popular restaurant in a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location where the restaurant is located",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantSearch(location) -> restaurant_name"
            },
            {
                "name": "RestaurantReview",
                "Description": "This API is to provide the recent reviews of a specific restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "review_report": {
                        "description": "the recent reviews of the restaurant",
                        "type": "String"
                    }
                },
                "format": "RestaurantReview(restaurant_name) -> review_report"
            },
            {
                "name": "CuisineRecommendations",
                "Description": "This API provides cuisine recommendations based on the reviews and the dietary preferences of the user.",
                "input_params": {
                    "review_report": {
                        "description": "the recent reviews of the restaurant",
                        "type": "String"
                    },
                    "dietary_preferences": {
                        "description": "the dietary preferences of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cuisine": {
                        "description": "the recommended cuisine",
                        "type": "String"
                    }
                },
                "format": "CuisineRecommendations(review_report, dietary_preferences) -> cuisine"
            }
        ],
        "Query": "What meal should I try at the popular restaurant in New York? I prefer vegetarian dishes.",
        "Label": "CuisineRecommendations(review_report=RestaurantReview(restaurant_name=RestaurantSearch(location='New York')), dietary_preferences='vegetarian')",
        "Index": 1508
    },
    {
        "APIs": [
            {
                "name": "GetRestaurant",
                "Description": "This API is to get restaurant details given the city and type of food.",
                "input_params": {
                    "city": {
                        "description": "the city where the restaurant is located",
                        "type": "String"
                    },
                    "type_of_food": {
                        "description": "the type of food the user wants",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_details": {
                        "description": "the details of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "GetRestaurant(city, type_of_food) -> restaurant_details"
            },
            {
                "name": "BookTable",
                "Description": "This API is to book a table of a specified number of people at a particular time in a specific restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "number_of_people": {
                        "description": "the number of people for the table booking",
                        "type": "Integer"
                    },
                    "time": {
                        "description": "the time for the table booking",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "booking_confirmation": {
                        "description": "the confirmation of the table booking",
                        "type": "String"
                    }
                },
                "format": "BookTable(restaurant_name, number_of_people, time) -> booking_confirmation"
            },
            {
                "name": "GetDirections",
                "Description": "This API is to get directions from a start location to an end location.",
                "input_params": {
                    "start_location": {
                        "description": "the starting location",
                        "type": "String"
                    },
                    "end_location": {
                        "description": "the ending location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "directions": {
                        "description": "the directions from start location to end location",
                        "type": "Object"
                    }
                },
                "format": "GetDirections(start_location, end_location) -> directions"
            }
        ],
        "Query": "I would like to have Italian food for dinner for 3 in New York city at 8 pm, and could you please show me the way from Manhattan?",
        "Label": "GetDirections(start_location='Manhattan', end_location=BookTable(restaurant_name=GetRestaurant(city='New York', type_of_food='Italian'), number_of_people=3, time='8 pm'))",
        "Index": 1509
    },
    {
        "APIs": [
            {
                "name": "CreateInvoice",
                "Description": "This API is to create an invoice based on the customer ID, product ID and the quantity purchased.",
                "input_params": {
                    "customer_id": {
                        "description": "the ID of the customer",
                        "type": "String"
                    },
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "String"
                    },
                    "quantity": {
                        "description": "the quantity purchased",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "invoice": {
                        "description": "the created invoice",
                        "type": "Object"
                    }
                },
                "format": "CreateInvoice(customer_id, product_id, quantity) -> invoice"
            },
            {
                "name": "CalculateTotal",
                "Description": "This API is to calculate the total cost of the items in the invoice.",
                "input_params": {
                    "invoice": {
                        "description": "the invoice object",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "total_cost": {
                        "description": "the total cost of the items in the invoice",
                        "type": "Float"
                    }
                },
                "format": "CalculateTotal(invoice) -> total_cost"
            },
            {
                "name": "SendEmail",
                "Description": "This API is to send emails with a specific subject and body to the recipient's email.",
                "input_params": {
                    "recipient_email": {
                        "description": "the email address of the recipient",
                        "type": "String"
                    },
                    "subject": {
                        "description": "the subject of the email",
                        "type": "String"
                    },
                    "body": {
                        "description": "the body of the email",
                        "type": "String"
                    }
                },
                "output_params": {
                    "email_status": {
                        "description": "the status of the email sending",
                        "type": "String"
                    }
                },
                "format": "SendEmail(recipient_email, subject, body) -> email_status"
            }
        ],
        "Query": "I want to create an invoice for customer 'cust567' who purchased 10 units of product 'prod890', calculate the total, and then send an email with the invoice details to 'cust567@gmail.com'.",
        "Label": "SendEmail(recipient_email='cust567@gmail.com', subject='Your Invoice', body=CalculateTotal(CreateInvoice(customer_id='cust567', product_id='prod890', quantity=10)))",
        "Index": 1510
    },
    {
        "APIs": [
            {
                "name": "Username2Id",
                "Description": "This API converts username to user id.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_id": {
                        "description": "the id of the user",
                        "type": "Integer"
                    }
                },
                "format": "Username2Id(username) -> user_id"
            },
            {
                "name": "Id2AllergyList",
                "Description": "This API finds the allergy list of a user based on its Id.",
                "input_params": {
                    "user_id": {
                        "description": "the id of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "allergy_list": {
                        "description": "the list of allergies of the user",
                        "type": "List"
                    }
                },
                "format": "Id2AllergyList(user_id) -> allergy_list"
            },
            {
                "name": "ProductName2Ingredients",
                "Description": "This API finds the ingredients of a product.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ingredients": {
                        "description": "the list of ingredients of the product",
                        "type": "List"
                    }
                },
                "format": "ProductName2Ingredients(product_name) -> ingredients"
            }
        ],
        "Query": "I need to check if the ingredients of the product 'Peanut Butter' are safe for the user 'JohnDoe'.",
        "Label": "If(AllergyList=Id2AllergyList(user_id=Username2Id(username='JohnDoe')), Ingredients=ProductName2Ingredients(product_name='Peanut Butter'), Check=AllergyList\u2229Ingredients, Check=[])",
        "Index": 1511
    },
    {
        "APIs": [
            {
                "name": "Disease2Symptoms",
                "Description": "This API is to convert a disease name to its symptom list.",
                "input_params": {
                    "disease_name": {
                        "description": "the name of the disease",
                        "type": "String"
                    }
                },
                "output_params": {
                    "symptoms_list": {
                        "description": "a list of symptoms related to the disease",
                        "type": "List"
                    }
                },
                "format": "Disease2Symptoms(disease_name) -> symptoms_list"
            },
            {
                "name": "Symptoms2Diagnosis",
                "Description": "This API is to convert a list of symptoms to potential related diseases.",
                "input_params": {
                    "symptoms": {
                        "description": "a list of symptoms",
                        "type": "List"
                    }
                },
                "output_params": {
                    "potential_diseases": {
                        "description": "a list of potential diseases related to the symptoms",
                        "type": "List"
                    }
                },
                "format": "Symptoms2Diagnosis(symptoms) -> potential_diseases"
            },
            {
                "name": "Diagnosis2Treatment",
                "Description": "This API is to convert a disease name to its treatment plan.",
                "input_params": {
                    "disease": {
                        "description": "the name of the disease",
                        "type": "String"
                    }
                },
                "output_params": {
                    "treatment_plan": {
                        "description": "the treatment plan for the disease",
                        "type": "String"
                    }
                },
                "format": "Diagnosis2Treatment(disease) -> treatment_plan"
            }
        ],
        "Query": "What's the treatment plan for the disease that has similar symptoms to flu?",
        "Label": "Diagnosis2Treatment(disease=Symptoms2Diagnosis(symptoms=Disease2Symptoms(disease_name='flu')))",
        "Index": 1512
    },
    {
        "APIs": [
            {
                "name": "UserNameToId",
                "Description": "This API is to convert user name to its Id.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "User_Id": {
                        "description": "the Id of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserNameToId(user_name) -> User_Id"
            },
            {
                "name": "UserShoppingHistory",
                "Description": "API to get the shopping history of a user.",
                "input_params": {
                    "user_id": {
                        "description": "the Id of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "shopping_history": {
                        "description": "the shopping history of the user",
                        "type": "List"
                    }
                },
                "format": "UserShoppingHistory(user_id) -> shopping_history"
            },
            {
                "name": "ProductPriceHistory",
                "Description": "API to get the price history of a product.",
                "input_params": {
                    "product_id": {
                        "description": "the Id of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "price_history": {
                        "description": "the price history of the product",
                        "type": "List"
                    }
                },
                "format": "ProductPriceHistory(product_id) -> price_history"
            }
        ],
        "Query": "Can you tell me how much I paid for the book 'The Great Gatsby' when I bought it last year?",
        "Label": "ProductPriceHistory(product_id=UserShoppingHistory(user_id=UserNameToId(user_name='John'))['The Great Gatsby'])",
        "Index": 1513
    },
    {
        "APIs": [
            {
                "name": "User2Age",
                "Description": "This API generates the age of a specific user through its user name.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_age": {
                        "description": "the age of the user",
                        "type": "Integer"
                    }
                },
                "format": "User2Age(user_name) -> user_age"
            },
            {
                "name": "BuyAlcohol",
                "Description": "This API allows the user to purchase alcohol if their age is over the legal limit.",
                "input_params": {
                    "user_age": {
                        "description": "the age of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "BuyAlcohol(user_age) -> purchase_status"
            },
            {
                "name": "RecommendDrink",
                "Description": "This API suggests a type of drink according to user preference.",
                "input_params": {
                    "user_preference": {
                        "description": "the preference of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "drink": {
                        "description": "the suggested drink",
                        "type": "String"
                    }
                },
                "format": "RecommendDrink(user_preference) -> drink"
            },
            {
                "name": "UserPreference",
                "Description": "This API will provide the preferred type of drink of the specified user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_preference": {
                        "description": "the preferred type of drink",
                        "type": "String"
                    }
                },
                "format": "UserPreference(user_name) -> user_preference"
            }
        ],
        "Query": "I'm Jennifer, I want to buy a drink that I will like",
        "Label": "BuyAlcohol(user_age=User2Age(user_name='Jennifer'), drink=RecommendDrink(user_preference=UserPreference(user_name='Jennifer')))",
        "Index": 1514
    },
    {
        "APIs": [
            {
                "name": "FindNearbyRestaurant",
                "Description": "This API finds a nearby restaurant based on the user's current location.",
                "input_params": {
                    "user_location": {
                        "description": "the current location of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the nearby restaurant",
                        "type": "String"
                    }
                },
                "format": "FindNearbyRestaurant(user_location) -> restaurant"
            },
            {
                "name": "GetUserDietaryRestrictions",
                "Description": "This API returns the user's dietary restrictions.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restrictions": {
                        "description": "the dietary restrictions of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserDietaryRestrictions(user_name) -> restrictions"
            },
            {
                "name": "FilterRestaurantByDietaryRestrictions",
                "Description": "This API filters the restaurant options based on dietary restrictions.",
                "input_params": {
                    "restaurant": {
                        "description": "the nearby restaurant",
                        "type": "String"
                    },
                    "restrictions": {
                        "description": "the dietary restrictions of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "filtered_restaurant": {
                        "description": "the filtered restaurant options",
                        "type": "String"
                    }
                },
                "format": "FilterRestaurantByDietaryRestrictions(restaurant, restrictions) -> filtered_restaurant"
            }
        ],
        "Query": "I'm Tom, can you find a nearby restaurant that fits my dietary restrictions?",
        "Label": "FilterRestaurantByDietaryRestrictions(restaurant=FindNearbyRestaurant(user_location=GetUserGeolocation(user_name='Tom')), restrictions=GetUserDietaryRestrictions(user_name='Tom'))",
        "Index": 1515
    },
    {
        "APIs": [
            {
                "name": "GetUserNextMeeting",
                "Description": "This API returns the next scheduled meeting of a user.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "next_meeting": {
                        "description": "the next scheduled meeting",
                        "type": "Time"
                    }
                },
                "format": "GetUserNextMeeting(user_name) -> next_meeting"
            },
            {
                "name": "Meeting2TimeZone",
                "Description": "This API converts a meeting to the timezone where it will be held.",
                "input_params": {
                    "meeting": {
                        "description": "the meeting to be converted",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "timezone": {
                        "description": "the timezone where the meeting will be held",
                        "type": "String"
                    }
                },
                "format": "Meeting2TimeZone(meeting) -> timezone"
            },
            {
                "name": "ConvertTime",
                "Description": "This API converts a specific time from the source timezone to the target timezone.",
                "input_params": {
                    "time": {
                        "description": "the specific time to be converted",
                        "type": "Time"
                    },
                    "source_timezone": {
                        "description": "the source timezone of the time",
                        "type": "String"
                    },
                    "target_timezone": {
                        "description": "the target timezone to convert the time to",
                        "type": "String"
                    }
                },
                "output_params": {
                    "converted_time": {
                        "description": "the converted time in the target timezone",
                        "type": "Time"
                    }
                },
                "format": "ConvertTime(time, source_timezone, target_timezone) -> converted_time"
            }
        ],
        "Query": "I'm Bob, can you tell me what time my next meeting is in my current timezone?",
        "Label": "ConvertTime(time=GetUserNextMeeting(user_name='Bob'), source_timezone=Meeting2TimeZone(meeting=GetUserNextMeeting(user_name='Bob')), target_timezone=GetUserGeolocation(user_name='Bob'))",
        "Index": 1516
    },
    {
        "APIs": [
            {
                "name": "FindBook",
                "Description": "This API finds a book based on the genre and author.",
                "input_params": {
                    "genre": {
                        "description": "the genre of the book",
                        "type": "String"
                    },
                    "author": {
                        "description": "the author of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bookName": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "format": "FindBook(genre, author) -> bookName"
            },
            {
                "name": "GetReview",
                "Description": "This API gets the review of a book.",
                "input_params": {
                    "bookName": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "review": {
                        "description": "the review of the book",
                        "type": "String"
                    }
                },
                "format": "GetReview(bookName) -> review"
            },
            {
                "name": "BuyBook",
                "Description": "This API is to purchase a specific book.",
                "input_params": {
                    "bookName": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "purchaseStatus": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "BuyBook(bookName) -> purchaseStatus"
            }
        ],
        "Query": "I want to buy a mystery book by Agatha Christie, but I want to see the review first",
        "Label": "BuyBook(bookName=FindBook(genre='mystery', author='Agatha Christie'), review=GetReview(bookName=FindBook(genre='mystery', author='Agatha Christie')))",
        "Index": 1517
    },
    {
        "APIs": [
            {
                "name": "UserName2ID",
                "Description": "This API is to convert a user's name to user ID.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(userName) -> user_ID"
            },
            {
                "name": "BookName2ISBN",
                "Description": "This API is to convert a book name to its ISBN.",
                "input_params": {
                    "book_name": {
                        "description": "the name of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "format": "BookName2ISBN(book_name) -> ISBN"
            },
            {
                "name": "AvailabilityCheck",
                "Description": "This API checks the availability of a book using its ISBN.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "availability_status": {
                        "description": "the availability status of the book",
                        "type": "String"
                    }
                },
                "format": "AvailabilityCheck(ISBN) -> availability_status"
            },
            {
                "name": "NotifyUser",
                "Description": "This API is to send a notification to the user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "message": {
                        "description": "the notification message",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Notification status": {
                        "description": "the status of the notification",
                        "type": "String"
                    }
                },
                "format": "NotifyUser(user_ID, message) -> Notification status"
            }
        ],
        "Query": "Please check if \"The Alchemist\" is available in the library and notify John via his username 'johnuser'.",
        "Label": "NotifyUser(user_ID=UserName2ID(userName='johnuser'), message=AvailabilityCheck(ISBN=BookName2ISBN(book_name='The Alchemist')))",
        "Index": 1518
    },
    {
        "APIs": [
            {
                "name": "ISBN2BookTitle",
                "Description": "This API is to convert an ISBN to its corresponding book title.",
                "input_params": {
                    "ISBN": {
                        "description": "the ISBN of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "format": "ISBN2BookTitle(ISBN) -> book_title"
            },
            {
                "name": "BookPrice",
                "Description": "This API is to get the current price of the book.",
                "input_params": {
                    "book_title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "book_price": {
                        "description": "the price of the book",
                        "type": "Float"
                    }
                },
                "format": "BookPrice(book_title) -> book_price"
            },
            {
                "name": "NotifyUser",
                "Description": "This API is to send a notification to the user.",
                "input_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    },
                    "message": {
                        "description": "the notification message",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Notification status": {
                        "description": "the status of the notification",
                        "type": "String"
                    }
                },
                "format": "NotifyUser(person_ID, message) -> Notification status"
            },
            {
                "name": "Username2ID",
                "Description": "This API is to convert a user's username to user ID.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "person_ID": {
                        "description": "the ID of the person",
                        "type": "Integer"
                    }
                },
                "format": "Username2ID(username) -> person_ID"
            }
        ],
        "Query": "Could you send a notification to the user with the username 'booklover' about the price of the book with ISBN 978-3-16-148410-0?",
        "Label": "NotifyUser(person_ID=Username2ID(username='booklover'), message=BookPrice(book_title=ISBN2BookTitle(ISBN='978-3-16-148410-0')))",
        "Index": 1519
    },
    {
        "APIs": [
            {
                "name": "GetUserLocationByUsername",
                "Description": "This API is used to get a user's location based on their username.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_location": {
                        "description": "the location of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserLocationByUsername(username) -> user_location"
            },
            {
                "name": "GetTimeZoneByLocation",
                "Description": "This API is used to determine the timezone based on a given location.",
                "input_params": {
                    "location": {
                        "description": "the location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "timezone": {
                        "description": "the timezone",
                        "type": "String"
                    }
                },
                "format": "GetTimeZoneByLocation(location) -> timezone"
            },
            {
                "name": "ConvertTime",
                "Description": "This API converts given start and end time into the desired timezone.",
                "input_params": {
                    "start_time": {
                        "description": "the start time",
                        "type": "Time"
                    },
                    "end_time": {
                        "description": "the end time",
                        "type": "Time"
                    },
                    "timezone": {
                        "description": "the desired timezone",
                        "type": "String"
                    }
                },
                "output_params": {
                    "converted_time": {
                        "description": "the converted start and end time",
                        "type": "Time"
                    }
                },
                "format": "ConvertTime(start_time, end_time, timezone) -> converted_time"
            },
            {
                "name": "ScheduleMeeting",
                "Description": "This API schedules a meeting.",
                "input_params": {
                    "user_email": {
                        "description": "the email of the user",
                        "type": "String"
                    },
                    "start_time": {
                        "description": "the start time of the meeting",
                        "type": "Time"
                    },
                    "end_time": {
                        "description": "the end time of the meeting",
                        "type": "Time"
                    },
                    "timezone": {
                        "description": "the timezone of the meeting",
                        "type": "String"
                    }
                },
                "output_params": {
                    "meeting_status": {
                        "description": "the status of the meeting",
                        "type": "String"
                    }
                },
                "format": "ScheduleMeeting(user_email, start_time, end_time, timezone) -> meeting_status"
            }
        ],
        "Query": "Can you schedule a meeting for user 'alice' from 2 pm to 3 pm PST?",
        "Label": "ScheduleMeeting(user_email=UserName2Email(username='alice'), start_time='2 pm', end_time='3 pm', timezone=GetTimeZoneByLocation(location=GetUserLocationByUsername(username='alice')))",
        "Index": 1520
    },
    {
        "APIs": [
            {
                "name": "Product2ID",
                "Description": "This API is used to convert a product name to its ID.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "format": "Product2ID(product_name) -> product_id"
            },
            {
                "name": "GetPriceByID",
                "Description": "This API retrieves the price for a product by its ID.",
                "input_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "product_price": {
                        "description": "the price of the product",
                        "type": "Float"
                    }
                },
                "format": "GetPriceByID(product_id) -> product_price"
            },
            {
                "name": "GetDiscount",
                "Description": "This API gives the discounted price of the product after applying a coupon code.",
                "input_params": {
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "coupon_code": {
                        "description": "the coupon code",
                        "type": "String"
                    }
                },
                "output_params": {
                    "discount_price": {
                        "description": "the discounted price of the product",
                        "type": "Float"
                    }
                },
                "format": "GetDiscount(product_id, coupon_code) -> discount_price"
            },
            {
                "name": "PurchaseProduct",
                "Description": "This API is used to purchase a product.",
                "input_params": {
                    "user_email": {
                        "description": "the email of the user",
                        "type": "String"
                    },
                    "product_id": {
                        "description": "the ID of the product",
                        "type": "Integer"
                    },
                    "product_price": {
                        "description": "the price of the product",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "purchase_status": {
                        "description": "the status of the purchase",
                        "type": "String"
                    }
                },
                "format": "PurchaseProduct(user_email, product_id, product_price) -> purchase_status"
            }
        ],
        "Query": "Can you buy the 'iPhone 12' for user 'bob' using the coupon code 'SALE20'?",
        "Label": "PurchaseProduct(user_email=UserName2Email(username='bob'), product_id=Product2ID(product_name='iPhone 12'), product_price=GetDiscount(product_id=Product2ID(product_name='iPhone 12'), coupon_code='SALE20'))",
        "Index": 1521
    },
    {
        "APIs": [
            {
                "name": "FindRestaurantByName",
                "Description": "This API returns the id of a restaurant by its name.",
                "input_params": {
                    "name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_ID": {
                        "description": "the id of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "FindRestaurantByName(name) -> restaurant_ID"
            },
            {
                "name": "GetMenu",
                "Description": "This API returns the menu of a restaurant.",
                "input_params": {
                    "restaurant_ID": {
                        "description": "the id of the restaurant",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "List"
                    }
                },
                "format": "GetMenu(restaurant_ID) -> menu"
            },
            {
                "name": "PlaceOrder",
                "Description": "This API places an order for a specific item from the menu.",
                "input_params": {
                    "name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    },
                    "menu_item": {
                        "description": "the item from the menu",
                        "type": "String"
                    }
                },
                "output_params": {
                    "order_status": {
                        "description": "the status of the order",
                        "type": "String"
                    }
                },
                "format": "PlaceOrder(name, menu_item) -> order_status"
            }
        ],
        "Query": "Can you order a Vegan Burger from McDonald's?",
        "Label": "PlaceOrder(name='McDonald's', menu_item=GetMenu(restaurant_ID=FindRestaurantByName(name='McDonald's'))['Vegan Burger'])",
        "Index": 1522
    },
    {
        "APIs": [
            {
                "name": "FindProductId",
                "Description": "This API returns the id of a product.",
                "input_params": {
                    "product_name": {
                        "description": "the name of the product",
                        "type": "String"
                    }
                },
                "output_params": {
                    "product_id": {
                        "description": "the id of the product",
                        "type": "Integer"
                    }
                },
                "format": "FindProductId(product_name) -> product_id"
            },
            {
                "name": "GetCustomerID",
                "Description": "This API returns the id of a customer.",
                "input_params": {
                    "name": {
                        "description": "the name of the customer",
                        "type": "String"
                    }
                },
                "output_params": {
                    "customer_ID": {
                        "description": "the id of the customer",
                        "type": "Integer"
                    }
                },
                "format": "GetCustomerID(name) -> customer_ID"
            },
            {
                "name": "AddToCart",
                "Description": "This API adds a product to a customer's cart.",
                "input_params": {
                    "customer_ID": {
                        "description": "the id of the customer",
                        "type": "Integer"
                    },
                    "product_id": {
                        "description": "the id of the product",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "cart_status": {
                        "description": "the status of the cart",
                        "type": "String"
                    }
                },
                "format": "AddToCart(customer_ID, product_id) -> cart_status"
            },
            {
                "name": "CheckOutCart",
                "Description": "This API checks out a customer's cart.",
                "input_params": {
                    "customer_ID": {
                        "description": "the id of the customer",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "checkout_status": {
                        "description": "the status of the checkout",
                        "type": "String"
                    }
                },
                "format": "CheckOutCart(customer_ID) -> checkout_status"
            }
        ],
        "Query": "Can you add the iPhone 12 to John's cart and check it out?",
        "Label": "CheckOutCart(customer_ID=GetCustomerID(name='John'), AddToCart(customer_ID=GetCustomerID(name='John'), product_id=FindProductId(product_name='iPhone 12')))",
        "Index": 1523
    },
    {
        "APIs": [
            {
                "name": "FindHotel",
                "Description": "This API returns the ID of a hotel in a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    }
                },
                "format": "FindHotel(city) -> hotel_ID"
            },
            {
                "name": "GetRoomType",
                "Description": "This API returns the ID of a specific room type in a particular hotel.",
                "input_params": {
                    "hotel_ID": {
                        "description": "the ID of the hotel",
                        "type": "Integer"
                    },
                    "room_type": {
                        "description": "the type of the room",
                        "type": "String"
                    }
                },
                "output_params": {
                    "room_ID": {
                        "description": "the ID of the room",
                        "type": "Integer"
                    }
                },
                "format": "GetRoomType(hotel_ID, room_type) -> room_ID"
            },
            {
                "name": "BookRoom",
                "Description": "This API books a room for a user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "room_ID": {
                        "description": "the ID of the room",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookRoom(user_ID, room_ID) -> booking_status"
            }
        ],
        "Query": "Can you book a double room for John at a hotel in Paris?",
        "Label": "BookRoom(user_ID=GetUserID(name='John'), room_ID=GetRoomType(hotel_ID=FindHotel(city='Paris'), room_type='double'))",
        "Index": 1524
    },
    {
        "APIs": [
            {
                "name": "UserName2ID",
                "Description": "This API converts a user name to its ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(user_name) -> user_ID"
            },
            {
                "name": "MovieTitle2ID",
                "Description": "This API converts a movie title to its ID.",
                "input_params": {
                    "movie_title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "format": "MovieTitle2ID(movie_title) -> movie_ID"
            },
            {
                "name": "AddToWatchlist",
                "Description": "This API adds a movie to a user's watchlist.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "movie_ID": {
                        "description": "the ID of the movie",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "Watchlist status": {
                        "description": "the status of adding the movie to the watchlist",
                        "type": "String"
                    }
                },
                "format": "AddToWatchlist(user_ID, movie_ID) -> Watchlist status"
            },
            {
                "name": "EmailNotification",
                "Description": "This API sends a notification email to the user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    },
                    "message": {
                        "description": "the notification message",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Notification status": {
                        "description": "the status of sending the notification email",
                        "type": "String"
                    }
                },
                "format": "EmailNotification(user_ID, message) -> Notification status"
            }
        ],
        "Query": "Can you add 'The Godfather' to Nancy's watchlist and notify her?",
        "Label": "EmailNotification(user_ID=UserName2ID(user_name='Nancy'), message=AddToWatchlist(user_ID=UserName2ID(user_name='Nancy'), movie_ID=MovieTitle2ID(movie_title='The Godfather')))",
        "Index": 1525
    },
    {
        "APIs": [
            {
                "name": "GetWeather",
                "Description": "This API returns the weather status for a specific date and city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather_status": {
                        "description": "the weather status",
                        "type": "String"
                    }
                },
                "format": "GetWeather(city, date) -> weather_status"
            },
            {
                "name": "ReserveHotel",
                "Description": "This API allows the user to reserve a hotel in a certain city considering the weather status on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "Date"
                    },
                    "weather_status": {
                        "description": "the weather status",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reservation_status": {
                        "description": "the reservation status",
                        "type": "String"
                    }
                },
                "format": "ReserveHotel(city, date, weather_status) -> reservation_status"
            },
            {
                "name": "PlanTrip",
                "Description": "This API assists the user in planning a trip to a specific city on a given date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "trip_plan": {
                        "description": "the trip plan",
                        "type": "String"
                    }
                },
                "format": "PlanTrip(city, date) -> trip_plan"
            }
        ],
        "Query": "Can you help me to plan a trip to Paris on the 1st of January and also book a hotel considering the weather?",
        "Label": "PlanTrip(city='Paris', date='1st of January', ReserveHotel(city='Paris', date='1st of January', weather_status=GetWeather(city='Paris', date='1st of January')))",
        "Index": 1526
    },
    {
        "APIs": [
            {
                "name": "SearchFlight",
                "Description": "This API searches for available flights from one city to another on a specific date.",
                "input_params": {
                    "city_from": {
                        "description": "the city from which the flight departs",
                        "type": "String"
                    },
                    "city_to": {
                        "description": "the city to which the flight arrives",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_id": {
                        "description": "the ID of the available flight",
                        "type": "Integer"
                    }
                },
                "format": "SearchFlight(city_from, city_to, date) -> flight_id"
            },
            {
                "name": "BookFlight",
                "Description": "This API books a selected flight for a passenger and returns a reservation ID.",
                "input_params": {
                    "flight_id": {
                        "description": "the ID of the selected flight",
                        "type": "Integer"
                    },
                    "passenger_name": {
                        "description": "the name of the passenger",
                        "type": "String"
                    }
                },
                "output_params": {
                    "reservation_id": {
                        "description": "the ID of the reservation",
                        "type": "Integer"
                    }
                },
                "format": "BookFlight(flight_id, passenger_name) -> reservation_id"
            },
            {
                "name": "GetBoardingPass",
                "Description": "This API generates a boarding pass for a confirmed reservation and sends it to a specified email.",
                "input_params": {
                    "reservation_id": {
                        "description": "the ID of the confirmed reservation",
                        "type": "Integer"
                    },
                    "email": {
                        "description": "the email address to which the boarding pass will be sent",
                        "type": "String"
                    }
                },
                "output_params": {
                    "boarding_pass": {
                        "description": "the generated boarding pass",
                        "type": "String"
                    }
                },
                "format": "GetBoardingPass(reservation_id, email) -> boarding_pass"
            }
        ],
        "Query": "Can you book a flight for me from New York to London on 1st May and send the boarding pass to my email?",
        "Label": "GetBoardingPass(reservation_id=BookFlight(flight_id=SearchFlight(city_from='New York', city_to='London', date='1st May'), passenger_name='User Name'), email='user@email.com')",
        "Index": 1527
    },
    {
        "APIs": [
            {
                "name": "FlightSearch",
                "Description": "This API searches for a flight based on the departure location, arrival location, and date of travel.",
                "input_params": {
                    "departure": {
                        "description": "the departure location",
                        "type": "String"
                    },
                    "arrival": {
                        "description": "the arrival location",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of travel",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight": {
                        "description": "the flight details",
                        "type": "Object"
                    }
                },
                "format": "FlightSearch(departure, arrival, date) -> flight"
            },
            {
                "name": "HotelSearch",
                "Description": "This API searches for a hotel in a specific city between check-in and check-out dates.",
                "input_params": {
                    "city": {
                        "description": "the city to search for a hotel",
                        "type": "String"
                    },
                    "check_in": {
                        "description": "the check-in date",
                        "type": "Date"
                    },
                    "check_out": {
                        "description": "the check-out date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotel": {
                        "description": "the hotel details",
                        "type": "Object"
                    }
                },
                "format": "HotelSearch(city, check_in, check_out) -> hotel"
            },
            {
                "name": "RestaurantRecommend",
                "Description": "This API recommends a restaurant in a specific city, cuisine type, and date.",
                "input_params": {
                    "city": {
                        "description": "the city to recommend a restaurant",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the cuisine type",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the recommended restaurant details",
                        "type": "Object"
                    }
                },
                "format": "RestaurantRecommend(city, cuisine, date) -> restaurant"
            }
        ],
        "Query": "Can you book me a flight from Los Angeles to London on 1st Jan, find me a hotel from 1st Jan to 7th Jan, and recommend an Italian restaurant on 2nd Jan?",
        "Label": "RestaurantRecommend(city=HotelSearch(city=FlightSearch(departure='Los Angeles', arrival='London', date='1st Jan'), check_in='1st Jan', check_out='7th Jan'), cuisine='Italian', date='2nd Jan')",
        "Index": 1528
    },
    {
        "APIs": [
            {
                "name": "FindNearestRestaurant",
                "Description": "This API is to find the nearest restaurant of a given cuisine type based on the user's location.",
                "input_params": {
                    "city": {
                        "description": "the city where the user is located",
                        "type": "String"
                    },
                    "cuisine_type": {
                        "description": "the type of cuisine the user is looking for",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the nearest restaurant",
                        "type": "String"
                    }
                },
                "format": "FindNearestRestaurant(city, cuisine_type) -> restaurant_name"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu items of a specific restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu_items": {
                        "description": "the list of menu items of the restaurant",
                        "type": "List"
                    }
                },
                "format": "GetMenu(restaurant_name) -> menu_items"
            },
            {
                "name": "FindNutritionInfo",
                "Description": "This API is to find the nutritional information of a specific menu item.",
                "input_params": {
                    "menu_item": {
                        "description": "the name of the menu item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "nutrition_details": {
                        "description": "the nutritional information of the menu item",
                        "type": "String"
                    }
                },
                "format": "FindNutritionInfo(menu_item) -> nutrition_details"
            }
        ],
        "Query": "Can you help me find the nutritional information for a pizza from the nearest Italian restaurant in Chicago?",
        "Label": "FindNutritionInfo(menu_item=GetMenu(restaurant_name=FindNearestRestaurant(city='Chicago', cuisine_type='Italian'))['pizza'])",
        "Index": 1529
    },
    {
        "APIs": [
            {
                "name": "GetRestaurant",
                "Description": "This API is to find a restaurant based on user location and the preferred cuisine type.",
                "input_params": {
                    "city": {
                        "description": "the location of the user",
                        "type": "String"
                    },
                    "cuisine_type": {
                        "description": "the preferred cuisine type",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "format": "GetRestaurant(city, cuisine_type) -> restaurant_name"
            },
            {
                "name": "GetMenu",
                "Description": "This API is to get the menu items in a given restaurant.",
                "input_params": {
                    "restaurant_name": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu_items": {
                        "description": "the menu items in the restaurant",
                        "type": "List"
                    }
                },
                "format": "GetMenu(restaurant_name) -> menu_items"
            },
            {
                "name": "GetCalories",
                "Description": "This API is to get the calories of a specific menu item.",
                "input_params": {
                    "menu_item": {
                        "description": "the specific menu item",
                        "type": "String"
                    }
                },
                "output_params": {
                    "calories": {
                        "description": "the calories of the menu item",
                        "type": "Integer"
                    }
                },
                "format": "GetCalories(menu_item) -> calories"
            }
        ],
        "Query": "Can you help me find the calories for a sushi dish at the closest Japanese restaurant in New York?",
        "Label": "GetCalories(menu_item=GetMenu(restaurant_name=GetRestaurant(city='New York', cuisine_type='Japanese')), menu_item='sushi')",
        "Index": 1530
    },
    {
        "APIs": [
            {
                "name": "GetRestaurantDetails",
                "Description": "This API is to get the restaurant details of a specific location.",
                "input_params": {
                    "location": {
                        "description": "the location of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_info": {
                        "description": "the details of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "GetRestaurantDetails(location) -> restaurant_info"
            },
            {
                "name": "GetRestaurantReview",
                "Description": "This API is to get reviews of a specific restaurant.",
                "input_params": {
                    "restaurant_info": {
                        "description": "the details of the restaurant",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "restaurant_review": {
                        "description": "the reviews of the restaurant",
                        "type": "Object"
                    }
                },
                "format": "GetRestaurantReview(restaurant_info) -> restaurant_review"
            },
            {
                "name": "GetCuisineRecommendation",
                "Description": "This API is to get cuisine recommendation based on the restaurant review.",
                "input_params": {
                    "restaurant_review": {
                        "description": "the reviews of the restaurant",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "cuisine_recommendation": {
                        "description": "the cuisine recommendation",
                        "type": "Object"
                    }
                },
                "format": "GetCuisineRecommendation(restaurant_review) -> cuisine_recommendation"
            }
        ],
        "Query": "What is the best dish to try at the Italian restaurant in Rome?",
        "Label": "GetCuisineRecommendation(restaurant_review=GetRestaurantReview(restaurant_info=GetRestaurantDetails(location='Italian restaurant in Rome')))",
        "Index": 1531
    },
    {
        "APIs": [
            {
                "name": "RetrieveLocalTrafficInfo",
                "Description": "This API is to get real-time traffic information on the roads of a specific city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "traffic_info": {
                        "description": "the real-time traffic information",
                        "type": "String"
                    }
                },
                "format": "RetrieveLocalTrafficInfo(city) -> traffic_info"
            },
            {
                "name": "CalculateTravelTime",
                "Description": "This API is to calculate travel time from one place to another based on the current traffic conditions.",
                "input_params": {
                    "traffic_info": {
                        "description": "the real-time traffic information",
                        "type": "String"
                    },
                    "start_point": {
                        "description": "the starting point of the travel",
                        "type": "String"
                    },
                    "end_point": {
                        "description": "the destination of the travel",
                        "type": "String"
                    }
                },
                "output_params": {
                    "travel_time": {
                        "description": "the calculated travel time",
                        "type": "Time"
                    }
                },
                "format": "CalculateTravelTime(traffic_info, start_point, end_point) -> travel_time"
            },
            {
                "name": "FetchNextBus",
                "Description": "This API is to fetch the timing of the next bus on a specific route based on the estimated travel time.",
                "input_params": {
                    "travel_time": {
                        "description": "the calculated travel time",
                        "type": "Time"
                    },
                    "bus_route": {
                        "description": "the specific bus route",
                        "type": "String"
                    }
                },
                "output_params": {
                    "bus_info": {
                        "description": "the timing of the next bus on the specific route",
                        "type": "String"
                    }
                },
                "format": "FetchNextBus(travel_time, bus_route) -> bus_info"
            }
        ],
        "Query": "When is the next bus from Times Square to Wall Street considering current traffic conditions?",
        "Label": "FetchNextBus(travel_time=CalculateTravelTime(traffic_info=RetrieveLocalTrafficInfo(city='New York'), start_point='Times Square', end_point='Wall Street'), bus_route='M20')",
        "Index": 1532
    },
    {
        "APIs": [
            {
                "name": "SearchEvent",
                "Description": "This API searches for a specific type of event in a certain city.",
                "input_params": {
                    "city": {
                        "description": "the city where the event is searched",
                        "type": "String"
                    },
                    "type": {
                        "description": "the type of event to search",
                        "type": "String"
                    }
                },
                "output_params": {
                    "event": {
                        "description": "the specific event found",
                        "type": "String"
                    }
                },
                "format": "SearchEvent(city, type) -> event"
            },
            {
                "name": "FindTickets",
                "Description": "This API finds the required number of tickets for a specific event.",
                "input_params": {
                    "event": {
                        "description": "the specific event to find tickets for",
                        "type": "String"
                    },
                    "number": {
                        "description": "the number of tickets required",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "tickets": {
                        "description": "the required number of tickets",
                        "type": "String"
                    }
                },
                "format": "FindTickets(event, number) -> tickets"
            },
            {
                "name": "BookHotel",
                "Description": "This API books a hotel in a specific city for certain check-in and check-out dates.",
                "input_params": {
                    "city": {
                        "description": "the specific city to book a hotel in",
                        "type": "String"
                    },
                    "checkIn": {
                        "description": "the check-in date for the hotel booking",
                        "type": "Date"
                    },
                    "checkOut": {
                        "description": "the check-out date for the hotel booking",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hotel": {
                        "description": "the booked hotel",
                        "type": "String"
                    }
                },
                "format": "BookHotel(city, checkIn, checkOut) -> hotel"
            },
            {
                "name": "ArrangeTransportation",
                "Description": "This API arranges transportation to a specific city on a certain date.",
                "input_params": {
                    "city": {
                        "description": "the specific city to arrange transportation to",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of transportation",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "transportation": {
                        "description": "the arranged transportation",
                        "type": "String"
                    }
                },
                "format": "ArrangeTransportation(city, date) -> transportation"
            }
        ],
        "Query": "I want to attend a rock concert in New York on 15th June with my two friends. Can you find tickets, book a hotel and arrange transportation?",
        "Label": "ArrangeTransportation(city='New York', date='15th June') if (FindTickets(event=SearchEvent(city='New York', type='rock concert'), number=3) and BookHotel(city='New York', checkIn='14th June', checkOut='16th June'))",
        "Index": 1533
    },
    {
        "APIs": [
            {
                "name": "GetLocation",
                "Description": "This API retrieves the user's current location based on the given user id.",
                "input_params": {
                    "user_id": {
                        "description": "the id of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "location": {
                        "description": "the current location of the user",
                        "type": "String"
                    }
                },
                "format": "GetLocation(user_id) -> location"
            },
            {
                "name": "FindRestaurant",
                "Description": "This API finds the best-rated restaurant based on specified location and cuisine.",
                "input_params": {
                    "location": {
                        "description": "the location to search for restaurants",
                        "type": "String"
                    },
                    "cuisine": {
                        "description": "the type of cuisine to search for",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant": {
                        "description": "the best-rated restaurant matching the location and cuisine",
                        "type": "String"
                    }
                },
                "format": "FindRestaurant(location, cuisine) -> restaurant"
            },
            {
                "name": "GetMenu",
                "Description": "This API retrieves the restaurant's menu.",
                "input_params": {
                    "restaurant": {
                        "description": "the name of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "menu": {
                        "description": "the menu of the restaurant",
                        "type": "String"
                    }
                },
                "format": "GetMenu(restaurant) -> menu"
            }
        ],
        "Query": "I am in the mood for Italian food, what should I order?",
        "Label": "GetMenu(restaurant=FindRestaurant(location=GetLocation(user_id='current'), cuisine='Italian'))",
        "Index": 1534
    },
    {
        "APIs": [
            {
                "name": "GetEventCalendar",
                "Description": "This API retrieves the user's event calendar based on their user id.",
                "input_params": {
                    "user_id": {
                        "description": "the id of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "event": {
                        "description": "the user's event calendar",
                        "type": "List"
                    }
                },
                "format": "GetEventCalendar(user_id) -> event"
            },
            {
                "name": "FindTravelTime",
                "Description": "This API finds the estimated travel time between two locations.",
                "input_params": {
                    "start_location": {
                        "description": "the starting location",
                        "type": "String"
                    },
                    "end_location": {
                        "description": "the ending location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "travel_time": {
                        "description": "the estimated travel time",
                        "type": "Time"
                    }
                },
                "format": "FindTravelTime(start_location, end_location) -> travel_time"
            },
            {
                "name": "CheckTraffic",
                "Description": "This API checks the traffic situation based on the expected travel time.",
                "input_params": {
                    "travel_time": {
                        "description": "the expected travel time",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "traffic": {
                        "description": "the traffic situation",
                        "type": "String"
                    }
                },
                "format": "CheckTraffic(travel_time) -> traffic"
            }
        ],
        "Query": "How is the traffic for my next appointment?",
        "Label": "CheckTraffic(travel_time=FindTravelTime(start_location=GetLocation(user_id='current'), end_location=GetEventCalendar(user_id='current')))",
        "Index": 1535
    },
    {
        "APIs": [
            {
                "name": "GetAvailableFlights",
                "Description": "This API is to get available flights from an origin to a destination.",
                "input_params": {
                    "origin": {
                        "description": "the origin location",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flights": {
                        "description": "a list of available flights",
                        "type": "List"
                    }
                },
                "format": "GetAvailableFlights(origin, destination) -> flights"
            },
            {
                "name": "FindCheapestFlight",
                "Description": "This API is to find the cheapest flight from the list of available flights.",
                "input_params": {
                    "flights": {
                        "description": "a list of available flights",
                        "type": "List"
                    }
                },
                "output_params": {
                    "cheapestFlight": {
                        "description": "the cheapest flight from the list",
                        "type": "Flight"
                    }
                },
                "format": "FindCheapestFlight(flights) -> cheapestFlight"
            },
            {
                "name": "BookFlight",
                "Description": "This API is to book the cheapest flight using user data and provide a booking confirmation.",
                "input_params": {
                    "cheapestFlight": {
                        "description": "the cheapest flight to book",
                        "type": "Flight"
                    },
                    "userData": {
                        "description": "user data for booking",
                        "type": "Object"
                    }
                },
                "output_params": {
                    "bookingConfirmation": {
                        "description": "the booking confirmation",
                        "type": "String"
                    }
                },
                "format": "BookFlight(cheapestFlight, userData) -> bookingConfirmation"
            }
        ],
        "Query": "I want to fly from Dallas to New York. Can you find me the cheapest flight and book it for me?",
        "Label": "BookFlight(cheapestFlight=FindCheapestFlight(flights=GetAvailableFlights(origin='Dallas', destination='New York')),userData='John Doe')",
        "Index": 1536
    },
    {
        "APIs": [
            {
                "name": "GetTicketPrice",
                "Description": "This API is to get the ticket price of a specific movie at a specific cinema.",
                "input_params": {
                    "cinema": {
                        "description": "the name of the cinema",
                        "type": "String"
                    },
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "price": {
                        "description": "the ticket price",
                        "type": "Float"
                    }
                },
                "format": "GetTicketPrice(cinema, movie) -> price"
            },
            {
                "name": "FindNearestCinema",
                "Description": "This API is to find the nearest cinema in a specific city that is showing a specific movie.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "movie": {
                        "description": "the name of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "cinema": {
                        "description": "the name of the cinema",
                        "type": "String"
                    }
                },
                "format": "FindNearestCinema(city, movie) -> cinema"
            },
            {
                "name": "GetTravelTime",
                "Description": "This API is to get the estimated travel time from start location to the destination.",
                "input_params": {
                    "start": {
                        "description": "the starting location",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "travelTime": {
                        "description": "the estimated travel time",
                        "type": "Time"
                    }
                },
                "format": "GetTravelTime(start, destination) -> travelTime"
            },
            {
                "name": "CalculateTotalMovieOutingTime",
                "Description": "This API is to calculate the total time of the movie outing considering the travel time and the movie length.",
                "input_params": {
                    "travelTime": {
                        "description": "the estimated travel time",
                        "type": "Time"
                    },
                    "movieLength": {
                        "description": "the length of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "totalOutingTime": {
                        "description": "the total time of the movie outing",
                        "type": "Time"
                    }
                },
                "format": "CalculateTotalMovieOutingTime(travelTime, movieLength) -> totalOutingTime"
            }
        ],
        "Query": "I'm in New York City and want to watch the movie 'Inception'. How much will the ticket cost and how long will the entire outing take?",
        "Label": "CalculateTotalMovieOutingTime(travelTime=GetTravelTime(start='My location', destination=FindNearestCinema(city='New York City', movie='Inception')), movieLength='148 minutes') and GetTicketPrice(cinema=FindNearestCinema(city='New York City', movie='Inception'), movie='Inception')",
        "Index": 1537
    },
    {
        "APIs": [
            {
                "name": "GetRecipe",
                "Description": "This API is to get a recipe based on the ingredients you have.",
                "input_params": {
                    "ingredients": {
                        "description": "a list of ingredients",
                        "type": "List of Strings"
                    }
                },
                "output_params": {
                    "recipe": {
                        "description": "the suggested recipe",
                        "type": "String"
                    }
                },
                "format": "GetRecipe(ingredients) -> recipe"
            },
            {
                "name": "GetWeatherForecast",
                "Description": "This API is to get the weather forecast in a city.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "weather_forecast": {
                        "description": "the weather forecast for the city",
                        "type": "String"
                    }
                },
                "format": "GetWeatherForecast(city) -> weather_forecast"
            },
            {
                "name": "SuggestMealType",
                "Description": "This API is to suggest a meal type based on the weather forecast.",
                "input_params": {
                    "weather_forecast": {
                        "description": "the weather forecast",
                        "type": "String"
                    }
                },
                "output_params": {
                    "meal_type": {
                        "description": "the suggested meal type",
                        "type": "String"
                    }
                },
                "format": "SuggestMealType(weather_forecast) -> meal_type"
            }
        ],
        "Query": "What should I cook for dinner based on the ingredients I have and the weather forecast in London?",
        "Label": "GetRecipe(ingredients=SuggestMealType(weather_forecast=GetWeatherForecast(city='London')))",
        "Index": 1538
    },
    {
        "APIs": [
            {
                "name": "GetCountryCurrency",
                "Description": "This API provides the official currency of a specific country.",
                "input_params": {
                    "country": {
                        "description": "the name of the country",
                        "type": "String"
                    }
                },
                "output_params": {
                    "currency": {
                        "description": "the official currency of the country",
                        "type": "String"
                    }
                },
                "format": "GetCountryCurrency(country) -> currency"
            },
            {
                "name": "CurrencyConverter",
                "Description": "This API provides a conversion tool from one currency to another.",
                "input_params": {
                    "base_currency": {
                        "description": "the base currency to convert from",
                        "type": "String"
                    },
                    "target_currency": {
                        "description": "the target currency to convert to",
                        "type": "String"
                    },
                    "amount": {
                        "description": "the amount to convert",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "converted_amount": {
                        "description": "the converted amount in the target currency",
                        "type": "Float"
                    }
                },
                "format": "CurrencyConverter(base_currency, target_currency, amount) -> converted_amount"
            },
            {
                "name": "CountryBudgetPlanner",
                "Description": "This API helps to generate a budget plan for a country based on the provided budget in the country's currency.",
                "input_params": {
                    "country": {
                        "description": "the name of the country",
                        "type": "String"
                    },
                    "budget": {
                        "description": "the budget for the trip",
                        "type": "Float"
                    }
                },
                "output_params": {
                    "plan": {
                        "description": "the budget plan for the trip",
                        "type": "String"
                    }
                },
                "format": "CountryBudgetPlanner(country, budget) -> plan"
            }
        ],
        "Query": "Can you help me plan a budget for my trip to Japan if I have $5000?",
        "Label": "CountryBudgetPlanner(country='Japan', budget=CurrencyConverter(base_currency='USD', target_currency=GetCountryCurrency(country='Japan'), amount=5000))",
        "Index": 1539
    },
    {
        "APIs": [
            {
                "name": "WeatherForecast",
                "Description": "This API is used to predict the weather of a certain city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "weather": {
                        "description": "the predicted weather",
                        "type": "String"
                    }
                },
                "format": "WeatherForecast(city, date) -> weather"
            },
            {
                "name": "FlightBooking",
                "Description": "This API is used to book a flight from origin to destination at a specific date.",
                "input_params": {
                    "origin": {
                        "description": "the origin city",
                        "type": "String"
                    },
                    "destination": {
                        "description": "the destination city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "flight_number": {
                        "description": "the booked flight number",
                        "type": "String"
                    }
                },
                "format": "FlightBooking(origin, destination, date) -> flight_number"
            },
            {
                "name": "HotelBooking",
                "Description": "This API is used to book a hotel in a specified city at a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "Hotel": {
                        "description": "the booked hotel",
                        "type": "String"
                    }
                },
                "format": "HotelBooking(city, date) -> Hotel"
            }
        ],
        "Query": "Can you check the weather in San Francisco on the day of my flight from Los Angeles to San Francisco, and then book a hotel in San Francisco?",
        "Label": "HotelBooking(city='San Francisco', date=FlightBooking(origin='Los Angeles', destination='San Francisco', date=WeatherForecast(city='San Francisco', date='today')))",
        "Index": 1540
    },
    {
        "APIs": [
            {
                "name": "BookAvailability",
                "Description": "This API is used to check the availability of a book in the library.",
                "input_params": {
                    "title": {
                        "description": "the title of the book",
                        "type": "String"
                    }
                },
                "output_params": {
                    "availability": {
                        "description": "the availability status of the book",
                        "type": "String"
                    }
                },
                "format": "BookAvailability(title) -> availability"
            },
            {
                "name": "LibraryHours",
                "Description": "This API is used to check the opening hours of a library in a certain city on a specific date.",
                "input_params": {
                    "city": {
                        "description": "the name of the city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "hours": {
                        "description": "the opening hours of the library",
                        "type": "String"
                    }
                },
                "format": "LibraryHours(city, date) -> hours"
            },
            {
                "name": "BusSchedule",
                "Description": "This API is used to find the bus schedule from a start point to an end point on a specific date and time.",
                "input_params": {
                    "start_point": {
                        "description": "the starting point of the bus journey",
                        "type": "String"
                    },
                    "end_point": {
                        "description": "the destination of the bus journey",
                        "type": "String"
                    },
                    "date": {
                        "description": "the specific date",
                        "type": "Date"
                    },
                    "time": {
                        "description": "the specific time",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "bus": {
                        "description": "the bus schedule from start point to end point",
                        "type": "String"
                    }
                },
                "format": "BusSchedule(start_point, end_point, date, time) -> bus"
            }
        ],
        "Query": "Can you check if Harry Potter is available in the New York library today, and if it is, can you tell me when the next bus to the library is?",
        "Label": "BusSchedule(start_point='my location', end_point='New York library', date='today', time=LibraryHours(city='New York', date='today', time=BookAvailability(title='Harry Potter')))",
        "Index": 1541
    },
    {
        "APIs": [
            {
                "name": "FetchFlightID",
                "Description": "This API retrieves the flight ID using the flight name.",
                "input_params": {
                    "flight_name": {
                        "description": "the name of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    }
                },
                "format": "FetchFlightID(flight_name) -> flight_ID"
            },
            {
                "name": "FindFlight",
                "Description": "This API finds a flight based on departure city, arrival city and date.",
                "input_params": {
                    "cityDeparture": {
                        "description": "the departure city",
                        "type": "String"
                    },
                    "cityArrival": {
                        "description": "the arrival city",
                        "type": "String"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight_name": {
                        "description": "the name of the flight",
                        "type": "String"
                    }
                },
                "format": "FindFlight(cityDeparture, cityArrival, date) -> flight_name"
            },
            {
                "name": "FetchCity",
                "Description": "This API will return the city of the user based on user ID.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "city": {
                        "description": "the city of the user",
                        "type": "String"
                    }
                },
                "format": "FetchCity(user_ID) -> city"
            },
            {
                "name": "BookFlight",
                "Description": "This API books a flight for a certain date.",
                "input_params": {
                    "flight_ID": {
                        "description": "the ID of the flight",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the flight",
                        "type": "String"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookFlight(flight_ID, date) -> booking_status"
            },
            {
                "name": "GetUserID",
                "Description": "This API retrieves the user ID by using the user name.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            }
        ],
        "Query": "Can you book a flight from my city to New York on May 15th?",
        "Label": "BookFlight(flight_ID=FetchFlightID(flight_name=FindFlight(cityDeparture=FetchCity(user_ID=GetUserID(userName='John')), cityArrival='New York', date='May 15th')), date='May 15th')",
        "Index": 1542
    },
    {
        "APIs": [
            {
                "name": "Plate2VehicleID",
                "Description": "This API is to convert a vehicle's plate number to vehicle ID.",
                "input_params": {
                    "plate_number": {
                        "description": "the plate number of the vehicle",
                        "type": "String"
                    }
                },
                "output_params": {
                    "vehicle_ID": {
                        "description": "the ID of the vehicle",
                        "type": "Integer"
                    }
                },
                "format": "Plate2VehicleID(plate_number) -> vehicle_ID"
            },
            {
                "name": "CurrentLocation",
                "Description": "This API gives the current location of a vehicle based on vehicle ID.",
                "input_params": {
                    "vehicle_ID": {
                        "description": "the ID of the vehicle",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "location_info": {
                        "description": "the current location information of the vehicle",
                        "type": "String"
                    }
                },
                "format": "CurrentLocation(vehicle_ID) -> location_info"
            },
            {
                "name": "DistanceCalculator",
                "Description": "This API calculates the distance between two locations.",
                "input_params": {
                    "from_location": {
                        "description": "the starting location",
                        "type": "String"
                    },
                    "to_location": {
                        "description": "the destination location",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance_info": {
                        "description": "the distance between the two locations",
                        "type": "Float"
                    }
                },
                "format": "DistanceCalculator(from_location, to_location) -> distance_info"
            },
            {
                "name": "NotifyOwner",
                "Description": "This API is to send a notification to the vehicle's owner.",
                "input_params": {
                    "vehicle_ID": {
                        "description": "the ID of the vehicle",
                        "type": "Integer"
                    },
                    "message": {
                        "description": "the notification message",
                        "type": "String"
                    }
                },
                "output_params": {
                    "Notification status": {
                        "description": "the status of the notification",
                        "type": "String"
                    }
                },
                "format": "NotifyOwner(vehicle_ID, message) -> Notification status"
            }
        ],
        "Query": "Please calculate the distance from current location of the vehicle with plate number '123ABC' to 'Main Street' and notify the owner.",
        "Label": "NotifyOwner(vehicle_ID=Plate2VehicleID(plate_number='123ABC'), message=DistanceCalculator(from_location=CurrentLocation(vehicle_ID=Plate2VehicleID(plate_number='123ABC')), to_location='Main Street'))",
        "Index": 1543
    },
    {
        "APIs": [
            {
                "name": "CalculateDistances",
                "Description": "This API is to calculate the distance between two cities.",
                "input_params": {
                    "city_from": {
                        "description": "the name of the starting city",
                        "type": "String"
                    },
                    "city_to": {
                        "description": "the name of the destination city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "distance between cities": {
                        "description": "the distance between the two cities",
                        "type": "Float"
                    }
                },
                "format": "CalculateDistances(city_from, city_to) -> distance between cities"
            },
            {
                "name": "GetFlightDuration",
                "Description": "This API is to get the flight duration between two cities.",
                "input_params": {
                    "city_from": {
                        "description": "the name of the starting city",
                        "type": "String"
                    },
                    "city_to": {
                        "description": "the name of the destination city",
                        "type": "String"
                    }
                },
                "output_params": {
                    "flight duration": {
                        "description": "the duration of the flight between the two cities",
                        "type": "Time"
                    }
                },
                "format": "GetFlightDuration(city_from, city_to) -> flight duration"
            },
            {
                "name": "GetCurrencyExchangeRate",
                "Description": "This API is to get the exchange rate between two currencies.",
                "input_params": {
                    "currency_from": {
                        "description": "the currency to convert from",
                        "type": "String"
                    },
                    "currency_to": {
                        "description": "the currency to convert to",
                        "type": "String"
                    }
                },
                "output_params": {
                    "exchange rate": {
                        "description": "the exchange rate between the two currencies",
                        "type": "Float"
                    }
                },
                "format": "GetCurrencyExchangeRate(currency_from, currency_to) -> exchange rate"
            }
        ],
        "Query": "What's the distance, flight duration from Tokyo to the city where the Colosseum is located and the exchange rate from JPY to the currency of that city?",
        "Label": "CalculateDistances(city_from='Tokyo', city_to=GetCity(landmark='Colosseum')), GetFlightDuration(city_from='Tokyo', city_to=GetCity(landmark='Colosseum')), GetCurrencyExchangeRate(currency_from='JPY', currency_to=GetCountryCurrency(country=GetCountry(city=GetCity(landmark='Colosseum'))))",
        "Index": 1544
    },
    {
        "APIs": [
            {
                "name": "FindRestaurantByCuisine",
                "Description": "This API is used to retrieve a restaurant ID by using the restaurant's cuisine.",
                "input_params": {
                    "cuisine": {
                        "description": "the cuisine of the restaurant",
                        "type": "String"
                    }
                },
                "output_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    }
                },
                "format": "FindRestaurantByCuisine(cuisine) -> restaurant_ID"
            },
            {
                "name": "GetUserFavoriteCuisine",
                "Description": "This API will return the user's favorite cuisine based on user ID.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "user_cuisine": {
                        "description": "the favorite cuisine of the user",
                        "type": "String"
                    }
                },
                "format": "GetUserFavoriteCuisine(user_ID) -> user_cuisine"
            },
            {
                "name": "BookRestaurantTable",
                "Description": "This API books a table at a restaurant for a certain date.",
                "input_params": {
                    "restaurant_ID": {
                        "description": "the ID of the restaurant",
                        "type": "Integer"
                    },
                    "date": {
                        "description": "the date of the booking",
                        "type": "Date"
                    }
                },
                "output_params": {
                    "booking_status": {
                        "description": "the status of the booking",
                        "type": "String"
                    }
                },
                "format": "BookRestaurantTable(restaurant_ID, date) -> booking_status"
            },
            {
                "name": "GetUserID",
                "Description": "This API retrieves the user ID by using the user name.",
                "input_params": {
                    "userName": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "GetUserID(userName) -> user_ID"
            }
        ],
        "Query": "Hello, I am Emma. Can you reserve a spot for my favorite food this Friday?",
        "Label": "BookRestaurantTable(restaurant_ID=FindRestaurantByCuisine(cuisine=GetUserFavoriteCuisine(user_ID=GetUserID(userName='Emma'))), date='this Friday')",
        "Index": 1545
    },
    {
        "APIs": [
            {
                "name": "Username2ID",
                "Description": "This API is to convert username to user ID.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "Username2ID(username) -> user_id"
            },
            {
                "name": "FetchUserPlaylist",
                "Description": "This API allows the user to fetch a playlist of a certain user.",
                "input_params": {
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "playlist": {
                        "description": "the playlist of the user",
                        "type": "List"
                    }
                },
                "format": "FetchUserPlaylist(user_id) -> playlist"
            },
            {
                "name": "RecommendSong",
                "Description": "This API recommends a song based on the playlist.",
                "input_params": {
                    "playlist": {
                        "description": "the playlist of the user",
                        "type": "List"
                    }
                },
                "output_params": {
                    "song_title": {
                        "description": "the title of the recommended song",
                        "type": "String"
                    }
                },
                "format": "RecommendSong(playlist) -> song_title"
            },
            {
                "name": "PlaySong",
                "Description": "This API plays the recommended song and returns the song status.",
                "input_params": {
                    "song_title": {
                        "description": "the title of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song_status": {
                        "description": "the status of the song",
                        "type": "String"
                    }
                },
                "format": "PlaySong(song_title) -> song_status"
            }
        ],
        "Query": "I'm logged in as 'lisa', can you play a track you'd recommend based on my music list?",
        "Label": "PlaySong(song_title=RecommendSong(playlist=FetchUserPlaylist(user_id=Username2ID(username='lisa'))))",
        "Index": 1546
    },
    {
        "APIs": [
            {
                "name": "Username2ID",
                "Description": "This API is to convert username to user ID.",
                "input_params": {
                    "username": {
                        "description": "the username of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "Username2ID(username) -> user_id"
            },
            {
                "name": "FetchUserPlaylist",
                "Description": "This API allows the user to fetch a playlist of a certain user.",
                "input_params": {
                    "user_id": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "playlist": {
                        "description": "the playlist of the user",
                        "type": "List"
                    }
                },
                "format": "FetchUserPlaylist(user_id) -> playlist"
            },
            {
                "name": "RecommendSong",
                "Description": "This API recommends a song based on the playlist.",
                "input_params": {
                    "playlist": {
                        "description": "the playlist of the user",
                        "type": "List"
                    }
                },
                "output_params": {
                    "song_title": {
                        "description": "the title of the recommended song",
                        "type": "String"
                    }
                },
                "format": "RecommendSong(playlist) -> song_title"
            },
            {
                "name": "PlaySong",
                "Description": "This API plays the recommended song and returns the song status.",
                "input_params": {
                    "song_title": {
                        "description": "the title of the song",
                        "type": "String"
                    }
                },
                "output_params": {
                    "song_status": {
                        "description": "the status of the song",
                        "type": "String"
                    }
                },
                "format": "PlaySong(song_title) -> song_status"
            }
        ],
        "Query": "I'm signed in as 'mia', can you play a song that you suggest based on my song list?",
        "Label": "PlaySong(song_title=RecommendSong(playlist=FetchUserPlaylist(user_id=Username2ID(username='mia'))))",
        "Index": 1547
    },
    {
        "APIs": [
            {
                "name": "BookMovie",
                "Description": "This API finds the timing and location of the movie showings for a certain title.",
                "input_params": {
                    "title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_showing": {
                        "description": "the timing and location of the movie showings",
                        "type": "String"
                    }
                },
                "format": "BookMovie(title) -> movie_showing"
            },
            {
                "name": "GetWeather",
                "Description": "This API provides the weather condition at a certain location and time.",
                "input_params": {
                    "location": {
                        "description": "the location for weather condition",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time for weather condition",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "weather_condition": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "format": "GetWeather(location, time) -> weather_condition"
            },
            {
                "name": "GetUserPreferences",
                "Description": "This API returns the preferred movie genre of a certain user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "movie_genre": {
                        "description": "the preferred movie genre",
                        "type": "String"
                    }
                },
                "format": "GetUserPreferences(user_ID) -> movie_genre"
            },
            {
                "name": "UserName2ID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(user_name) -> user_ID"
            }
        ],
        "Query": "Can you give the weather conditions for the location and time of the next showing of the preferred movie genre for the user named Sarah?",
        "Label": "GetWeather(location=BookMovie(title=GetUserPreferences(user_ID=UserName2ID(user_name='Sarah'))).location, time=BookMovie(title=GetUserPreferences(user_ID=UserName2ID(user_name='Sarah'))).time)",
        "Index": 1548
    },
    {
        "APIs": [
            {
                "name": "BookMovie",
                "Description": "This API finds the timing and location of the movie showings for a certain title.",
                "input_params": {
                    "title": {
                        "description": "the title of the movie",
                        "type": "String"
                    }
                },
                "output_params": {
                    "movie_showing": {
                        "description": "the timing and location of the movie showings",
                        "type": "String"
                    }
                },
                "format": "BookMovie(title) -> movie_showing"
            },
            {
                "name": "GetWeather",
                "Description": "This API provides the weather condition at a certain location and time.",
                "input_params": {
                    "location": {
                        "description": "the location for weather condition",
                        "type": "String"
                    },
                    "time": {
                        "description": "the time for weather condition",
                        "type": "Time"
                    }
                },
                "output_params": {
                    "weather_condition": {
                        "description": "the weather condition",
                        "type": "String"
                    }
                },
                "format": "GetWeather(location, time) -> weather_condition"
            },
            {
                "name": "GetUserPreferences",
                "Description": "This API returns the preferred movie genre of a certain user.",
                "input_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "output_params": {
                    "movie_genre": {
                        "description": "the preferred movie genre",
                        "type": "String"
                    }
                },
                "format": "GetUserPreferences(user_ID) -> movie_genre"
            },
            {
                "name": "UserName2ID",
                "Description": "This API is to convert user name to user ID.",
                "input_params": {
                    "user_name": {
                        "description": "the name of the user",
                        "type": "String"
                    }
                },
                "output_params": {
                    "user_ID": {
                        "description": "the ID of the user",
                        "type": "Integer"
                    }
                },
                "format": "UserName2ID(user_name) -> user_ID"
            }
        ],
        "Query": "Can you give the weather conditions for the location and time of the next showing of the preferred movie genre for the user named Sarah?",
        "Label": "GetWeather(location=BookMovie(title=GetUserPreferences(user_ID=UserName2ID(user_name='Sarah'))).location, time=BookMovie(title=GetUserPreferences(user_ID=UserName2ID(user_name='Sarah'))).time)",
        "Index": 1549
    }
]